{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siv3D: C++ Library for Creative Coding \u00b6 # include <Siv3D.hpp> void Main () { // Set background color to sky blue Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // Create a new font const Font font ( 60 ); // Create a new texture that contains a cat emoji const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // Coordinates of the cat Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // Put a message in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // Display the texture with animated size cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // Draw a translucent red circle that follows the mouse cursor Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // When [A] key is down if ( KeyA . down ()) { // Print `Hello!` Print << U \"Hello!\" ; } // When [Move the cat] button is pushed if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // Move the cat's coordinates to a random position in the screen catPos = RandomVec2 ( Scene :: Rect ()); } } } Getting started \u00b6 Requirements \u00b6 Windows \u00b6 Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Install Desktop development with C++ from the Visual Studio Installer macOS \u00b6 macOS High Sierra v10.13 or newer Xcode 10.1 or newer Installing OpenSiv3D SDK \u00b6 Windows \u00b6 Download OpenSiv3D Installer for Windows Desktop and run the installer. Note Use the Control Panel to uninstall OpenSiv3D SDK. macOS \u00b6 Download OpenSiv3D Project Templates for macOS and extract its contents. Building an OpenSiv3D Application \u00b6 Windows \u00b6 Lanuch Visual Studio 2019 and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project. Click OK to create the project. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging . macOS \u00b6 Open the project file (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) in Xcode. Click Run button \u25b6\ufe0f to build and run the application.","title":"Getting started with Siv3D"},{"location":"#siv3d-c-library-for-creative-coding","text":"# include <Siv3D.hpp> void Main () { // Set background color to sky blue Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // Create a new font const Font font ( 60 ); // Create a new texture that contains a cat emoji const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // Coordinates of the cat Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // Put a message in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // Display the texture with animated size cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // Draw a translucent red circle that follows the mouse cursor Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // When [A] key is down if ( KeyA . down ()) { // Print `Hello!` Print << U \"Hello!\" ; } // When [Move the cat] button is pushed if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // Move the cat's coordinates to a random position in the screen catPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Siv3D: C++ Library for Creative Coding"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#windows","text":"Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Install Desktop development with C++ from the Visual Studio Installer","title":"Windows"},{"location":"#macos","text":"macOS High Sierra v10.13 or newer Xcode 10.1 or newer","title":"macOS"},{"location":"#installing-opensiv3d-sdk","text":"","title":"Installing OpenSiv3D SDK"},{"location":"#windows_1","text":"Download OpenSiv3D Installer for Windows Desktop and run the installer. Note Use the Control Panel to uninstall OpenSiv3D SDK.","title":"Windows"},{"location":"#macos_1","text":"Download OpenSiv3D Project Templates for macOS and extract its contents.","title":"macOS"},{"location":"#building-an-opensiv3d-application","text":"","title":"Building an OpenSiv3D Application"},{"location":"#windows_2","text":"Lanuch Visual Studio 2019 and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project. Click OK to create the project. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging .","title":"Windows"},{"location":"#macos_2","text":"Open the project file (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) in Xcode. Click Run button \u25b6\ufe0f to build and run the application.","title":"macOS"},{"location":"community/community/","text":"Community \u00b6 Slack \u00b6 Join Siv3D Slack (invitation link) \u3000 Twitter \u00b6 Siv3D on Twitter @Siv3D @Reputeless BBS \u00b6 Siv3D BBS","title":"Community"},{"location":"community/community/#community","text":"","title":"Community"},{"location":"community/community/#slack","text":"Join Siv3D Slack (invitation link)","title":"Slack"},{"location":"community/community/#twitter","text":"Siv3D on Twitter @Siv3D @Reputeless","title":"Twitter"},{"location":"community/community/#bbs","text":"Siv3D BBS","title":"BBS"},{"location":"ja-jp/","text":"Siv3D: \u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u3092\u6c34\u8272\u306b\u3059\u308b Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u7528\u610f const Font font ( 60 ); // \u732b\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u732b\u306e\u5ea7\u6a19 Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u5927\u304d\u3055\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u732b\u3092\u8868\u793a\u3059\u308b cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 if ( KeyA . down ()) { // Hello \u3068\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3059\u308b Print << U \"Hello!\" ; } // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // \u732b\u306e\u5ea7\u6a19\u3092\u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b catPos = RandomVec2 ( Scene :: Rect ()); } } } Siv3D \u3092\u306f\u3058\u3081\u3088\u3046 \u00b6 \u5fc5\u8981\u306a\u74b0\u5883 \u00b6 Windows \u00b6 Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Visual Studio Installer \u3067 C++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044 macOS \u00b6 macOS High Sierra v10.13 \u4ee5\u964d Xcode 10.1 \u4ee5\u964d OpenSiv3D SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 Windows \u00b6 OpenSiv3D Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 Note OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 macOS \u00b6 OpenSiv3D Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059\u3002 OpenSiv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9 \u00b6 Windows \u00b6 Visual Studio 2019 \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3001 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u9032\u307f\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e00\u89a7\u306e\u4e2d\u304b\u3089 OpenSiv3D(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3) \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5165\u529b\u3057\u305f\u8a2d\u5b9a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 macOS \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) \u3092 Xcode \u3067\u958b\u304d\u307e\u3059\u3002 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#siv3d-c","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u3092\u6c34\u8272\u306b\u3059\u308b Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u7528\u610f const Font font ( 60 ); // \u732b\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u732b\u306e\u5ea7\u6a19 Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u5927\u304d\u3055\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u732b\u3092\u8868\u793a\u3059\u308b cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 if ( KeyA . down ()) { // Hello \u3068\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3059\u308b Print << U \"Hello!\" ; } // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // \u732b\u306e\u5ea7\u6a19\u3092\u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b catPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Siv3D: \u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"ja-jp/#siv3d","text":"","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#_1","text":"","title":"\u5fc5\u8981\u306a\u74b0\u5883"},{"location":"ja-jp/#windows","text":"Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Visual Studio Installer \u3067 C++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044","title":"Windows"},{"location":"ja-jp/#macos","text":"macOS High Sierra v10.13 \u4ee5\u964d Xcode 10.1 \u4ee5\u964d","title":"macOS"},{"location":"ja-jp/#opensiv3d-sdk","text":"","title":"OpenSiv3D SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ja-jp/#windows_1","text":"OpenSiv3D Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 Note OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"Windows"},{"location":"ja-jp/#macos_1","text":"OpenSiv3D Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059\u3002","title":"macOS"},{"location":"ja-jp/#opensiv3d","text":"","title":"OpenSiv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9"},{"location":"ja-jp/#windows_2","text":"Visual Studio 2019 \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3001 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u9032\u307f\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e00\u89a7\u306e\u4e2d\u304b\u3089 OpenSiv3D(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3) \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5165\u529b\u3057\u305f\u8a2d\u5b9a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"Windows"},{"location":"ja-jp/#macos_2","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) \u3092 Xcode \u3067\u958b\u304d\u307e\u3059\u3002 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"macOS"},{"location":"ja-jp/community/community/","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u00b6 Siv3D \u30e6\u30fc\u30b6 Slack \u00b6 Siv3D Slack \u306b\u53c2\u52a0\u3059\u308b \u3000 Twitter \u00b6 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 @Siv3D @Reputeless BBS \u00b6 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#_1","text":"","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#siv3d-slack","text":"Siv3D Slack \u306b\u53c2\u52a0\u3059\u308b","title":"Siv3D \u30e6\u30fc\u30b6 Slack"},{"location":"ja-jp/community/community/#twitter","text":"Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 @Siv3D @Reputeless","title":"Twitter"},{"location":"ja-jp/community/community/#bbs","text":"Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"BBS"},{"location":"ja-jp/reference/fullscreen/","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3 \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b \u00b6 Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"ja-jp/reference/fullscreen/#_1","text":"","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"ja-jp/reference/fullscreen/#_2","text":"Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b"},{"location":"ja-jp/sample/app/","text":"\u30a2\u30d7\u30ea \u00b6 \u30b9\u30b1\u30c3\u30c1 \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } \u30d4\u30a2\u30ce \u00b6 # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"\u30a2\u30d7\u30ea"},{"location":"ja-jp/sample/app/#_1","text":"","title":"\u30a2\u30d7\u30ea"},{"location":"ja-jp/sample/app/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"\u30b9\u30b1\u30c3\u30c1"},{"location":"ja-jp/sample/app/#_3","text":"# include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"\u30d4\u30a2\u30ce"},{"location":"ja-jp/sample/game/","text":"\u30b2\u30fc\u30e0 \u00b6 \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } } \u30d4\u30f3\u30dc\u30fc\u30eb \u00b6 # include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } } \u7d75\u6587\u5b57\u30bf\u30ef\u30fc \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#_1","text":"","title":"\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } }","title":"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057"},{"location":"ja-jp/sample/game/#_3","text":"# include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } }","title":"\u30d4\u30f3\u30dc\u30fc\u30eb"},{"location":"ja-jp/sample/game/#_4","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"\u7d75\u6587\u5b57\u30bf\u30ef\u30fc"},{"location":"ja-jp/store/store/","text":"\u30b7\u30e7\u30c3\u30d7 \u00b6 LINE \u30b9\u30bf\u30f3\u30d7 \u00b6 Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"Siv3D \u30b9\u30c8\u30a2"},{"location":"ja-jp/store/store/#_1","text":"","title":"\u30b7\u30e7\u30c3\u30d7"},{"location":"ja-jp/store/store/#line","text":"Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"LINE \u30b9\u30bf\u30f3\u30d7"},{"location":"ja-jp/tutorial/basic/","text":"1. Siv3D \u306e\u57fa\u672c \u00b6 1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0 \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 \u00b6 \u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002 1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002 1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 1.5 Hello, Siv3D! \u00b6 \u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 1.6 \u3082\u3063\u3068 Print \u00b6 Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } } 1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059 \u00b6 Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002 1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/basic/#1-siv3d","text":"","title":"1. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/basic/#11","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0"},{"location":"ja-jp/tutorial/basic/#12","text":"\u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002","title":"1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8"},{"location":"ja-jp/tutorial/basic/#13","text":"\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002","title":"1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/tutorial/basic/#14","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002","title":"1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/basic/#15-hello-siv3d","text":"\u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"1.5 Hello, Siv3D!"},{"location":"ja-jp/tutorial/basic/#16-print","text":"Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } }","title":"1.6 \u3082\u3063\u3068 Print"},{"location":"ja-jp/tutorial/basic/#17-print","text":"Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059"},{"location":"ja-jp/tutorial/basic/#18","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb"},{"location":"ja-jp/tutorial/shape/","text":"2. \u56f3\u5f62\u3092\u63cf\u304f \u00b6 2.1 \u5186\u3092\u63cf\u304f \u00b6 \u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } } 2.2 \u8272\u3092\u4ed8\u3051\u308b \u00b6 \u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } } 2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b \u00b6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } } 2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3001 draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002 2.5 \u67a0\u3092\u63cf\u304f \u00b6 \u56f3\u5f62\u306f\u3001 draw () \u306e\u4ee3\u308f\u308a\u306b drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002","title":"2. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#2","text":"","title":"2. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#21","text":"\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"2.1 \u5186\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#22","text":"\u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } }","title":"2.2 \u8272\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/tutorial/shape/#23","text":"\u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } }","title":"2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/shape/#24","text":"\u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3001 draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#25","text":"\u56f3\u5f62\u306f\u3001 draw () \u306e\u4ee3\u308f\u308a\u306b drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002","title":"2.5 \u67a0\u3092\u63cf\u304f"},{"location":"reference/fullscreen/","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3 \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b \u00b6 Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // SetFullscreen \u306e\u89e3\u50cf\u5ea6\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3082\u5909\u66f4\u3059\u308b\u3088\u3046\u306b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"Fullscreen"},{"location":"reference/fullscreen/#_1","text":"","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"reference/fullscreen/#_2","text":"Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // SetFullscreen \u306e\u89e3\u50cf\u5ea6\u306b\u5fdc\u3058\u3066\u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3082\u5909\u66f4\u3059\u308b\u3088\u3046\u306b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b"},{"location":"sample/app/","text":"Application \u00b6 Sketch \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } Piano \u00b6 # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"Application"},{"location":"sample/app/#application","text":"","title":"Application"},{"location":"sample/app/#sketch","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch"},{"location":"sample/app/#piano","text":"# include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"Piano"},{"location":"sample/game/","text":"Game \u00b6 Breakout \u00b6 # include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } } Pinball \u00b6 # include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } } Emoji Tower \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"Game"},{"location":"sample/game/#game","text":"","title":"Game"},{"location":"sample/game/#breakout","text":"# include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } }","title":"Breakout"},{"location":"sample/game/#pinball","text":"# include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } }","title":"Pinball"},{"location":"sample/game/#emoji-tower","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"Emoji Tower"},{"location":"store/store/","text":"Siv3D Store \u00b6 LINE sticker \u00b6 Siv3D-kun LINE stickers","title":"Siv3D Store"},{"location":"store/store/#siv3d-store","text":"","title":"Siv3D Store"},{"location":"store/store/#line-sticker","text":"Siv3D-kun LINE stickers","title":"LINE sticker"},{"location":"tutorial/basic/","text":"1. First steps \u00b6","title":"1. First steps"},{"location":"tutorial/basic/#1-first-steps","text":"","title":"1. First steps"},{"location":"tutorial/shape/","text":"2. Drawing shapes \u00b6","title":"2. Drawing shapes"},{"location":"tutorial/shape/#2-drawing-shapes","text":"","title":"2. Drawing shapes"}]}