{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siv3D: C++ Library for Creative Coding \u00b6 # include <Siv3D.hpp> void Main () { // Set background color to sky blue Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // Create a new font const Font font ( 60 ); // Create a new texture that contains a cat emoji const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // Coordinates of the cat Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // Put a message in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // Display the texture with animated size cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // Draw a translucent red circle that follows the mouse cursor Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // When [A] key is down if ( KeyA . down ()) { // Print `Hello!` Print << U \"Hello!\" ; } // When [Move the cat] button is pushed if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // Move the cat's coordinates to a random position in the screen catPos = RandomVec2 ( Scene :: Rect ()); } } } Getting started \u00b6 Requirements \u00b6 Windows \u00b6 Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.3 Install Desktop development with C++ from the Visual Studio Installer macOS \u00b6 macOS High Sierra v10.13 or newer Xcode 10.1 or newer Linux \u00b6 Linux users must build OpenSiv3D from source. See Linux/README for further information. Installing OpenSiv3D SDK v0.4.2 \u00b6 Windows \u00b6 Download OpenSiv3D Installer for Windows Desktop and run the installer. Note Use the Control Panel to uninstall OpenSiv3D SDK. macOS \u00b6 Download OpenSiv3D Project Templates for macOS and extract its contents. (for macOS Catalina users) Move the SDK folder into User / Applications folder to prevent a file access permissions dialog from being displayed when a Xcode project is executed. Some folders such as User / Desktop and User / Downloads require extra access permission. Building an OpenSiv3D Application \u00b6 Windows \u00b6 Lanuch Visual Studio 2019 and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project. Click OK to create the project. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging . macOS \u00b6 Open the project file (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) in Xcode. Click Run button \u25b6\ufe0f to build and run the application. (for macOS Catalina users) A file access permissions dialog can be inactivated by placing the project folder under User / Applications folder. \ud83d\udc97 Sponsors \u00b6 sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara (anonymous \ud83d\ude00)","title":"Getting started with Siv3D"},{"location":"#siv3d-c-library-for-creative-coding","text":"# include <Siv3D.hpp> void Main () { // Set background color to sky blue Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // Create a new font const Font font ( 60 ); // Create a new texture that contains a cat emoji const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // Coordinates of the cat Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // Put a message in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // Display the texture with animated size cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // Draw a translucent red circle that follows the mouse cursor Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // When [A] key is down if ( KeyA . down ()) { // Print `Hello!` Print << U \"Hello!\" ; } // When [Move the cat] button is pushed if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // Move the cat's coordinates to a random position in the screen catPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Siv3D: C++ Library for Creative Coding"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#windows","text":"Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.3 Install Desktop development with C++ from the Visual Studio Installer","title":"Windows"},{"location":"#macos","text":"macOS High Sierra v10.13 or newer Xcode 10.1 or newer","title":"macOS"},{"location":"#linux","text":"Linux users must build OpenSiv3D from source. See Linux/README for further information.","title":"Linux"},{"location":"#installing-opensiv3d-sdk-v042","text":"","title":"Installing OpenSiv3D SDK v0.4.2"},{"location":"#windows_1","text":"Download OpenSiv3D Installer for Windows Desktop and run the installer. Note Use the Control Panel to uninstall OpenSiv3D SDK.","title":"Windows"},{"location":"#macos_1","text":"Download OpenSiv3D Project Templates for macOS and extract its contents. (for macOS Catalina users) Move the SDK folder into User / Applications folder to prevent a file access permissions dialog from being displayed when a Xcode project is executed. Some folders such as User / Desktop and User / Downloads require extra access permission.","title":"macOS"},{"location":"#building-an-opensiv3d-application","text":"","title":"Building an OpenSiv3D Application"},{"location":"#windows_2","text":"Lanuch Visual Studio 2019 and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project. Click OK to create the project. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging .","title":"Windows"},{"location":"#macos_2","text":"Open the project file (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) in Xcode. Click Run button \u25b6\ufe0f to build and run the application. (for macOS Catalina users) A file access permissions dialog can be inactivated by placing the project folder under User / Applications folder.","title":"macOS"},{"location":"#sponsors","text":"sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara (anonymous \ud83d\ude00)","title":"\ud83d\udc97 Sponsors"},{"location":"api/api/","text":"\u30b7\u30fc\u30f3\u95a2\u9023\u306e\u5b9a\u6570 \u00b6 enum class ScaleMode \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3067\u3059\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u95a2\u6570\u3067 WindowResizeOption :: UseDefaultScaleMode \u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\u306b\u3082\u53c2\u7167\u3055\u308c\u307e\u3059\u3002 ScaleMode :: ResizeFill \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u30b7\u30fc\u30f3\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002 ScaleMode :: AspectFit \u00b6 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u3067\u3001\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u7dad\u6301\u3057\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u63cf\u753b\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u540d\u524d\u7a7a\u9593 (namespace Scene) \u00b6 \u5b9a\u6570 \u00b6 constexpr Size Scene :: DefaultSceneSize = Window :: DefaultClientSize ; \u00b6 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 constexpr ScaleMode Scene :: DefaultScaleMode = ScaleMode :: AspectFit ; \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 constexpr TextureFilter Scene :: DefaultFilter = TextureFilter :: Linear ; \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 constexpr ColorF Scene :: DefaultBackgroundColor = Palette :: DefaultBackground ; \u00b6 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002 constexpr ColorF Scene :: DefaultLetterBoxColor = Palette :: DefaultLetterbox ; \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002 constexpr double Scene :: DefaultMaxDeltaTime = 0 . 1 ; \u00b6 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 \u95a2\u6570 \u00b6 void Scene :: Resize ( const s3d :: Size & size ); \u00b6 void Scene :: Resize ( int32 width , int32 height ); \u00b6 size: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 width, height: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f Scene :: DefaultSceneSize \u3067\u3059\u3002\u4e21\u65b9\u307e\u305f\u306f\u3069\u3061\u3089\u304b\u306e\u5024\u3092 0 \u4ee5\u4e0b\u306b\u3057\u305f\u308a 8192 \u3088\u308a\u5927\u304d\u304f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 Size Scene :: Size (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Scene :: Width (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Scene :: Height (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Scene :: Center (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002 Vec2 Scene :: CenterF (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116.5, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002 Rect Scene :: Rect (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e Rect \u5de6\u4e0a\u304c (0, 0) \u3067\u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Rect \u3092\u8fd4\u3057\u307e\u3059\u3002 void Scene :: SetScaleMode ( ScaleMode scaleMode ); \u00b6 scaleMode: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ScaleMode :: AspectFit \u3067\u3059\u3002 ScaleMode Scene :: GetScaleMode (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 void Scene :: SetTextureFilter ( TextureFilter textureFilter ); \u00b6 textureFilter: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultFilter \u3067\u3059\u3002\u30c9\u30c3\u30c8\u7d75\u611f\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u306f TextureFilter :: Nearest \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 TextureFilter Scene :: GetTextureFilter (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetTextureFilter () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 void Scene :: SetBackground ( const ColorF & color ); \u00b6 color: \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultBackgroundColor \u3067\u3059\u3002 void Scene :: SetLetterbox ( const ColorF & color ); \u00b6 color: \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultLetterBoxColor \u3067\u3059\u3002 void Scene :: SetMaxDeltaTime ( double timeSec ); \u00b6 timeSec: \u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultMaxDeltaTime \u3067\u3059\u3002 Scene :: DeltaTime () \u304c\u5927\u304d\u306a\u5024\u3092\u8fd4\u3057\u3066\u7269\u7406\u6f14\u7b97\u306a\u3069\u306e\u7d4c\u904e\u6642\u9593\u51e6\u7406\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u306e\u3092\u9632\u3050\u5f79\u5272\u304c\u3042\u308a\u307e\u3059\u3002 double Scene :: GetMaxDeltaTime (); \u00b6 \u623b\u308a\u5024: Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetMaxDeltaTime () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 double Scene :: DeltaTime (); \u00b6 \u623b\u308a\u5024: \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3068 Scene :: SetMaxDeltaTime () \u306e\u5c0f\u3055\u3044\u307b\u3046\u306e\u5024 \u524d\u56de\u306e System :: Update () \u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u3082\u3068\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4e0a\u4e0b\u3057\u3066\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002 double Scene :: Time (); \u00b6 \u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002 int32 Scene :: FrameCount (); \u00b6 \u623b\u308a\u5024: System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570 System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570\uff08= \u30d5\u30ec\u30fc\u30e0\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u308f\u308b\u305f\u3081\u3001\u3053\u306e\u5024\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7b49\u306e\u5236\u5fa1\u306b\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 Vec2 Scene :: ClientToScene ( const Vec2 & pos ); \u00b6 pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19\u3092\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u7bc4\u56f2\u5916\u306e\u5ea7\u6a19\u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace System) \u00b6 \u95a2\u6570 \u00b6 bool System :: Update (); \u00b6 \u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d9a\u884c\u306e\u53ef\u5426 \u63cf\u753b\u3084\u5165\u529b\u60c5\u5831\u306a\u3069\u3001\u30d5\u30ec\u30fc\u30e0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u8abf\u6574\u3059\u308b\u50cd\u304d\u3082\u3042\u308a\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u304c\u767a\u751f\u3059\u308b\u304b\u3001\u5185\u90e8\u3067\u56de\u5fa9\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u304c false \u3092\u8fd4\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3055\u305b\u308b\u3079\u304d\u3067\u3059\u3002 void System :: Exit () ; \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u76f4\u5f8c\u306e System :: Update () \u304c false \u3092\u8fd4\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u81ea\u4f53\u304c\u7d42\u4e86\u51e6\u7406\u3092\u884c\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 void System :: SetTerminationTriggers ( uint32 userActionFlags ); \u00b6 userActionFlags: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u3044\u307e\u3059\u3002 uint32 System :: GetTerminationTriggers (); \u00b6 \u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 uint32 System :: GetUserActions (); \u00b6 \u623b\u308a\u5024: \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 void System :: Sleep ( int32 milliseconds ); \u00b6 void System :: Sleep ( const Duration & duration ); \u00b6 milliseconds: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 duration: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593 \u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u6307\u5b9a\u3057\u305f\u6642\u9593\u3060\u3051\u505c\u6b62\u3057\u307e\u3059\u3002 bool System :: LaunchBrowser ( const FilePath & url ); \u00b6 url: \u30aa\u30fc\u30d7\u30f3\u3059\u308b URL \u623b\u308a\u5024: \u30aa\u30fc\u30d7\u30f3\u306e\u6210\u529f\u306e\u53ef\u5426 \u6307\u5b9a\u3057\u305f URL \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Web \u30d6\u30e9\u30a6\u30b6\u3067\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 Array < Monitor > System :: EnumerateActiveMonitors () \u00b6 \u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 size_t System :: GetCurrentMonitorIndex () \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 System :: EnumerateActiveMonitors () \u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 Array < GamepadInfo > System :: EnumerateGamepads (); \u00b6 \u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 Array < WebcamInfo > System :: EnumerateWebcams (); \u00b6 \u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30a6\u30a3\u30f3\u30c9\u30a6\u540d\u524d\u7a7a\u9593 (namespace Window) \u00b6 \u5b9a\u6570 \u00b6 constexpr Size Window :: DefaultClientSize = Size ( 800 , 600 ); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 \u95a2\u6570 \u00b6 void Window :: SetTitle ( const String & title ) ; \u00b6 template < class ... Args > void Window :: SetTitle ( const Args & ... args ) ; \u00b6 title: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb args: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u6539\u884c\u306f\u7121\u8996\u3055\u308c\u3001\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 const String & Window :: GetTitle () ; \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 WindowState Window :: GetState (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 void Window :: SetStyle ( WindowStyle style ); \u00b6 style: \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 WindowStyle Window :: GetStyle (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Size Window :: ClientSize (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Window :: ClientCenter (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u304a\u3051\u308b\u4e2d\u5fc3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Window :: ClientWidth (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Window :: ClientHeight (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 void Window :: SetPos ( const Point & pos ); \u00b6 void Window :: SetPos ( int32 x , int32 y ); \u00b6 pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 x, y: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 void Window :: Centering (); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 bool Window :: Resize ( const Size & size , WindowResizeOption option = WindowResizeOption :: ResizeSceneSize , bool centering = true ); \u00b6 bool Window :: Resize ( int32 width , int32 height , WindowResizeOption option = WindowResizeOption :: ResizeSceneSize , bool centering = true ); \u00b6 size: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 width, height: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 centering: \u30b5\u30a4\u30ba\u5909\u66f4\u5f8c\u306b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u308b\u304b\u306e\u30d5\u30e9\u30b0 \u623b\u308a\u5024: \u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 WindowResizeOption :: ResizeSceneSize \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3055\u308c\u307e\u3059\u3002 void Window :: Maximize (); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316\u3057\u307e\u3059\u3002 void Window :: Restore (); \u00b6 \u6700\u5927\u30fb\u6700\u5c0f\u5316\u3055\u308c\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5143\u306e\u30b5\u30a4\u30ba\u306b\u623b\u3057\u307e\u3059\u3002 void Window :: Minimize (); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3057\u307e\u3059\u3002 bool Window :: SetFullscreen ( bool fullscreen , const Optional < Size >& fullscreenResolution = unspecified , WindowResizeOption option = WindowResizeOption :: ResizeSceneSize ); \u00b6 fullscreen: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false , \u30a6\u30a3\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false fullscreenResolution: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002 fullscreenResolution \u306b\u306f unspecified \u304b Graphics :: GetFullscreenResolutions () \u306b\u542b\u307e\u308c\u308b\u5024\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u969b\u3001 fullscreenResolution \u306b unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u89e3\u50cf\u5ea6\uff08\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u9069\u7528\u5f8c\uff09\u306e\u30b5\u30a4\u30ba\u3067\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\u3002 unspecified \u306f\u5207\u308a\u66ff\u3048\u304c\u65e9\u304f\u5805\u7262\u3067\u3059\u3002 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u95a2\u9023\u306e\u5b9a\u6570 \u00b6 enum class CursorStyle \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3057\u307e\u3059\u3002 CursorStyle :: Arrow \u00b6 \u901a\u5e38\u306e\u77e2\u5370\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: IBeam \u00b6 \u30c6\u30ad\u30b9\u30c8\u5165\u529b\u6642\u306b\u4f7f\u3046 I \u306e\u5f62\u3092\u3057\u305f\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: Cross \u00b6 \u5341\u5b57\u578b\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: Hand \u00b6 \u4eba\u5dee\u3057\u6307\u3092\u4f38\u3070\u3057\u305f\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: NotAllowed \u00b6 \u7981\u6b62\u30de\u30fc\u30af\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: ResizeUpDown \u00b6 \u4e0a\u4e0b\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: ResizeLeftRight \u00b6 \u5de6\u53f3\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: Hidden \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u307e\u3059\u3002 CursorStyle :: Default = Arrow \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f CursorStyle :: Arrow \u3067\u3059\u3002 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u540d\u524d\u7a7a\u9593 (namespace Cursor) \u00b6 \u95a2\u6570 \u00b6 Point Cursor :: Pos (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: PreviousPos (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: Delta (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: Pos () - Cursor :: PreviousPos () \u3068\u540c\u5024\u3067\u3059\u3002 Vec2 Cursor :: PosF (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Vec2 Cursor :: PreviousPosF (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Vec2 Cursor :: DeltaF (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosF () - Cursor :: PreviousPosF () \u3068\u540c\u5024\u3067\u3059\u3002 Point Cursor :: PosRaw (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: PreviousPosRaw (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: DeltaRaw (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosRaw () - Cursor :: PreviousPosRaw () \u3068\u540c\u5024\u3067\u3059\u3002 Point Cursor :: ScreenPos (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: PreviousScreenPos (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: ScreenDelta (); \u00b6 \u623b\u308a\u5024: \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: ScreenPos () - Cursor :: PreviousScreenPos () \u3068\u540c\u5024\u3067\u3059\u3002 Array < std :: pair < Point , uint64 >> Cursor :: GetBuffer (); \u00b6 \u623b\u308a\u5024: \u76f4\u8fd1 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u53e4\u3044\u9806\u306b\u4e26\u3079\u305f\u914d\u5217 \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u904e\u53bb 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3068\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u7248\u306b\u9650\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4ee5\u4e0a\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 void Cursor :: SetPos ( int32 x , int32 y ); \u00b6 void Cursor :: SetPos ( const Point & pos ); \u00b6 x: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 X \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) y: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 Y \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) pos: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 bool Cursor :: OnClientRect (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 const Mat3x2 & Cursor :: GetLocalTransform (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 const Mat3x2 & Cursor :: GetCameraTransform (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 void Cursor :: ClipToWindow ( bool clip ); \u00b6 clip: \u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u6709\u5411\u306b\u3059\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f false \u3067\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u9593\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 void Cursor :: RequestStyle ( CursorStyle style ); \u00b6 style: \u5909\u66f4\u5f8c\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002 void Cursor :: SetDefaultStyle ( CursorStyle style ); \u00b6 style: \u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u8a2d\u5b9a\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb Cursor :: RequestStyle () \u3092\u547c\u3070\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u9069\u7528\u3055\u308c\u308b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f CursorStyle :: Default \u3067\u3059\u3002 CursorStyle Cursor :: GetRequestedStyle (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7121\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 CursorStyle Cursor :: GetDefaultStyle (); \u00b6 \u623b\u308a\u5024: \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 \u6642\u9593\u540d\u524d\u7a7a\u9593 (namespace Time) \u00b6 \u95a2\u6570 \u00b6 uint64 Time :: GetSec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMillisec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMicrosec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetNanosec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30ca\u30ce\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetSecSinceEpoch (); \u00b6 \u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u79d2\u6570 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMillisecSinceEpoch (); \u00b6 \u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMicrosecSinceEpoch (); \u00b6 \u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 int32 Time :: UTCOffsetMinutes (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\uff08\u5206\uff09 \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\u3092\u5206\u3067\u8fd4\u3057\u307e\u3059\u3002 \u6587\u5b57\u306b\u95a2\u3059\u308b\u6a5f\u80fd \u00b6 \u95a2\u6570 \u00b6 bool IsASCII ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: ASCII \u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c ASCII \u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsDigit ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: 10 \u9032\u6570\u306e\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 10 \u9032\u6570\u306e\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsLower ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsUpper ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 char32 ToLower ( char32 ch ) ; \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5c0f\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u306e\u5834\u5408\u3001\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002 char32 ToUpper ( char32 ch ) ; \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5927\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u306e\u5834\u5408\u3001\u5927\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsAlpha ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsAlnum ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3082\u3057\u304f\u306f\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3082\u3057\u304f\u306f\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsXdigit ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57 (0\uff5e9, A\uff5eF, a\uff5ef) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsControl ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u5236\u5fa1\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5236\u5fa1\u6587\u5b57 (0x00\uff5e0x1F, 0x7F\uff5e0x9F) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsBlank ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsSpace ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u985e\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u985e\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9, '\\n' , '\\v' , '\\f' , '\\r' ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsPrint ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool CaseInsensitiveEquals ( char32 a , char32 b ); \u00b6 a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3066\u3001\u7b49\u3057\u3044\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 a , b \u304c\u7b49\u3057\u3044\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3055\u308c\u3001 's' \u3068 'S' \u306f\u7b49\u3057\u3044\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 int32 CaseInsensitiveCompare ( char32 a , char32 b ); \u00b6 a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3001 a \u304c b \u3088\u308a\u5c0f\u3055\u3044\u5834\u5408 - 1 , \u7b49\u3057\u3044\u5834\u5408 0 , \u5927\u304d\u3044\u5834\u5408 1 \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u3092\u7121\u8996\u3057\u3066\u6587\u5b57 a , b \u3092\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 2D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics2D) \u00b6 \u95a2\u6570 \u00b6 ColorF Graphics2D :: GetColorMul (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u4e57\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u4e57\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 1 , 1 , 1 , 1 ) \u3067\u3059\u3002 ColorF Graphics2D :: GetColorAdd (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u52a0\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u52a0\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002 BlendState Graphics2D :: GetBlendState (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f BlendState :: Default \u3067\u3059\u3002 RasterizerState Graphics2D :: GetRasterizerState (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f RasterizerState :: Default2D \u3067\u3059\u3002 void Graphics2D :: SetSamplerState ( uint32 slot , const SamplerState & samplerState ); \u00b6 slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) samplerState: \u8a2d\u5b9a\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\u30020 \u756a\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f ScopedRenderStates2D \u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002 SamplerState Graphics2D :: GetSamplerState ( uint32 slot = 0 ); \u00b6 slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) \u623b\u308a\u5024: \u73fe\u5728\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 \u6307\u5b9a\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3067\u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002 Optional < Rect > Graphics2D :: GetViewport (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < PixelShader > Graphics2D :: GetCustomPixelShader (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < RenderTexture > Graphics2D :: GetRenderTarget (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3. \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics2D :: SetScissorRect ( const Rect & rect ); \u00b6 rect: \u30b7\u30b6\u30fc\u77e9\u5f62 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 RasterizerState \u3067\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u6709\u52b9\u306b\u3057\u305f\u5834\u5408\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002 Rect Graphics2D :: GetScissorRect (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30b7\u30b6\u30fc\u77e9\u5f62 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Rect ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002 void Graphics2D :: SetLocalTransform ( const Mat3x2 & transform ); \u00b6 transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f Transformer2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002 const Mat3x2 & Graphics2D :: GetLocalTransform (); \u00b6 \u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics2D :: SetCameraTransform ( const Mat3x2 & transform ); \u00b6 transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f BasicCamera2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002 const Mat3x2 & Graphics2D :: GetCameraTransform (); \u00b6 \u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 double Graphics2D :: GetMaxScaling (); \u00b6 \u623b\u308a\u5024: 2D \u63cf\u753b\u306e\u6700\u5927\u62e1\u5927\u500d\u7387 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u7528\u3044\u3066\u76f4\u5f84 1 \u306e\u5186\u3092\u63cf\u3044\u305f\u3068\u304d\u306b\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u307e\u305f\u306f\u6955\u5186\u306e\u6700\u5927\u306e\u5f84\u3092\u8fd4\u3057\u307e\u3059\u3002\u3069\u306e\u3088\u3046\u306a\u5ea7\u6a19\u5909\u63db\u884c\u5217\u306b\u304a\u3044\u3066\u3082\u7dda\u5206\u3092\u540c\u3058\u592a\u3055\u3067\u63cf\u753b\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u623b\u308a\u5024\u306e\u5024\u304c\u4f7f\u3048\u307e\u3059\u3002 Size Graphics2D :: GetRenderTargetSize (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u89e3\u50cf\u5ea6 \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3082\u3057\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics2D :: SetSDFParameters ( double pixelRange , double offset = 0 . 0 ); \u00b6 void Graphics2D :: SetSDFParameters ( cosnt Float4 & parameters ); \u00b6 pixelRange: \u4f7f\u7528\u3059\u308b SDF \u30d5\u30a9\u30f3\u30c8\u306e SDFFont :: pixelRange () \u306e\u5024 offset: SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u306e\u95be\u5024\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 parameters: SDF \u30d5\u30a9\u30f3\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc SDF \u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 Float4 Graphics2D :: GetSDFParameters (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u73fe\u5728 SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002 void Graphics2D :: SetTexture ( uint32 slot , const Optional < Texture >& texture ); \u00b6 slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) texture: \u30c6\u30af\u30b9\u30c1\u30e3 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u3092 .draw () \u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b9\u30ed\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002 void Graphics2D :: Flush (); \u00b6 \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f 2D \u63cf\u753b\u95a2\u9023\u306e\u547d\u4ee4\u3092\u3059\u3079\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 .draw () \u3084 Graphics2D :: \uff5e \u306b\u3088\u308b 2D \u63cf\u753b\u547d\u4ee4\u306f\u3001\u51e6\u7406\u306e\u52b9\u7387\u5316\u306e\u305f\u3081\u306b\u4e00\u65e6\u30a8\u30f3\u30b8\u30f3\u5185\u3067\u30b9\u30c8\u30c3\u30af\u3055\u308c\u3001\u547d\u4ee4\u304c\u96c6\u7d04\u3055\u308c\u3066\u304b\u3089 System :: Update () \u5185\u3067\u4e00\u6589\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 RenderTexture \u306e\u4e2d\u8eab\u3092 .read () \u3067\u8aad\u307f\u51fa\u3059\u5834\u5408\u3084 MSRenderTexture \u3092 .resolve () \u3059\u308b\u969b\u306b\u3001\u5b9f\u969b\u306b\u306f\u63cf\u753b\u304c\u306a\u3055\u308c\u3066\u3044\u306a\u3044\u30b1\u30fc\u30b9\u304c\u751f\u3058\u307e\u3059\u3002\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002 template < class Type > void Graphics2D :: SetConstantBuffer ( ShaderStage stage , uint32 index , const ConstantBuffer < Type >& buffer ); \u00b6 stage: \u5bfe\u8c61\u306e\u30b7\u30a7\u30fc\u30c0 index: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e13) buffer: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30c7\u30fc\u30bf 2D \u63cf\u753b\u306e\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u3067\u7528\u3044\u308b\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u5909\u66f4\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics) \u00b6 \u95a2\u6570 \u00b6 void Graphics :: SkipClearScreen (); \u00b6 \u3053\u306e\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u958b\u59cb\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u63cf\u753b\u5185\u5bb9\u3092\u80cc\u666f\u8272\u3067\u30af\u30ea\u30a2\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Array < DisplayOutput > Graphics :: EnumOutputs (); \u00b6 \u623b\u308a\u5024: \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7 \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 Array < Size > Graphics :: GetFullscreenResolutions ( double minRefreshRate = 49 . 0 ); \u00b6 minRefreshRate: \u8981\u6c42\u3059\u308b\u6700\u4f4e\u9650\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7 \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u304c minRefreshRate (Hz) \u4ee5\u4e0a\u3067\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics :: SetTargetFrameRateHz ( const Optional < double >& targetFrameRateHz ); \u00b6 targetFrameRateHz: \u8a2d\u5b9a\u3059\u308b\u6700\u5927\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (Hz) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 none \u3092\u6e21\u3059\u3068 vSync \u304c\u6709\u52b9\u306b\u306a\u308a\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8a2d\u5b9a\u306b\u6cbf\u3063\u305f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u6027\u80fd\u306b\u3088\u3063\u3066\u306f\u3001\u5b9f\u6e2c\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u3001\u3053\u306e\u95a2\u6570\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u4e0b\u56de\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Optional < double > Graphics :: GetTargetFrameRateHz (); \u00b6 \u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none Graphics :: SetTargetFrameRateHz () \u3067\u8a2d\u5b9a\u3057\u305f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002 double Graphics :: GetDisplayRefreshRateHz (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 double Graphics :: GetDPIScaling (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e DPI \u62e1\u5927\u7387 (\u500d) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u5bfe\u3057\u3066\u30e6\u30fc\u30b6\u304c\u30b7\u30b9\u30c6\u30e0\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b DPI \u62e1\u5927\u7387\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30fc\u30c9\u69cb\u9020\u4f53 (struct DisplayMode) \u00b6 \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 Size size ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u89e3\u50cf\u5ea6\uff08\u30d4\u30af\u30bb\u30eb\uff09 double refreshRateHz ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u69cb\u9020\u4f53 (struct DisplayOutput) \u00b6 \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 String name ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u540d\u79f0 Rect displayRect ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u4eee\u60f3\u5ea7\u6a19 Array < DisplayMode > displayModes ; \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u8868\u793a\u30e2\u30fc\u30c9\u306e\u4e00\u89a7 GUI \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc (namespace SimpleGUI) \u00b6 \u95a2\u6570 \u00b6 RectF SimpleGUI :: HeadlineRegion ( const String & text , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u898b\u51fa\u3057\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 void SimpleGUI :: Headline ( const String & text , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u63cf\u753b\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: ButtonRegion ( const String & label , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: ButtonRegionAt ( const String & label , const Vec2 & center , const Optional < double >& width = unspecified ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: Button ( const String & label , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 widht: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: ButtonAt ( const String & label , const Vec2 & center , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: SliderRegion ( const Vec2 & pos , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 ); \u00b6 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: SliderRegionAt ( const Vec2 & center , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 ); \u00b6 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: Slider ( double & value , const Vec2 & pos , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: Slider ( double & value , double min , double max , const Vec2 & pos , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: Slider ( const String & label , double & value , const Vec2 & pos , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: Slider ( const String & label , double & value , double min , double max , const Vec2 & pos , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: SliderAt ( double & value , const Vec2 & center , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: SliderAt ( double & value , double min , double max , const Vec2 & center , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: SliderAt ( const String & label , double & value , const Vec2 & center , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: SliderAt ( const String & label , double & value , double min , double max , const Vec2 & center , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: VerticalSliderRegion ( const Vec2 & pos , double sliderHeight = 120 . 0 ); \u00b6 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: VerticalSliderRegionAt ( const Vec2 & center , double sliderHeight = 120 . 0 ); \u00b6 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: VerticalSlider ( double & value , const Vec2 & pos , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: VerticalSlider ( double & value , double min , double max , const Vec2 & pos , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: VerticalSliderAt ( double & value , const Vec2 & center , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: VerticalSliderAt ( double & value , double min , double max , const Vec2 & center , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: CheckBoxRegion ( const String & label , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: CheckBoxRegionAt ( const String & label , const Vec2 & center , const Optional < double >& width = unspecified ); \u00b6 label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool CheckBox ( bool & checked , const String & label , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: CheckBoxAt ( bool & checked , const String & label , const Vec2 & center , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: RadioButtonsRegion ( const Array < String >& options , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: RadioButtonsRegionAt ( const Array < String >& options , const Vec2 & center , const Optional < double >& width = unspecified ); \u00b6 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: RadioButtons ( size_t & index , const Array < String >& options , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: RadioButtonsAt ( size_t & index , const Array < String >& options , const Vec2 & center , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: TextBoxRegion ( const Vec2 & pos , double width = 200 . 0 ); \u00b6 pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: TextBoxRegionAt ( const Vec2 & center , double width = 200 . 0 ); \u00b6 center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: TextBox ( TextEditState & text , const Vec2 & pos , double width = 200 . 0 , const Optional < size_t >& maxChars = unspecified , bool enabled = true ); \u00b6 text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002 bool SimpleGUI :: TextBoxAt ( TextEditState & text , const Vec2 & center , double width = 200 . 0 , const Optional < size_t >& maxChars = unspecified , bool enabled = true ); \u00b6 text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002 RectF SimpleGUI :: ColorPickerRegion ( const Vec2 & pos ); \u00b6 pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: ColorPickerRegionAt ( const Vec2 & center ); \u00b6 center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: ColorPicker ( HSV & hsv , const Vec2 & pos , bool enabled = true ); \u00b6 hsv: \u64cd\u4f5c\u3059\u308b\u8272 pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool ColorPickerAt ( HSV & hsv , const Vec2 & center , bool enabled = true ); \u00b6 hsv: \u64cd\u4f5c\u3059\u308b\u8272 center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53 (struct TextEditState) \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306a\u3069\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u3059\u308b\u969b\u306b\u4f7f\u3046\u60c5\u5831\u3067\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 String text ; \u00b6 \u5165\u529b\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8 size_t cursorPos = 0 ; \u00b6 \u5165\u529b\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e bool active = false ; \u00b6 \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b Stopwatch leftPressStopwatch ; \u00b6 \u30ab\u30fc\u30bd\u30eb\u306e\u5de6\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 Stopwatch rightPressStopwatch ; \u00b6 \u30ab\u30fc\u30bd\u30eb\u306e\u53f3\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 Stopwatch cursorStopwatch ; \u00b6 \u5165\u529b\u30ab\u30fc\u30bd\u30eb\u306e\u70b9\u6ec5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 TextEditState () = default (); \u00b6 TextEditState ( const String & defaultText ); \u00b6 defaultText: \u521d\u671f\u30c6\u30ad\u30b9\u30c8 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 void clear (); \u00b6 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831\u3092\u3059\u3079\u3066\u30af\u30ea\u30a2\u3057\u3001\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u306b\u3057\u307e\u3059\u3002 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u30af\u30e9\u30b9 (class Stopwatch) \u00b6 \u7d4c\u904e\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 Stopwatch ( bool startImmediately = false ); \u00b6 Stopwatch ( const Duration & time , bool startImmediately = false ); \u00b6 startImmediately: \u6642\u9593\u306e\u8a08\u6e2c\u3092\u76f4\u3061\u306b\u958b\u59cb\u3059\u308b\u304b\u306e\u30d5\u30e9\u30b0 time: \u6700\u521d\u306b\u9032\u3081\u3066\u304a\u304f\u6642\u9593 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 startImmediately \u304c true \u306e\u5834\u5408\u306f\u4f5c\u6210\u3068\u540c\u6642\u306b\u6642\u9593\u306e\u8a08\u6e2c\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 void start (); \u00b6 \u6642\u9593\u306e\u8a08\u6e2c\u3092\u958b\u59cb\u307e\u305f\u306f\u518d\u958b\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u8a08\u6e2c\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 int32 d (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 d64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002 double dF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300251 \u6642\u9593\u306e\u5834\u5408\u306f 2 . 125 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 h (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 h64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002 double hF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300240 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 . 5 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 min (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 min64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002 double minF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30022 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 s (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 s64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002 double sF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30023 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 ms (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 ms64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002 double msF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30029123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 . 4 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 us (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 us64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002 double usF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30025678.9 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 5678 . 9 \u3092\u8fd4\u3057\u307e\u3059\u3002 Duration elapsed (); \u00b6 \u623b\u308a\u5024: \u7d4c\u904e\u6642\u9593 ( Duration \u578b) \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092 Duration \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 bool isStarted (); \u00b6 \u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool isPaused (); \u00b6 \u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool isRunning (); \u00b6 \u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u306a\u304a\u304b\u3064\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u306a\u3044\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 void pause () ; \u00b6 \u6642\u9593\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u3059\u3067\u306b\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 void resume (); \u00b6 \u4e00\u6642\u505c\u6b62\u4e2d\u306e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u518d\u3073\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u307e\u3059\u3002\u4e00\u6642\u505c\u6b62\u4e2d\u51fa\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 void reset (); \u00b6 \u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u307e\u3059\u3002 void restart (); \u00b6 \u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u3001\u518d\u5ea6\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 void set ( const Duration & time ); \u00b6 time: \u8a2d\u5b9a\u3059\u308b\u6642\u9593 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 String format ( StringView format = U \"H:mm:ss.xx\" _sv ); \u00b6 format: \u6642\u523b\u306e\u8868\u73fe\u65b9\u6cd5 \u623b\u308a\u5024: \u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u305f\u6642\u523b \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \u975e\u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 bool operator < ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator <= ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator > ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator >= ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator < ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 bool operator <= ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 bool operator > ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 bool operator >= ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 s: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 time: \u6bd4\u8f03\u3059\u308b\u6642\u9593 \u623b\u308a\u5024: \u6bd4\u8f03\u306e\u7d50\u679c \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3067\u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u3001\u5225\u306e\u6642\u9593\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002 void Formatter ( FormatData & formatData , const Stopwatch & value ); \u00b6 formatData: \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c7\u30fc\u30bf\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u307e\u3059\u3002\u5909\u63db\u306b\u306f Stopwatch :: format () \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 template < class CharType > std :: basic_ostream < CharType >& operator <<( std :: basic_ostream < CharType > output , const Stopwatch & value ); \u00b6 output: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u623b\u308a\u5024: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u95a2\u9023\u306e\u5b9a\u6570 \u00b6 enum class OpenMode \u00b6 \u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u307f\u7528\u9014\u3067\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 BinaryWriter , TextWriter \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002 OpenMode :: Trunc \u00b6 \u53e4\u3044\u5185\u5bb9\u3092\u7834\u68c4\u3057\u3001\u30b5\u30a4\u30ba\u3092\u30bc\u30ed\u306b\u3057\u305f\u72b6\u614b\u304b\u3089\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002 OpenMode :: Append \u00b6 \u53e4\u3044\u5185\u5bb9\u3092\u4fdd\u6301\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u65b0\u3057\u304f\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002 enum class CopyOption \u00b6 \u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 FileSystem :: Copy () \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002 CopyOption :: None \u00b6 \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3092\u5931\u6557\u3055\u305b\u3001\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 CopyOption :: SkipExisting \u00b6 \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u305a\u306b\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002 CopyOption :: OverwriteExisting \u00b6 \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002 CopyOption :: UpdateExisting \u00b6 \u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3088\u308a\u3082\u65b0\u3057\u3051\u308c\u3070\u4e0a\u66f8\u304d\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002 CopyOption :: Default = None \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b3\u30d4\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3001 CopyOption :: None \u3067\u3059\u3002 enum class SpecialFolder \u00b6 \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3057\u307e\u3059\u3002 SpecialFolder :: Desktop \u00b6 \u30e6\u30fc\u30b6\u306e\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Documents \u00b6 \u30e6\u30fc\u30b6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: LocalAppData \u00b6 \u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 SpecialFolder :: Pictures \u00b6 \u30e6\u30fc\u30b6\u306e\u30d4\u30af\u30c1\u30e3\u30fc\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Music \u00b6 \u30e6\u30fc\u30b6\u306e\u30df\u30e5\u30fc\u30b8\u30c3\u30af\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Videos \u00b6 \u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Caches = LocalAppData \u00b6 \u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 SpecialFolder :: LocalAppData \u306e\u5225\u540d\u3067\u3059\u3002 SpecialFolder :: Movies = Videos \u00b6 \u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Movies \u306e\u5225\u540d\u3067\u3059\u3002 SpecialFolder :: SystemFonts \u00b6 \u30b7\u30b9\u30c6\u30e0\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / System / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002 SpecialFolder :: LocalFonts \u00b6 \u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002 SpecialFolder :: UserFonts \u00b6 \u30e6\u30fc\u30b6\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f ~/ Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace FileSystem) \u00b6 \u95a2\u6570 \u00b6 bool FileSystem :: Exists ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: IsDirectory ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: IsFile ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: IsResource ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u307f (Windows) \u307e\u305f\u306f\u30d0\u30f3\u30c9\u30eb (macOS) \u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059\u3002Linux \u3067\u306f / resources / \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30ea\u30bd\u30fc\u30b9\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 FilePath FileSystem :: FullPath ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u7d76\u5bfe\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5834\u5408\u306f\u672b\u5c3e\u304c / \u306b\u306a\u308a\u307e\u3059\u3002 Platform :: NativeFilePath FileSystem :: NativePath ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30cd\u30a4\u30c6\u30a3\u30d6\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u3001OS \u30cd\u30a4\u30c6\u30a3\u30d6\u8868\u73fe\u3067\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 String FileSystem :: Extension ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e .\u3092\u542b\u307e\u306a\u3044\u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"png\"\uff09 String FileSystem :: FileName ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture.png\"\uff09 String FileSystem :: BaseName ( FilePathView path ) ; \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u62e1\u5f35\u5b50\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture\"\uff09 FilePath FileSystem :: ParentPath ( FilePathView path , size_t level = 0 , FilePath * baseFullPath = nullptr ); \u00b6 path: \u30d1\u30b9 level: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u968e\u5c64\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 0 baseFullPath: path \u306e\u7d76\u5bfe\u30d1\u30b9\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09 \u623b\u308a\u5024: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002\u89aa\u306e\u3055\u3089\u306b\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5f97\u305f\u3044\u5834\u5408\u306b\u306f level \u3092\u5897\u3084\u3057\u307e\u3059\u3002\u3061\u3087\u3046\u3069 1 \u3064\u4e0a\u4f4d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u57fa\u6e96\u306b 0 \u3067\u30011 \u305a\u3064\u5897\u3084\u3057\u307e\u3059\u3002 FilePath FileSystem :: VolumePath ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"C:/\"\uff09 bool FileSystem :: IsEmptyDirectory ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 int64 FileSystem :: Size ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002 int64 FileSystem :: FileSize ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < DateTime > FileSystem :: CreationTime ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u4f5c\u6210\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < DateTime > FileSystem :: WriteTime ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u66f4\u65b0\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u66f4\u65b0\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < DateTime > FileSystem :: AccessTime ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002 Array < FilePath > FileSystem :: DirectoryContents ( const FilePath & path , bool recursive = true ); \u00b6 path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 recursive: \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u30d5\u30a9\u30eb\u30c0\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3001\u305d\u306e\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u518d\u5e30\u7684\u306b\u5217\u6319\u3059\u308b\u5834\u5408\u306f true \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7 \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 const FilePath & FileSystem :: InitialDirectory (); \u00b6 \u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002 const FilePath & FileSystem :: ModulePath (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9 \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002 FilePath FileSystem :: CurrentDirectory (); \u00b6 \u623b\u308a\u5024: \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: ChangeCurrentDirectory ( FilePathView path ); \u00b6 path: \u65b0\u3057\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 FilePath FileSystem :: SpecialFolderPath ( SpecialFolder folder ); \u00b6 folder: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u7a2e\u985e \u623b\u308a\u5024: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9 \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002 FilePath FileSystem :: TemporaryDirectoryPath (); \u00b6 \u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d1\u30b9\u306e\u672b\u5c3e\u306b\u306f '/' \u304c\u4ed8\u304d\u307e\u3059\u3002 FilePath FileSystem :: UniqueFilePath ( FilePathView directory = TemporaryDirectoryPath ()); \u00b6 directory: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u56fa\u6709\u306a\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f \".tmp\" \u3067\u3059\u3002 FilePath FileSystem :: RelativePath ( FilePathView path , FilePathView start = FileSystem :: CurrentDirectory ()); \u00b6 path: \u30d1\u30b9 start: \u76f8\u5bfe\u30d1\u30b9\u306e\u57fa\u6e96\u4f4d\u7f6e \u623b\u308a\u5024: \u76f8\u5bfe\u30d1\u30b9 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u3092\u76f8\u5bfe\u30d1\u30b9\u306b\u5909\u63db\u3057\u307e\u3059\u3002 bool FileSystem :: CreateDirectories ( FilePathView path ); \u00b6 path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 bool FileSystem :: CreateParentDirectories ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u307e\u3067\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 bool FileSystem :: Copy ( FilePathView from , FilePathView to , CopyOption copyOption = CopyOption :: Default ); \u00b6 from: \u30b3\u30d4\u30fc\u3059\u308b\u30d1\u30b9 to: \u30b3\u30d4\u30fc\u5148\u306e\u30d1\u30b9 copyOption: \u540d\u524d\u885d\u7a81\u6642\u306e\u3075\u308b\u307e\u3044 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 bool FileSystem :: Remove ( FilePathView path , bool allowUndo = false ); \u00b6 path: \u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u307e\u3059\u3002 bool FileSystem :: RemoveContents ( FilePathView path , bool allowUndo = false ); \u00b6 path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3060\u3051\u3092\u524a\u9664\u3057\u307e\u3059\u3002 bool FileSystem :: Rename ( FilePathView from , FilePathView to ); \u00b6 from: \u5909\u66f4\u524d\u306e\u30d1\u30b9 to: \u5909\u66f4\u5f8c\u306e\u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u540d\u524d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 bool FileSystem :: IsSandBoxed (); \u00b6 \u623b\u308a\u5024: macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u3084 Linux \u3067\u306f\u5e38\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u30ad\u30fc\u5b9a\u6570 \u00b6 \u30de\u30a6\u30b9\u30dc\u30bf\u30f3 \u00b6 constexpr Key MouseL ; \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u3067\u3059\u3002 constexpr Key MouseR ; \u00b6 \u30de\u30a6\u30b9\u306e\u53f3\u30dc\u30bf\u30f3\u3067\u3059\u3002 constexpr Key MouseM ; \u00b6 \u30de\u30a6\u30b9\u306e\u4e2d\u592e\u30dc\u30bf\u30f3\u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX1 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 1 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX2 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 2 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX3 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 3 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX4 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 4 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX5 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 5 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 \u30de\u30a6\u30b9\u540d\u524d\u7a7a\u9593 (namespace Mouse) \u00b6 \u95a2\u6570 \u00b6 double Wheel (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002 double WheelH (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"API Reference"},{"location":"api/api/#_1","text":"","title":"\u30b7\u30fc\u30f3\u95a2\u9023\u306e\u5b9a\u6570"},{"location":"api/api/#enum-class-scalemode","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3067\u3059\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u95a2\u6570\u3067 WindowResizeOption :: UseDefaultScaleMode \u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\u306b\u3082\u53c2\u7167\u3055\u308c\u307e\u3059\u3002","title":"enum class ScaleMode"},{"location":"api/api/#scalemoderesizefill","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u30b7\u30fc\u30f3\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002","title":"ScaleMode::ResizeFill"},{"location":"api/api/#scalemodeaspectfit","text":"\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u3067\u3001\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u7dad\u6301\u3057\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u63cf\u753b\u3057\u307e\u3059\u3002","title":"ScaleMode::AspectFit"},{"location":"api/api/#namespace-scene","text":"","title":"\u30b7\u30fc\u30f3\u540d\u524d\u7a7a\u9593 (namespace Scene)"},{"location":"api/api/#_2","text":"","title":"\u5b9a\u6570"},{"location":"api/api/#constexpr-size-scenedefaultscenesize-windowdefaultclientsize","text":"\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr Size Scene::DefaultSceneSize = Window::DefaultClientSize;"},{"location":"api/api/#constexpr-scalemode-scenedefaultscalemode-scalemodeaspectfit","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr ScaleMode Scene::DefaultScaleMode = ScaleMode::AspectFit;"},{"location":"api/api/#constexpr-texturefilter-scenedefaultfilter-texturefilterlinear","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr TextureFilter Scene::DefaultFilter = TextureFilter::Linear;"},{"location":"api/api/#constexpr-colorf-scenedefaultbackgroundcolor-palettedefaultbackground","text":"\u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002","title":"constexpr ColorF Scene::DefaultBackgroundColor = Palette::DefaultBackground;"},{"location":"api/api/#constexpr-colorf-scenedefaultletterboxcolor-palettedefaultletterbox","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002","title":"constexpr ColorF Scene::DefaultLetterBoxColor = Palette::DefaultLetterbox;"},{"location":"api/api/#constexpr-double-scenedefaultmaxdeltatime-01","text":"Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr double Scene::DefaultMaxDeltaTime = 0.1;"},{"location":"api/api/#_3","text":"","title":"\u95a2\u6570"},{"location":"api/api/#void-sceneresizeconst-s3dsize-size","text":"","title":"void Scene::Resize(const s3d::Size&amp; size);"},{"location":"api/api/#void-sceneresizeint32-width-int32-height","text":"size: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 width, height: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f Scene :: DefaultSceneSize \u3067\u3059\u3002\u4e21\u65b9\u307e\u305f\u306f\u3069\u3061\u3089\u304b\u306e\u5024\u3092 0 \u4ee5\u4e0b\u306b\u3057\u305f\u308a 8192 \u3088\u308a\u5927\u304d\u304f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002","title":"void Scene::Resize(int32 width, int32 height);"},{"location":"api/api/#size-scenesize","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Size Scene::Size();"},{"location":"api/api/#int32-scenewidth","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Scene::Width();"},{"location":"api/api/#int32-sceneheight","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Scene::Height();"},{"location":"api/api/#point-scenecenter","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Scene::Center();"},{"location":"api/api/#vec2-scenecenterf","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116.5, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Vec2 Scene::CenterF();"},{"location":"api/api/#rect-scenerect","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e Rect \u5de6\u4e0a\u304c (0, 0) \u3067\u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Rect \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Rect Scene::Rect();"},{"location":"api/api/#void-scenesetscalemodescalemode-scalemode","text":"scaleMode: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ScaleMode :: AspectFit \u3067\u3059\u3002","title":"void Scene::SetScaleMode(ScaleMode scaleMode);"},{"location":"api/api/#scalemode-scenegetscalemode","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"ScaleMode Scene::GetScaleMode();"},{"location":"api/api/#void-scenesettexturefiltertexturefilter-texturefilter","text":"textureFilter: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultFilter \u3067\u3059\u3002\u30c9\u30c3\u30c8\u7d75\u611f\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u306f TextureFilter :: Nearest \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002","title":"void Scene::SetTextureFilter(TextureFilter textureFilter);"},{"location":"api/api/#texturefilter-scenegettexturefilter","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetTextureFilter () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"TextureFilter Scene::GetTextureFilter();"},{"location":"api/api/#void-scenesetbackgroundconst-colorf-color","text":"color: \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultBackgroundColor \u3067\u3059\u3002","title":"void Scene::SetBackground(const ColorF&amp; color);"},{"location":"api/api/#void-scenesetletterboxconst-colorf-color","text":"color: \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultLetterBoxColor \u3067\u3059\u3002","title":"void Scene::SetLetterbox(const ColorF&amp; color);"},{"location":"api/api/#void-scenesetmaxdeltatimedouble-timesec","text":"timeSec: \u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultMaxDeltaTime \u3067\u3059\u3002 Scene :: DeltaTime () \u304c\u5927\u304d\u306a\u5024\u3092\u8fd4\u3057\u3066\u7269\u7406\u6f14\u7b97\u306a\u3069\u306e\u7d4c\u904e\u6642\u9593\u51e6\u7406\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u306e\u3092\u9632\u3050\u5f79\u5272\u304c\u3042\u308a\u307e\u3059\u3002","title":"void Scene::SetMaxDeltaTime(double timeSec);"},{"location":"api/api/#double-scenegetmaxdeltatime","text":"\u623b\u308a\u5024: Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetMaxDeltaTime () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"double Scene::GetMaxDeltaTime();"},{"location":"api/api/#double-scenedeltatime","text":"\u623b\u308a\u5024: \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3068 Scene :: SetMaxDeltaTime () \u306e\u5c0f\u3055\u3044\u307b\u3046\u306e\u5024 \u524d\u56de\u306e System :: Update () \u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u3082\u3068\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4e0a\u4e0b\u3057\u3066\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002","title":"double Scene::DeltaTime();"},{"location":"api/api/#double-scenetime","text":"\u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002","title":"double Scene::Time();"},{"location":"api/api/#int32-sceneframecount","text":"\u623b\u308a\u5024: System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570 System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570\uff08= \u30d5\u30ec\u30fc\u30e0\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u308f\u308b\u305f\u3081\u3001\u3053\u306e\u5024\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7b49\u306e\u5236\u5fa1\u306b\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"int32 Scene::FrameCount();"},{"location":"api/api/#vec2-sceneclienttosceneconst-vec2-pos","text":"pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19\u3092\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u7bc4\u56f2\u5916\u306e\u5ea7\u6a19\u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"Vec2 Scene::ClientToScene(const Vec2&amp; pos);"},{"location":"api/api/#namespace-system","text":"","title":"\u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace System)"},{"location":"api/api/#_4","text":"","title":"\u95a2\u6570"},{"location":"api/api/#bool-systemupdate","text":"\u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d9a\u884c\u306e\u53ef\u5426 \u63cf\u753b\u3084\u5165\u529b\u60c5\u5831\u306a\u3069\u3001\u30d5\u30ec\u30fc\u30e0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u8abf\u6574\u3059\u308b\u50cd\u304d\u3082\u3042\u308a\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u304c\u767a\u751f\u3059\u308b\u304b\u3001\u5185\u90e8\u3067\u56de\u5fa9\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u304c false \u3092\u8fd4\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3055\u305b\u308b\u3079\u304d\u3067\u3059\u3002","title":"bool System::Update();"},{"location":"api/api/#void-systemexit","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u76f4\u5f8c\u306e System :: Update () \u304c false \u3092\u8fd4\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u81ea\u4f53\u304c\u7d42\u4e86\u51e6\u7406\u3092\u884c\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"void System::Exit();"},{"location":"api/api/#void-systemsetterminationtriggersuint32-useractionflags","text":"userActionFlags: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"void System::SetTerminationTriggers(uint32 userActionFlags);"},{"location":"api/api/#uint32-systemgetterminationtriggers","text":"\u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002","title":"uint32 System::GetTerminationTriggers();"},{"location":"api/api/#uint32-systemgetuseractions","text":"\u623b\u308a\u5024: \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002","title":"uint32 System::GetUserActions();"},{"location":"api/api/#void-systemsleepint32-milliseconds","text":"","title":"void System::Sleep(int32 milliseconds);"},{"location":"api/api/#void-systemsleepconst-duration-duration","text":"milliseconds: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 duration: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593 \u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u6307\u5b9a\u3057\u305f\u6642\u9593\u3060\u3051\u505c\u6b62\u3057\u307e\u3059\u3002","title":"void System::Sleep(const Duration&amp; duration);"},{"location":"api/api/#bool-systemlaunchbrowserconst-filepath-url","text":"url: \u30aa\u30fc\u30d7\u30f3\u3059\u308b URL \u623b\u308a\u5024: \u30aa\u30fc\u30d7\u30f3\u306e\u6210\u529f\u306e\u53ef\u5426 \u6307\u5b9a\u3057\u305f URL \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Web \u30d6\u30e9\u30a6\u30b6\u3067\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002","title":"bool System::LaunchBrowser(const FilePath&amp; url);"},{"location":"api/api/#arraymonitor-systemenumerateactivemonitors","text":"\u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;Monitor&gt; System::EnumerateActiveMonitors()"},{"location":"api/api/#size_t-systemgetcurrentmonitorindex","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 System :: EnumerateActiveMonitors () \u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002","title":"size_t System::GetCurrentMonitorIndex()"},{"location":"api/api/#arraygamepadinfo-systemenumerategamepads","text":"\u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;GamepadInfo&gt; System::EnumerateGamepads();"},{"location":"api/api/#arraywebcaminfo-systemenumeratewebcams","text":"\u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;WebcamInfo&gt; System::EnumerateWebcams();"},{"location":"api/api/#namespace-window","text":"","title":"\u30a6\u30a3\u30f3\u30c9\u30a6\u540d\u524d\u7a7a\u9593 (namespace Window)"},{"location":"api/api/#_5","text":"","title":"\u5b9a\u6570"},{"location":"api/api/#constexpr-size-windowdefaultclientsize-size800-600","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr Size Window::DefaultClientSize = Size(800, 600);"},{"location":"api/api/#_6","text":"","title":"\u95a2\u6570"},{"location":"api/api/#void-windowsettitleconst-string-title","text":"","title":"void Window::SetTitle(const String&amp; title);"},{"location":"api/api/#template-class-args-void-windowsettitleconst-args-args","text":"title: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb args: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u6539\u884c\u306f\u7121\u8996\u3055\u308c\u3001\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"template &lt;class... Args&gt; void Window::SetTitle(const Args&amp;... args);"},{"location":"api/api/#const-string-windowgettitle","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const String&amp; Window::GetTitle();"},{"location":"api/api/#windowstate-windowgetstate","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"WindowState Window::GetState();"},{"location":"api/api/#void-windowsetstylewindowstyle-style","text":"style: \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"void Window::SetStyle(WindowStyle style);"},{"location":"api/api/#windowstyle-windowgetstyle","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"WindowStyle Window::GetStyle();"},{"location":"api/api/#size-windowclientsize","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Size Window::ClientSize();"},{"location":"api/api/#point-windowclientcenter","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u304a\u3051\u308b\u4e2d\u5fc3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Window::ClientCenter();"},{"location":"api/api/#int32-windowclientwidth","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Window::ClientWidth();"},{"location":"api/api/#int32-windowclientheight","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Window::ClientHeight();"},{"location":"api/api/#void-windowsetposconst-point-pos","text":"","title":"void Window::SetPos(const Point&amp; pos);"},{"location":"api/api/#void-windowsetposint32-x-int32-y","text":"pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 x, y: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"void Window::SetPos(int32 x, int32 y);"},{"location":"api/api/#void-windowcentering","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"void Window::Centering();"},{"location":"api/api/#bool-windowresizeconst-size-size-windowresizeoption-option-windowresizeoptionresizescenesize-bool-centering-true","text":"","title":"bool Window::Resize(const Size&amp; size, WindowResizeOption option = WindowResizeOption::ResizeSceneSize, bool centering = true);"},{"location":"api/api/#bool-windowresizeint32-width-int32-height-windowresizeoption-option-windowresizeoptionresizescenesize-bool-centering-true","text":"size: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 width, height: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 centering: \u30b5\u30a4\u30ba\u5909\u66f4\u5f8c\u306b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u308b\u304b\u306e\u30d5\u30e9\u30b0 \u623b\u308a\u5024: \u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 WindowResizeOption :: ResizeSceneSize \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3055\u308c\u307e\u3059\u3002","title":"bool Window::Resize(int32 width, int32 height, WindowResizeOption option = WindowResizeOption::ResizeSceneSize, bool centering = true);"},{"location":"api/api/#void-windowmaximize","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316\u3057\u307e\u3059\u3002","title":"void Window::Maximize();"},{"location":"api/api/#void-windowrestore","text":"\u6700\u5927\u30fb\u6700\u5c0f\u5316\u3055\u308c\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5143\u306e\u30b5\u30a4\u30ba\u306b\u623b\u3057\u307e\u3059\u3002","title":"void Window::Restore();"},{"location":"api/api/#void-windowminimize","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3057\u307e\u3059\u3002","title":"void Window::Minimize();"},{"location":"api/api/#bool-windowsetfullscreenbool-fullscreen-const-optionalsize-fullscreenresolution-unspecified-windowresizeoption-option-windowresizeoptionresizescenesize","text":"fullscreen: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false , \u30a6\u30a3\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false fullscreenResolution: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002 fullscreenResolution \u306b\u306f unspecified \u304b Graphics :: GetFullscreenResolutions () \u306b\u542b\u307e\u308c\u308b\u5024\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u969b\u3001 fullscreenResolution \u306b unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u89e3\u50cf\u5ea6\uff08\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u9069\u7528\u5f8c\uff09\u306e\u30b5\u30a4\u30ba\u3067\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\u3002 unspecified \u306f\u5207\u308a\u66ff\u3048\u304c\u65e9\u304f\u5805\u7262\u3067\u3059\u3002","title":"bool Window::SetFullscreen(bool fullscreen, const Optional&lt;Size&gt;&amp; fullscreenResolution = unspecified, WindowResizeOption option = WindowResizeOption::ResizeSceneSize);"},{"location":"api/api/#_7","text":"","title":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u95a2\u9023\u306e\u5b9a\u6570"},{"location":"api/api/#enum-class-cursorstyle","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3057\u307e\u3059\u3002","title":"enum class CursorStyle"},{"location":"api/api/#cursorstylearrow","text":"\u901a\u5e38\u306e\u77e2\u5370\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::Arrow"},{"location":"api/api/#cursorstyleibeam","text":"\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u6642\u306b\u4f7f\u3046 I \u306e\u5f62\u3092\u3057\u305f\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::IBeam"},{"location":"api/api/#cursorstylecross","text":"\u5341\u5b57\u578b\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::Cross"},{"location":"api/api/#cursorstylehand","text":"\u4eba\u5dee\u3057\u6307\u3092\u4f38\u3070\u3057\u305f\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::Hand"},{"location":"api/api/#cursorstylenotallowed","text":"\u7981\u6b62\u30de\u30fc\u30af\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::NotAllowed"},{"location":"api/api/#cursorstyleresizeupdown","text":"\u4e0a\u4e0b\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::ResizeUpDown"},{"location":"api/api/#cursorstyleresizeleftright","text":"\u5de6\u53f3\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::ResizeLeftRight"},{"location":"api/api/#cursorstylehidden","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u307e\u3059\u3002","title":"CursorStyle::Hidden"},{"location":"api/api/#cursorstyledefault-arrow","text":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f CursorStyle :: Arrow \u3067\u3059\u3002","title":"CursorStyle::Default = Arrow"},{"location":"api/api/#namespace-cursor","text":"","title":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u540d\u524d\u7a7a\u9593 (namespace Cursor)"},{"location":"api/api/#_8","text":"","title":"\u95a2\u6570"},{"location":"api/api/#point-cursorpos","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::Pos();"},{"location":"api/api/#point-cursorpreviouspos","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PreviousPos();"},{"location":"api/api/#point-cursordelta","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: Pos () - Cursor :: PreviousPos () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Point Cursor::Delta();"},{"location":"api/api/#vec2-cursorposf","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"Vec2 Cursor::PosF();"},{"location":"api/api/#vec2-cursorpreviousposf","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"Vec2 Cursor::PreviousPosF();"},{"location":"api/api/#vec2-cursordeltaf","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosF () - Cursor :: PreviousPosF () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Vec2 Cursor::DeltaF();"},{"location":"api/api/#point-cursorposraw","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PosRaw();"},{"location":"api/api/#point-cursorpreviousposraw","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PreviousPosRaw();"},{"location":"api/api/#point-cursordeltaraw","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosRaw () - Cursor :: PreviousPosRaw () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Point Cursor::DeltaRaw();"},{"location":"api/api/#point-cursorscreenpos","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::ScreenPos();"},{"location":"api/api/#point-cursorpreviousscreenpos","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PreviousScreenPos();"},{"location":"api/api/#point-cursorscreendelta","text":"\u623b\u308a\u5024: \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: ScreenPos () - Cursor :: PreviousScreenPos () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Point Cursor::ScreenDelta();"},{"location":"api/api/#arraystdpairpoint-uint64-cursorgetbuffer","text":"\u623b\u308a\u5024: \u76f4\u8fd1 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u53e4\u3044\u9806\u306b\u4e26\u3079\u305f\u914d\u5217 \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u904e\u53bb 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3068\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u7248\u306b\u9650\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4ee5\u4e0a\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Array&lt;std::pair&lt;Point, uint64&gt;&gt; Cursor::GetBuffer();"},{"location":"api/api/#void-cursorsetposint32-x-int32-y","text":"","title":"void Cursor::SetPos(int32 x, int32 y);"},{"location":"api/api/#void-cursorsetposconst-point-pos","text":"x: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 X \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) y: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 Y \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) pos: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"void Cursor::SetPos(const Point&amp; pos);"},{"location":"api/api/#bool-cursoronclientrect","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool Cursor::OnClientRect();"},{"location":"api/api/#const-mat3x2-cursorgetlocaltransform","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Cursor::GetLocalTransform();"},{"location":"api/api/#const-mat3x2-cursorgetcameratransform","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Cursor::GetCameraTransform();"},{"location":"api/api/#void-cursorcliptowindowbool-clip","text":"clip: \u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u6709\u5411\u306b\u3059\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f false \u3067\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u9593\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"void Cursor::ClipToWindow(bool clip);"},{"location":"api/api/#void-cursorrequeststylecursorstyle-style","text":"style: \u5909\u66f4\u5f8c\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002","title":"void Cursor::RequestStyle(CursorStyle style);"},{"location":"api/api/#void-cursorsetdefaultstylecursorstyle-style","text":"style: \u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u8a2d\u5b9a\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb Cursor :: RequestStyle () \u3092\u547c\u3070\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u9069\u7528\u3055\u308c\u308b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f CursorStyle :: Default \u3067\u3059\u3002","title":"void Cursor::SetDefaultStyle(CursorStyle style);"},{"location":"api/api/#cursorstyle-cursorgetrequestedstyle","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7121\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"CursorStyle Cursor::GetRequestedStyle();"},{"location":"api/api/#cursorstyle-cursorgetdefaultstyle","text":"\u623b\u308a\u5024: \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"CursorStyle Cursor::GetDefaultStyle();"},{"location":"api/api/#namespace-time","text":"","title":"\u6642\u9593\u540d\u524d\u7a7a\u9593 (namespace Time)"},{"location":"api/api/#_9","text":"","title":"\u95a2\u6570"},{"location":"api/api/#uint64-timegetsec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetSec();"},{"location":"api/api/#uint64-timegetmillisec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMillisec();"},{"location":"api/api/#uint64-timegetmicrosec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMicrosec();"},{"location":"api/api/#uint64-timegetnanosec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30ca\u30ce\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetNanosec();"},{"location":"api/api/#uint64-timegetsecsinceepoch","text":"\u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u79d2\u6570 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetSecSinceEpoch();"},{"location":"api/api/#uint64-timegetmillisecsinceepoch","text":"\u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMillisecSinceEpoch();"},{"location":"api/api/#uint64-timegetmicrosecsinceepoch","text":"\u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMicrosecSinceEpoch();"},{"location":"api/api/#int32-timeutcoffsetminutes","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\uff08\u5206\uff09 \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\u3092\u5206\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Time::UTCOffsetMinutes();"},{"location":"api/api/#_10","text":"","title":"\u6587\u5b57\u306b\u95a2\u3059\u308b\u6a5f\u80fd"},{"location":"api/api/#_11","text":"","title":"\u95a2\u6570"},{"location":"api/api/#bool-isasciichar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: ASCII \u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c ASCII \u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsASCII(char32 ch);"},{"location":"api/api/#bool-isdigitchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: 10 \u9032\u6570\u306e\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 10 \u9032\u6570\u306e\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsDigit(char32 ch);"},{"location":"api/api/#bool-islowerchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsLower(char32 ch);"},{"location":"api/api/#bool-isupperchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsUpper(char32 ch);"},{"location":"api/api/#char32-tolowerchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5c0f\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u306e\u5834\u5408\u3001\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"char32 ToLower(char32 ch);"},{"location":"api/api/#char32-toupperchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5927\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u306e\u5834\u5408\u3001\u5927\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"char32 ToUpper(char32 ch);"},{"location":"api/api/#bool-isalphachar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsAlpha(char32 ch);"},{"location":"api/api/#bool-isalnumchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3082\u3057\u304f\u306f\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3082\u3057\u304f\u306f\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsAlnum(char32 ch);"},{"location":"api/api/#bool-isxdigitchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57 (0\uff5e9, A\uff5eF, a\uff5ef) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsXdigit(char32 ch);"},{"location":"api/api/#bool-iscontrolchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u5236\u5fa1\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5236\u5fa1\u6587\u5b57 (0x00\uff5e0x1F, 0x7F\uff5e0x9F) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsControl(char32 ch);"},{"location":"api/api/#bool-isblankchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsBlank(char32 ch);"},{"location":"api/api/#bool-isspacechar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u985e\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u985e\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9, '\\n' , '\\v' , '\\f' , '\\r' ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsSpace(char32 ch);"},{"location":"api/api/#bool-isprintchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsPrint(char32 ch);"},{"location":"api/api/#bool-caseinsensitiveequalschar32-a-char32-b","text":"a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3066\u3001\u7b49\u3057\u3044\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 a , b \u304c\u7b49\u3057\u3044\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3055\u308c\u3001 's' \u3068 'S' \u306f\u7b49\u3057\u3044\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002","title":"bool CaseInsensitiveEquals(char32 a, char32 b);"},{"location":"api/api/#int32-caseinsensitivecomparechar32-a-char32-b","text":"a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3001 a \u304c b \u3088\u308a\u5c0f\u3055\u3044\u5834\u5408 - 1 , \u7b49\u3057\u3044\u5834\u5408 0 , \u5927\u304d\u3044\u5834\u5408 1 \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u3092\u7121\u8996\u3057\u3066\u6587\u5b57 a , b \u3092\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 CaseInsensitiveCompare(char32 a, char32 b);"},{"location":"api/api/#2d-namespace-graphics2d","text":"","title":"2D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics2D)"},{"location":"api/api/#_12","text":"","title":"\u95a2\u6570"},{"location":"api/api/#colorf-graphics2dgetcolormul","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u4e57\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u4e57\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 1 , 1 , 1 , 1 ) \u3067\u3059\u3002","title":"ColorF Graphics2D::GetColorMul();"},{"location":"api/api/#colorf-graphics2dgetcoloradd","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u52a0\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u52a0\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002","title":"ColorF Graphics2D::GetColorAdd();"},{"location":"api/api/#blendstate-graphics2dgetblendstate","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f BlendState :: Default \u3067\u3059\u3002","title":"BlendState Graphics2D::GetBlendState();"},{"location":"api/api/#rasterizerstate-graphics2dgetrasterizerstate","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f RasterizerState :: Default2D \u3067\u3059\u3002","title":"RasterizerState Graphics2D::GetRasterizerState();"},{"location":"api/api/#void-graphics2dsetsamplerstateuint32-slot-const-samplerstate-samplerstate","text":"slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) samplerState: \u8a2d\u5b9a\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\u30020 \u756a\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f ScopedRenderStates2D \u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002","title":"void Graphics2D::SetSamplerState(uint32 slot, const SamplerState&amp; samplerState);"},{"location":"api/api/#samplerstate-graphics2dgetsamplerstateuint32-slot-0","text":"slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) \u623b\u308a\u5024: \u73fe\u5728\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 \u6307\u5b9a\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3067\u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002","title":"SamplerState Graphics2D::GetSamplerState(uint32 slot = 0);"},{"location":"api/api/#optionalrect-graphics2dgetviewport","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;Rect&gt; Graphics2D::GetViewport();"},{"location":"api/api/#optionalpixelshader-graphics2dgetcustompixelshader","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;PixelShader&gt; Graphics2D::GetCustomPixelShader();"},{"location":"api/api/#optionalrendertexture-graphics2dgetrendertarget","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3. \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;RenderTexture&gt; Graphics2D::GetRenderTarget();"},{"location":"api/api/#void-graphics2dsetscissorrectconst-rect-rect","text":"rect: \u30b7\u30b6\u30fc\u77e9\u5f62 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 RasterizerState \u3067\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u6709\u52b9\u306b\u3057\u305f\u5834\u5408\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002","title":"void Graphics2D::SetScissorRect(const Rect&amp; rect);"},{"location":"api/api/#rect-graphics2dgetscissorrect","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30b7\u30b6\u30fc\u77e9\u5f62 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Rect ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002","title":"Rect Graphics2D::GetScissorRect();"},{"location":"api/api/#void-graphics2dsetlocaltransformconst-mat3x2-transform","text":"transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f Transformer2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002","title":"void Graphics2D::SetLocalTransform(const Mat3x2&amp; transform);"},{"location":"api/api/#const-mat3x2-graphics2dgetlocaltransform","text":"\u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Graphics2D::GetLocalTransform();"},{"location":"api/api/#void-graphics2dsetcameratransformconst-mat3x2-transform","text":"transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f BasicCamera2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002","title":"void Graphics2D::SetCameraTransform(const Mat3x2&amp; transform);"},{"location":"api/api/#const-mat3x2-graphics2dgetcameratransform","text":"\u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Graphics2D::GetCameraTransform();"},{"location":"api/api/#double-graphics2dgetmaxscaling","text":"\u623b\u308a\u5024: 2D \u63cf\u753b\u306e\u6700\u5927\u62e1\u5927\u500d\u7387 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u7528\u3044\u3066\u76f4\u5f84 1 \u306e\u5186\u3092\u63cf\u3044\u305f\u3068\u304d\u306b\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u307e\u305f\u306f\u6955\u5186\u306e\u6700\u5927\u306e\u5f84\u3092\u8fd4\u3057\u307e\u3059\u3002\u3069\u306e\u3088\u3046\u306a\u5ea7\u6a19\u5909\u63db\u884c\u5217\u306b\u304a\u3044\u3066\u3082\u7dda\u5206\u3092\u540c\u3058\u592a\u3055\u3067\u63cf\u753b\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u623b\u308a\u5024\u306e\u5024\u304c\u4f7f\u3048\u307e\u3059\u3002","title":"double Graphics2D::GetMaxScaling();"},{"location":"api/api/#size-graphics2dgetrendertargetsize","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u89e3\u50cf\u5ea6 \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3082\u3057\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Size Graphics2D::GetRenderTargetSize();"},{"location":"api/api/#void-graphics2dsetsdfparametersdouble-pixelrange-double-offset-00","text":"","title":"void Graphics2D::SetSDFParameters(double pixelRange, double offset = 0.0);"},{"location":"api/api/#void-graphics2dsetsdfparameterscosnt-float4-parameters","text":"pixelRange: \u4f7f\u7528\u3059\u308b SDF \u30d5\u30a9\u30f3\u30c8\u306e SDFFont :: pixelRange () \u306e\u5024 offset: SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u306e\u95be\u5024\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 parameters: SDF \u30d5\u30a9\u30f3\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc SDF \u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002","title":"void Graphics2D::SetSDFParameters(cosnt Float4&amp; parameters);"},{"location":"api/api/#float4-graphics2dgetsdfparameters","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u73fe\u5728 SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002","title":"Float4 Graphics2D::GetSDFParameters();"},{"location":"api/api/#void-graphics2dsettextureuint32-slot-const-optionaltexture-texture","text":"slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) texture: \u30c6\u30af\u30b9\u30c1\u30e3 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u3092 .draw () \u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b9\u30ed\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002","title":"void Graphics2D::SetTexture(uint32 slot, const Optional&lt;Texture&gt;&amp; texture);"},{"location":"api/api/#void-graphics2dflush","text":"\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f 2D \u63cf\u753b\u95a2\u9023\u306e\u547d\u4ee4\u3092\u3059\u3079\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 .draw () \u3084 Graphics2D :: \uff5e \u306b\u3088\u308b 2D \u63cf\u753b\u547d\u4ee4\u306f\u3001\u51e6\u7406\u306e\u52b9\u7387\u5316\u306e\u305f\u3081\u306b\u4e00\u65e6\u30a8\u30f3\u30b8\u30f3\u5185\u3067\u30b9\u30c8\u30c3\u30af\u3055\u308c\u3001\u547d\u4ee4\u304c\u96c6\u7d04\u3055\u308c\u3066\u304b\u3089 System :: Update () \u5185\u3067\u4e00\u6589\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 RenderTexture \u306e\u4e2d\u8eab\u3092 .read () \u3067\u8aad\u307f\u51fa\u3059\u5834\u5408\u3084 MSRenderTexture \u3092 .resolve () \u3059\u308b\u969b\u306b\u3001\u5b9f\u969b\u306b\u306f\u63cf\u753b\u304c\u306a\u3055\u308c\u3066\u3044\u306a\u3044\u30b1\u30fc\u30b9\u304c\u751f\u3058\u307e\u3059\u3002\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"void Graphics2D::Flush();"},{"location":"api/api/#template-class-type-void-graphics2dsetconstantbuffershaderstage-stage-uint32-index-const-constantbuffertype-buffer","text":"stage: \u5bfe\u8c61\u306e\u30b7\u30a7\u30fc\u30c0 index: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e13) buffer: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30c7\u30fc\u30bf 2D \u63cf\u753b\u306e\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u3067\u7528\u3044\u308b\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u5909\u66f4\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"template &lt;class Type&gt; void Graphics2D::SetConstantBuffer(ShaderStage stage, uint32 index, const ConstantBuffer&lt;Type&gt;&amp; buffer);"},{"location":"api/api/#namespace-graphics","text":"","title":"\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics)"},{"location":"api/api/#_13","text":"","title":"\u95a2\u6570"},{"location":"api/api/#void-graphicsskipclearscreen","text":"\u3053\u306e\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u958b\u59cb\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u63cf\u753b\u5185\u5bb9\u3092\u80cc\u666f\u8272\u3067\u30af\u30ea\u30a2\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"void Graphics::SkipClearScreen();"},{"location":"api/api/#arraydisplayoutput-graphicsenumoutputs","text":"\u623b\u308a\u5024: \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7 \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;DisplayOutput&gt; Graphics::EnumOutputs();"},{"location":"api/api/#arraysize-graphicsgetfullscreenresolutionsdouble-minrefreshrate-490","text":"minRefreshRate: \u8981\u6c42\u3059\u308b\u6700\u4f4e\u9650\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7 \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u304c minRefreshRate (Hz) \u4ee5\u4e0a\u3067\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;Size&gt; Graphics::GetFullscreenResolutions(double minRefreshRate = 49.0);"},{"location":"api/api/#void-graphicssettargetframeratehzconst-optionaldouble-targetframeratehz","text":"targetFrameRateHz: \u8a2d\u5b9a\u3059\u308b\u6700\u5927\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (Hz) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 none \u3092\u6e21\u3059\u3068 vSync \u304c\u6709\u52b9\u306b\u306a\u308a\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8a2d\u5b9a\u306b\u6cbf\u3063\u305f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u6027\u80fd\u306b\u3088\u3063\u3066\u306f\u3001\u5b9f\u6e2c\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u3001\u3053\u306e\u95a2\u6570\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u4e0b\u56de\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"void Graphics::SetTargetFrameRateHz(const Optional&lt;double&gt;&amp; targetFrameRateHz);"},{"location":"api/api/#optionaldouble-graphicsgettargetframeratehz","text":"\u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none Graphics :: SetTargetFrameRateHz () \u3067\u8a2d\u5b9a\u3057\u305f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002","title":"Optional&lt;double&gt; Graphics::GetTargetFrameRateHz();"},{"location":"api/api/#double-graphicsgetdisplayrefreshratehz","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double Graphics::GetDisplayRefreshRateHz();"},{"location":"api/api/#double-graphicsgetdpiscaling","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e DPI \u62e1\u5927\u7387 (\u500d) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u5bfe\u3057\u3066\u30e6\u30fc\u30b6\u304c\u30b7\u30b9\u30c6\u30e0\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b DPI \u62e1\u5927\u7387\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double Graphics::GetDPIScaling();"},{"location":"api/api/#struct-displaymode","text":"","title":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30fc\u30c9\u69cb\u9020\u4f53 (struct DisplayMode)"},{"location":"api/api/#_14","text":"","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"api/api/#size-size","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u89e3\u50cf\u5ea6\uff08\u30d4\u30af\u30bb\u30eb\uff09","title":"Size size;"},{"location":"api/api/#double-refreshratehz","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz)","title":"double refreshRateHz;"},{"location":"api/api/#struct-displayoutput","text":"","title":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u69cb\u9020\u4f53 (struct DisplayOutput)"},{"location":"api/api/#_15","text":"","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"api/api/#string-name","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u540d\u79f0","title":"String name;"},{"location":"api/api/#rect-displayrect","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u4eee\u60f3\u5ea7\u6a19","title":"Rect displayRect;"},{"location":"api/api/#arraydisplaymode-displaymodes","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u8868\u793a\u30e2\u30fc\u30c9\u306e\u4e00\u89a7","title":"Array&lt;DisplayMode&gt; displayModes;"},{"location":"api/api/#gui-namespace-simplegui","text":"","title":"GUI \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc (namespace SimpleGUI)"},{"location":"api/api/#_16","text":"","title":"\u95a2\u6570"},{"location":"api/api/#rectf-simpleguiheadlineregionconst-string-text-const-vec2-pos-const-optionaldouble-width-unspecified","text":"text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u898b\u51fa\u3057\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::HeadlineRegion(const String&amp; text, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#void-simpleguiheadlineconst-string-text-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u63cf\u753b\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"void SimpleGUI::Headline(const String&amp; text, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#rectf-simpleguibuttonregionconst-string-label-const-vec2-pos-const-optionaldouble-width-unspecified","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::ButtonRegion(const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#rectf-simpleguibuttonregionatconst-string-label-const-vec2-center-const-optionaldouble-width-unspecified","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::ButtonRegionAt(const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#bool-simpleguibuttonconst-string-label-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 widht: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::Button(const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#bool-simpleguibuttonatconst-string-label-const-vec2-center-const-optionaldouble-width-unspecified-bool-enabled-true","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::ButtonAt(const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#rectf-simpleguisliderregionconst-vec2-pos-double-labelwidth-800-double-sliderwidth-1200","text":"pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::SliderRegion(const Vec2&amp; pos, double labelWidth = 80.0, double sliderWidth = 120.0);"},{"location":"api/api/#rectf-simpleguisliderregionatconst-vec2-center-double-labelwidth-800-double-sliderwidth-1200","text":"center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::SliderRegionAt(const Vec2&amp; center, double labelWidth = 80.0, double sliderWidth = 120.0);"},{"location":"api/api/#bool-simpleguisliderdouble-value-const-vec2-pos-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::Slider(double&amp; value, const Vec2&amp; pos, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguisliderdouble-value-double-min-double-max-const-vec2-pos-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::Slider(double&amp; value, double min, double max, const Vec2&amp; pos, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguisliderconst-string-label-double-value-const-vec2-pos-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::Slider(const String&amp; label, double&amp; value, const Vec2&amp; pos, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguisliderconst-string-label-double-value-double-min-double-max-const-vec2-pos-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::Slider(const String&amp; label, double&amp; value, double min, double max, const Vec2&amp; pos, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguislideratdouble-value-const-vec2-center-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::SliderAt(double&amp; value, const Vec2&amp; center, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguislideratdouble-value-double-min-double-max-const-vec2-center-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::SliderAt(double&amp; value, double min, double max, const Vec2&amp; center, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguislideratconst-string-label-double-value-const-vec2-center-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::SliderAt(const String&amp; label, double&amp; value, const Vec2&amp; center, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguislideratconst-string-label-double-value-double-min-double-max-const-vec2-center-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::SliderAt(const String&amp; label, double&amp; value, double min, double max, const Vec2&amp; center, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"api/api/#rectf-simpleguiverticalsliderregionconst-vec2-pos-double-sliderheight-1200","text":"pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::VerticalSliderRegion(const Vec2&amp; pos, double sliderHeight = 120.0);"},{"location":"api/api/#rectf-simpleguiverticalsliderregionatconst-vec2-center-double-sliderheight-1200","text":"center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::VerticalSliderRegionAt(const Vec2&amp; center, double sliderHeight = 120.0);"},{"location":"api/api/#bool-simpleguiverticalsliderdouble-value-const-vec2-pos-double-sliderheight-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::VerticalSlider(double&amp; value, const Vec2&amp; pos, double sliderHeight = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguiverticalsliderdouble-value-double-min-double-max-const-vec2-pos-double-sliderheight-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::VerticalSlider(double&amp; value, double min, double max, const Vec2&amp; pos, double sliderHeight = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguiverticalslideratdouble-value-const-vec2-center-double-sliderheight-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::VerticalSliderAt(double&amp; value, const Vec2&amp; center, double sliderHeight = 120.0, bool enabled = true);"},{"location":"api/api/#bool-simpleguiverticalslideratdouble-value-double-min-double-max-const-vec2-center-double-sliderheight-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::VerticalSliderAt(double&amp; value, double min, double max, const Vec2&amp; center, double sliderHeight = 120.0, bool enabled = true);"},{"location":"api/api/#rectf-simpleguicheckboxregionconst-string-label-const-vec2-pos-const-optionaldouble-width-unspecified","text":"label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::CheckBoxRegion(const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#rectf-simpleguicheckboxregionatconst-string-label-const-vec2-center-const-optionaldouble-width-unspecified","text":"label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::CheckBoxRegionAt(const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#bool-checkboxbool-checked-const-string-label-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool CheckBox(bool&amp; checked, const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#bool-simpleguicheckboxatbool-checked-const-string-label-const-vec2-center-const-optionaldouble-width-unspecified-bool-enabled-true","text":"checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool SimpleGUI::CheckBoxAt(bool&amp; checked, const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#rectf-simpleguiradiobuttonsregionconst-arraystring-options-const-vec2-pos-const-optionaldouble-width-unspecified","text":"options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::RadioButtonsRegion(const Array&lt;String&gt;&amp; options, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#rectf-simpleguiradiobuttonsregionatconst-arraystring-options-const-vec2-center-const-optionaldouble-width-unspecified","text":"options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::RadioButtonsRegionAt(const Array&lt;String&gt;&amp; options, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"api/api/#bool-simpleguiradiobuttonssize_t-index-const-arraystring-options-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool SimpleGUI::RadioButtons(size_t&amp; index, const Array&lt;String&gt;&amp; options, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#bool-simpleguiradiobuttonsatsize_t-index-const-arraystring-options-const-vec2-center-const-optionaldouble-width-unspecified-bool-enabled-true","text":"index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool SimpleGUI::RadioButtonsAt(size_t&amp; index, const Array&lt;String&gt;&amp; options, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"api/api/#rectf-simpleguitextboxregionconst-vec2-pos-double-width-2000","text":"pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::TextBoxRegion(const Vec2&amp; pos, double width = 200.0);"},{"location":"api/api/#rectf-simpleguitextboxregionatconst-vec2-center-double-width-2000","text":"center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::TextBoxRegionAt(const Vec2&amp; center, double width = 200.0);"},{"location":"api/api/#bool-simpleguitextboxtexteditstate-text-const-vec2-pos-double-width-2000-const-optionalsize_t-maxchars-unspecified-bool-enabled-true","text":"text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"bool SimpleGUI::TextBox(TextEditState&amp; text, const Vec2&amp; pos, double width = 200.0, const Optional&lt;size_t&gt;&amp; maxChars = unspecified, bool enabled = true);"},{"location":"api/api/#bool-simpleguitextboxattexteditstate-text-const-vec2-center-double-width-2000-const-optionalsize_t-maxchars-unspecified-bool-enabled-true","text":"text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"bool SimpleGUI::TextBoxAt(TextEditState&amp; text, const Vec2&amp; center, double width = 200.0, const Optional&lt;size_t&gt;&amp; maxChars = unspecified, bool enabled = true);"},{"location":"api/api/#rectf-simpleguicolorpickerregionconst-vec2-pos","text":"pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::ColorPickerRegion(const Vec2&amp; pos);"},{"location":"api/api/#rectf-simpleguicolorpickerregionatconst-vec2-center","text":"center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::ColorPickerRegionAt(const Vec2&amp; center);"},{"location":"api/api/#bool-simpleguicolorpickerhsv-hsv-const-vec2-pos-bool-enabled-true","text":"hsv: \u64cd\u4f5c\u3059\u308b\u8272 pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::ColorPicker(HSV&amp; hsv, const Vec2&amp; pos, bool enabled = true);"},{"location":"api/api/#bool-colorpickerathsv-hsv-const-vec2-center-bool-enabled-true","text":"hsv: \u64cd\u4f5c\u3059\u308b\u8272 center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool ColorPickerAt(HSV&amp; hsv, const Vec2&amp; center, bool enabled = true);"},{"location":"api/api/#struct-texteditstate","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306a\u3069\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u3059\u308b\u969b\u306b\u4f7f\u3046\u60c5\u5831\u3067\u3059\u3002","title":"\u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53 (struct TextEditState)"},{"location":"api/api/#_17","text":"","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"api/api/#string-text","text":"\u5165\u529b\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8","title":"String text;"},{"location":"api/api/#size_t-cursorpos-0","text":"\u5165\u529b\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e","title":"size_t cursorPos = 0;"},{"location":"api/api/#bool-active-false","text":"\u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b","title":"bool active = false;"},{"location":"api/api/#stopwatch-leftpressstopwatch","text":"\u30ab\u30fc\u30bd\u30eb\u306e\u5de6\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09","title":"Stopwatch leftPressStopwatch;"},{"location":"api/api/#stopwatch-rightpressstopwatch","text":"\u30ab\u30fc\u30bd\u30eb\u306e\u53f3\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09","title":"Stopwatch rightPressStopwatch;"},{"location":"api/api/#stopwatch-cursorstopwatch","text":"\u5165\u529b\u30ab\u30fc\u30bd\u30eb\u306e\u70b9\u6ec5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09","title":"Stopwatch cursorStopwatch;"},{"location":"api/api/#_18","text":"","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"api/api/#texteditstate-default","text":"","title":"TextEditState() = default();"},{"location":"api/api/#texteditstateconst-string-defaulttext","text":"defaultText: \u521d\u671f\u30c6\u30ad\u30b9\u30c8 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002","title":"TextEditState(const String&amp; defaultText);"},{"location":"api/api/#_19","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"api/api/#void-clear","text":"\u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831\u3092\u3059\u3079\u3066\u30af\u30ea\u30a2\u3057\u3001\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u306b\u3057\u307e\u3059\u3002","title":"void clear();"},{"location":"api/api/#class-stopwatch","text":"\u7d4c\u904e\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002","title":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u30af\u30e9\u30b9 (class Stopwatch)"},{"location":"api/api/#_20","text":"","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"api/api/#stopwatchbool-startimmediately-false","text":"","title":"Stopwatch(bool startImmediately = false);"},{"location":"api/api/#stopwatchconst-duration-time-bool-startimmediately-false","text":"startImmediately: \u6642\u9593\u306e\u8a08\u6e2c\u3092\u76f4\u3061\u306b\u958b\u59cb\u3059\u308b\u304b\u306e\u30d5\u30e9\u30b0 time: \u6700\u521d\u306b\u9032\u3081\u3066\u304a\u304f\u6642\u9593 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 startImmediately \u304c true \u306e\u5834\u5408\u306f\u4f5c\u6210\u3068\u540c\u6642\u306b\u6642\u9593\u306e\u8a08\u6e2c\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002","title":"Stopwatch(const Duration&amp; time, bool startImmediately = false);"},{"location":"api/api/#_21","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"api/api/#void-start","text":"\u6642\u9593\u306e\u8a08\u6e2c\u3092\u958b\u59cb\u307e\u305f\u306f\u518d\u958b\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u8a08\u6e2c\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"void start();"},{"location":"api/api/#int32-d","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 d();"},{"location":"api/api/#int64-d64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 d64();"},{"location":"api/api/#double-df","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300251 \u6642\u9593\u306e\u5834\u5408\u306f 2 . 125 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double dF();"},{"location":"api/api/#int32-h","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 h();"},{"location":"api/api/#int64-h64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 h64();"},{"location":"api/api/#double-hf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300240 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 . 5 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double hF();"},{"location":"api/api/#int32-min","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 min();"},{"location":"api/api/#int64-min64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 min64();"},{"location":"api/api/#double-minf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30022 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double minF();"},{"location":"api/api/#int32-s","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 s();"},{"location":"api/api/#int64-s64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 s64();"},{"location":"api/api/#double-sf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30023 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double sF();"},{"location":"api/api/#int32-ms","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 ms();"},{"location":"api/api/#int64-ms64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 ms64();"},{"location":"api/api/#double-msf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30029123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 . 4 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double msF();"},{"location":"api/api/#int64-us","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 us();"},{"location":"api/api/#int64-us64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 us64();"},{"location":"api/api/#double-usf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30025678.9 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 5678 . 9 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double usF();"},{"location":"api/api/#duration-elapsed","text":"\u623b\u308a\u5024: \u7d4c\u904e\u6642\u9593 ( Duration \u578b) \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092 Duration \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"Duration elapsed();"},{"location":"api/api/#bool-isstarted","text":"\u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool isStarted();"},{"location":"api/api/#bool-ispaused","text":"\u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool isPaused();"},{"location":"api/api/#bool-isrunning","text":"\u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u306a\u304a\u304b\u3064\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u306a\u3044\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool isRunning();"},{"location":"api/api/#void-pause","text":"\u6642\u9593\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u3059\u3067\u306b\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"void pause();"},{"location":"api/api/#void-resume","text":"\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u518d\u3073\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u307e\u3059\u3002\u4e00\u6642\u505c\u6b62\u4e2d\u51fa\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"void resume();"},{"location":"api/api/#void-reset","text":"\u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u307e\u3059\u3002","title":"void reset();"},{"location":"api/api/#void-restart","text":"\u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u3001\u518d\u5ea6\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002","title":"void restart();"},{"location":"api/api/#void-setconst-duration-time","text":"time: \u8a2d\u5b9a\u3059\u308b\u6642\u9593 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"void set(const Duration&amp; time);"},{"location":"api/api/#string-formatstringview-format-uhmmssxx_sv","text":"format: \u6642\u523b\u306e\u8868\u73fe\u65b9\u6cd5 \u623b\u308a\u5024: \u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u305f\u6642\u523b \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002","title":"String format(StringView format = U&quot;H:mm:ss.xx&quot;_sv);"},{"location":"api/api/#_22","text":"","title":"\u975e\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time","text":"","title":"bool operator &lt;(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time_1","text":"","title":"bool operator &lt;=(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time_2","text":"","title":"bool operator &gt;(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time_3","text":"","title":"bool operator &gt;=(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s","text":"","title":"bool operator &lt;(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s_1","text":"","title":"bool operator &lt;=(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s_2","text":"","title":"bool operator &gt;(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s_3","text":"s: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 time: \u6bd4\u8f03\u3059\u308b\u6642\u9593 \u623b\u308a\u5024: \u6bd4\u8f03\u306e\u7d50\u679c \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3067\u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u3001\u5225\u306e\u6642\u9593\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002","title":"bool operator &gt;=(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"api/api/#void-formatterformatdata-formatdata-const-stopwatch-value","text":"formatData: \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c7\u30fc\u30bf\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u307e\u3059\u3002\u5909\u63db\u306b\u306f Stopwatch :: format () \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002","title":"void Formatter(FormatData&amp; formatData, const Stopwatch&amp; value);"},{"location":"api/api/#template-class-chartype-stdbasic_ostreamchartype-operator-stdbasic_ostreamchartype-output-const-stopwatch-value","text":"output: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u623b\u308a\u5024: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002","title":"template &lt;class CharType&gt; std::basic_ostream&lt;CharType&gt;&amp; operator &lt;&lt;(std::basic_ostream&lt;CharType&gt; output, const Stopwatch&amp; value);"},{"location":"api/api/#_23","text":"","title":"\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u95a2\u9023\u306e\u5b9a\u6570"},{"location":"api/api/#enum-class-openmode","text":"\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u307f\u7528\u9014\u3067\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 BinaryWriter , TextWriter \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002","title":"enum class OpenMode"},{"location":"api/api/#openmodetrunc","text":"\u53e4\u3044\u5185\u5bb9\u3092\u7834\u68c4\u3057\u3001\u30b5\u30a4\u30ba\u3092\u30bc\u30ed\u306b\u3057\u305f\u72b6\u614b\u304b\u3089\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002","title":"OpenMode::Trunc"},{"location":"api/api/#openmodeappend","text":"\u53e4\u3044\u5185\u5bb9\u3092\u4fdd\u6301\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u65b0\u3057\u304f\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002","title":"OpenMode::Append"},{"location":"api/api/#enum-class-copyoption","text":"\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 FileSystem :: Copy () \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002","title":"enum class CopyOption"},{"location":"api/api/#copyoptionnone","text":"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3092\u5931\u6557\u3055\u305b\u3001\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"CopyOption::None"},{"location":"api/api/#copyoptionskipexisting","text":"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u305a\u306b\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002","title":"CopyOption::SkipExisting"},{"location":"api/api/#copyoptionoverwriteexisting","text":"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002","title":"CopyOption::OverwriteExisting"},{"location":"api/api/#copyoptionupdateexisting","text":"\u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3088\u308a\u3082\u65b0\u3057\u3051\u308c\u3070\u4e0a\u66f8\u304d\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002","title":"CopyOption::UpdateExisting"},{"location":"api/api/#copyoptiondefault-none","text":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b3\u30d4\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3001 CopyOption :: None \u3067\u3059\u3002","title":"CopyOption::Default = None"},{"location":"api/api/#enum-class-specialfolder","text":"\u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3057\u307e\u3059\u3002","title":"enum class SpecialFolder"},{"location":"api/api/#specialfolderdesktop","text":"\u30e6\u30fc\u30b6\u306e\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Desktop"},{"location":"api/api/#specialfolderdocuments","text":"\u30e6\u30fc\u30b6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Documents"},{"location":"api/api/#specialfolderlocalappdata","text":"\u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"SpecialFolder::LocalAppData"},{"location":"api/api/#specialfolderpictures","text":"\u30e6\u30fc\u30b6\u306e\u30d4\u30af\u30c1\u30e3\u30fc\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Pictures"},{"location":"api/api/#specialfoldermusic","text":"\u30e6\u30fc\u30b6\u306e\u30df\u30e5\u30fc\u30b8\u30c3\u30af\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Music"},{"location":"api/api/#specialfoldervideos","text":"\u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Videos"},{"location":"api/api/#specialfoldercaches-localappdata","text":"\u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 SpecialFolder :: LocalAppData \u306e\u5225\u540d\u3067\u3059\u3002","title":"SpecialFolder::Caches = LocalAppData"},{"location":"api/api/#specialfoldermovies-videos","text":"\u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Movies \u306e\u5225\u540d\u3067\u3059\u3002","title":"SpecialFolder::Movies = Videos"},{"location":"api/api/#specialfoldersystemfonts","text":"\u30b7\u30b9\u30c6\u30e0\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / System / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002","title":"SpecialFolder::SystemFonts"},{"location":"api/api/#specialfolderlocalfonts","text":"\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002","title":"SpecialFolder::LocalFonts"},{"location":"api/api/#specialfolderuserfonts","text":"\u30e6\u30fc\u30b6\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f ~/ Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002","title":"SpecialFolder::UserFonts"},{"location":"api/api/#namespace-filesystem","text":"","title":"\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace FileSystem)"},{"location":"api/api/#_24","text":"","title":"\u95a2\u6570"},{"location":"api/api/#bool-filesystemexistsfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::Exists(FilePathView path);"},{"location":"api/api/#bool-filesystemisdirectoryfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsDirectory(FilePathView path);"},{"location":"api/api/#bool-filesystemisfilefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsFile(FilePathView path);"},{"location":"api/api/#bool-filesystemisresourcefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u307f (Windows) \u307e\u305f\u306f\u30d0\u30f3\u30c9\u30eb (macOS) \u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059\u3002Linux \u3067\u306f / resources / \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30ea\u30bd\u30fc\u30b9\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002","title":"bool FileSystem::IsResource(FilePathView path);"},{"location":"api/api/#filepath-filesystemfullpathfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u7d76\u5bfe\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5834\u5408\u306f\u672b\u5c3e\u304c / \u306b\u306a\u308a\u307e\u3059\u3002","title":"FilePath FileSystem::FullPath(FilePathView path);"},{"location":"api/api/#platformnativefilepath-filesystemnativepathfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30cd\u30a4\u30c6\u30a3\u30d6\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u3001OS \u30cd\u30a4\u30c6\u30a3\u30d6\u8868\u73fe\u3067\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Platform::NativeFilePath FileSystem::NativePath(FilePathView path);"},{"location":"api/api/#string-filesystemextensionfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e .\u3092\u542b\u307e\u306a\u3044\u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"png\"\uff09","title":"String FileSystem::Extension(FilePathView path);"},{"location":"api/api/#string-filesystemfilenamefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture.png\"\uff09","title":"String FileSystem::FileName(FilePathView path);"},{"location":"api/api/#string-filesystembasenamefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u62e1\u5f35\u5b50\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture\"\uff09","title":"String FileSystem::BaseName(FilePathView path);"},{"location":"api/api/#filepath-filesystemparentpathfilepathview-path-size_t-level-0-filepath-basefullpath-nullptr","text":"path: \u30d1\u30b9 level: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u968e\u5c64\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 0 baseFullPath: path \u306e\u7d76\u5bfe\u30d1\u30b9\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09 \u623b\u308a\u5024: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002\u89aa\u306e\u3055\u3089\u306b\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5f97\u305f\u3044\u5834\u5408\u306b\u306f level \u3092\u5897\u3084\u3057\u307e\u3059\u3002\u3061\u3087\u3046\u3069 1 \u3064\u4e0a\u4f4d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u57fa\u6e96\u306b 0 \u3067\u30011 \u305a\u3064\u5897\u3084\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::ParentPath(FilePathView path, size_t level = 0, FilePath* baseFullPath = nullptr);"},{"location":"api/api/#filepath-filesystemvolumepathfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"C:/\"\uff09","title":"FilePath FileSystem::VolumePath(FilePathView path);"},{"location":"api/api/#bool-filesystemisemptydirectoryfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsEmptyDirectory(FilePathView path);"},{"location":"api/api/#int64-filesystemsizefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 FileSystem::Size(FilePathView path);"},{"location":"api/api/#int64-filesystemfilesizefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 FileSystem::FileSize(FilePathView path);"},{"location":"api/api/#optionaldatetime-filesystemcreationtimefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u4f5c\u6210\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;DateTime&gt; FileSystem::CreationTime(FilePathView path);"},{"location":"api/api/#optionaldatetime-filesystemwritetimefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u66f4\u65b0\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u66f4\u65b0\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;DateTime&gt; FileSystem::WriteTime(FilePathView path);"},{"location":"api/api/#optionaldatetime-filesystemaccesstimefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;DateTime&gt; FileSystem::AccessTime(FilePathView path);"},{"location":"api/api/#arrayfilepath-filesystemdirectorycontentsconst-filepath-path-bool-recursive-true","text":"path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 recursive: \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u30d5\u30a9\u30eb\u30c0\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3001\u305d\u306e\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u518d\u5e30\u7684\u306b\u5217\u6319\u3059\u308b\u5834\u5408\u306f true \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7 \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;FilePath&gt; FileSystem::DirectoryContents(const FilePath&amp; path, bool recursive = true);"},{"location":"api/api/#const-filepath-filesysteminitialdirectory","text":"\u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const FilePath&amp; FileSystem::InitialDirectory();"},{"location":"api/api/#const-filepath-filesystemmodulepath","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9 \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const FilePath&amp; FileSystem::ModulePath();"},{"location":"api/api/#filepath-filesystemcurrentdirectory","text":"\u623b\u308a\u5024: \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::CurrentDirectory();"},{"location":"api/api/#bool-filesystemchangecurrentdirectoryfilepathview-path","text":"path: \u65b0\u3057\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"bool FileSystem::ChangeCurrentDirectory(FilePathView path);"},{"location":"api/api/#filepath-filesystemspecialfolderpathspecialfolder-folder","text":"folder: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u7a2e\u985e \u623b\u308a\u5024: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9 \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::SpecialFolderPath(SpecialFolder folder);"},{"location":"api/api/#filepath-filesystemtemporarydirectorypath","text":"\u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d1\u30b9\u306e\u672b\u5c3e\u306b\u306f '/' \u304c\u4ed8\u304d\u307e\u3059\u3002","title":"FilePath FileSystem::TemporaryDirectoryPath();"},{"location":"api/api/#filepath-filesystemuniquefilepathfilepathview-directory-temporarydirectorypath","text":"directory: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u56fa\u6709\u306a\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f \".tmp\" \u3067\u3059\u3002","title":"FilePath FileSystem::UniqueFilePath(FilePathView directory = TemporaryDirectoryPath());"},{"location":"api/api/#filepath-filesystemrelativepathfilepathview-path-filepathview-start-filesystemcurrentdirectory","text":"path: \u30d1\u30b9 start: \u76f8\u5bfe\u30d1\u30b9\u306e\u57fa\u6e96\u4f4d\u7f6e \u623b\u308a\u5024: \u76f8\u5bfe\u30d1\u30b9 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u3092\u76f8\u5bfe\u30d1\u30b9\u306b\u5909\u63db\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::RelativePath(FilePathView path, FilePathView start = FileSystem::CurrentDirectory());"},{"location":"api/api/#bool-filesystemcreatedirectoriesfilepathview-path","text":"path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","title":"bool FileSystem::CreateDirectories(FilePathView path);"},{"location":"api/api/#bool-filesystemcreateparentdirectoriesfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u307e\u3067\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","title":"bool FileSystem::CreateParentDirectories(FilePathView path);"},{"location":"api/api/#bool-filesystemcopyfilepathview-from-filepathview-to-copyoption-copyoption-copyoptiondefault","text":"from: \u30b3\u30d4\u30fc\u3059\u308b\u30d1\u30b9 to: \u30b3\u30d4\u30fc\u5148\u306e\u30d1\u30b9 copyOption: \u540d\u524d\u885d\u7a81\u6642\u306e\u3075\u308b\u307e\u3044 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002","title":"bool FileSystem::Copy(FilePathView from, FilePathView to, CopyOption copyOption = CopyOption::Default);"},{"location":"api/api/#bool-filesystemremovefilepathview-path-bool-allowundo-false","text":"path: \u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u307e\u3059\u3002","title":"bool FileSystem::Remove(FilePathView path, bool allowUndo = false);"},{"location":"api/api/#bool-filesystemremovecontentsfilepathview-path-bool-allowundo-false","text":"path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3060\u3051\u3092\u524a\u9664\u3057\u307e\u3059\u3002","title":"bool FileSystem::RemoveContents(FilePathView path, bool allowUndo = false);"},{"location":"api/api/#bool-filesystemrenamefilepathview-from-filepathview-to","text":"from: \u5909\u66f4\u524d\u306e\u30d1\u30b9 to: \u5909\u66f4\u5f8c\u306e\u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u540d\u524d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"bool FileSystem::Rename(FilePathView from, FilePathView to);"},{"location":"api/api/#bool-filesystemissandboxed","text":"\u623b\u308a\u5024: macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u3084 Linux \u3067\u306f\u5e38\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsSandBoxed();"},{"location":"api/api/#_25","text":"","title":"\u30ad\u30fc\u5b9a\u6570"},{"location":"api/api/#_26","text":"","title":"\u30de\u30a6\u30b9\u30dc\u30bf\u30f3"},{"location":"api/api/#constexpr-key-mousel","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u3067\u3059\u3002","title":"constexpr Key MouseL;"},{"location":"api/api/#constexpr-key-mouser","text":"\u30de\u30a6\u30b9\u306e\u53f3\u30dc\u30bf\u30f3\u3067\u3059\u3002","title":"constexpr Key MouseR;"},{"location":"api/api/#constexpr-key-mousem","text":"\u30de\u30a6\u30b9\u306e\u4e2d\u592e\u30dc\u30bf\u30f3\u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseM;"},{"location":"api/api/#constexpr-key-mousex1","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 1 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX1;"},{"location":"api/api/#constexpr-key-mousex2","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 2 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX2;"},{"location":"api/api/#constexpr-key-mousex3","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 3 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX3;"},{"location":"api/api/#constexpr-key-mousex4","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 4 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX4;"},{"location":"api/api/#constexpr-key-mousex5","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 5 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX5;"},{"location":"api/api/#namespace-mouse","text":"","title":"\u30de\u30a6\u30b9\u540d\u524d\u7a7a\u9593 (namespace Mouse)"},{"location":"api/api/#_27","text":"","title":"\u95a2\u6570"},{"location":"api/api/#double-wheel","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double Wheel();"},{"location":"api/api/#double-wheelh","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double WheelH();"},{"location":"articles/mistakes/","text":"Mistakes made by new users \u00b6 \u521d\u5fc3\u8005\u7de8 \u00b6 Texture \u3092\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b \u00b6 Texture , Font , Audio \u30af\u30e9\u30b9\u306f\u3001\u53c2\u7167\u30ab\u30a6\u30f3\u30c8\u65b9\u5f0f\u3067\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4e00\u5ea6\u4f5c\u6210\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30d4\u30fc\u306f\u8efd\u91cf\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // OK: \u30b3\u30b9\u30c8\u7121\u3057\u3067\u30b3\u30d4\u30fc const Texture texture2 = texture ; while ( System :: Update ()) { texture2 . draw ( 0 , 0 ); } } \u307e\u305f\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u53c2\u7167\u30ab\u30a6\u30f3\u30bf\u304c 0 \u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u3001\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u304b\u3089\u89e3\u653e\u3059\u308b\u306e\u3067\u3001\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u7834\u68c4\u306e\u51e6\u7406\u3092\u660e\u793a\u7684\u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3002Siv3D \u306e\u30af\u30e9\u30b9\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u308f\u305a\u306b\u305d\u306e\u307e\u307e\u6271\u3046\u306e\u304c\u4f5c\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Texture * pTexture = new Texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 pTexture -> draw ( 0 , 0 ); } // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 delete pTexture ; } \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u5185\u3067\u91cd\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b \u00b6 Texture , Font , Audio \u3068\u3044\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3084\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306b\u975e\u5e38\u306b\u5927\u304d\u306a\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u3067\u7e70\u308a\u8fd4\u3057\u3053\u308c\u3089\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306e\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3001Siv3D \u306f\u5b9f\u884c\u4e2d\u306b\u8b66\u544a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u8aa4\u308a Texture ( U \"example/windmill.png\" ). draw ( 0 , 0 ); } } \u6b21\u306e\u3088\u3046\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210 const Texture texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } } \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528\u3059\u308b\u306e\u3082 OK \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); while ( System :: Update ()) { TextureAsset ( U \"Windmill\" ). draw ( 0 , 0 ); } } \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b \u00b6 \u6700\u8fd1\u306f 120Hz \u3084 144Hz \u306a\u3069\u3001\u9ad8\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306e\u30e2\u30cb\u30bf\u30fc\u304c\u5897\u3048\u3066\u3044\u307e\u3059\u3002\u300c\u6bce\u30d5\u30ec\u30fc\u30e0 3 \u30d4\u30af\u30bb\u30eb\u79fb\u52d5\u300d\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300160Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb\u3001120Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 360 \u30d4\u30af\u30bb\u30eb\u3068\u3001\u901f\u5ea6\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u66f8\u304d\u65b9\u306f\u907f\u3051\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002 Scene :: Delta () \u3084 Scene :: Time () , Stopwatch \u3092\u4f7f\u3063\u3066\u3001\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u304b\u3001 Effect , Transition , Periodic \u306e\u3088\u3046\u306b\u6642\u9593\u30d9\u30fc\u30b9\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u4f7f\u3063\u3066\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u5316\u3059\u308b\u3068\u5186\u306e\u79fb\u52d5\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // NG: \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u79fb\u52d5\u91cf const double speed = 3 ; // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= speed ; } if ( KeyRight . pressed ()) { pos . x += speed ; } if ( KeyUp . pressed ()) { pos . y -= speed ; } if ( KeyDown . pressed ()) { pos . y += speed ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } } \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f Scene :: Delta () \u306b\u5fdc\u3058\u3066\u79fb\u52d5\u91cf\u3092\u8abf\u6574\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3042\u3089\u3086\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3067\u3082\u4e00\u5b9a\u306e\u901f\u5ea6\u3092\u7dad\u6301\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // \u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb const double speed = 180.0 ; // ok: \u30d5\u30ec\u30fc\u30e0\u306e\u7d4c\u904e\u6642\u9593\u306b\u5fdc\u3058\u305f\u79fb\u52d5\u91cf const double delta = speed * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } } \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u8b66\u544a\u3092\u7121\u8996\u3059\u308b \u00b6 Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306e\u3044\u304f\u3064\u304b\u306f\u3001\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3057\u305f\u3068\u304d\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e9b\u7d30\u306a\u8b66\u544a\u306e\u7121\u8996\u3092\u7d9a\u3051\u3066\u3044\u308b\u3068\u3001\u3053\u3046\u3057\u305f\u8b66\u544a\u306b\u3088\u3063\u3066\u767a\u898b\u3067\u304d\u308b\u30d0\u30b0\u3092\u898b\u904e\u3054\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002Siv3D \u3067\u306f\u3001\u30e6\u30fc\u30b6\u306e\u30b3\u30fc\u30c9\u306b\u7531\u6765\u3059\u308b\u8b66\u544a\u3092\u4e00\u5207\u51fa\u3055\u305a\u306b\u3001\u975e\u5e38\u306b\u5927\u304d\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u8b66\u544a\u306a\u3057\u3092\u76ee\u6307\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u306e\u3067\u5bb9\u6613\u306b\u767a\u898b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Circle circle ( 200 , 300 , 40 ); while ( System :: Update ()) { if ( MouseL . down ()) { // moveBy \u3068\u9593\u9055\u3048\u3066 movedBy \u3092\u4f7f\u3063\u3066\u3044\u308b circle . movedBy ( 20 , 0 ); } circle . draw (); } } \u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5207\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u306a\u3044 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u3067\u306f App \u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b example / windmill . png \u3082\u3053\u3053\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u81ea\u5206\u3067\u7528\u610f\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3044\u3068\u304d\u306f\u3001 App \u30d5\u30a9\u30eb\u30c0\u306b\u914d\u7f6e\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // App \u30d5\u30a9\u30eb\u30c0\u306bmy-picture.png \u3092\u914d\u7f6e\u3057\u305f\u5834\u5408 const Texture texture ( U \"my-picture.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } } \u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u7de8 \u00b6 Texture \u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u4f7f\u3046 \u00b6 Texture , Font , Audio \u306f\u3001Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u3042\u3068\u306b\u4f5c\u6210\u3055\u308c\u3001Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u524d\u306b\u7834\u68c4\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Main () \u95a2\u6570\u306e\u4e2d\u3084\u3001\u305d\u3053\u3067\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3067\u3042\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u306f Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u305f\u308a\u3001\u7d42\u4e86\u51e6\u7406\u5f8c\u306b\u7834\u68c4\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u524d\u8005\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u306e\u4f7f\u7528\u3092\u907f\u3051\u3001\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // NG: Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u308b\u306e\u3067\u5b9f\u884c\u6642\u30a8\u30e9\u30fc Texture global_texture ( U \"example/windmill.png\" ); void Draw () { // \u975e\u63a8\u5968: Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u3042\u3068\u306b\u7834\u68c4\u3055\u308c\u308b static Texture static_texture ( U \"example/windmill.png\" ); static_texture . draw ( 0 , 0 ); } void Main () { while ( System :: Update ()) { } } \u7e2e\u5c0f\u8868\u793a\u3059\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092 TextureDesc :: Mipped \u6307\u5b9a\u3057\u306a\u3044 \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3057\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f TextureDesc :: Mipped \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u7e2e\u5c0f\u63cf\u753b\u3057\u305f\u3068\u304d\u306b\u753b\u8cea\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u304b\u3089 Texture \u3092\u4f5c\u308b\u969b\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8a18\u8ff0\u306f\u4e0d\u8981\u3067\u3059\u3002 \u30b3\u30fc\u30c9\u5168\u822c\u7de8 \u00b6 \u4e0d\u5fc5\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b \u00b6 < Siv3D . hpp > \u306f < cmath > \u3084 < array > , < algorithm > \u306a\u3069\u3001\u3088\u304f\u4f7f\u308f\u308c\u308b C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3059\u3067\u306b\u5185\u90e8\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002C++ \u6a19\u6e96\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u6642\u306b\u3060\u3051\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308c\u3070 OK \u3067\u3059\u3002\u4f8b\u3068\u3057\u3066 std :: any \u3092\u4f7f\u3046\u306b\u306f < any > , std :: variant \u3092\u4f7f\u3046\u306b\u306f < variant > \u3092\u8ffd\u52a0\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 std :: vector \u3084 std :: string \u3092\u4f7f\u3046 \u00b6 std :: vector \u3084 std :: string \u3092\u4f7f\u3046\u3068\u3001Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3068\u9023\u4fc2\u3059\u308b\u3068\u304d\u306b\u5909\u63db\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u304c\u7c21\u5358\u306a\u95a2\u6570\u3067\u5b9f\u73fe\u3067\u304d\u306a\u3044\u305f\u3081\u975e\u52b9\u7387\u3067\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u52d5\u7684\u914d\u5217\u306b Array , \u6587\u5b57\u5217\u306b\u306f String \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u9759\u7684\u306a\u914d\u5217\u306b\u306f std :: array \u3092\u4f7f\u3044\u307e\u3059\u3002 \u5186\u5468\u7387\u3092\u65b0\u3057\u304f\u5b9a\u7fa9\u3059\u308b \u00b6 Siv3D \u3067\u306f\u3001\u5186\u5468\u7387\u306f Math :: Pi , 2\u03c0 \u306f Math :: TwoPi \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 1 _pi \u3084 2 _pi , 0 . 5 _pi \u306e\u3088\u3046\u306b _pi \u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3046\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7de8 \u00b6 Siv3D \u306e\u95a2\u6570\u3092\u4e0d\u5fc5\u8981\u306b\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059 \u00b6 Scene :: Delta () \u3084 Cursor :: Pos () \u306f\u540c\u4e00\u30d5\u30ec\u30fc\u30e0\u5185\u3067\u306f\u3064\u306d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u8efd\u91cf\u306a\u95a2\u6570\u306a\u306e\u3067\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u306f\u5927\u304d\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059\u306e\u306f\u7121\u99c4\u3067\u3059\u3002\u3053\u3046\u3057\u305f\u95a2\u6570\u3092\u8907\u6570\u56de\u547c\u3093\u3067\u3044\u308b\u5834\u5408\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067\u5024\u3092\u5909\u6570\u306b\u4ee3\u5165\u3057\u3001\u305d\u308c\u3092\u518d\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u6e1b\u3089\u3057\u3001\u6700\u5927\u9650\u306e\u5b9f\u884c\u6642\u6027\u80fd\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 Scene :: Time () \u306e\u547c\u3073\u51fa\u3057\u304c\u4e0d\u5fc5\u8981\u306b\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { // Scene::Time() \u304c\u6bce\u30d5\u30ec\u30fc\u30e0 100 \u56de\u5b9f\u884c\u3055\u308c\u308b Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , Scene :: Time () * 30 _deg ). draw (); } } } } \u6b21\u306e\u3088\u3046\u306b\u3001\u5909\u6570\u306b\u4ee3\u5165\u3057\u3066\u304a\u304f\u3068\u547c\u3073\u51fa\u3057\u306e\u56de\u6570\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // Scene::Time() \u306e\u547c\u3073\u51fa\u3057\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 1 \u56de const double t = Scene :: Time (); for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , t * 30 _deg ). draw (); } } } } \u305d\u306e\u4ed6\u7de8 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092 Unicode \u4ee5\u5916\u306e\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b \u00b6 Unicode \u5f62\u5f0f\u4ee5\u5916\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u306f\u6b63\u3057\u304f\u5185\u5bb9\u304c\u8aad\u307f\u8fbc\u3081\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f Unicode \u3078\u306e\u5909\u63db\u3067\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3082\u304b\u304b\u308a\u307e\u3059\u3002UTF-8 \u306a\u3069\u3001Unicode \u5f62\u5f0f\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u306a\u304a\u3001Siv3D \u3067\u306f BOM \u7121\u3057\u306e UTF-8 \u3088\u308a\u3082 BOM \u4ed8\u304d\u306e UTF-8 \u5f62\u5f0f\u306e\u307b\u3046\u304c\u3001\u8aad\u307f\u8fbc\u307f\u306e\u901f\u5ea6\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002","title":"Mistakes made by new users"},{"location":"articles/mistakes/#mistakes-made-by-new-users","text":"","title":"Mistakes made by new users"},{"location":"articles/mistakes/#_1","text":"","title":"\u521d\u5fc3\u8005\u7de8"},{"location":"articles/mistakes/#texture","text":"Texture , Font , Audio \u30af\u30e9\u30b9\u306f\u3001\u53c2\u7167\u30ab\u30a6\u30f3\u30c8\u65b9\u5f0f\u3067\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4e00\u5ea6\u4f5c\u6210\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30d4\u30fc\u306f\u8efd\u91cf\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // OK: \u30b3\u30b9\u30c8\u7121\u3057\u3067\u30b3\u30d4\u30fc const Texture texture2 = texture ; while ( System :: Update ()) { texture2 . draw ( 0 , 0 ); } } \u307e\u305f\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u53c2\u7167\u30ab\u30a6\u30f3\u30bf\u304c 0 \u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u3001\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u304b\u3089\u89e3\u653e\u3059\u308b\u306e\u3067\u3001\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u7834\u68c4\u306e\u51e6\u7406\u3092\u660e\u793a\u7684\u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3002Siv3D \u306e\u30af\u30e9\u30b9\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u308f\u305a\u306b\u305d\u306e\u307e\u307e\u6271\u3046\u306e\u304c\u4f5c\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Texture * pTexture = new Texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 pTexture -> draw ( 0 , 0 ); } // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 delete pTexture ; }","title":"Texture \u3092\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b"},{"location":"articles/mistakes/#_2","text":"Texture , Font , Audio \u3068\u3044\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3084\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306b\u975e\u5e38\u306b\u5927\u304d\u306a\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u3067\u7e70\u308a\u8fd4\u3057\u3053\u308c\u3089\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306e\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3001Siv3D \u306f\u5b9f\u884c\u4e2d\u306b\u8b66\u544a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u8aa4\u308a Texture ( U \"example/windmill.png\" ). draw ( 0 , 0 ); } } \u6b21\u306e\u3088\u3046\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210 const Texture texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } } \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528\u3059\u308b\u306e\u3082 OK \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); while ( System :: Update ()) { TextureAsset ( U \"Windmill\" ). draw ( 0 , 0 ); } }","title":"\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u5185\u3067\u91cd\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b"},{"location":"articles/mistakes/#_3","text":"\u6700\u8fd1\u306f 120Hz \u3084 144Hz \u306a\u3069\u3001\u9ad8\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306e\u30e2\u30cb\u30bf\u30fc\u304c\u5897\u3048\u3066\u3044\u307e\u3059\u3002\u300c\u6bce\u30d5\u30ec\u30fc\u30e0 3 \u30d4\u30af\u30bb\u30eb\u79fb\u52d5\u300d\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300160Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb\u3001120Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 360 \u30d4\u30af\u30bb\u30eb\u3068\u3001\u901f\u5ea6\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u66f8\u304d\u65b9\u306f\u907f\u3051\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002 Scene :: Delta () \u3084 Scene :: Time () , Stopwatch \u3092\u4f7f\u3063\u3066\u3001\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u304b\u3001 Effect , Transition , Periodic \u306e\u3088\u3046\u306b\u6642\u9593\u30d9\u30fc\u30b9\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u4f7f\u3063\u3066\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u5316\u3059\u308b\u3068\u5186\u306e\u79fb\u52d5\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // NG: \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u79fb\u52d5\u91cf const double speed = 3 ; // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= speed ; } if ( KeyRight . pressed ()) { pos . x += speed ; } if ( KeyUp . pressed ()) { pos . y -= speed ; } if ( KeyDown . pressed ()) { pos . y += speed ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } } \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f Scene :: Delta () \u306b\u5fdc\u3058\u3066\u79fb\u52d5\u91cf\u3092\u8abf\u6574\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3042\u3089\u3086\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3067\u3082\u4e00\u5b9a\u306e\u901f\u5ea6\u3092\u7dad\u6301\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // \u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb const double speed = 180.0 ; // ok: \u30d5\u30ec\u30fc\u30e0\u306e\u7d4c\u904e\u6642\u9593\u306b\u5fdc\u3058\u305f\u79fb\u52d5\u91cf const double delta = speed * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } }","title":"\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b"},{"location":"articles/mistakes/#_4","text":"Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306e\u3044\u304f\u3064\u304b\u306f\u3001\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3057\u305f\u3068\u304d\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e9b\u7d30\u306a\u8b66\u544a\u306e\u7121\u8996\u3092\u7d9a\u3051\u3066\u3044\u308b\u3068\u3001\u3053\u3046\u3057\u305f\u8b66\u544a\u306b\u3088\u3063\u3066\u767a\u898b\u3067\u304d\u308b\u30d0\u30b0\u3092\u898b\u904e\u3054\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002Siv3D \u3067\u306f\u3001\u30e6\u30fc\u30b6\u306e\u30b3\u30fc\u30c9\u306b\u7531\u6765\u3059\u308b\u8b66\u544a\u3092\u4e00\u5207\u51fa\u3055\u305a\u306b\u3001\u975e\u5e38\u306b\u5927\u304d\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u8b66\u544a\u306a\u3057\u3092\u76ee\u6307\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u306e\u3067\u5bb9\u6613\u306b\u767a\u898b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Circle circle ( 200 , 300 , 40 ); while ( System :: Update ()) { if ( MouseL . down ()) { // moveBy \u3068\u9593\u9055\u3048\u3066 movedBy \u3092\u4f7f\u3063\u3066\u3044\u308b circle . movedBy ( 20 , 0 ); } circle . draw (); } }","title":"\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u8b66\u544a\u3092\u7121\u8996\u3059\u308b"},{"location":"articles/mistakes/#_5","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u3067\u306f App \u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b example / windmill . png \u3082\u3053\u3053\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u81ea\u5206\u3067\u7528\u610f\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3044\u3068\u304d\u306f\u3001 App \u30d5\u30a9\u30eb\u30c0\u306b\u914d\u7f6e\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // App \u30d5\u30a9\u30eb\u30c0\u306bmy-picture.png \u3092\u914d\u7f6e\u3057\u305f\u5834\u5408 const Texture texture ( U \"my-picture.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } }","title":"\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5207\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u306a\u3044"},{"location":"articles/mistakes/#_6","text":"","title":"\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u7de8"},{"location":"articles/mistakes/#texture-static","text":"Texture , Font , Audio \u306f\u3001Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u3042\u3068\u306b\u4f5c\u6210\u3055\u308c\u3001Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u524d\u306b\u7834\u68c4\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Main () \u95a2\u6570\u306e\u4e2d\u3084\u3001\u305d\u3053\u3067\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3067\u3042\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u306f Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u305f\u308a\u3001\u7d42\u4e86\u51e6\u7406\u5f8c\u306b\u7834\u68c4\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u524d\u8005\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u306e\u4f7f\u7528\u3092\u907f\u3051\u3001\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // NG: Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u308b\u306e\u3067\u5b9f\u884c\u6642\u30a8\u30e9\u30fc Texture global_texture ( U \"example/windmill.png\" ); void Draw () { // \u975e\u63a8\u5968: Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u3042\u3068\u306b\u7834\u68c4\u3055\u308c\u308b static Texture static_texture ( U \"example/windmill.png\" ); static_texture . draw ( 0 , 0 ); } void Main () { while ( System :: Update ()) { } }","title":"Texture \u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u4f7f\u3046"},{"location":"articles/mistakes/#texturedescmipped","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3057\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f TextureDesc :: Mipped \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u7e2e\u5c0f\u63cf\u753b\u3057\u305f\u3068\u304d\u306b\u753b\u8cea\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u304b\u3089 Texture \u3092\u4f5c\u308b\u969b\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8a18\u8ff0\u306f\u4e0d\u8981\u3067\u3059\u3002","title":"\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092 TextureDesc::Mipped \u6307\u5b9a\u3057\u306a\u3044"},{"location":"articles/mistakes/#_7","text":"","title":"\u30b3\u30fc\u30c9\u5168\u822c\u7de8"},{"location":"articles/mistakes/#c","text":"< Siv3D . hpp > \u306f < cmath > \u3084 < array > , < algorithm > \u306a\u3069\u3001\u3088\u304f\u4f7f\u308f\u308c\u308b C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3059\u3067\u306b\u5185\u90e8\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002C++ \u6a19\u6e96\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u6642\u306b\u3060\u3051\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308c\u3070 OK \u3067\u3059\u3002\u4f8b\u3068\u3057\u3066 std :: any \u3092\u4f7f\u3046\u306b\u306f < any > , std :: variant \u3092\u4f7f\u3046\u306b\u306f < variant > \u3092\u8ffd\u52a0\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002","title":"\u4e0d\u5fc5\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b"},{"location":"articles/mistakes/#stdvector-stdstring","text":"std :: vector \u3084 std :: string \u3092\u4f7f\u3046\u3068\u3001Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3068\u9023\u4fc2\u3059\u308b\u3068\u304d\u306b\u5909\u63db\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u304c\u7c21\u5358\u306a\u95a2\u6570\u3067\u5b9f\u73fe\u3067\u304d\u306a\u3044\u305f\u3081\u975e\u52b9\u7387\u3067\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u52d5\u7684\u914d\u5217\u306b Array , \u6587\u5b57\u5217\u306b\u306f String \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u9759\u7684\u306a\u914d\u5217\u306b\u306f std :: array \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"std::vector \u3084 std::string \u3092\u4f7f\u3046"},{"location":"articles/mistakes/#_8","text":"Siv3D \u3067\u306f\u3001\u5186\u5468\u7387\u306f Math :: Pi , 2\u03c0 \u306f Math :: TwoPi \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 1 _pi \u3084 2 _pi , 0 . 5 _pi \u306e\u3088\u3046\u306b _pi \u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3046\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002","title":"\u5186\u5468\u7387\u3092\u65b0\u3057\u304f\u5b9a\u7fa9\u3059\u308b"},{"location":"articles/mistakes/#_9","text":"","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7de8"},{"location":"articles/mistakes/#siv3d","text":"Scene :: Delta () \u3084 Cursor :: Pos () \u306f\u540c\u4e00\u30d5\u30ec\u30fc\u30e0\u5185\u3067\u306f\u3064\u306d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u8efd\u91cf\u306a\u95a2\u6570\u306a\u306e\u3067\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u306f\u5927\u304d\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059\u306e\u306f\u7121\u99c4\u3067\u3059\u3002\u3053\u3046\u3057\u305f\u95a2\u6570\u3092\u8907\u6570\u56de\u547c\u3093\u3067\u3044\u308b\u5834\u5408\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067\u5024\u3092\u5909\u6570\u306b\u4ee3\u5165\u3057\u3001\u305d\u308c\u3092\u518d\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u6e1b\u3089\u3057\u3001\u6700\u5927\u9650\u306e\u5b9f\u884c\u6642\u6027\u80fd\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 Scene :: Time () \u306e\u547c\u3073\u51fa\u3057\u304c\u4e0d\u5fc5\u8981\u306b\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { // Scene::Time() \u304c\u6bce\u30d5\u30ec\u30fc\u30e0 100 \u56de\u5b9f\u884c\u3055\u308c\u308b Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , Scene :: Time () * 30 _deg ). draw (); } } } } \u6b21\u306e\u3088\u3046\u306b\u3001\u5909\u6570\u306b\u4ee3\u5165\u3057\u3066\u304a\u304f\u3068\u547c\u3073\u51fa\u3057\u306e\u56de\u6570\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // Scene::Time() \u306e\u547c\u3073\u51fa\u3057\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 1 \u56de const double t = Scene :: Time (); for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , t * 30 _deg ). draw (); } } } }","title":"Siv3D \u306e\u95a2\u6570\u3092\u4e0d\u5fc5\u8981\u306b\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059"},{"location":"articles/mistakes/#_10","text":"","title":"\u305d\u306e\u4ed6\u7de8"},{"location":"articles/mistakes/#unicode","text":"Unicode \u5f62\u5f0f\u4ee5\u5916\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u306f\u6b63\u3057\u304f\u5185\u5bb9\u304c\u8aad\u307f\u8fbc\u3081\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f Unicode \u3078\u306e\u5909\u63db\u3067\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3082\u304b\u304b\u308a\u307e\u3059\u3002UTF-8 \u306a\u3069\u3001Unicode \u5f62\u5f0f\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u306a\u304a\u3001Siv3D \u3067\u306f BOM \u7121\u3057\u306e UTF-8 \u3088\u308a\u3082 BOM \u4ed8\u304d\u306e UTF-8 \u5f62\u5f0f\u306e\u307b\u3046\u304c\u3001\u8aad\u307f\u8fbc\u307f\u306e\u901f\u5ea6\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092 Unicode \u4ee5\u5916\u306e\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b"},{"location":"community/community/","text":"Community \u00b6 Siv3D User Slack \u00b6 Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u306f\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002 Join Siv3D Slack (invitation link) \u3000 Twitter \u00b6 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 # Siv3D \u3084 # OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D on Twitter @Siv3D @Reputeless GitHub Issues \u00b6 \u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues BBS \u00b6 Siv3D BBS","title":"Community"},{"location":"community/community/#community","text":"","title":"Community"},{"location":"community/community/#siv3d-user-slack","text":"Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u306f\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002 Join Siv3D Slack (invitation link)","title":"Siv3D User Slack"},{"location":"community/community/#twitter","text":"\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 # Siv3D \u3084 # OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D on Twitter @Siv3D @Reputeless","title":"Twitter"},{"location":"community/community/#github-issues","text":"\u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues","title":"GitHub Issues"},{"location":"community/community/#bbs","text":"Siv3D BBS","title":"BBS"},{"location":"community/dev-day/","text":"OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 OpenSiv3D \u5b9f\u88c5\u4f1a\u3068\u306f\uff1f \u00b6 OpenSiv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u5b9f\u88c5\u4f1a\u306e\u69d8\u5b50 (\u65e9\u7a32\u7530\u4f1a\u5834) \u4e3b\u306a\u6d3b\u52d5 \u00b6 \u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8 \u53c2\u52a0\u65b9\u6cd5\u306f\uff1f \u00b6 Siv3D Slack \u306b\u767b\u9332\u5f8c\u3001# open-siv3d \u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u52df\u96c6\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5bfe\u3057\u3066\u53c2\u52a0\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u307b\u304b\u3001\u5b9f\u88c5\u4f1a\u4f1a\u5834\u62c5\u5f53\u8005\u306e\u62db\u5f85\u3067\u3082\u53c2\u52a0\u3067\u304d\u307e\u3059 \u9060\u9694\u53c2\u52a0\u3067\u304d\u308b\uff1f \u00b6 \u4ee5\u4e0b\u306e\u65b9\u3092\u5bfe\u8c61\u306b\u3001Skype \u53c2\u52a0\u306e\u62db\u5f85\u3092\u9001\u3063\u3066\u3044\u307e\u3059 \u30b9\u30dd\u30f3\u30b5\u30fc \u4f5c\u54c1\u958b\u767a\u3084\u5b9f\u88c5\u3078\u306e\u8ca2\u732e\u5b9f\u7e3e\u304c\u9855\u8457\u3067\u306a\u304a\u304b\u3064\u73fe\u5730\u53c2\u52a0\u304c\u96e3\u3057\u3044\u65b9 \u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8 \u00b6 \u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u3053\u308c\u307e\u3067\u306e\u5b9f\u88c5\u4f1a \u00b6 \u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66","title":"Dev Day"},{"location":"community/dev-day/#opensiv3d","text":"","title":"OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"community/dev-day/#opensiv3d_1","text":"OpenSiv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u5b9f\u88c5\u4f1a\u306e\u69d8\u5b50 (\u65e9\u7a32\u7530\u4f1a\u5834)","title":"OpenSiv3D \u5b9f\u88c5\u4f1a\u3068\u306f\uff1f"},{"location":"community/dev-day/#_1","text":"\u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8","title":"\u4e3b\u306a\u6d3b\u52d5"},{"location":"community/dev-day/#_2","text":"Siv3D Slack \u306b\u767b\u9332\u5f8c\u3001# open-siv3d \u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u52df\u96c6\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5bfe\u3057\u3066\u53c2\u52a0\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u307b\u304b\u3001\u5b9f\u88c5\u4f1a\u4f1a\u5834\u62c5\u5f53\u8005\u306e\u62db\u5f85\u3067\u3082\u53c2\u52a0\u3067\u304d\u307e\u3059","title":"\u53c2\u52a0\u65b9\u6cd5\u306f\uff1f"},{"location":"community/dev-day/#_3","text":"\u4ee5\u4e0b\u306e\u65b9\u3092\u5bfe\u8c61\u306b\u3001Skype \u53c2\u52a0\u306e\u62db\u5f85\u3092\u9001\u3063\u3066\u3044\u307e\u3059 \u30b9\u30dd\u30f3\u30b5\u30fc \u4f5c\u54c1\u958b\u767a\u3084\u5b9f\u88c5\u3078\u306e\u8ca2\u732e\u5b9f\u7e3e\u304c\u9855\u8457\u3067\u306a\u304a\u304b\u3064\u73fe\u5730\u53c2\u52a0\u304c\u96e3\u3057\u3044\u65b9","title":"\u9060\u9694\u53c2\u52a0\u3067\u304d\u308b\uff1f"},{"location":"community/dev-day/#_4","text":"\u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8"},{"location":"community/dev-day/#_5","text":"\u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66","title":"\u3053\u308c\u307e\u3067\u306e\u5b9f\u88c5\u4f1a"},{"location":"external/external/","text":"Siv3D Advent Calendar \u00b6 2019 2018 2017 2016 2015 Siv3D \u30df\u30cb\u30b5\u30f3\u30d7\u30eb\u96c6 \u00b6 https://scrapbox.io/voidproc-siv3d-examples/Siv3D%E3%83%9F%E3%83%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E9%9B%86 @voidproc \u3055\u3093\u304c\u57f7\u7b46\u3055\u308c\u3066\u3044\u308b OpenSiv3D \u304a\u3088\u3073\u65e7 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u96c6\u3067\u3059\u3002","title":"External websites"},{"location":"external/external/#siv3d-advent-calendar","text":"2019 2018 2017 2016 2015","title":"Siv3D Advent Calendar"},{"location":"external/external/#siv3d","text":"https://scrapbox.io/voidproc-siv3d-examples/Siv3D%E3%83%9F%E3%83%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E9%9B%86 @voidproc \u3055\u3093\u304c\u57f7\u7b46\u3055\u308c\u3066\u3044\u308b OpenSiv3D \u304a\u3088\u3073\u65e7 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u96c6\u3067\u3059\u3002","title":"Siv3D \u30df\u30cb\u30b5\u30f3\u30d7\u30eb\u96c6"},{"location":"ja-jp/","text":"Siv3D: \u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u3092\u6c34\u8272\u306b\u3059\u308b Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u7528\u610f const Font font ( 60 ); // \u732b\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u732b\u306e\u5ea7\u6a19 Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u5927\u304d\u3055\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u732b\u3092\u8868\u793a\u3059\u308b cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 if ( KeyA . down ()) { // Hello \u3068\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3059\u308b Print << U \"Hello!\" ; } // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // \u732b\u306e\u5ea7\u6a19\u3092\u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b catPos = RandomVec2 ( Scene :: Rect ()); } } } Siv3D \u3092\u306f\u3058\u3081\u3088\u3046 \u00b6 \u5fc5\u8981\u306a\u74b0\u5883 \u00b6 Windows \u00b6 Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.3 Visual Studio Installer \u3067 C++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044 macOS \u00b6 macOS High Sierra v10.13 \u4ee5\u964d Xcode 10.1 \u4ee5\u964d Linux \u00b6 OpenSiv3D Linux \u7248\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30d3\u30eb\u30c9\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f Linux/README \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 OpenSiv3D SDK v0.4.2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 Windows \u00b6 OpenSiv3D Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 Note OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 macOS \u00b6 OpenSiv3D Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059\u3002 \uff08macOS Catalina \u306e\u5834\u5408\uff09\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u3001 \u30e6\u30fc\u30b6 / \u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 \u30e6\u30fc\u30b6 / \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 \u30e6\u30fc\u30b6 / \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\u3078\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 OpenSiv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9 \u00b6 Windows \u00b6 Visual Studio 2019 \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3001 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u9032\u307f\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e00\u89a7\u306e\u4e2d\u304b\u3089 OpenSiv3D(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3) \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5165\u529b\u3057\u305f\u8a2d\u5b9a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 macOS \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) \u3092 Xcode \u3067\u958b\u304d\u307e\u3059\u3002 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 \uff08macOS Catalina \u306e\u5834\u5408\uff09\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u5168\u4f53\u3092\u3001 \u30e6\u30fc\u30b6 / \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\u4ee5\u4e0b\u3078\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002 \ud83d\udc97 \u30b9\u30dd\u30f3\u30b5\u30fc \u00b6 sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara (\u533f\u540d \ud83d\ude00)","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#siv3d-c","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u3092\u6c34\u8272\u306b\u3059\u308b Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u7528\u610f const Font font ( 60 ); // \u732b\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u732b\u306e\u5ea7\u6a19 Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u5927\u304d\u3055\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u732b\u3092\u8868\u793a\u3059\u308b cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 if ( KeyA . down ()) { // Hello \u3068\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3059\u308b Print << U \"Hello!\" ; } // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // \u732b\u306e\u5ea7\u6a19\u3092\u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b catPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Siv3D: \u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"ja-jp/#siv3d","text":"","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#_1","text":"","title":"\u5fc5\u8981\u306a\u74b0\u5883"},{"location":"ja-jp/#windows","text":"Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.3 Visual Studio Installer \u3067 C++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044","title":"Windows"},{"location":"ja-jp/#macos","text":"macOS High Sierra v10.13 \u4ee5\u964d Xcode 10.1 \u4ee5\u964d","title":"macOS"},{"location":"ja-jp/#linux","text":"OpenSiv3D Linux \u7248\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30d3\u30eb\u30c9\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f Linux/README \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Linux"},{"location":"ja-jp/#opensiv3d-sdk-v042","text":"","title":"OpenSiv3D SDK v0.4.2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ja-jp/#windows_1","text":"OpenSiv3D Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 Note OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"Windows"},{"location":"ja-jp/#macos_1","text":"OpenSiv3D Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059\u3002 \uff08macOS Catalina \u306e\u5834\u5408\uff09\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u3001 \u30e6\u30fc\u30b6 / \u30c7\u30b9\u30af\u30c8\u30c3\u30d7 \u3084 \u30e6\u30fc\u30b6 / \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u3067\u306f\u306a\u304f\u3001 \u30e6\u30fc\u30b6 / \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\u3078\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"macOS"},{"location":"ja-jp/#opensiv3d","text":"","title":"OpenSiv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9"},{"location":"ja-jp/#windows_2","text":"Visual Studio 2019 \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3001 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u9032\u307f\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e00\u89a7\u306e\u4e2d\u304b\u3089 OpenSiv3D(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3) \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5165\u529b\u3057\u305f\u8a2d\u5b9a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"Windows"},{"location":"ja-jp/#macos_2","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) \u3092 Xcode \u3067\u958b\u304d\u307e\u3059\u3002 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 \uff08macOS Catalina \u306e\u5834\u5408\uff09\u30d5\u30a1\u30a4\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u5168\u4f53\u3092\u3001 \u30e6\u30fc\u30b6 / \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30a9\u30eb\u30c0\u4ee5\u4e0b\u3078\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002","title":"macOS"},{"location":"ja-jp/#_2","text":"sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara (\u533f\u540d \ud83d\ude00)","title":"\ud83d\udc97 \u30b9\u30dd\u30f3\u30b5\u30fc"},{"location":"ja-jp/api/api/","text":"\u30b7\u30fc\u30f3\u95a2\u9023\u306e\u5b9a\u6570 \u00b6 enum class ScaleMode \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3067\u3059\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u95a2\u6570\u3067 WindowResizeOption :: UseDefaultScaleMode \u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\u306b\u3082\u53c2\u7167\u3055\u308c\u307e\u3059\u3002 ScaleMode :: ResizeFill \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u30b7\u30fc\u30f3\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002 ScaleMode :: AspectFit \u00b6 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u3067\u3001\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u7dad\u6301\u3057\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u63cf\u753b\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u540d\u524d\u7a7a\u9593 (namespace Scene) \u00b6 \u5b9a\u6570 \u00b6 constexpr Size Scene :: DefaultSceneSize = Window :: DefaultClientSize ; \u00b6 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 constexpr ScaleMode Scene :: DefaultScaleMode = ScaleMode :: AspectFit ; \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 constexpr TextureFilter Scene :: DefaultFilter = TextureFilter :: Linear ; \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 constexpr ColorF Scene :: DefaultBackgroundColor = Palette :: DefaultBackground ; \u00b6 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002 constexpr ColorF Scene :: DefaultLetterBoxColor = Palette :: DefaultLetterbox ; \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002 constexpr double Scene :: DefaultMaxDeltaTime = 0 . 1 ; \u00b6 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 \u95a2\u6570 \u00b6 void Scene :: Resize ( const s3d :: Size & size ); \u00b6 void Scene :: Resize ( int32 width , int32 height ); \u00b6 size: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 width, height: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f Scene :: DefaultSceneSize \u3067\u3059\u3002\u4e21\u65b9\u307e\u305f\u306f\u3069\u3061\u3089\u304b\u306e\u5024\u3092 0 \u4ee5\u4e0b\u306b\u3057\u305f\u308a 8192 \u3088\u308a\u5927\u304d\u304f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 Size Scene :: Size (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Scene :: Width (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Scene :: Height (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Scene :: Center (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002 Vec2 Scene :: CenterF (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116.5, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002 Rect Scene :: Rect (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e Rect \u5de6\u4e0a\u304c (0, 0) \u3067\u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Rect \u3092\u8fd4\u3057\u307e\u3059\u3002 void Scene :: SetScaleMode ( ScaleMode scaleMode ); \u00b6 scaleMode: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ScaleMode :: AspectFit \u3067\u3059\u3002 ScaleMode Scene :: GetScaleMode (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 void Scene :: SetTextureFilter ( TextureFilter textureFilter ); \u00b6 textureFilter: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultFilter \u3067\u3059\u3002\u30c9\u30c3\u30c8\u7d75\u611f\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u306f TextureFilter :: Nearest \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 TextureFilter Scene :: GetTextureFilter (); \u00b6 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetTextureFilter () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 void Scene :: SetBackground ( const ColorF & color ); \u00b6 color: \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultBackgroundColor \u3067\u3059\u3002 void Scene :: SetLetterbox ( const ColorF & color ); \u00b6 color: \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultLetterBoxColor \u3067\u3059\u3002 void Scene :: SetMaxDeltaTime ( double timeSec ); \u00b6 timeSec: \u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultMaxDeltaTime \u3067\u3059\u3002 Scene :: DeltaTime () \u304c\u5927\u304d\u306a\u5024\u3092\u8fd4\u3057\u3066\u7269\u7406\u6f14\u7b97\u306a\u3069\u306e\u7d4c\u904e\u6642\u9593\u51e6\u7406\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u306e\u3092\u9632\u3050\u5f79\u5272\u304c\u3042\u308a\u307e\u3059\u3002 double Scene :: GetMaxDeltaTime (); \u00b6 \u623b\u308a\u5024: Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetMaxDeltaTime () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 double Scene :: DeltaTime (); \u00b6 \u623b\u308a\u5024: \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3068 Scene :: SetMaxDeltaTime () \u306e\u5c0f\u3055\u3044\u307b\u3046\u306e\u5024 \u524d\u56de\u306e System :: Update () \u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u3082\u3068\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4e0a\u4e0b\u3057\u3066\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002 double Scene :: Time (); \u00b6 \u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002 int32 Scene :: FrameCount (); \u00b6 \u623b\u308a\u5024: System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570 System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570\uff08= \u30d5\u30ec\u30fc\u30e0\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u308f\u308b\u305f\u3081\u3001\u3053\u306e\u5024\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7b49\u306e\u5236\u5fa1\u306b\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 Vec2 Scene :: ClientToScene ( const Vec2 & pos ); \u00b6 pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19\u3092\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u7bc4\u56f2\u5916\u306e\u5ea7\u6a19\u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace System) \u00b6 \u95a2\u6570 \u00b6 bool System :: Update (); \u00b6 \u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d9a\u884c\u306e\u53ef\u5426 \u63cf\u753b\u3084\u5165\u529b\u60c5\u5831\u306a\u3069\u3001\u30d5\u30ec\u30fc\u30e0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u8abf\u6574\u3059\u308b\u50cd\u304d\u3082\u3042\u308a\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u304c\u767a\u751f\u3059\u308b\u304b\u3001\u5185\u90e8\u3067\u56de\u5fa9\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u304c false \u3092\u8fd4\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3055\u305b\u308b\u3079\u304d\u3067\u3059\u3002 void System :: Exit () ; \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u76f4\u5f8c\u306e System :: Update () \u304c false \u3092\u8fd4\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u81ea\u4f53\u304c\u7d42\u4e86\u51e6\u7406\u3092\u884c\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 void System :: SetTerminationTriggers ( uint32 userActionFlags ); \u00b6 userActionFlags: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u3044\u307e\u3059\u3002 uint32 System :: GetTerminationTriggers (); \u00b6 \u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 uint32 System :: GetUserActions (); \u00b6 \u623b\u308a\u5024: \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 void System :: Sleep ( int32 milliseconds ); \u00b6 void System :: Sleep ( const Duration & duration ); \u00b6 milliseconds: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 duration: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593 \u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u6307\u5b9a\u3057\u305f\u6642\u9593\u3060\u3051\u505c\u6b62\u3057\u307e\u3059\u3002 bool System :: LaunchBrowser ( const FilePath & url ); \u00b6 url: \u30aa\u30fc\u30d7\u30f3\u3059\u308b URL \u623b\u308a\u5024: \u30aa\u30fc\u30d7\u30f3\u306e\u6210\u529f\u306e\u53ef\u5426 \u6307\u5b9a\u3057\u305f URL \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Web \u30d6\u30e9\u30a6\u30b6\u3067\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 Array < Monitor > System :: EnumerateActiveMonitors () \u00b6 \u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 size_t System :: GetCurrentMonitorIndex () \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 System :: EnumerateActiveMonitors () \u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 Array < GamepadInfo > System :: EnumerateGamepads (); \u00b6 \u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 Array < WebcamInfo > System :: EnumerateWebcams (); \u00b6 \u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30a6\u30a3\u30f3\u30c9\u30a6\u540d\u524d\u7a7a\u9593 (namespace Window) \u00b6 \u5b9a\u6570 \u00b6 constexpr Size Window :: DefaultClientSize = Size ( 800 , 600 ); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002 \u95a2\u6570 \u00b6 void Window :: SetTitle ( const String & title ) ; \u00b6 template < class ... Args > void Window :: SetTitle ( const Args & ... args ) ; \u00b6 title: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb args: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u6539\u884c\u306f\u7121\u8996\u3055\u308c\u3001\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 const String & Window :: GetTitle () ; \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 WindowState Window :: GetState (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 void Window :: SetStyle ( WindowStyle style ); \u00b6 style: \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 WindowStyle Window :: GetStyle (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 Size Window :: ClientSize (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Window :: ClientCenter (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u304a\u3051\u308b\u4e2d\u5fc3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Window :: ClientWidth (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 int32 Window :: ClientHeight (); \u00b6 \u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 void Window :: SetPos ( const Point & pos ); \u00b6 void Window :: SetPos ( int32 x , int32 y ); \u00b6 pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 x, y: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 void Window :: Centering (); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 bool Window :: Resize ( const Size & size , WindowResizeOption option = WindowResizeOption :: ResizeSceneSize , bool centering = true ); \u00b6 bool Window :: Resize ( int32 width , int32 height , WindowResizeOption option = WindowResizeOption :: ResizeSceneSize , bool centering = true ); \u00b6 size: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 width, height: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 centering: \u30b5\u30a4\u30ba\u5909\u66f4\u5f8c\u306b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u308b\u304b\u306e\u30d5\u30e9\u30b0 \u623b\u308a\u5024: \u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 WindowResizeOption :: ResizeSceneSize \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3055\u308c\u307e\u3059\u3002 void Window :: Maximize (); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316\u3057\u307e\u3059\u3002 void Window :: Restore (); \u00b6 \u6700\u5927\u30fb\u6700\u5c0f\u5316\u3055\u308c\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5143\u306e\u30b5\u30a4\u30ba\u306b\u623b\u3057\u307e\u3059\u3002 void Window :: Minimize (); \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3057\u307e\u3059\u3002 bool Window :: SetFullscreen ( bool fullscreen , const Optional < Size >& fullscreenResolution = unspecified , WindowResizeOption option = WindowResizeOption :: ResizeSceneSize ); \u00b6 fullscreen: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false , \u30a6\u30a3\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false fullscreenResolution: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002 fullscreenResolution \u306b\u306f unspecified \u304b Graphics :: GetFullscreenResolutions () \u306b\u542b\u307e\u308c\u308b\u5024\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u969b\u3001 fullscreenResolution \u306b unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u89e3\u50cf\u5ea6\uff08\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u9069\u7528\u5f8c\uff09\u306e\u30b5\u30a4\u30ba\u3067\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\u3002 unspecified \u306f\u5207\u308a\u66ff\u3048\u304c\u65e9\u304f\u5805\u7262\u3067\u3059\u3002 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u95a2\u9023\u306e\u5b9a\u6570 \u00b6 enum class CursorStyle \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3057\u307e\u3059\u3002 CursorStyle :: Arrow \u00b6 \u901a\u5e38\u306e\u77e2\u5370\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: IBeam \u00b6 \u30c6\u30ad\u30b9\u30c8\u5165\u529b\u6642\u306b\u4f7f\u3046 I \u306e\u5f62\u3092\u3057\u305f\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: Cross \u00b6 \u5341\u5b57\u578b\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: Hand \u00b6 \u4eba\u5dee\u3057\u6307\u3092\u4f38\u3070\u3057\u305f\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: NotAllowed \u00b6 \u7981\u6b62\u30de\u30fc\u30af\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: ResizeUpDown \u00b6 \u4e0a\u4e0b\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: ResizeLeftRight \u00b6 \u5de6\u53f3\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002 CursorStyle :: Hidden \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u307e\u3059\u3002 CursorStyle :: Default = Arrow \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f CursorStyle :: Arrow \u3067\u3059\u3002 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u540d\u524d\u7a7a\u9593 (namespace Cursor) \u00b6 \u95a2\u6570 \u00b6 Point Cursor :: Pos (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: PreviousPos (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: Delta (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: Pos () - Cursor :: PreviousPos () \u3068\u540c\u5024\u3067\u3059\u3002 Vec2 Cursor :: PosF (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Vec2 Cursor :: PreviousPosF (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Vec2 Cursor :: DeltaF (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosF () - Cursor :: PreviousPosF () \u3068\u540c\u5024\u3067\u3059\u3002 Point Cursor :: PosRaw (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: PreviousPosRaw (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: DeltaRaw (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosRaw () - Cursor :: PreviousPosRaw () \u3068\u540c\u5024\u3067\u3059\u3002 Point Cursor :: ScreenPos (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: PreviousScreenPos (); \u00b6 \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Point Cursor :: ScreenDelta (); \u00b6 \u623b\u308a\u5024: \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: ScreenPos () - Cursor :: PreviousScreenPos () \u3068\u540c\u5024\u3067\u3059\u3002 Array < std :: pair < Point , uint64 >> Cursor :: GetBuffer (); \u00b6 \u623b\u308a\u5024: \u76f4\u8fd1 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u53e4\u3044\u9806\u306b\u4e26\u3079\u305f\u914d\u5217 \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u904e\u53bb 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3068\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u7248\u306b\u9650\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4ee5\u4e0a\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 void Cursor :: SetPos ( int32 x , int32 y ); \u00b6 void Cursor :: SetPos ( const Point & pos ); \u00b6 x: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 X \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) y: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 Y \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) pos: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 bool Cursor :: OnClientRect (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 const Mat3x2 & Cursor :: GetLocalTransform (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 const Mat3x2 & Cursor :: GetCameraTransform (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 void Cursor :: ClipToWindow ( bool clip ); \u00b6 clip: \u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u6709\u5411\u306b\u3059\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f false \u3067\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u9593\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 void Cursor :: RequestStyle ( CursorStyle style ); \u00b6 style: \u5909\u66f4\u5f8c\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002 void Cursor :: SetDefaultStyle ( CursorStyle style ); \u00b6 style: \u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u8a2d\u5b9a\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb Cursor :: RequestStyle () \u3092\u547c\u3070\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u9069\u7528\u3055\u308c\u308b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f CursorStyle :: Default \u3067\u3059\u3002 CursorStyle Cursor :: GetRequestedStyle (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7121\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 CursorStyle Cursor :: GetDefaultStyle (); \u00b6 \u623b\u308a\u5024: \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002 \u6642\u9593\u540d\u524d\u7a7a\u9593 (namespace Time) \u00b6 \u95a2\u6570 \u00b6 uint64 Time :: GetSec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMillisec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMicrosec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetNanosec (); \u00b6 \u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30ca\u30ce\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetSecSinceEpoch (); \u00b6 \u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u79d2\u6570 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMillisecSinceEpoch (); \u00b6 \u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 uint64 Time :: GetMicrosecSinceEpoch (); \u00b6 \u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002 int32 Time :: UTCOffsetMinutes (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\uff08\u5206\uff09 \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\u3092\u5206\u3067\u8fd4\u3057\u307e\u3059\u3002 \u6587\u5b57\u306b\u95a2\u3059\u308b\u6a5f\u80fd \u00b6 \u95a2\u6570 \u00b6 bool IsASCII ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: ASCII \u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c ASCII \u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsDigit ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: 10 \u9032\u6570\u306e\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 10 \u9032\u6570\u306e\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsLower ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsUpper ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 char32 ToLower ( char32 ch ) ; \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5c0f\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u306e\u5834\u5408\u3001\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002 char32 ToUpper ( char32 ch ) ; \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5927\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u306e\u5834\u5408\u3001\u5927\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsAlpha ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsAlnum ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3082\u3057\u304f\u306f\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3082\u3057\u304f\u306f\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsXdigit ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57 (0\uff5e9, A\uff5eF, a\uff5ef) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsControl ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u5236\u5fa1\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5236\u5fa1\u6587\u5b57 (0x00\uff5e0x1F, 0x7F\uff5e0x9F) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsBlank ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsSpace ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u985e\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u985e\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9, '\\n' , '\\v' , '\\f' , '\\r' ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool IsPrint ( char32 ch ); \u00b6 ch: \u6587\u5b57 \u623b\u308a\u5024: \u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool CaseInsensitiveEquals ( char32 a , char32 b ); \u00b6 a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3066\u3001\u7b49\u3057\u3044\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 a , b \u304c\u7b49\u3057\u3044\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3055\u308c\u3001 's' \u3068 'S' \u306f\u7b49\u3057\u3044\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 int32 CaseInsensitiveCompare ( char32 a , char32 b ); \u00b6 a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3001 a \u304c b \u3088\u308a\u5c0f\u3055\u3044\u5834\u5408 - 1 , \u7b49\u3057\u3044\u5834\u5408 0 , \u5927\u304d\u3044\u5834\u5408 1 \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u3092\u7121\u8996\u3057\u3066\u6587\u5b57 a , b \u3092\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 2D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics2D) \u00b6 \u95a2\u6570 \u00b6 ColorF Graphics2D :: GetColorMul (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u4e57\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u4e57\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 1 , 1 , 1 , 1 ) \u3067\u3059\u3002 ColorF Graphics2D :: GetColorAdd (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u52a0\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u52a0\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002 BlendState Graphics2D :: GetBlendState (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f BlendState :: Default \u3067\u3059\u3002 RasterizerState Graphics2D :: GetRasterizerState (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f RasterizerState :: Default2D \u3067\u3059\u3002 void Graphics2D :: SetSamplerState ( uint32 slot , const SamplerState & samplerState ); \u00b6 slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) samplerState: \u8a2d\u5b9a\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\u30020 \u756a\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f ScopedRenderStates2D \u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002 SamplerState Graphics2D :: GetSamplerState ( uint32 slot = 0 ); \u00b6 slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) \u623b\u308a\u5024: \u73fe\u5728\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 \u6307\u5b9a\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3067\u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002 Optional < Rect > Graphics2D :: GetViewport (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < PixelShader > Graphics2D :: GetCustomPixelShader (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < RenderTexture > Graphics2D :: GetRenderTarget (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3. \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics2D :: SetScissorRect ( const Rect & rect ); \u00b6 rect: \u30b7\u30b6\u30fc\u77e9\u5f62 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 RasterizerState \u3067\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u6709\u52b9\u306b\u3057\u305f\u5834\u5408\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002 Rect Graphics2D :: GetScissorRect (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30b7\u30b6\u30fc\u77e9\u5f62 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Rect ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002 void Graphics2D :: SetLocalTransform ( const Mat3x2 & transform ); \u00b6 transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f Transformer2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002 const Mat3x2 & Graphics2D :: GetLocalTransform (); \u00b6 \u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics2D :: SetCameraTransform ( const Mat3x2 & transform ); \u00b6 transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f BasicCamera2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002 const Mat3x2 & Graphics2D :: GetCameraTransform (); \u00b6 \u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 double Graphics2D :: GetMaxScaling (); \u00b6 \u623b\u308a\u5024: 2D \u63cf\u753b\u306e\u6700\u5927\u62e1\u5927\u500d\u7387 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u7528\u3044\u3066\u76f4\u5f84 1 \u306e\u5186\u3092\u63cf\u3044\u305f\u3068\u304d\u306b\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u307e\u305f\u306f\u6955\u5186\u306e\u6700\u5927\u306e\u5f84\u3092\u8fd4\u3057\u307e\u3059\u3002\u3069\u306e\u3088\u3046\u306a\u5ea7\u6a19\u5909\u63db\u884c\u5217\u306b\u304a\u3044\u3066\u3082\u7dda\u5206\u3092\u540c\u3058\u592a\u3055\u3067\u63cf\u753b\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u623b\u308a\u5024\u306e\u5024\u304c\u4f7f\u3048\u307e\u3059\u3002 Size Graphics2D :: GetRenderTargetSize (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u89e3\u50cf\u5ea6 \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3082\u3057\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics2D :: SetSDFParameters ( double pixelRange , double offset = 0 . 0 ); \u00b6 void Graphics2D :: SetSDFParameters ( cosnt Float4 & parameters ); \u00b6 pixelRange: \u4f7f\u7528\u3059\u308b SDF \u30d5\u30a9\u30f3\u30c8\u306e SDFFont :: pixelRange () \u306e\u5024 offset: SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u306e\u95be\u5024\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 parameters: SDF \u30d5\u30a9\u30f3\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc SDF \u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 Float4 Graphics2D :: GetSDFParameters (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u73fe\u5728 SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002 void Graphics2D :: SetTexture ( uint32 slot , const Optional < Texture >& texture ); \u00b6 slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) texture: \u30c6\u30af\u30b9\u30c1\u30e3 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u3092 .draw () \u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b9\u30ed\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002 void Graphics2D :: Flush (); \u00b6 \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f 2D \u63cf\u753b\u95a2\u9023\u306e\u547d\u4ee4\u3092\u3059\u3079\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 .draw () \u3084 Graphics2D :: \uff5e \u306b\u3088\u308b 2D \u63cf\u753b\u547d\u4ee4\u306f\u3001\u51e6\u7406\u306e\u52b9\u7387\u5316\u306e\u305f\u3081\u306b\u4e00\u65e6\u30a8\u30f3\u30b8\u30f3\u5185\u3067\u30b9\u30c8\u30c3\u30af\u3055\u308c\u3001\u547d\u4ee4\u304c\u96c6\u7d04\u3055\u308c\u3066\u304b\u3089 System :: Update () \u5185\u3067\u4e00\u6589\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 RenderTexture \u306e\u4e2d\u8eab\u3092 .read () \u3067\u8aad\u307f\u51fa\u3059\u5834\u5408\u3084 MSRenderTexture \u3092 .resolve () \u3059\u308b\u969b\u306b\u3001\u5b9f\u969b\u306b\u306f\u63cf\u753b\u304c\u306a\u3055\u308c\u3066\u3044\u306a\u3044\u30b1\u30fc\u30b9\u304c\u751f\u3058\u307e\u3059\u3002\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002 template < class Type > void Graphics2D :: SetConstantBuffer ( ShaderStage stage , uint32 index , const ConstantBuffer < Type >& buffer ); \u00b6 stage: \u5bfe\u8c61\u306e\u30b7\u30a7\u30fc\u30c0 index: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e13) buffer: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30c7\u30fc\u30bf 2D \u63cf\u753b\u306e\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u3067\u7528\u3044\u308b\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u5909\u66f4\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics) \u00b6 \u95a2\u6570 \u00b6 void Graphics :: SkipClearScreen (); \u00b6 \u3053\u306e\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u958b\u59cb\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u63cf\u753b\u5185\u5bb9\u3092\u80cc\u666f\u8272\u3067\u30af\u30ea\u30a2\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Array < DisplayOutput > Graphics :: EnumOutputs (); \u00b6 \u623b\u308a\u5024: \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7 \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 Array < Size > Graphics :: GetFullscreenResolutions ( double minRefreshRate = 49 . 0 ); \u00b6 minRefreshRate: \u8981\u6c42\u3059\u308b\u6700\u4f4e\u9650\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7 \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u304c minRefreshRate (Hz) \u4ee5\u4e0a\u3067\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 void Graphics :: SetTargetFrameRateHz ( const Optional < double >& targetFrameRateHz ); \u00b6 targetFrameRateHz: \u8a2d\u5b9a\u3059\u308b\u6700\u5927\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (Hz) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 none \u3092\u6e21\u3059\u3068 vSync \u304c\u6709\u52b9\u306b\u306a\u308a\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8a2d\u5b9a\u306b\u6cbf\u3063\u305f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u6027\u80fd\u306b\u3088\u3063\u3066\u306f\u3001\u5b9f\u6e2c\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u3001\u3053\u306e\u95a2\u6570\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u4e0b\u56de\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Optional < double > Graphics :: GetTargetFrameRateHz (); \u00b6 \u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none Graphics :: SetTargetFrameRateHz () \u3067\u8a2d\u5b9a\u3057\u305f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002 double Graphics :: GetDisplayRefreshRateHz (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 double Graphics :: GetDPIScaling (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e DPI \u62e1\u5927\u7387 (\u500d) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u5bfe\u3057\u3066\u30e6\u30fc\u30b6\u304c\u30b7\u30b9\u30c6\u30e0\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b DPI \u62e1\u5927\u7387\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30fc\u30c9\u69cb\u9020\u4f53 (struct DisplayMode) \u00b6 \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 Size size ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u89e3\u50cf\u5ea6\uff08\u30d4\u30af\u30bb\u30eb\uff09 double refreshRateHz ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u69cb\u9020\u4f53 (struct DisplayOutput) \u00b6 \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 String name ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u540d\u79f0 Rect displayRect ; \u00b6 \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u4eee\u60f3\u5ea7\u6a19 Array < DisplayMode > displayModes ; \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u8868\u793a\u30e2\u30fc\u30c9\u306e\u4e00\u89a7 GUI \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc (namespace SimpleGUI) \u00b6 \u95a2\u6570 \u00b6 RectF SimpleGUI :: HeadlineRegion ( const String & text , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u898b\u51fa\u3057\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 void SimpleGUI :: Headline ( const String & text , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u63cf\u753b\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: ButtonRegion ( const String & label , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: ButtonRegionAt ( const String & label , const Vec2 & center , const Optional < double >& width = unspecified ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: Button ( const String & label , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 widht: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: ButtonAt ( const String & label , const Vec2 & center , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: SliderRegion ( const Vec2 & pos , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 ); \u00b6 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: SliderRegionAt ( const Vec2 & center , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 ); \u00b6 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: Slider ( double & value , const Vec2 & pos , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: Slider ( double & value , double min , double max , const Vec2 & pos , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: Slider ( const String & label , double & value , const Vec2 & pos , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: Slider ( const String & label , double & value , double min , double max , const Vec2 & pos , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: SliderAt ( double & value , const Vec2 & center , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: SliderAt ( double & value , double min , double max , const Vec2 & center , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: SliderAt ( const String & label , double & value , const Vec2 & center , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: SliderAt ( const String & label , double & value , double min , double max , const Vec2 & center , double labelWidth = 80 . 0 , double sliderWidth = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: VerticalSliderRegion ( const Vec2 & pos , double sliderHeight = 120 . 0 ); \u00b6 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: VerticalSliderRegionAt ( const Vec2 & center , double sliderHeight = 120 . 0 ); \u00b6 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: VerticalSlider ( double & value , const Vec2 & pos , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: VerticalSlider ( double & value , double min , double max , const Vec2 & pos , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: VerticalSliderAt ( double & value , const Vec2 & center , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 bool SimpleGUI :: VerticalSliderAt ( double & value , double min , double max , const Vec2 & center , double sliderHeight = 120 . 0 , bool enabled = true ); \u00b6 value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: CheckBoxRegion ( const String & label , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: CheckBoxRegionAt ( const String & label , const Vec2 & center , const Optional < double >& width = unspecified ); \u00b6 label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool CheckBox ( bool & checked , const String & label , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: CheckBoxAt ( bool & checked , const String & label , const Vec2 & center , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: RadioButtonsRegion ( const Array < String >& options , const Vec2 & pos , const Optional < double >& width = unspecified ); \u00b6 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: RadioButtonsRegionAt ( const Array < String >& options , const Vec2 & center , const Optional < double >& width = unspecified ); \u00b6 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: RadioButtons ( size_t & index , const Array < String >& options , const Vec2 & pos , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 bool SimpleGUI :: RadioButtonsAt ( size_t & index , const Array < String >& options , const Vec2 & center , const Optional < double >& width = unspecified , bool enabled = true ); \u00b6 index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002 RectF SimpleGUI :: TextBoxRegion ( const Vec2 & pos , double width = 200 . 0 ); \u00b6 pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: TextBoxRegionAt ( const Vec2 & center , double width = 200 . 0 ); \u00b6 center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: TextBox ( TextEditState & text , const Vec2 & pos , double width = 200 . 0 , const Optional < size_t >& maxChars = unspecified , bool enabled = true ); \u00b6 text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002 bool SimpleGUI :: TextBoxAt ( TextEditState & text , const Vec2 & center , double width = 200 . 0 , const Optional < size_t >& maxChars = unspecified , bool enabled = true ); \u00b6 text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002 RectF SimpleGUI :: ColorPickerRegion ( const Vec2 & pos ); \u00b6 pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 RectF SimpleGUI :: ColorPickerRegionAt ( const Vec2 & center ); \u00b6 center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 bool SimpleGUI :: ColorPicker ( HSV & hsv , const Vec2 & pos , bool enabled = true ); \u00b6 hsv: \u64cd\u4f5c\u3059\u308b\u8272 pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 bool ColorPickerAt ( HSV & hsv , const Vec2 & center , bool enabled = true ); \u00b6 hsv: \u64cd\u4f5c\u3059\u308b\u8272 center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53 (struct TextEditState) \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306a\u3069\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u3059\u308b\u969b\u306b\u4f7f\u3046\u60c5\u5831\u3067\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 String text ; \u00b6 \u5165\u529b\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8 size_t cursorPos = 0 ; \u00b6 \u5165\u529b\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e bool active = false ; \u00b6 \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b Stopwatch leftPressStopwatch ; \u00b6 \u30ab\u30fc\u30bd\u30eb\u306e\u5de6\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 Stopwatch rightPressStopwatch ; \u00b6 \u30ab\u30fc\u30bd\u30eb\u306e\u53f3\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 Stopwatch cursorStopwatch ; \u00b6 \u5165\u529b\u30ab\u30fc\u30bd\u30eb\u306e\u70b9\u6ec5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 TextEditState () = default (); \u00b6 TextEditState ( const String & defaultText ); \u00b6 defaultText: \u521d\u671f\u30c6\u30ad\u30b9\u30c8 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 void clear (); \u00b6 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831\u3092\u3059\u3079\u3066\u30af\u30ea\u30a2\u3057\u3001\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u306b\u3057\u307e\u3059\u3002 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u30af\u30e9\u30b9 (class Stopwatch) \u00b6 \u7d4c\u904e\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 Stopwatch ( bool startImmediately = false ); \u00b6 Stopwatch ( const Duration & time , bool startImmediately = false ); \u00b6 startImmediately: \u6642\u9593\u306e\u8a08\u6e2c\u3092\u76f4\u3061\u306b\u958b\u59cb\u3059\u308b\u304b\u306e\u30d5\u30e9\u30b0 time: \u6700\u521d\u306b\u9032\u3081\u3066\u304a\u304f\u6642\u9593 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 startImmediately \u304c true \u306e\u5834\u5408\u306f\u4f5c\u6210\u3068\u540c\u6642\u306b\u6642\u9593\u306e\u8a08\u6e2c\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 void start (); \u00b6 \u6642\u9593\u306e\u8a08\u6e2c\u3092\u958b\u59cb\u307e\u305f\u306f\u518d\u958b\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u8a08\u6e2c\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 int32 d (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 d64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002 double dF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300251 \u6642\u9593\u306e\u5834\u5408\u306f 2 . 125 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 h (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 h64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002 double hF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300240 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 . 5 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 min (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 min64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002 double minF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30022 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 s (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 s64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002 double sF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30023 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002 int32 ms (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 ms64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002 double msF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30029123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 . 4 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 us (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002 int64 us64 (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002 double usF (); \u00b6 \u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30025678.9 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 5678 . 9 \u3092\u8fd4\u3057\u307e\u3059\u3002 Duration elapsed (); \u00b6 \u623b\u308a\u5024: \u7d4c\u904e\u6642\u9593 ( Duration \u578b) \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092 Duration \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 bool isStarted (); \u00b6 \u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool isPaused (); \u00b6 \u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool isRunning (); \u00b6 \u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u306a\u304a\u304b\u3064\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u306a\u3044\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 void pause () ; \u00b6 \u6642\u9593\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u3059\u3067\u306b\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 void resume (); \u00b6 \u4e00\u6642\u505c\u6b62\u4e2d\u306e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u518d\u3073\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u307e\u3059\u3002\u4e00\u6642\u505c\u6b62\u4e2d\u51fa\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 void reset (); \u00b6 \u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u307e\u3059\u3002 void restart (); \u00b6 \u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u3001\u518d\u5ea6\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 void set ( const Duration & time ); \u00b6 time: \u8a2d\u5b9a\u3059\u308b\u6642\u9593 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 String format ( StringView format = U \"H:mm:ss.xx\" _sv ); \u00b6 format: \u6642\u523b\u306e\u8868\u73fe\u65b9\u6cd5 \u623b\u308a\u5024: \u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u305f\u6642\u523b \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \u975e\u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 bool operator < ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator <= ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator > ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator >= ( const Stopwatch & s , const MicrosecondsF & time ); \u00b6 bool operator < ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 bool operator <= ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 bool operator > ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 bool operator >= ( const MicrosecondsF & time , const Stopwatch & s ); \u00b6 s: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 time: \u6bd4\u8f03\u3059\u308b\u6642\u9593 \u623b\u308a\u5024: \u6bd4\u8f03\u306e\u7d50\u679c \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3067\u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u3001\u5225\u306e\u6642\u9593\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002 void Formatter ( FormatData & formatData , const Stopwatch & value ); \u00b6 formatData: \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c7\u30fc\u30bf\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u307e\u3059\u3002\u5909\u63db\u306b\u306f Stopwatch :: format () \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 template < class CharType > std :: basic_ostream < CharType >& operator <<( std :: basic_ostream < CharType > output , const Stopwatch & value ); \u00b6 output: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u623b\u308a\u5024: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u95a2\u9023\u306e\u5b9a\u6570 \u00b6 enum class OpenMode \u00b6 \u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u307f\u7528\u9014\u3067\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 BinaryWriter , TextWriter \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002 OpenMode :: Trunc \u00b6 \u53e4\u3044\u5185\u5bb9\u3092\u7834\u68c4\u3057\u3001\u30b5\u30a4\u30ba\u3092\u30bc\u30ed\u306b\u3057\u305f\u72b6\u614b\u304b\u3089\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002 OpenMode :: Append \u00b6 \u53e4\u3044\u5185\u5bb9\u3092\u4fdd\u6301\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u65b0\u3057\u304f\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002 enum class CopyOption \u00b6 \u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 FileSystem :: Copy () \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002 CopyOption :: None \u00b6 \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3092\u5931\u6557\u3055\u305b\u3001\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 CopyOption :: SkipExisting \u00b6 \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u305a\u306b\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002 CopyOption :: OverwriteExisting \u00b6 \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002 CopyOption :: UpdateExisting \u00b6 \u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3088\u308a\u3082\u65b0\u3057\u3051\u308c\u3070\u4e0a\u66f8\u304d\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002 CopyOption :: Default = None \u00b6 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b3\u30d4\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3001 CopyOption :: None \u3067\u3059\u3002 enum class SpecialFolder \u00b6 \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3057\u307e\u3059\u3002 SpecialFolder :: Desktop \u00b6 \u30e6\u30fc\u30b6\u306e\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Documents \u00b6 \u30e6\u30fc\u30b6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: LocalAppData \u00b6 \u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 SpecialFolder :: Pictures \u00b6 \u30e6\u30fc\u30b6\u306e\u30d4\u30af\u30c1\u30e3\u30fc\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Music \u00b6 \u30e6\u30fc\u30b6\u306e\u30df\u30e5\u30fc\u30b8\u30c3\u30af\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Videos \u00b6 \u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Caches = LocalAppData \u00b6 \u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 SpecialFolder :: LocalAppData \u306e\u5225\u540d\u3067\u3059\u3002 SpecialFolder :: Movies = Videos \u00b6 \u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Movies \u306e\u5225\u540d\u3067\u3059\u3002 SpecialFolder :: SystemFonts \u00b6 \u30b7\u30b9\u30c6\u30e0\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / System / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002 SpecialFolder :: LocalFonts \u00b6 \u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002 SpecialFolder :: UserFonts \u00b6 \u30e6\u30fc\u30b6\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f ~/ Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace FileSystem) \u00b6 \u95a2\u6570 \u00b6 bool FileSystem :: Exists ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: IsDirectory ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: IsFile ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: IsResource ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u307f (Windows) \u307e\u305f\u306f\u30d0\u30f3\u30c9\u30eb (macOS) \u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059\u3002Linux \u3067\u306f / resources / \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30ea\u30bd\u30fc\u30b9\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 FilePath FileSystem :: FullPath ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u7d76\u5bfe\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5834\u5408\u306f\u672b\u5c3e\u304c / \u306b\u306a\u308a\u307e\u3059\u3002 Platform :: NativeFilePath FileSystem :: NativePath ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30cd\u30a4\u30c6\u30a3\u30d6\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u3001OS \u30cd\u30a4\u30c6\u30a3\u30d6\u8868\u73fe\u3067\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002 String FileSystem :: Extension ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e .\u3092\u542b\u307e\u306a\u3044\u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"png\"\uff09 String FileSystem :: FileName ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture.png\"\uff09 String FileSystem :: BaseName ( FilePathView path ) ; \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u62e1\u5f35\u5b50\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture\"\uff09 FilePath FileSystem :: ParentPath ( FilePathView path , size_t level = 0 , FilePath * baseFullPath = nullptr ); \u00b6 path: \u30d1\u30b9 level: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u968e\u5c64\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 0 baseFullPath: path \u306e\u7d76\u5bfe\u30d1\u30b9\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09 \u623b\u308a\u5024: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002\u89aa\u306e\u3055\u3089\u306b\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5f97\u305f\u3044\u5834\u5408\u306b\u306f level \u3092\u5897\u3084\u3057\u307e\u3059\u3002\u3061\u3087\u3046\u3069 1 \u3064\u4e0a\u4f4d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u57fa\u6e96\u306b 0 \u3067\u30011 \u305a\u3064\u5897\u3084\u3057\u307e\u3059\u3002 FilePath FileSystem :: VolumePath ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"C:/\"\uff09 bool FileSystem :: IsEmptyDirectory ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002 int64 FileSystem :: Size ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002 int64 FileSystem :: FileSize ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < DateTime > FileSystem :: CreationTime ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u4f5c\u6210\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < DateTime > FileSystem :: WriteTime ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u66f4\u65b0\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u66f4\u65b0\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002 Optional < DateTime > FileSystem :: AccessTime ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002 Array < FilePath > FileSystem :: DirectoryContents ( const FilePath & path , bool recursive = true ); \u00b6 path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 recursive: \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u30d5\u30a9\u30eb\u30c0\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3001\u305d\u306e\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u518d\u5e30\u7684\u306b\u5217\u6319\u3059\u308b\u5834\u5408\u306f true \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7 \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002 const FilePath & FileSystem :: InitialDirectory (); \u00b6 \u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002 const FilePath & FileSystem :: ModulePath (); \u00b6 \u623b\u308a\u5024: \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9 \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002 FilePath FileSystem :: CurrentDirectory (); \u00b6 \u623b\u308a\u5024: \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002 bool FileSystem :: ChangeCurrentDirectory ( FilePathView path ); \u00b6 path: \u65b0\u3057\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 FilePath FileSystem :: SpecialFolderPath ( SpecialFolder folder ); \u00b6 folder: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u7a2e\u985e \u623b\u308a\u5024: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9 \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002 FilePath FileSystem :: TemporaryDirectoryPath (); \u00b6 \u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d1\u30b9\u306e\u672b\u5c3e\u306b\u306f '/' \u304c\u4ed8\u304d\u307e\u3059\u3002 FilePath FileSystem :: UniqueFilePath ( FilePathView directory = TemporaryDirectoryPath ()); \u00b6 directory: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u56fa\u6709\u306a\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f \".tmp\" \u3067\u3059\u3002 FilePath FileSystem :: RelativePath ( FilePathView path , FilePathView start = FileSystem :: CurrentDirectory ()); \u00b6 path: \u30d1\u30b9 start: \u76f8\u5bfe\u30d1\u30b9\u306e\u57fa\u6e96\u4f4d\u7f6e \u623b\u308a\u5024: \u76f8\u5bfe\u30d1\u30b9 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u3092\u76f8\u5bfe\u30d1\u30b9\u306b\u5909\u63db\u3057\u307e\u3059\u3002 bool FileSystem :: CreateDirectories ( FilePathView path ); \u00b6 path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 bool FileSystem :: CreateParentDirectories ( FilePathView path ); \u00b6 path: \u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u307e\u3067\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 bool FileSystem :: Copy ( FilePathView from , FilePathView to , CopyOption copyOption = CopyOption :: Default ); \u00b6 from: \u30b3\u30d4\u30fc\u3059\u308b\u30d1\u30b9 to: \u30b3\u30d4\u30fc\u5148\u306e\u30d1\u30b9 copyOption: \u540d\u524d\u885d\u7a81\u6642\u306e\u3075\u308b\u307e\u3044 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 bool FileSystem :: Remove ( FilePathView path , bool allowUndo = false ); \u00b6 path: \u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u307e\u3059\u3002 bool FileSystem :: RemoveContents ( FilePathView path , bool allowUndo = false ); \u00b6 path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3060\u3051\u3092\u524a\u9664\u3057\u307e\u3059\u3002 bool FileSystem :: Rename ( FilePathView from , FilePathView to ); \u00b6 from: \u5909\u66f4\u524d\u306e\u30d1\u30b9 to: \u5909\u66f4\u5f8c\u306e\u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u540d\u524d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 bool FileSystem :: IsSandBoxed (); \u00b6 \u623b\u308a\u5024: macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u3084 Linux \u3067\u306f\u5e38\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u30ad\u30fc\u5b9a\u6570 \u00b6 \u30de\u30a6\u30b9\u30dc\u30bf\u30f3 \u00b6 constexpr Key MouseL ; \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u3067\u3059\u3002 constexpr Key MouseR ; \u00b6 \u30de\u30a6\u30b9\u306e\u53f3\u30dc\u30bf\u30f3\u3067\u3059\u3002 constexpr Key MouseM ; \u00b6 \u30de\u30a6\u30b9\u306e\u4e2d\u592e\u30dc\u30bf\u30f3\u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX1 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 1 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX2 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 2 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX3 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 3 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX4 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 4 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 constexpr Key MouseX5 ; \u00b6 \u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 5 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002 \u30de\u30a6\u30b9\u540d\u524d\u7a7a\u9593 (namespace Mouse) \u00b6 \u95a2\u6570 \u00b6 double Wheel (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002 double WheelH (); \u00b6 \u623b\u308a\u5024: \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"API \u4e00\u89a7"},{"location":"ja-jp/api/api/#_1","text":"","title":"\u30b7\u30fc\u30f3\u95a2\u9023\u306e\u5b9a\u6570"},{"location":"ja-jp/api/api/#enum-class-scalemode","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3067\u3059\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u95a2\u6570\u3067 WindowResizeOption :: UseDefaultScaleMode \u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\u306b\u3082\u53c2\u7167\u3055\u308c\u307e\u3059\u3002","title":"enum class ScaleMode"},{"location":"ja-jp/api/api/#scalemoderesizefill","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u30b7\u30fc\u30f3\u3092\u30ea\u30b5\u30a4\u30ba\u3057\u307e\u3059\u3002","title":"ScaleMode::ResizeFill"},{"location":"ja-jp/api/api/#scalemodeaspectfit","text":"\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u3067\u3001\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u7dad\u6301\u3057\u3066\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u30d5\u30a3\u30c3\u30c8\u3055\u305b\u63cf\u753b\u3057\u307e\u3059\u3002","title":"ScaleMode::AspectFit"},{"location":"ja-jp/api/api/#namespace-scene","text":"","title":"\u30b7\u30fc\u30f3\u540d\u524d\u7a7a\u9593 (namespace Scene)"},{"location":"ja-jp/api/api/#_2","text":"","title":"\u5b9a\u6570"},{"location":"ja-jp/api/api/#constexpr-size-scenedefaultscenesize-windowdefaultclientsize","text":"\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr Size Scene::DefaultSceneSize = Window::DefaultClientSize;"},{"location":"ja-jp/api/api/#constexpr-scalemode-scenedefaultscalemode-scalemodeaspectfit","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr ScaleMode Scene::DefaultScaleMode = ScaleMode::AspectFit;"},{"location":"ja-jp/api/api/#constexpr-texturefilter-scenedefaultfilter-texturefilterlinear","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr TextureFilter Scene::DefaultFilter = TextureFilter::Linear;"},{"location":"ja-jp/api/api/#constexpr-colorf-scenedefaultbackgroundcolor-palettedefaultbackground","text":"\u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002","title":"constexpr ColorF Scene::DefaultBackgroundColor = Palette::DefaultBackground;"},{"location":"ja-jp/api/api/#constexpr-colorf-scenedefaultletterboxcolor-palettedefaultletterbox","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8272\u3067\u3059\u3002","title":"constexpr ColorF Scene::DefaultLetterBoxColor = Palette::DefaultLetterbox;"},{"location":"ja-jp/api/api/#constexpr-double-scenedefaultmaxdeltatime-01","text":"Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr double Scene::DefaultMaxDeltaTime = 0.1;"},{"location":"ja-jp/api/api/#_3","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#void-sceneresizeconst-s3dsize-size","text":"","title":"void Scene::Resize(const s3d::Size&amp; size);"},{"location":"ja-jp/api/api/#void-sceneresizeint32-width-int32-height","text":"size: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 width, height: \u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f Scene :: DefaultSceneSize \u3067\u3059\u3002\u4e21\u65b9\u307e\u305f\u306f\u3069\u3061\u3089\u304b\u306e\u5024\u3092 0 \u4ee5\u4e0b\u306b\u3057\u305f\u308a 8192 \u3088\u308a\u5927\u304d\u304f\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002","title":"void Scene::Resize(int32 width, int32 height);"},{"location":"ja-jp/api/api/#size-scenesize","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Size Scene::Size();"},{"location":"ja-jp/api/api/#int32-scenewidth","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Scene::Width();"},{"location":"ja-jp/api/api/#int32-sceneheight","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Scene::Height();"},{"location":"ja-jp/api/api/#point-scenecenter","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Scene::Center();"},{"location":"ja-jp/api/api/#vec2-scenecenterf","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c (333, 444) \u306e\u5834\u5408\u3001(116.5, 222) \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Vec2 Scene::CenterF();"},{"location":"ja-jp/api/api/#rect-scenerect","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u306e Rect \u5de6\u4e0a\u304c (0, 0) \u3067\u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Rect \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Rect Scene::Rect();"},{"location":"ja-jp/api/api/#void-scenesetscalemodescalemode-scalemode","text":"scaleMode: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ScaleMode :: AspectFit \u3067\u3059\u3002","title":"void Scene::SetScaleMode(ScaleMode scaleMode);"},{"location":"ja-jp/api/api/#scalemode-scenegetscalemode","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306e\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306e\u6271\u3044\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"ScaleMode Scene::GetScaleMode();"},{"location":"ja-jp/api/api/#void-scenesettexturefiltertexturefilter-texturefilter","text":"textureFilter: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultFilter \u3067\u3059\u3002\u30c9\u30c3\u30c8\u7d75\u611f\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u306f TextureFilter :: Nearest \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002","title":"void Scene::SetTextureFilter(TextureFilter textureFilter);"},{"location":"ja-jp/api/api/#texturefilter-scenegettexturefilter","text":"\u623b\u308a\u5024: \u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u969b\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b7\u30fc\u30f3\u3092\u62e1\u5927\u7e2e\u5c0f\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetTextureFilter () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"TextureFilter Scene::GetTextureFilter();"},{"location":"ja-jp/api/api/#void-scenesetbackgroundconst-colorf-color","text":"color: \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272 \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultBackgroundColor \u3067\u3059\u3002","title":"void Scene::SetBackground(const ColorF&amp; color);"},{"location":"ja-jp/api/api/#void-scenesetletterboxconst-colorf-color","text":"color: \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u304c\u30b7\u30fc\u30f3\u3088\u308a\u3082\u5927\u304d\u3044\u5834\u5408\u306b\u4f59\u767d\u3068\u306a\u308b\u30b9\u30da\u30fc\u30b9\u300c\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u300d\u306e\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultLetterBoxColor \u3067\u3059\u3002","title":"void Scene::SetLetterbox(const ColorF&amp; color);"},{"location":"ja-jp/api/api/#void-scenesetmaxdeltatimedouble-timesec","text":"timeSec: \u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f Scene :: DefaultMaxDeltaTime \u3067\u3059\u3002 Scene :: DeltaTime () \u304c\u5927\u304d\u306a\u5024\u3092\u8fd4\u3057\u3066\u7269\u7406\u6f14\u7b97\u306a\u3069\u306e\u7d4c\u904e\u6642\u9593\u51e6\u7406\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u306e\u3092\u9632\u3050\u5f79\u5272\u304c\u3042\u308a\u307e\u3059\u3002","title":"void Scene::SetMaxDeltaTime(double timeSec);"},{"location":"ja-jp/api/api/#double-scenegetmaxdeltatime","text":"\u623b\u308a\u5024: Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09 Scene :: DeltaTime () \u304c\u8fd4\u3059\u6700\u5927\u306e\u6642\u9593\uff08\u79d2\uff09\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002 Scene :: SetMaxDeltaTime () \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"double Scene::GetMaxDeltaTime();"},{"location":"ja-jp/api/api/#double-scenedeltatime","text":"\u623b\u308a\u5024: \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3068 Scene :: SetMaxDeltaTime () \u306e\u5c0f\u3055\u3044\u307b\u3046\u306e\u5024 \u524d\u56de\u306e System :: Update () \u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u3082\u3068\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4e0a\u4e0b\u3057\u3066\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002","title":"double Scene::DeltaTime();"},{"location":"ja-jp/api/api/#double-scenetime","text":"\u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 System :: Update () \u306b\u3088\u3063\u3066\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002","title":"double Scene::Time();"},{"location":"ja-jp/api/api/#int32-sceneframecount","text":"\u623b\u308a\u5024: System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570 System :: Update () \u304c\u547c\u3070\u308c\u305f\u56de\u6570\uff08= \u30d5\u30ec\u30fc\u30e0\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u308f\u308b\u305f\u3081\u3001\u3053\u306e\u5024\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7b49\u306e\u5236\u5fa1\u306b\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"int32 Scene::FrameCount();"},{"location":"ja-jp/api/api/#vec2-sceneclienttosceneconst-vec2-pos","text":"pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19 \u623b\u308a\u5024: \u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u4e0a\u306e\u5ea7\u6a19\u3092\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u7bc4\u56f2\u5916\u306e\u5ea7\u6a19\u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"Vec2 Scene::ClientToScene(const Vec2&amp; pos);"},{"location":"ja-jp/api/api/#namespace-system","text":"","title":"\u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace System)"},{"location":"ja-jp/api/api/#_4","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#bool-systemupdate","text":"\u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d9a\u884c\u306e\u53ef\u5426 \u63cf\u753b\u3084\u5165\u529b\u60c5\u5831\u306a\u3069\u3001\u30d5\u30ec\u30fc\u30e0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u8abf\u6574\u3059\u308b\u50cd\u304d\u3082\u3042\u308a\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u304c\u767a\u751f\u3059\u308b\u304b\u3001\u5185\u90e8\u3067\u56de\u5fa9\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u304c false \u3092\u8fd4\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3055\u305b\u308b\u3079\u304d\u3067\u3059\u3002","title":"bool System::Update();"},{"location":"ja-jp/api/api/#void-systemexit","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u76f4\u5f8c\u306e System :: Update () \u304c false \u3092\u8fd4\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u81ea\u4f53\u304c\u7d42\u4e86\u51e6\u7406\u3092\u884c\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"void System::Exit();"},{"location":"ja-jp/api/api/#void-systemsetterminationtriggersuint32-useractionflags","text":"userActionFlags: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"void System::SetTerminationTriggers(uint32 userActionFlags);"},{"location":"ja-jp/api/api/#uint32-systemgetterminationtriggers","text":"\u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u306e\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002","title":"uint32 System::GetTerminationTriggers();"},{"location":"ja-jp/api/api/#uint32-systemgetuseractions","text":"\u623b\u308a\u5024: \u524d\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0 \u524d\u56de\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u767a\u751f\u3057\u305f\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30d5\u30e9\u30b0\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306b\u306f UserAction \u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002","title":"uint32 System::GetUserActions();"},{"location":"ja-jp/api/api/#void-systemsleepint32-milliseconds","text":"","title":"void System::Sleep(int32 milliseconds);"},{"location":"ja-jp/api/api/#void-systemsleepconst-duration-duration","text":"milliseconds: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 duration: \u30b9\u30ea\u30fc\u30d7\u3059\u308b\u6642\u9593 \u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u6307\u5b9a\u3057\u305f\u6642\u9593\u3060\u3051\u505c\u6b62\u3057\u307e\u3059\u3002","title":"void System::Sleep(const Duration&amp; duration);"},{"location":"ja-jp/api/api/#bool-systemlaunchbrowserconst-filepath-url","text":"url: \u30aa\u30fc\u30d7\u30f3\u3059\u308b URL \u623b\u308a\u5024: \u30aa\u30fc\u30d7\u30f3\u306e\u6210\u529f\u306e\u53ef\u5426 \u6307\u5b9a\u3057\u305f URL \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Web \u30d6\u30e9\u30a6\u30b6\u3067\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002","title":"bool System::LaunchBrowser(const FilePath&amp; url);"},{"location":"ja-jp/api/api/#arraymonitor-systemenumerateactivemonitors","text":"\u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30cb\u30bf\u30fc\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;Monitor&gt; System::EnumerateActiveMonitors()"},{"location":"ja-jp/api/api/#size_t-systemgetcurrentmonitorindex","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 System :: EnumerateActiveMonitors () \u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002","title":"size_t System::GetCurrentMonitorIndex()"},{"location":"ja-jp/api/api/#arraygamepadinfo-systemenumerategamepads","text":"\u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;GamepadInfo&gt; System::EnumerateGamepads();"},{"location":"ja-jp/api/api/#arraywebcaminfo-systemenumeratewebcams","text":"\u623b\u308a\u5024: \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7 \u4f7f\u7528\u53ef\u80fd\u306a Web \u30ab\u30e1\u30e9\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;WebcamInfo&gt; System::EnumerateWebcams();"},{"location":"ja-jp/api/api/#namespace-window","text":"","title":"\u30a6\u30a3\u30f3\u30c9\u30a6\u540d\u524d\u7a7a\u9593 (namespace Window)"},{"location":"ja-jp/api/api/#_5","text":"","title":"\u5b9a\u6570"},{"location":"ja-jp/api/api/#constexpr-size-windowdefaultclientsize-size800-600","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u3059\u3002","title":"constexpr Size Window::DefaultClientSize = Size(800, 600);"},{"location":"ja-jp/api/api/#_6","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#void-windowsettitleconst-string-title","text":"","title":"void Window::SetTitle(const String&amp; title);"},{"location":"ja-jp/api/api/#template-class-args-void-windowsettitleconst-args-args","text":"title: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb args: \u65b0\u3057\u3044\u30bf\u30a4\u30c8\u30eb \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u6539\u884c\u306f\u7121\u8996\u3055\u308c\u3001\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u30b7\u30b9\u30c6\u30e0\u306b\u8ca0\u8377\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"template &lt;class... Args&gt; void Window::SetTitle(const Args&amp;... args);"},{"location":"ja-jp/api/api/#const-string-windowgettitle","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const String&amp; Window::GetTitle();"},{"location":"ja-jp/api/api/#windowstate-windowgetstate","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"WindowState Window::GetState();"},{"location":"ja-jp/api/api/#void-windowsetstylewindowstyle-style","text":"style: \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u540c\u3058\u30bf\u30a4\u30c8\u30eb\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 \u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"void Window::SetStyle(WindowStyle style);"},{"location":"ja-jp/api/api/#windowstyle-windowgetstyle","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"WindowStyle Window::GetStyle();"},{"location":"ja-jp/api/api/#size-windowclientsize","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\u3068\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Size Window::ClientSize();"},{"location":"ja-jp/api/api/#point-windowclientcenter","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u4e2d\u5fc3\u5ea7\u6a19 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306b\u304a\u3051\u308b\u4e2d\u5fc3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Window::ClientCenter();"},{"location":"ja-jp/api/api/#int32-windowclientwidth","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Window::ClientWidth();"},{"location":"ja-jp/api/api/#int32-windowclientheight","text":"\u623b\u308a\u5024: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u73fe\u5728\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Window::ClientHeight();"},{"location":"ja-jp/api/api/#void-windowsetposconst-point-pos","text":"","title":"void Window::SetPos(const Point&amp; pos);"},{"location":"ja-jp/api/api/#void-windowsetposint32-x-int32-y","text":"pos: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 x, y: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u306e\u4f4d\u7f6e\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"void Window::SetPos(int32 x, int32 y);"},{"location":"ja-jp/api/api/#void-windowcentering","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"void Window::Centering();"},{"location":"ja-jp/api/api/#bool-windowresizeconst-size-size-windowresizeoption-option-windowresizeoptionresizescenesize-bool-centering-true","text":"","title":"bool Window::Resize(const Size&amp; size, WindowResizeOption option = WindowResizeOption::ResizeSceneSize, bool centering = true);"},{"location":"ja-jp/api/api/#bool-windowresizeint32-width-int32-height-windowresizeoption-option-windowresizeoptionresizescenesize-bool-centering-true","text":"size: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 width, height: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u65b0\u3057\u3044\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\uff09 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 centering: \u30b5\u30a4\u30ba\u5909\u66f4\u5f8c\u306b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u308b\u304b\u306e\u30d5\u30e9\u30b0 \u623b\u308a\u5024: \u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u9818\u57df\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 WindowResizeOption :: ResizeSceneSize \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3055\u308c\u307e\u3059\u3002","title":"bool Window::Resize(int32 width, int32 height, WindowResizeOption option = WindowResizeOption::ResizeSceneSize, bool centering = true);"},{"location":"ja-jp/api/api/#void-windowmaximize","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316\u3057\u307e\u3059\u3002","title":"void Window::Maximize();"},{"location":"ja-jp/api/api/#void-windowrestore","text":"\u6700\u5927\u30fb\u6700\u5c0f\u5316\u3055\u308c\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5143\u306e\u30b5\u30a4\u30ba\u306b\u623b\u3057\u307e\u3059\u3002","title":"void Window::Restore();"},{"location":"ja-jp/api/api/#void-windowminimize","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3057\u307e\u3059\u3002","title":"void Window::Minimize();"},{"location":"ja-jp/api/api/#bool-windowsetfullscreenbool-fullscreen-const-optionalsize-fullscreenresolution-unspecified-windowresizeoption-option-windowresizeoptionresizescenesize","text":"fullscreen: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false , \u30a6\u30a3\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5834\u5408 false fullscreenResolution: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6 option: \u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8ffd\u5f93\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u308b\u30aa\u30d7\u30b7\u30e7\u30f3 \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002 fullscreenResolution \u306b\u306f unspecified \u304b Graphics :: GetFullscreenResolutions () \u306b\u542b\u307e\u308c\u308b\u5024\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u3059\u308b\u969b\u3001 fullscreenResolution \u306b unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u89e3\u50cf\u5ea6\uff08\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u9069\u7528\u5f8c\uff09\u306e\u30b5\u30a4\u30ba\u3067\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\u3002 unspecified \u306f\u5207\u308a\u66ff\u3048\u304c\u65e9\u304f\u5805\u7262\u3067\u3059\u3002","title":"bool Window::SetFullscreen(bool fullscreen, const Optional&lt;Size&gt;&amp; fullscreenResolution = unspecified, WindowResizeOption option = WindowResizeOption::ResizeSceneSize);"},{"location":"ja-jp/api/api/#_7","text":"","title":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u95a2\u9023\u306e\u5b9a\u6570"},{"location":"ja-jp/api/api/#enum-class-cursorstyle","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u3057\u307e\u3059\u3002","title":"enum class CursorStyle"},{"location":"ja-jp/api/api/#cursorstylearrow","text":"\u901a\u5e38\u306e\u77e2\u5370\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::Arrow"},{"location":"ja-jp/api/api/#cursorstyleibeam","text":"\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u6642\u306b\u4f7f\u3046 I \u306e\u5f62\u3092\u3057\u305f\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::IBeam"},{"location":"ja-jp/api/api/#cursorstylecross","text":"\u5341\u5b57\u578b\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::Cross"},{"location":"ja-jp/api/api/#cursorstylehand","text":"\u4eba\u5dee\u3057\u6307\u3092\u4f38\u3070\u3057\u305f\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::Hand"},{"location":"ja-jp/api/api/#cursorstylenotallowed","text":"\u7981\u6b62\u30de\u30fc\u30af\u306e\u30a2\u30a4\u30b3\u30f3\u306e\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::NotAllowed"},{"location":"ja-jp/api/api/#cursorstyleresizeupdown","text":"\u4e0a\u4e0b\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::ResizeUpDown"},{"location":"ja-jp/api/api/#cursorstyleresizeleftright","text":"\u5de6\u53f3\u3078\u306e\u30ea\u30b5\u30a4\u30ba\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002","title":"CursorStyle::ResizeLeftRight"},{"location":"ja-jp/api/api/#cursorstylehidden","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u307e\u3059\u3002","title":"CursorStyle::Hidden"},{"location":"ja-jp/api/api/#cursorstyledefault-arrow","text":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f CursorStyle :: Arrow \u3067\u3059\u3002","title":"CursorStyle::Default = Arrow"},{"location":"ja-jp/api/api/#namespace-cursor","text":"","title":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u540d\u524d\u7a7a\u9593 (namespace Cursor)"},{"location":"ja-jp/api/api/#_8","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#point-cursorpos","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::Pos();"},{"location":"ja-jp/api/api/#point-cursorpreviouspos","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PreviousPos();"},{"location":"ja-jp/api/api/#point-cursordelta","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: Pos () - Cursor :: PreviousPos () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Point Cursor::Delta();"},{"location":"ja-jp/api/api/#vec2-cursorposf","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"Vec2 Cursor::PosF();"},{"location":"ja-jp/api/api/#vec2-cursorpreviousposf","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5ea7\u6a19\u304c\u5c0f\u6570\u5024\u3092\u542b\u3080\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"Vec2 Cursor::PreviousPosF();"},{"location":"ja-jp/api/api/#vec2-cursordeltaf","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosF () - Cursor :: PreviousPosF () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Vec2 Cursor::DeltaF();"},{"location":"ja-jp/api/api/#point-cursorposraw","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PosRaw();"},{"location":"ja-jp/api/api/#point-cursorpreviousposraw","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PreviousPosRaw();"},{"location":"ja-jp/api/api/#point-cursordeltaraw","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30ab\u30b9\u30bf\u30e0\u306e\u5909\u63db\u884c\u5217\u3092\u9069\u7528\u3057\u306a\u3044\u72b6\u614b\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: PosRaw () - Cursor :: PreviousPosRaw () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Point Cursor::DeltaRaw();"},{"location":"ja-jp/api/api/#point-cursorscreenpos","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::ScreenPos();"},{"location":"ja-jp/api/api/#point-cursorpreviousscreenpos","text":"\u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u304a\u3051\u308b\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Point Cursor::PreviousScreenPos();"},{"location":"ja-jp/api/api/#point-cursorscreendelta","text":"\u623b\u308a\u5024: \u623b\u308a\u5024: \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf (\u30d4\u30af\u30bb\u30eb) \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u307e\u3067\u306e\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u3067\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\uff08\u30d4\u30af\u30bb\u30eb\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002 Cursor :: ScreenPos () - Cursor :: PreviousScreenPos () \u3068\u540c\u5024\u3067\u3059\u3002","title":"Point Cursor::ScreenDelta();"},{"location":"ja-jp/api/api/#arraystdpairpoint-uint64-cursorgetbuffer","text":"\u623b\u308a\u5024: \u76f4\u8fd1 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u53e4\u3044\u9806\u306b\u4e26\u3079\u305f\u914d\u5217 \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u904e\u53bb 1 \u79d2\u9593\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3068\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u7248\u306b\u9650\u308a\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4ee5\u4e0a\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Array&lt;std::pair&lt;Point, uint64&gt;&gt; Cursor::GetBuffer();"},{"location":"ja-jp/api/api/#void-cursorsetposint32-x-int32-y","text":"","title":"void Cursor::SetPos(int32 x, int32 y);"},{"location":"ja-jp/api/api/#void-cursorsetposconst-point-pos","text":"x: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 X \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) y: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 Y \u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) pos: \u79fb\u52d5\u5148\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19 (\u30d4\u30af\u30bb\u30eb) \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5ea7\u6a19\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002","title":"void Cursor::SetPos(const Point&amp; pos);"},{"location":"ja-jp/api/api/#bool-cursoronclientrect","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool Cursor::OnClientRect();"},{"location":"ja-jp/api/api/#const-mat3x2-cursorgetlocaltransform","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Cursor::GetLocalTransform();"},{"location":"ja-jp/api/api/#const-mat3x2-cursorgetcameratransform","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Cursor::GetCameraTransform();"},{"location":"ja-jp/api/api/#void-cursorcliptowindowbool-clip","text":"clip: \u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u6709\u5411\u306b\u3059\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u753b\u9762\u4e0a\u306b\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f false \u3067\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u9593\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9589\u3058\u308b\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"void Cursor::ClipToWindow(bool clip);"},{"location":"ja-jp/api/api/#void-cursorrequeststylecursorstyle-style","text":"style: \u5909\u66f4\u5f8c\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002","title":"void Cursor::RequestStyle(CursorStyle style);"},{"location":"ja-jp/api/api/#void-cursorsetdefaultstylecursorstyle-style","text":"style: \u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u8a2d\u5b9a\u3059\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb Cursor :: RequestStyle () \u3092\u547c\u3070\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u9069\u7528\u3055\u308c\u308b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f CursorStyle :: Default \u3067\u3059\u3002","title":"void Cursor::SetDefaultStyle(CursorStyle style);"},{"location":"ja-jp/api/api/#cursorstyle-cursorgetrequestedstyle","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u7121\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"CursorStyle Cursor::GetRequestedStyle();"},{"location":"ja-jp/api/api/#cursorstyle-cursorgetdefaultstyle","text":"\u623b\u308a\u5024: \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30fc\u30bd\u30eb\u30b9\u30bf\u30a4\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"CursorStyle Cursor::GetDefaultStyle();"},{"location":"ja-jp/api/api/#namespace-time","text":"","title":"\u6642\u9593\u540d\u524d\u7a7a\u9593 (namespace Time)"},{"location":"ja-jp/api/api/#_9","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#uint64-timegetsec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetSec();"},{"location":"ja-jp/api/api/#uint64-timegetmillisec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMillisec();"},{"location":"ja-jp/api/api/#uint64-timegetmicrosec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMicrosec();"},{"location":"ja-jp/api/api/#uint64-timegetnanosec","text":"\u623b\u308a\u5024: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30ca\u30ce\u79d2\uff09 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30ca\u30ce\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetNanosec();"},{"location":"ja-jp/api/api/#uint64-timegetsecsinceepoch","text":"\u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u79d2\u6570 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetSecSinceEpoch();"},{"location":"ja-jp/api/api/#uint64-timegetmillisecsinceepoch","text":"\u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30df\u30ea\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMillisecSinceEpoch();"},{"location":"ja-jp/api/api/#uint64-timegetmicrosecsinceepoch","text":"\u623b\u308a\u5024: 1970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u306b\u304a\u3051\u308b\u30011970 \u5e74 1 \u6708 1 \u65e5\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"uint64 Time::GetMicrosecSinceEpoch();"},{"location":"ja-jp/api/api/#int32-timeutcoffsetminutes","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\uff08\u5206\uff09 \u73fe\u5728\u306e\u5354\u5b9a\u4e16\u754c\u6642 (UTC) \u3068\u306e\u6642\u5dee\u3092\u5206\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"int32 Time::UTCOffsetMinutes();"},{"location":"ja-jp/api/api/#_10","text":"","title":"\u6587\u5b57\u306b\u95a2\u3059\u308b\u6a5f\u80fd"},{"location":"ja-jp/api/api/#_11","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#bool-isasciichar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: ASCII \u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c ASCII \u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsASCII(char32 ch);"},{"location":"ja-jp/api/api/#bool-isdigitchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: 10 \u9032\u6570\u306e\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 10 \u9032\u6570\u306e\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsDigit(char32 ch);"},{"location":"ja-jp/api/api/#bool-islowerchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsLower(char32 ch);"},{"location":"ja-jp/api/api/#bool-isupperchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsUpper(char32 ch);"},{"location":"ja-jp/api/api/#char32-tolowerchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5c0f\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5927\u6587\u5b57 (A\uff5eZ) \u306e\u5834\u5408\u3001\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"char32 ToLower(char32 ch);"},{"location":"ja-jp/api/api/#char32-toupperchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 ch \u306e\u5927\u6587\u5b57 \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57 (a\uff5ez) \u306e\u5834\u5408\u3001\u5927\u6587\u5b57\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f ch \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"char32 ToUpper(char32 ch);"},{"location":"ja-jp/api/api/#bool-isalphachar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsAlpha(char32 ch);"},{"location":"ja-jp/api/api/#bool-isalnumchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3082\u3057\u304f\u306f\u6570\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8 (A\uff5eZ, a\uff5eZ) \u3082\u3057\u304f\u306f\u6570\u5b57 (0\uff5e9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsAlnum(char32 ch);"},{"location":"ja-jp/api/api/#bool-isxdigitchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c 16 \u9032\u6570\u306b\u4f7f\u308f\u308c\u308b\u6587\u5b57 (0\uff5e9, A\uff5eF, a\uff5ef) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsXdigit(char32 ch);"},{"location":"ja-jp/api/api/#bool-iscontrolchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u5236\u5fa1\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5236\u5fa1\u6587\u5b57 (0x00\uff5e0x1F, 0x7F\uff5e0x9F) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsControl(char32 ch);"},{"location":"ja-jp/api/api/#bool-isblankchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsBlank(char32 ch);"},{"location":"ja-jp/api/api/#bool-isspacechar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u7a7a\u767d\u985e\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u7a7a\u767d\u985e\u6587\u5b57 (\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3001\u30bf\u30d6\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9, '\\n' , '\\v' , '\\f' , '\\r' ) \u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsSpace(char32 ch);"},{"location":"ja-jp/api/api/#bool-isprintchar32-ch","text":"ch: \u6587\u5b57 \u623b\u308a\u5024: \u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 ch \u304c\u5370\u5b57\u53ef\u80fd\u6587\u5b57\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool IsPrint(char32 ch);"},{"location":"ja-jp/api/api/#bool-caseinsensitiveequalschar32-a-char32-b","text":"a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3066\u3001\u7b49\u3057\u3044\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6587\u5b57 a , b \u304c\u7b49\u3057\u3044\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u306f\u7121\u8996\u3055\u308c\u3001 's' \u3068 'S' \u306f\u7b49\u3057\u3044\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002","title":"bool CaseInsensitiveEquals(char32 a, char32 b);"},{"location":"ja-jp/api/api/#int32-caseinsensitivecomparechar32-a-char32-b","text":"a: \u6587\u5b57 b: \u6587\u5b57 \u623b\u308a\u5024: \u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u306b 2 \u3064\u306e\u6587\u5b57\u3092\u6bd4\u8f03\u3057\u3001 a \u304c b \u3088\u308a\u5c0f\u3055\u3044\u5834\u5408 - 1 , \u7b49\u3057\u3044\u5834\u5408 0 , \u5927\u304d\u3044\u5834\u5408 1 \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u3092\u7121\u8996\u3057\u3066\u6587\u5b57 a , b \u3092\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 CaseInsensitiveCompare(char32 a, char32 b);"},{"location":"ja-jp/api/api/#2d-namespace-graphics2d","text":"","title":"2D \u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics2D)"},{"location":"ja-jp/api/api/#_12","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#colorf-graphics2dgetcolormul","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u4e57\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u4e57\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 1 , 1 , 1 , 1 ) \u3067\u3059\u3002","title":"ColorF Graphics2D::GetColorMul();"},{"location":"ja-jp/api/api/#colorf-graphics2dgetcoloradd","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u52a0\u7b97\u30ab\u30e9\u30fc \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u52a0\u7b97\u30ab\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ColorF ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002","title":"ColorF Graphics2D::GetColorAdd();"},{"location":"ja-jp/api/api/#blendstate-graphics2dgetblendstate","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f BlendState :: Default \u3067\u3059\u3002","title":"BlendState Graphics2D::GetBlendState();"},{"location":"ja-jp/api/api/#rasterizerstate-graphics2dgetrasterizerstate","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30e9\u30b9\u30bf\u30e9\u30a4\u30b6\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f RasterizerState :: Default2D \u3067\u3059\u3002","title":"RasterizerState Graphics2D::GetRasterizerState();"},{"location":"ja-jp/api/api/#void-graphics2dsetsamplerstateuint32-slot-const-samplerstate-samplerstate","text":"slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) samplerState: \u8a2d\u5b9a\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\u30020 \u756a\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f ScopedRenderStates2D \u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002","title":"void Graphics2D::SetSamplerState(uint32 slot, const SamplerState&amp; samplerState);"},{"location":"ja-jp/api/api/#samplerstate-graphics2dgetsamplerstateuint32-slot-0","text":"slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) \u623b\u308a\u5024: \u73fe\u5728\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 \u6307\u5b9a\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u3067\u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002","title":"SamplerState Graphics2D::GetSamplerState(uint32 slot = 0);"},{"location":"ja-jp/api/api/#optionalrect-graphics2dgetviewport","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;Rect&gt; Graphics2D::GetViewport();"},{"location":"ja-jp/api/api/#optionalpixelshader-graphics2dgetcustompixelshader","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;PixelShader&gt; Graphics2D::GetCustomPixelShader();"},{"location":"ja-jp/api/api/#optionalrendertexture-graphics2dgetrendertarget","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3. \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u5834\u5408 none \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8fd4\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;RenderTexture&gt; Graphics2D::GetRenderTarget();"},{"location":"ja-jp/api/api/#void-graphics2dsetscissorrectconst-rect-rect","text":"rect: \u30b7\u30b6\u30fc\u77e9\u5f62 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 RasterizerState \u3067\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u6709\u52b9\u306b\u3057\u305f\u5834\u5408\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002","title":"void Graphics2D::SetScissorRect(const Rect&amp; rect);"},{"location":"ja-jp/api/api/#rect-graphics2dgetscissorrect","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30b7\u30b6\u30fc\u77e9\u5f62 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30b7\u30b6\u30fc\u77e9\u5f62\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Rect ( 0 , 0 , 0 , 0 ) \u3067\u3059\u3002","title":"Rect Graphics2D::GetScissorRect();"},{"location":"ja-jp/api/api/#void-graphics2dsetlocaltransformconst-mat3x2-transform","text":"transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f Transformer2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002","title":"void Graphics2D::SetLocalTransform(const Mat3x2&amp; transform);"},{"location":"ja-jp/api/api/#const-mat3x2-graphics2dgetlocaltransform","text":"\u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b Transformer2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Graphics2D::GetLocalTransform();"},{"location":"ja-jp/api/api/#void-graphics2dsetcameratransformconst-mat3x2-transform","text":"transform: \u5ea7\u6a19\u5909\u63db\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u306f BasicCamera2D \u3092\u7528\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u95a2\u6570\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002","title":"void Graphics2D::SetCameraTransform(const Mat3x2&amp; transform);"},{"location":"ja-jp/api/api/#const-mat3x2-graphics2dgetcameratransform","text":"\u623b\u308a\u5024: 2D \u63cf\u753b\u5ea7\u6a19\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b BasicCamera2D \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u884c\u5217 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u30012D \u30ab\u30e1\u30e9\u306b\u3088\u308b\u5909\u63db\u884c\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const Mat3x2&amp; Graphics2D::GetCameraTransform();"},{"location":"ja-jp/api/api/#double-graphics2dgetmaxscaling","text":"\u623b\u308a\u5024: 2D \u63cf\u753b\u306e\u6700\u5927\u62e1\u5927\u500d\u7387 \u73fe\u5728 2D \u63cf\u753b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u7528\u3044\u3066\u76f4\u5f84 1 \u306e\u5186\u3092\u63cf\u3044\u305f\u3068\u304d\u306b\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u307e\u305f\u306f\u6955\u5186\u306e\u6700\u5927\u306e\u5f84\u3092\u8fd4\u3057\u307e\u3059\u3002\u3069\u306e\u3088\u3046\u306a\u5ea7\u6a19\u5909\u63db\u884c\u5217\u306b\u304a\u3044\u3066\u3082\u7dda\u5206\u3092\u540c\u3058\u592a\u3055\u3067\u63cf\u753b\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u623b\u308a\u5024\u306e\u5024\u304c\u4f7f\u3048\u307e\u3059\u3002","title":"double Graphics2D::GetMaxScaling();"},{"location":"ja-jp/api/api/#size-graphics2dgetrendertargetsize","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u89e3\u50cf\u5ea6 \u73fe\u5728 2D \u63cf\u753b\u3067\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3082\u3057\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b7\u30fc\u30f3\u306e\u89e3\u50cf\u5ea6\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Size Graphics2D::GetRenderTargetSize();"},{"location":"ja-jp/api/api/#void-graphics2dsetsdfparametersdouble-pixelrange-double-offset-00","text":"","title":"void Graphics2D::SetSDFParameters(double pixelRange, double offset = 0.0);"},{"location":"ja-jp/api/api/#void-graphics2dsetsdfparameterscosnt-float4-parameters","text":"pixelRange: \u4f7f\u7528\u3059\u308b SDF \u30d5\u30a9\u30f3\u30c8\u306e SDFFont :: pixelRange () \u306e\u5024 offset: SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u306e\u95be\u5024\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 parameters: SDF \u30d5\u30a9\u30f3\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc SDF \u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002","title":"void Graphics2D::SetSDFParameters(cosnt Float4&amp; parameters);"},{"location":"ja-jp/api/api/#float4-graphics2dgetsdfparameters","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u73fe\u5728 SDF \u30d5\u30a9\u30f3\u30c8\u63cf\u753b\u7528\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002x \u6210\u5206\u304c pixelRange, y \u6210\u5206\u304c offset \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002","title":"Float4 Graphics2D::GetSDFParameters();"},{"location":"ja-jp/api/api/#void-graphics2dsettextureuint32-slot-const-optionaltexture-texture","text":"slot: \u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e ( SamplerState :: MaxSamplerCount - 1 )) texture: \u30c6\u30af\u30b9\u30c1\u30e3 2D \u63cf\u753b\u306b\u9069\u7528\u3059\u308b\u3001\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u3092 .draw () \u3059\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b9\u30ed\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6700\u5927\u5024\u306f ( SamplerState :: MaxSamplerCount - 1 ) \u3067\u3059\u3002","title":"void Graphics2D::SetTexture(uint32 slot, const Optional&lt;Texture&gt;&amp; texture);"},{"location":"ja-jp/api/api/#void-graphics2dflush","text":"\u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f 2D \u63cf\u753b\u95a2\u9023\u306e\u547d\u4ee4\u3092\u3059\u3079\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 .draw () \u3084 Graphics2D :: \uff5e \u306b\u3088\u308b 2D \u63cf\u753b\u547d\u4ee4\u306f\u3001\u51e6\u7406\u306e\u52b9\u7387\u5316\u306e\u305f\u3081\u306b\u4e00\u65e6\u30a8\u30f3\u30b8\u30f3\u5185\u3067\u30b9\u30c8\u30c3\u30af\u3055\u308c\u3001\u547d\u4ee4\u304c\u96c6\u7d04\u3055\u308c\u3066\u304b\u3089 System :: Update () \u5185\u3067\u4e00\u6589\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 RenderTexture \u306e\u4e2d\u8eab\u3092 .read () \u3067\u8aad\u307f\u51fa\u3059\u5834\u5408\u3084 MSRenderTexture \u3092 .resolve () \u3059\u308b\u969b\u306b\u3001\u5b9f\u969b\u306b\u306f\u63cf\u753b\u304c\u306a\u3055\u308c\u3066\u3044\u306a\u3044\u30b1\u30fc\u30b9\u304c\u751f\u3058\u307e\u3059\u3002\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"void Graphics2D::Flush();"},{"location":"ja-jp/api/api/#template-class-type-void-graphics2dsetconstantbuffershaderstage-stage-uint32-index-const-constantbuffertype-buffer","text":"stage: \u5bfe\u8c61\u306e\u30b7\u30a7\u30fc\u30c0 index: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0\uff5e13) buffer: \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30c7\u30fc\u30bf 2D \u63cf\u753b\u306e\u30ab\u30b9\u30bf\u30e0\u30b7\u30a7\u30fc\u30c0\u3067\u7528\u3044\u308b\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u5909\u66f4\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"template &lt;class Type&gt; void Graphics2D::SetConstantBuffer(ShaderStage stage, uint32 index, const ConstantBuffer&lt;Type&gt;&amp; buffer);"},{"location":"ja-jp/api/api/#namespace-graphics","text":"","title":"\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u540d\u524d\u7a7a\u9593 (namespace Graphics)"},{"location":"ja-jp/api/api/#_13","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#void-graphicsskipclearscreen","text":"\u3053\u306e\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u958b\u59cb\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u63cf\u753b\u5185\u5bb9\u3092\u80cc\u666f\u8272\u3067\u30af\u30ea\u30a2\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"void Graphics::SkipClearScreen();"},{"location":"ja-jp/api/api/#arraydisplayoutput-graphicsenumoutputs","text":"\u623b\u308a\u5024: \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7 \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;DisplayOutput&gt; Graphics::EnumOutputs();"},{"location":"ja-jp/api/api/#arraysize-graphicsgetfullscreenresolutionsdouble-minrefreshrate-490","text":"minRefreshRate: \u8981\u6c42\u3059\u308b\u6700\u4f4e\u9650\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u623b\u308a\u5024: \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7 \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u304c minRefreshRate (Hz) \u4ee5\u4e0a\u3067\u3001\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u89e3\u50cf\u5ea6\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;Size&gt; Graphics::GetFullscreenResolutions(double minRefreshRate = 49.0);"},{"location":"ja-jp/api/api/#void-graphicssettargetframeratehzconst-optionaldouble-targetframeratehz","text":"targetFrameRateHz: \u8a2d\u5b9a\u3059\u308b\u6700\u5927\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 (Hz) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 none \u3092\u6e21\u3059\u3068 vSync \u304c\u6709\u52b9\u306b\u306a\u308a\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8a2d\u5b9a\u306b\u6cbf\u3063\u305f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u6027\u80fd\u306b\u3088\u3063\u3066\u306f\u3001\u5b9f\u6e2c\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u3001\u3053\u306e\u95a2\u6570\u3067\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u4e0b\u56de\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002","title":"void Graphics::SetTargetFrameRateHz(const Optional&lt;double&gt;&amp; targetFrameRateHz);"},{"location":"ja-jp/api/api/#optionaldouble-graphicsgettargetframeratehz","text":"\u623b\u308a\u5024: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f none Graphics :: SetTargetFrameRateHz () \u3067\u8a2d\u5b9a\u3057\u305f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f none \u3067\u3059\u3002","title":"Optional&lt;double&gt; Graphics::GetTargetFrameRateHz();"},{"location":"ja-jp/api/api/#double-graphicsgetdisplayrefreshratehz","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double Graphics::GetDisplayRefreshRateHz();"},{"location":"ja-jp/api/api/#double-graphicsgetdpiscaling","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e DPI \u62e1\u5927\u7387 (\u500d) \u73fe\u5728\u306e\u30e1\u30a4\u30f3\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u5bfe\u3057\u3066\u30e6\u30fc\u30b6\u304c\u30b7\u30b9\u30c6\u30e0\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b DPI \u62e1\u5927\u7387\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double Graphics::GetDPIScaling();"},{"location":"ja-jp/api/api/#struct-displaymode","text":"","title":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30fc\u30c9\u69cb\u9020\u4f53 (struct DisplayMode)"},{"location":"ja-jp/api/api/#_14","text":"","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ja-jp/api/api/#size-size","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u89e3\u50cf\u5ea6\uff08\u30d4\u30af\u30bb\u30eb\uff09","title":"Size size;"},{"location":"ja-jp/api/api/#double-refreshratehz","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8 (Hz)","title":"double refreshRateHz;"},{"location":"ja-jp/api/api/#struct-displayoutput","text":"","title":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u51fa\u529b\u69cb\u9020\u4f53 (struct DisplayOutput)"},{"location":"ja-jp/api/api/#_15","text":"","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ja-jp/api/api/#string-name","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u540d\u79f0","title":"String name;"},{"location":"ja-jp/api/api/#rect-displayrect","text":"\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u4eee\u60f3\u5ea7\u6a19","title":"Rect displayRect;"},{"location":"ja-jp/api/api/#arraydisplaymode-displaymodes","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u8868\u793a\u30e2\u30fc\u30c9\u306e\u4e00\u89a7","title":"Array&lt;DisplayMode&gt; displayModes;"},{"location":"ja-jp/api/api/#gui-namespace-simplegui","text":"","title":"GUI \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc (namespace SimpleGUI)"},{"location":"ja-jp/api/api/#_16","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#rectf-simpleguiheadlineregionconst-string-text-const-vec2-pos-const-optionaldouble-width-unspecified","text":"text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u898b\u51fa\u3057\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::HeadlineRegion(const String&amp; text, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#void-simpleguiheadlineconst-string-text-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"text: \u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8 pos: \u898b\u51fa\u3057\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u898b\u51fa\u3057\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u898b\u51fa\u3057\u3092\u63cf\u753b\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"void SimpleGUI::Headline(const String&amp; text, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguibuttonregionconst-string-label-const-vec2-pos-const-optionaldouble-width-unspecified","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::ButtonRegion(const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#rectf-simpleguibuttonregionatconst-string-label-const-vec2-center-const-optionaldouble-width-unspecified","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::ButtonRegionAt(const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#bool-simpleguibuttonconst-string-label-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb pos: \u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 widht: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::Button(const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguibuttonatconst-string-label-const-vec2-center-const-optionaldouble-width-unspecified-bool-enabled-true","text":"label: \u30dc\u30bf\u30f3\u306e\u30e9\u30d9\u30eb center: \u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::ButtonAt(const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguisliderregionconst-vec2-pos-double-labelwidth-800-double-sliderwidth-1200","text":"pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::SliderRegion(const Vec2&amp; pos, double labelWidth = 80.0, double sliderWidth = 120.0);"},{"location":"ja-jp/api/api/#rectf-simpleguisliderregionatconst-vec2-center-double-labelwidth-800-double-sliderwidth-1200","text":"center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::SliderRegionAt(const Vec2&amp; center, double labelWidth = 80.0, double sliderWidth = 120.0);"},{"location":"ja-jp/api/api/#bool-simpleguisliderdouble-value-const-vec2-pos-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::Slider(double&amp; value, const Vec2&amp; pos, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguisliderdouble-value-double-min-double-max-const-vec2-pos-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::Slider(double&amp; value, double min, double max, const Vec2&amp; pos, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguisliderconst-string-label-double-value-const-vec2-pos-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::Slider(const String&amp; label, double&amp; value, const Vec2&amp; pos, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguisliderconst-string-label-double-value-double-min-double-max-const-vec2-pos-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::Slider(const String&amp; label, double&amp; value, double min, double max, const Vec2&amp; pos, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguislideratdouble-value-const-vec2-center-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::SliderAt(double&amp; value, const Vec2&amp; center, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguislideratdouble-value-double-min-double-max-const-vec2-center-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::SliderAt(double&amp; value, double min, double max, const Vec2&amp; center, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguislideratconst-string-label-double-value-const-vec2-center-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::SliderAt(const String&amp; label, double&amp; value, const Vec2&amp; center, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguislideratconst-string-label-double-value-double-min-double-max-const-vec2-center-double-labelwidth-800-double-sliderwidth-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderWidth: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9577\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 label: \u30e9\u30d9\u30eb\u306e\u30c6\u30ad\u30b9\u30c8 labelWidth: \u30e9\u30d9\u30eb\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u6c34\u5e73\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::SliderAt(const String&amp; label, double&amp; value, double min, double max, const Vec2&amp; center, double labelWidth = 80.0, double sliderWidth = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguiverticalsliderregionconst-vec2-pos-double-sliderheight-1200","text":"pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::VerticalSliderRegion(const Vec2&amp; pos, double sliderHeight = 120.0);"},{"location":"ja-jp/api/api/#rectf-simpleguiverticalsliderregionatconst-vec2-center-double-sliderheight-1200","text":"center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::VerticalSliderRegionAt(const Vec2&amp; center, double sliderHeight = 120.0);"},{"location":"ja-jp/api/api/#bool-simpleguiverticalsliderdouble-value-const-vec2-pos-double-sliderheight-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::VerticalSlider(double&amp; value, const Vec2&amp; pos, double sliderHeight = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguiverticalsliderdouble-value-double-min-double-max-const-vec2-pos-double-sliderheight-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 pos: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::VerticalSlider(double&amp; value, double min, double max, const Vec2&amp; pos, double sliderHeight = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguiverticalslideratdouble-value-const-vec2-center-double-sliderheight-1200-bool-enabled-true","text":"","title":"bool SimpleGUI::VerticalSliderAt(double&amp; value, const Vec2&amp; center, double sliderHeight = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguiverticalslideratdouble-value-double-min-double-max-const-vec2-center-double-sliderheight-1200-bool-enabled-true","text":"value: \u64cd\u4f5c\u3059\u308b\u5024 center: \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 sliderHeight: \u30b9\u30e9\u30a4\u30c9\u90e8\u5206\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b min: \u5024\u306e\u6700\u5c0f\u5024 max: \u5024\u306e\u6700\u5927\u5024 \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u5782\u76f4\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::VerticalSliderAt(double&amp; value, double min, double max, const Vec2&amp; center, double sliderHeight = 120.0, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguicheckboxregionconst-string-label-const-vec2-pos-const-optionaldouble-width-unspecified","text":"label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::CheckBoxRegion(const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#rectf-simpleguicheckboxregionatconst-string-label-const-vec2-center-const-optionaldouble-width-unspecified","text":"label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::CheckBoxRegionAt(const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#bool-checkboxbool-checked-const-string-label-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb pos: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool CheckBox(bool&amp; checked, const String&amp; label, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguicheckboxatbool-checked-const-string-label-const-vec2-center-const-optionaldouble-width-unspecified-bool-enabled-true","text":"checked: \u30c1\u30a7\u30c3\u30af\u72b6\u614b label: \u30e9\u30d9\u30eb center: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool SimpleGUI::CheckBoxAt(bool&amp; checked, const String&amp; label, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguiradiobuttonsregionconst-arraystring-options-const-vec2-pos-const-optionaldouble-width-unspecified","text":"options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::RadioButtonsRegion(const Array&lt;String&gt;&amp; options, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#rectf-simpleguiradiobuttonsregionatconst-arraystring-options-const-vec2-center-const-optionaldouble-width-unspecified","text":"options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"RectF SimpleGUI::RadioButtonsRegionAt(const Array&lt;String&gt;&amp; options, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified);"},{"location":"ja-jp/api/api/#bool-simpleguiradiobuttonssize_t-index-const-arraystring-options-const-vec2-pos-const-optionaldouble-width-unspecified-bool-enabled-true","text":"index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 pos: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool SimpleGUI::RadioButtons(size_t&amp; index, const Array&lt;String&gt;&amp; options, const Vec2&amp; pos, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguiradiobuttonsatsize_t-index-const-arraystring-options-const-vec2-center-const-optionaldouble-width-unspecified-bool-enabled-true","text":"index: \u9078\u629e\u3055\u308c\u3066\u3044\u308b\u9078\u629e\u80a2\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 options: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u9078\u629e\u80a2 center: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 width \u304c unspecified \u306e\u5834\u5408\u3001\u898b\u51fa\u3057\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u305f\u5e45\u306b\u306a\u308a\u307e\u3059\u3002","title":"bool SimpleGUI::RadioButtonsAt(size_t&amp; index, const Array&lt;String&gt;&amp; options, const Vec2&amp; center, const Optional&lt;double&gt;&amp; width = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguitextboxregionconst-vec2-pos-double-width-2000","text":"pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::TextBoxRegion(const Vec2&amp; pos, double width = 200.0);"},{"location":"ja-jp/api/api/#rectf-simpleguitextboxregionatconst-vec2-center-double-width-2000","text":"center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::TextBoxRegionAt(const Vec2&amp; center, double width = 200.0);"},{"location":"ja-jp/api/api/#bool-simpleguitextboxtexteditstate-text-const-vec2-pos-double-width-2000-const-optionalsize_t-maxchars-unspecified-bool-enabled-true","text":"text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 pos: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"bool SimpleGUI::TextBox(TextEditState&amp; text, const Vec2&amp; pos, double width = 200.0, const Optional&lt;size_t&gt;&amp; maxChars = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-simpleguitextboxattexteditstate-text-const-vec2-center-double-width-2000-const-optionalsize_t-maxchars-unspecified-bool-enabled-true","text":"text: \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831 center: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 width: \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09 maxChars: \u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u8a2d\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f unspecified enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002 maxChars \u304c unspecified \u306e\u5834\u5408\u3001\u5165\u529b\u6587\u5b57\u6570\u306e\u4e0a\u9650\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"bool SimpleGUI::TextBoxAt(TextEditState&amp; text, const Vec2&amp; center, double width = 200.0, const Optional&lt;size_t&gt;&amp; maxChars = unspecified, bool enabled = true);"},{"location":"ja-jp/api/api/#rectf-simpleguicolorpickerregionconst-vec2-pos","text":"pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::ColorPickerRegion(const Vec2&amp; pos);"},{"location":"ja-jp/api/api/#rectf-simpleguicolorpickerregionatconst-vec2-center","text":"center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 \u623b\u308a\u5024: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u9818\u57df\uff08\u30d4\u30af\u30bb\u30eb\uff09 SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u306e\u9818\u57df\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"RectF SimpleGUI::ColorPickerRegionAt(const Vec2&amp; center);"},{"location":"ja-jp/api/api/#bool-simpleguicolorpickerhsv-hsv-const-vec2-pos-bool-enabled-true","text":"hsv: \u64cd\u4f5c\u3059\u308b\u8272 pos: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool SimpleGUI::ColorPicker(HSV&amp; hsv, const Vec2&amp; pos, bool enabled = true);"},{"location":"ja-jp/api/api/#bool-colorpickerathsv-hsv-const-vec2-center-bool-enabled-true","text":"hsv: \u64cd\u4f5c\u3059\u308b\u8272 center: \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u4e2d\u5fc3\u306e\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09 enabled: \u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b \u623b\u308a\u5024: \u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false SimpleGUI \u30b9\u30bf\u30a4\u30eb\u3067\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408 true \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool ColorPickerAt(HSV&amp; hsv, const Vec2&amp; center, bool enabled = true);"},{"location":"ja-jp/api/api/#struct-texteditstate","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306a\u3069\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u3059\u308b\u969b\u306b\u4f7f\u3046\u60c5\u5831\u3067\u3059\u3002","title":"\u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53 (struct TextEditState)"},{"location":"ja-jp/api/api/#_17","text":"","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ja-jp/api/api/#string-text","text":"\u5165\u529b\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8","title":"String text;"},{"location":"ja-jp/api/api/#size_t-cursorpos-0","text":"\u5165\u529b\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e","title":"size_t cursorPos = 0;"},{"location":"ja-jp/api/api/#bool-active-false","text":"\u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b","title":"bool active = false;"},{"location":"ja-jp/api/api/#stopwatch-leftpressstopwatch","text":"\u30ab\u30fc\u30bd\u30eb\u306e\u5de6\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09","title":"Stopwatch leftPressStopwatch;"},{"location":"ja-jp/api/api/#stopwatch-rightpressstopwatch","text":"\u30ab\u30fc\u30bd\u30eb\u306e\u53f3\u79fb\u52d5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09","title":"Stopwatch rightPressStopwatch;"},{"location":"ja-jp/api/api/#stopwatch-cursorstopwatch","text":"\u5165\u529b\u30ab\u30fc\u30bd\u30eb\u306e\u70b9\u6ec5\u30bf\u30a4\u30df\u30f3\u30b0\u7528\u306e\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09","title":"Stopwatch cursorStopwatch;"},{"location":"ja-jp/api/api/#_18","text":"","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ja-jp/api/api/#texteditstate-default","text":"","title":"TextEditState() = default();"},{"location":"ja-jp/api/api/#texteditstateconst-string-defaulttext","text":"defaultText: \u521d\u671f\u30c6\u30ad\u30b9\u30c8 \u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002","title":"TextEditState(const String&amp; defaultText);"},{"location":"ja-jp/api/api/#_19","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ja-jp/api/api/#void-clear","text":"\u30c6\u30ad\u30b9\u30c8\u7de8\u96c6\u60c5\u5831\u3092\u3059\u3079\u3066\u30af\u30ea\u30a2\u3057\u3001\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u306b\u3057\u307e\u3059\u3002","title":"void clear();"},{"location":"ja-jp/api/api/#class-stopwatch","text":"\u7d4c\u904e\u6642\u9593\u3092\u8a08\u6e2c\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002","title":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u30af\u30e9\u30b9 (class Stopwatch)"},{"location":"ja-jp/api/api/#_20","text":"","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ja-jp/api/api/#stopwatchbool-startimmediately-false","text":"","title":"Stopwatch(bool startImmediately = false);"},{"location":"ja-jp/api/api/#stopwatchconst-duration-time-bool-startimmediately-false","text":"startImmediately: \u6642\u9593\u306e\u8a08\u6e2c\u3092\u76f4\u3061\u306b\u958b\u59cb\u3059\u308b\u304b\u306e\u30d5\u30e9\u30b0 time: \u6700\u521d\u306b\u9032\u3081\u3066\u304a\u304f\u6642\u9593 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 startImmediately \u304c true \u306e\u5834\u5408\u306f\u4f5c\u6210\u3068\u540c\u6642\u306b\u6642\u9593\u306e\u8a08\u6e2c\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002","title":"Stopwatch(const Duration&amp; time, bool startImmediately = false);"},{"location":"ja-jp/api/api/#_21","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ja-jp/api/api/#void-start","text":"\u6642\u9593\u306e\u8a08\u6e2c\u3092\u958b\u59cb\u307e\u305f\u306f\u518d\u958b\u3057\u307e\u3059\u3002\u3059\u3067\u306b\u8a08\u6e2c\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"void start();"},{"location":"ja-jp/api/api/#int32-d","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 d();"},{"location":"ja-jp/api/api/#int64-d64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300151 \u6642\u9593\u306e\u5834\u5408\u306f 2 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 d64();"},{"location":"ja-jp/api/api/#double-df","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u65e5\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300251 \u6642\u9593\u306e\u5834\u5408\u306f 2 . 125 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double dF();"},{"location":"ja-jp/api/api/#int32-h","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 h();"},{"location":"ja-jp/api/api/#int64-h64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u300140 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 h64();"},{"location":"ja-jp/api/api/#double-hf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u6642\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u300240 \u6642\u9593\u534a\u306e\u5834\u5408\u306f 40 . 5 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double hF();"},{"location":"ja-jp/api/api/#int32-min","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 min();"},{"location":"ja-jp/api/api/#int64-min64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30012 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 min64();"},{"location":"ja-jp/api/api/#double-minf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u5206\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30022 \u6642\u9593 3 \u5206 6 \u79d2\u306e\u5834\u5408\u306f 123 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double minF();"},{"location":"ja-jp/api/api/#int32-s","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 s();"},{"location":"ja-jp/api/api/#int64-s64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30013 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 s64();"},{"location":"ja-jp/api/api/#double-sf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30023 \u5206 15 \u79d2 10 \u306e\u5834\u5408\u306f 195 . 1 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double sF();"},{"location":"ja-jp/api/api/#int32-ms","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int32 ms();"},{"location":"ja-jp/api/api/#int64-ms64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30019123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 ms64();"},{"location":"ja-jp/api/api/#double-msf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30029123.4 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 9123 . 4 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double msF();"},{"location":"ja-jp/api/api/#int64-us","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 us();"},{"location":"ja-jp/api/api/#int64-us64","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\u3089\u308c\u30015678.9 \u30de\u30a4\u30af\u30ed\u79d2 \u306e\u5834\u5408\u306f 5678 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 us64();"},{"location":"ja-jp/api/api/#double-usf","text":"\u623b\u308a\u5024: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u30025678.9 \u30df\u30ea\u79d2 \u306e\u5834\u5408\u306f 5678 . 9 \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double usF();"},{"location":"ja-jp/api/api/#duration-elapsed","text":"\u623b\u308a\u5024: \u7d4c\u904e\u6642\u9593 ( Duration \u578b) \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092 Duration \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002","title":"Duration elapsed();"},{"location":"ja-jp/api/api/#bool-isstarted","text":"\u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool isStarted();"},{"location":"ja-jp/api/api/#bool-ispaused","text":"\u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool isPaused();"},{"location":"ja-jp/api/api/#bool-isrunning","text":"\u623b\u308a\u5024: \u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u3001\u306a\u304a\u304b\u3064\u4e00\u6642\u505c\u6b62\u4e2d\u3067\u306a\u3044\u5834\u5408 true \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool isRunning();"},{"location":"ja-jp/api/api/#void-pause","text":"\u6642\u9593\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002\u8a08\u6e2c\u958b\u59cb\u6e08\u307f\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u3059\u3067\u306b\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"void pause();"},{"location":"ja-jp/api/api/#void-resume","text":"\u4e00\u6642\u505c\u6b62\u4e2d\u306e\u6642\u9593\u306e\u8a08\u6e2c\u3092\u518d\u3073\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u307e\u3059\u3002\u4e00\u6642\u505c\u6b62\u4e2d\u51fa\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"void resume();"},{"location":"ja-jp/api/api/#void-reset","text":"\u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u307e\u3059\u3002","title":"void reset();"},{"location":"ja-jp/api/api/#void-restart","text":"\u8a08\u6e2c\u3055\u308c\u305f\u6642\u9593\u306e\u8a18\u9332\u3092\u6d88\u53bb\u3057\u3066\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u8a08\u6e2c\u672a\u958b\u59cb\u306e\u72b6\u614b\u306b\u623b\u3057\u3001\u518d\u5ea6\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002","title":"void restart();"},{"location":"ja-jp/api/api/#void-setconst-duration-time","text":"time: \u8a2d\u5b9a\u3059\u308b\u6642\u9593 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"void set(const Duration&amp; time);"},{"location":"ja-jp/api/api/#string-formatstringview-format-uhmmssxx_sv","text":"format: \u6642\u523b\u306e\u8868\u73fe\u65b9\u6cd5 \u623b\u308a\u5024: \u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u305f\u6642\u523b \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002","title":"String format(StringView format = U&quot;H:mm:ss.xx&quot;_sv);"},{"location":"ja-jp/api/api/#_22","text":"","title":"\u975e\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ja-jp/api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time","text":"","title":"bool operator &lt;(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"ja-jp/api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time_1","text":"","title":"bool operator &lt;=(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"ja-jp/api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time_2","text":"","title":"bool operator &gt;(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"ja-jp/api/api/#bool-operator-const-stopwatch-s-const-microsecondsf-time_3","text":"","title":"bool operator &gt;=(const Stopwatch&amp; s, const MicrosecondsF&amp; time);"},{"location":"ja-jp/api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s","text":"","title":"bool operator &lt;(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"ja-jp/api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s_1","text":"","title":"bool operator &lt;=(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"ja-jp/api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s_2","text":"","title":"bool operator &gt;(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"ja-jp/api/api/#bool-operator-const-microsecondsf-time-const-stopwatch-s_3","text":"s: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 time: \u6bd4\u8f03\u3059\u308b\u6642\u9593 \u623b\u308a\u5024: \u6bd4\u8f03\u306e\u7d50\u679c \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3067\u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u3001\u5225\u306e\u6642\u9593\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002","title":"bool operator &gt;=(const MicrosecondsF&amp; time, const Stopwatch&amp; s);"},{"location":"ja-jp/api/api/#void-formatterformatdata-formatdata-const-stopwatch-value","text":"formatData: \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30c7\u30fc\u30bf\uff08\u5185\u90e8\u51e6\u7406\u7528\uff09 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u6587\u5b57\u5217\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u307e\u3059\u3002\u5909\u63db\u306b\u306f Stopwatch :: format () \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002","title":"void Formatter(FormatData&amp; formatData, const Stopwatch&amp; value);"},{"location":"ja-jp/api/api/#template-class-chartype-stdbasic_ostreamchartype-operator-stdbasic_ostreamchartype-output-const-stopwatch-value","text":"output: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 value: \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u623b\u308a\u5024: \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 \u8a08\u6e2c\u3055\u308c\u305f\u7d4c\u904e\u6642\u9593\u3092\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002","title":"template &lt;class CharType&gt; std::basic_ostream&lt;CharType&gt;&amp; operator &lt;&lt;(std::basic_ostream&lt;CharType&gt; output, const Stopwatch&amp; value);"},{"location":"ja-jp/api/api/#_23","text":"","title":"\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u95a2\u9023\u306e\u5b9a\u6570"},{"location":"ja-jp/api/api/#enum-class-openmode","text":"\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u307f\u7528\u9014\u3067\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 BinaryWriter , TextWriter \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002","title":"enum class OpenMode"},{"location":"ja-jp/api/api/#openmodetrunc","text":"\u53e4\u3044\u5185\u5bb9\u3092\u7834\u68c4\u3057\u3001\u30b5\u30a4\u30ba\u3092\u30bc\u30ed\u306b\u3057\u305f\u72b6\u614b\u304b\u3089\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002","title":"OpenMode::Trunc"},{"location":"ja-jp/api/api/#openmodeappend","text":"\u53e4\u3044\u5185\u5bb9\u3092\u4fdd\u6301\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u65b0\u3057\u304f\u66f8\u304d\u8fbc\u307f\u3092\u3057\u307e\u3059\u3002","title":"OpenMode::Append"},{"location":"ja-jp/api/api/#enum-class-copyoption","text":"\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u969b\u3001\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u305f\u3068\u304d\u306e\u6271\u3044\u3067\u3059\u3002 FileSystem :: Copy () \u306a\u3069\u3067\u4f7f\u3044\u307e\u3059\u3002","title":"enum class CopyOption"},{"location":"ja-jp/api/api/#copyoptionnone","text":"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3092\u5931\u6557\u3055\u305b\u3001\u30a8\u30e9\u30fc\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"CopyOption::None"},{"location":"ja-jp/api/api/#copyoptionskipexisting","text":"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u305a\u306b\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002","title":"CopyOption::SkipExisting"},{"location":"ja-jp/api/api/#copyoptionoverwriteexisting","text":"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u65e2\u306b\u4f7f\u308f\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002","title":"CopyOption::OverwriteExisting"},{"location":"ja-jp/api/api/#copyoptionupdateexisting","text":"\u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u30b3\u30d4\u30fc\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u30b3\u30d4\u30fc\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u3088\u308a\u3082\u65b0\u3057\u3051\u308c\u3070\u4e0a\u66f8\u304d\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002","title":"CopyOption::UpdateExisting"},{"location":"ja-jp/api/api/#copyoptiondefault-none","text":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b3\u30d4\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3001 CopyOption :: None \u3067\u3059\u3002","title":"CopyOption::Default = None"},{"location":"ja-jp/api/api/#enum-class-specialfolder","text":"\u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u3092\u8868\u3057\u307e\u3059\u3002","title":"enum class SpecialFolder"},{"location":"ja-jp/api/api/#specialfolderdesktop","text":"\u30e6\u30fc\u30b6\u306e\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Desktop"},{"location":"ja-jp/api/api/#specialfolderdocuments","text":"\u30e6\u30fc\u30b6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Documents"},{"location":"ja-jp/api/api/#specialfolderlocalappdata","text":"\u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"SpecialFolder::LocalAppData"},{"location":"ja-jp/api/api/#specialfolderpictures","text":"\u30e6\u30fc\u30b6\u306e\u30d4\u30af\u30c1\u30e3\u30fc\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Pictures"},{"location":"ja-jp/api/api/#specialfoldermusic","text":"\u30e6\u30fc\u30b6\u306e\u30df\u30e5\u30fc\u30b8\u30c3\u30af\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Music"},{"location":"ja-jp/api/api/#specialfoldervideos","text":"\u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002","title":"SpecialFolder::Videos"},{"location":"ja-jp/api/api/#specialfoldercaches-localappdata","text":"\u30e6\u30fc\u30b6\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u91cd\u8981\u3067\u306a\u3044\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u306a\u3069\u3001\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 SpecialFolder :: LocalAppData \u306e\u5225\u540d\u3067\u3059\u3002","title":"SpecialFolder::Caches = LocalAppData"},{"location":"ja-jp/api/api/#specialfoldermovies-videos","text":"\u30e6\u30fc\u30b6\u306e\u30d3\u30c7\u30aa\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002 SpecialFolder :: Movies \u306e\u5225\u540d\u3067\u3059\u3002","title":"SpecialFolder::Movies = Videos"},{"location":"ja-jp/api/api/#specialfoldersystemfonts","text":"\u30b7\u30b9\u30c6\u30e0\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / System / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002","title":"SpecialFolder::SystemFonts"},{"location":"ja-jp/api/api/#specialfolderlocalfonts","text":"\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f / Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002","title":"SpecialFolder::LocalFonts"},{"location":"ja-jp/api/api/#specialfolderuserfonts","text":"\u30e6\u30fc\u30b6\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002Windows \u3067\u306f OS \u30dc\u30ea\u30e5\u30fc\u30e0\u306e WINDOWS / Fonts / , macOS \u3067\u306f ~/ Library / Fonts / , Linux \u3067\u306f Documents \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3057\u307e\u3059\u3002","title":"SpecialFolder::UserFonts"},{"location":"ja-jp/api/api/#namespace-filesystem","text":"","title":"\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u540d\u524d\u7a7a\u9593 (namespace FileSystem)"},{"location":"ja-jp/api/api/#_24","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#bool-filesystemexistsfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::Exists(FilePathView path);"},{"location":"ja-jp/api/api/#bool-filesystemisdirectoryfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsDirectory(FilePathView path);"},{"location":"ja-jp/api/api/#bool-filesystemisfilefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsFile(FilePathView path);"},{"location":"ja-jp/api/api/#bool-filesystemisresourcefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u30d1\u30b9\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u304c\u3001\u5b58\u5728\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u6307\u3059\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u307f (Windows) \u307e\u305f\u306f\u30d0\u30f3\u30c9\u30eb (macOS) \u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059\u3002Linux \u3067\u306f / resources / \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30ea\u30bd\u30fc\u30b9\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002","title":"bool FileSystem::IsResource(FilePathView path);"},{"location":"ja-jp/api/api/#filepath-filesystemfullpathfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u7d76\u5bfe\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5834\u5408\u306f\u672b\u5c3e\u304c / \u306b\u306a\u308a\u307e\u3059\u3002","title":"FilePath FileSystem::FullPath(FilePathView path);"},{"location":"ja-jp/api/api/#platformnativefilepath-filesystemnativepathfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30cd\u30a4\u30c6\u30a3\u30d6\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u3001OS \u30cd\u30a4\u30c6\u30a3\u30d6\u8868\u73fe\u3067\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Platform::NativeFilePath FileSystem::NativePath(FilePathView path);"},{"location":"ja-jp/api/api/#string-filesystemextensionfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e .\u3092\u542b\u307e\u306a\u3044\u5c0f\u6587\u5b57\u306e\u62e1\u5f35\u5b50\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"png\"\uff09","title":"String FileSystem::Extension(FilePathView path);"},{"location":"ja-jp/api/api/#string-filesystemfilenamefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture.png\"\uff09","title":"String FileSystem::FileName(FilePathView path);"},{"location":"ja-jp/api/api/#string-filesystembasenamefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u540d\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u62e1\u5f35\u5b50\u3092\u542b\u307e\u306a\u3044\u540d\u524d\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"picture\"\uff09","title":"String FileSystem::BaseName(FilePathView path);"},{"location":"ja-jp/api/api/#filepath-filesystemparentpathfilepathview-path-size_t-level-0-filepath-basefullpath-nullptr","text":"path: \u30d1\u30b9 level: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u968e\u5c64\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 0 baseFullPath: path \u306e\u7d76\u5bfe\u30d1\u30b9\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09 \u623b\u308a\u5024: \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002\u89aa\u306e\u3055\u3089\u306b\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5f97\u305f\u3044\u5834\u5408\u306b\u306f level \u3092\u5897\u3084\u3057\u307e\u3059\u3002\u3061\u3087\u3046\u3069 1 \u3064\u4e0a\u4f4d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u57fa\u6e96\u306b 0 \u3067\u30011 \u305a\u3064\u5897\u3084\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::ParentPath(FilePathView path, size_t level = 0, FilePath* baseFullPath = nullptr);"},{"location":"ja-jp/api/api/#filepath-filesystemvolumepathfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u7a7a\u306e\u6587\u5b57\u5217 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30c9\u30e9\u30a4\u30d6\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\uff08\u4f8b: \"C:/\"\uff09","title":"FilePath FileSystem::VolumePath(FilePathView path);"},{"location":"ja-jp/api/api/#bool-filesystemisemptydirectoryfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f true, \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u3067\u3042\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsEmptyDirectory(FilePathView path);"},{"location":"ja-jp/api/api/#int64-filesystemsizefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 FileSystem::Size(FilePathView path);"},{"location":"ja-jp/api/api/#int64-filesystemfilesizefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u7a7a\u3067\u3042\u308b\u5834\u5408\u306f 0 \u3092\u8fd4\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"int64 FileSystem::FileSize(FilePathView path);"},{"location":"ja-jp/api/api/#optionaldatetime-filesystemcreationtimefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u4f5c\u6210\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;DateTime&gt; FileSystem::CreationTime(FilePathView path);"},{"location":"ja-jp/api/api/#optionaldatetime-filesystemwritetimefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u66f4\u65b0\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u66f4\u65b0\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;DateTime&gt; FileSystem::WriteTime(FilePathView path);"},{"location":"ja-jp/api/api/#optionaldatetime-filesystemaccesstimefilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 none \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30a2\u30af\u30bb\u30b9\u65e5\u6642\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Optional&lt;DateTime&gt; FileSystem::AccessTime(FilePathView path);"},{"location":"ja-jp/api/api/#arrayfilepath-filesystemdirectorycontentsconst-filepath-path-bool-recursive-true","text":"path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 recursive: \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u30d5\u30a9\u30eb\u30c0\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3001\u305d\u306e\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u518d\u5e30\u7684\u306b\u5217\u6319\u3059\u308b\u5834\u5408\u306f true \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7 \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Array&lt;FilePath&gt; FileSystem::DirectoryContents(const FilePath&amp; path, bool recursive = true);"},{"location":"ja-jp/api/api/#const-filepath-filesysteminitialdirectory","text":"\u623b\u308a\u5024: \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3057\u305f\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const FilePath&amp; FileSystem::InitialDirectory();"},{"location":"ja-jp/api/api/#const-filepath-filesystemmodulepath","text":"\u623b\u308a\u5024: \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9 \u73fe\u5728\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"const FilePath&amp; FileSystem::ModulePath();"},{"location":"ja-jp/api/api/#filepath-filesystemcurrentdirectory","text":"\u623b\u308a\u5024: \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::CurrentDirectory();"},{"location":"ja-jp/api/api/#bool-filesystemchangecurrentdirectoryfilepathview-path","text":"path: \u65b0\u3057\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u5909\u66f4\u306b\u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"bool FileSystem::ChangeCurrentDirectory(FilePathView path);"},{"location":"ja-jp/api/api/#filepath-filesystemspecialfolderpathspecialfolder-folder","text":"folder: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u7a2e\u985e \u623b\u308a\u5024: \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9 \u7279\u6b8a\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::SpecialFolderPath(SpecialFolder folder);"},{"location":"ja-jp/api/api/#filepath-filesystemtemporarydirectorypath","text":"\u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d1\u30b9\u306e\u672b\u5c3e\u306b\u306f '/' \u304c\u4ed8\u304d\u307e\u3059\u3002","title":"FilePath FileSystem::TemporaryDirectoryPath();"},{"location":"ja-jp/api/api/#filepath-filesystemuniquefilepathfilepathview-directory-temporarydirectorypath","text":"directory: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u623b\u308a\u5024: \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u7528\u306e\u56fa\u6709\u306a\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f \".tmp\" \u3067\u3059\u3002","title":"FilePath FileSystem::UniqueFilePath(FilePathView directory = TemporaryDirectoryPath());"},{"location":"ja-jp/api/api/#filepath-filesystemrelativepathfilepathview-path-filepathview-start-filesystemcurrentdirectory","text":"path: \u30d1\u30b9 start: \u76f8\u5bfe\u30d1\u30b9\u306e\u57fa\u6e96\u4f4d\u7f6e \u623b\u308a\u5024: \u76f8\u5bfe\u30d1\u30b9 \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u3092\u76f8\u5bfe\u30d1\u30b9\u306b\u5909\u63db\u3057\u307e\u3059\u3002","title":"FilePath FileSystem::RelativePath(FilePathView path, FilePathView start = FileSystem::CurrentDirectory());"},{"location":"ja-jp/api/api/#bool-filesystemcreatedirectoriesfilepathview-path","text":"path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","title":"bool FileSystem::CreateDirectories(FilePathView path);"},{"location":"ja-jp/api/api/#bool-filesystemcreateparentdirectoriesfilepathview-path","text":"path: \u30d1\u30b9 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u6307\u5b9a\u3057\u305f\u30d1\u30b9\u307e\u3067\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","title":"bool FileSystem::CreateParentDirectories(FilePathView path);"},{"location":"ja-jp/api/api/#bool-filesystemcopyfilepathview-from-filepathview-to-copyoption-copyoption-copyoptiondefault","text":"from: \u30b3\u30d4\u30fc\u3059\u308b\u30d1\u30b9 to: \u30b3\u30d4\u30fc\u5148\u306e\u30d1\u30b9 copyOption: \u540d\u524d\u885d\u7a81\u6642\u306e\u3075\u308b\u307e\u3044 \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002","title":"bool FileSystem::Copy(FilePathView from, FilePathView to, CopyOption copyOption = CopyOption::Default);"},{"location":"ja-jp/api/api/#bool-filesystemremovefilepathview-path-bool-allowundo-false","text":"path: \u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u307e\u3059\u3002","title":"bool FileSystem::Remove(FilePathView path, bool allowUndo = false);"},{"location":"ja-jp/api/api/#bool-filesystemremovecontentsfilepathview-path-bool-allowundo-false","text":"path: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 allowUndo: \u524a\u9664\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u307f\u7bb1\u306b\u9001\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u623b\u308a\u5024: \u6210\u529f\u3057\u305f\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e2d\u8eab\u3060\u3051\u3092\u524a\u9664\u3057\u307e\u3059\u3002","title":"bool FileSystem::RemoveContents(FilePathView path, bool allowUndo = false);"},{"location":"ja-jp/api/api/#bool-filesystemrenamefilepathview-from-filepathview-to","text":"from: \u5909\u66f4\u524d\u306e\u30d1\u30b9 to: \u5909\u66f4\u5f8c\u306e\u30d1\u30b9 \u623b\u308a\u5024: \u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u540d\u524d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002","title":"bool FileSystem::Rename(FilePathView from, FilePathView to);"},{"location":"ja-jp/api/api/#bool-filesystemissandboxed","text":"\u623b\u308a\u5024: macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5834\u5408 true , \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408 false macOS \u306e\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002Windows \u3084 Linux \u3067\u306f\u5e38\u306b false \u3092\u8fd4\u3057\u307e\u3059\u3002","title":"bool FileSystem::IsSandBoxed();"},{"location":"ja-jp/api/api/#_25","text":"","title":"\u30ad\u30fc\u5b9a\u6570"},{"location":"ja-jp/api/api/#_26","text":"","title":"\u30de\u30a6\u30b9\u30dc\u30bf\u30f3"},{"location":"ja-jp/api/api/#constexpr-key-mousel","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u3067\u3059\u3002","title":"constexpr Key MouseL;"},{"location":"ja-jp/api/api/#constexpr-key-mouser","text":"\u30de\u30a6\u30b9\u306e\u53f3\u30dc\u30bf\u30f3\u3067\u3059\u3002","title":"constexpr Key MouseR;"},{"location":"ja-jp/api/api/#constexpr-key-mousem","text":"\u30de\u30a6\u30b9\u306e\u4e2d\u592e\u30dc\u30bf\u30f3\u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseM;"},{"location":"ja-jp/api/api/#constexpr-key-mousex1","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 1 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX1;"},{"location":"ja-jp/api/api/#constexpr-key-mousex2","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 2 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX2;"},{"location":"ja-jp/api/api/#constexpr-key-mousex3","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 3 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX3;"},{"location":"ja-jp/api/api/#constexpr-key-mousex4","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 4 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX4;"},{"location":"ja-jp/api/api/#constexpr-key-mousex5","text":"\u30de\u30a6\u30b9\u306e\u62e1\u5f35\u30dc\u30bf\u30f3 5 \u3067\u3059\u3002\u30de\u30a6\u30b9\u306b\u3088\u3063\u3066\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002","title":"constexpr Key MouseX5;"},{"location":"ja-jp/api/api/#namespace-mouse","text":"","title":"\u30de\u30a6\u30b9\u540d\u524d\u7a7a\u9593 (namespace Mouse)"},{"location":"ja-jp/api/api/#_27","text":"","title":"\u95a2\u6570"},{"location":"ja-jp/api/api/#double-wheel","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double Wheel();"},{"location":"ja-jp/api/api/#double-wheelh","text":"\u623b\u308a\u5024: \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf \u30de\u30a6\u30b9\u306e\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"double WheelH();"},{"location":"ja-jp/articles/mistakes/","text":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044 \u00b6 \u521d\u5fc3\u8005\u7de8 \u00b6 Texture \u3092\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b \u00b6 Texture , Font , Audio \u30af\u30e9\u30b9\u306f\u3001\u53c2\u7167\u30ab\u30a6\u30f3\u30c8\u65b9\u5f0f\u3067\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4e00\u5ea6\u4f5c\u6210\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30d4\u30fc\u306f\u8efd\u91cf\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // OK: \u30b3\u30b9\u30c8\u7121\u3057\u3067\u30b3\u30d4\u30fc const Texture texture2 = texture ; while ( System :: Update ()) { texture2 . draw ( 0 , 0 ); } } \u307e\u305f\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u53c2\u7167\u30ab\u30a6\u30f3\u30bf\u304c 0 \u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u3001\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u304b\u3089\u89e3\u653e\u3059\u308b\u306e\u3067\u3001\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u7834\u68c4\u306e\u51e6\u7406\u3092\u660e\u793a\u7684\u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3002Siv3D \u306e\u30af\u30e9\u30b9\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u308f\u305a\u306b\u305d\u306e\u307e\u307e\u6271\u3046\u306e\u304c\u4f5c\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Texture * pTexture = new Texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 pTexture -> draw ( 0 , 0 ); } // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 delete pTexture ; } \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u5185\u3067\u91cd\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b \u00b6 Texture , Font , Audio \u3068\u3044\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3084\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306b\u975e\u5e38\u306b\u5927\u304d\u306a\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u3067\u7e70\u308a\u8fd4\u3057\u3053\u308c\u3089\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306e\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3001Siv3D \u306f\u5b9f\u884c\u4e2d\u306b\u8b66\u544a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u8aa4\u308a Texture ( U \"example/windmill.png\" ). draw ( 0 , 0 ); } } \u6b21\u306e\u3088\u3046\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210 const Texture texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } } \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528\u3059\u308b\u306e\u3082 OK \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); while ( System :: Update ()) { TextureAsset ( U \"Windmill\" ). draw ( 0 , 0 ); } } \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b \u00b6 \u6700\u8fd1\u306f 120Hz \u3084 144Hz \u306a\u3069\u3001\u9ad8\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306e\u30e2\u30cb\u30bf\u30fc\u304c\u5897\u3048\u3066\u3044\u307e\u3059\u3002\u300c\u6bce\u30d5\u30ec\u30fc\u30e0 3 \u30d4\u30af\u30bb\u30eb\u79fb\u52d5\u300d\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300160Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb\u3001120Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 360 \u30d4\u30af\u30bb\u30eb\u3068\u3001\u901f\u5ea6\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u66f8\u304d\u65b9\u306f\u907f\u3051\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002 Scene :: Delta () \u3084 Scene :: Time () , Stopwatch \u3092\u4f7f\u3063\u3066\u3001\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u304b\u3001 Effect , Transition , Periodic \u306e\u3088\u3046\u306b\u6642\u9593\u30d9\u30fc\u30b9\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u4f7f\u3063\u3066\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u5316\u3059\u308b\u3068\u5186\u306e\u79fb\u52d5\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // NG: \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u79fb\u52d5\u91cf const double speed = 3 ; // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= speed ; } if ( KeyRight . pressed ()) { pos . x += speed ; } if ( KeyUp . pressed ()) { pos . y -= speed ; } if ( KeyDown . pressed ()) { pos . y += speed ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } } \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f Scene :: Delta () \u306b\u5fdc\u3058\u3066\u79fb\u52d5\u91cf\u3092\u8abf\u6574\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3042\u3089\u3086\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3067\u3082\u4e00\u5b9a\u306e\u901f\u5ea6\u3092\u7dad\u6301\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // \u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb const double speed = 180.0 ; // ok: \u30d5\u30ec\u30fc\u30e0\u306e\u7d4c\u904e\u6642\u9593\u306b\u5fdc\u3058\u305f\u79fb\u52d5\u91cf const double delta = speed * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } } \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u8b66\u544a\u3092\u7121\u8996\u3059\u308b \u00b6 Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306e\u3044\u304f\u3064\u304b\u306f\u3001\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3057\u305f\u3068\u304d\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e9b\u7d30\u306a\u8b66\u544a\u306e\u7121\u8996\u3092\u7d9a\u3051\u3066\u3044\u308b\u3068\u3001\u3053\u3046\u3057\u305f\u8b66\u544a\u306b\u3088\u3063\u3066\u767a\u898b\u3067\u304d\u308b\u30d0\u30b0\u3092\u898b\u904e\u3054\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002Siv3D \u3067\u306f\u3001\u30e6\u30fc\u30b6\u306e\u30b3\u30fc\u30c9\u306b\u7531\u6765\u3059\u308b\u8b66\u544a\u3092\u4e00\u5207\u51fa\u3055\u305a\u306b\u3001\u975e\u5e38\u306b\u5927\u304d\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u8b66\u544a\u306a\u3057\u3092\u76ee\u6307\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u306e\u3067\u5bb9\u6613\u306b\u767a\u898b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Circle circle ( 200 , 300 , 40 ); while ( System :: Update ()) { if ( MouseL . down ()) { // moveBy \u3068\u9593\u9055\u3048\u3066 movedBy \u3092\u4f7f\u3063\u3066\u3044\u308b circle . movedBy ( 20 , 0 ); } circle . draw (); } } \u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5207\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u306a\u3044 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u3067\u306f App \u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b example / windmill . png \u3082\u3053\u3053\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u81ea\u5206\u3067\u7528\u610f\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3044\u3068\u304d\u306f\u3001 App \u30d5\u30a9\u30eb\u30c0\u306b\u914d\u7f6e\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // App \u30d5\u30a9\u30eb\u30c0\u306bmy-picture.png \u3092\u914d\u7f6e\u3057\u305f\u5834\u5408 const Texture texture ( U \"my-picture.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } } \u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u7de8 \u00b6 Texture \u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u4f7f\u3046 \u00b6 Texture , Font , Audio \u306f\u3001Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u3042\u3068\u306b\u4f5c\u6210\u3055\u308c\u3001Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u524d\u306b\u7834\u68c4\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Main () \u95a2\u6570\u306e\u4e2d\u3084\u3001\u305d\u3053\u3067\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3067\u3042\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u306f Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u305f\u308a\u3001\u7d42\u4e86\u51e6\u7406\u5f8c\u306b\u7834\u68c4\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u524d\u8005\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u306e\u4f7f\u7528\u3092\u907f\u3051\u3001\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // NG: Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u308b\u306e\u3067\u5b9f\u884c\u6642\u30a8\u30e9\u30fc Texture global_texture ( U \"example/windmill.png\" ); void Draw () { // \u975e\u63a8\u5968: Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u3042\u3068\u306b\u7834\u68c4\u3055\u308c\u308b static Texture static_texture ( U \"example/windmill.png\" ); static_texture . draw ( 0 , 0 ); } void Main () { while ( System :: Update ()) { } } \u7e2e\u5c0f\u8868\u793a\u3059\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092 TextureDesc :: Mipped \u6307\u5b9a\u3057\u306a\u3044 \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3057\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f TextureDesc :: Mipped \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u7e2e\u5c0f\u63cf\u753b\u3057\u305f\u3068\u304d\u306b\u753b\u8cea\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u304b\u3089 Texture \u3092\u4f5c\u308b\u969b\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8a18\u8ff0\u306f\u4e0d\u8981\u3067\u3059\u3002 \u30b3\u30fc\u30c9\u5168\u822c\u7de8 \u00b6 \u4e0d\u5fc5\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b \u00b6 < Siv3D . hpp > \u306f < cmath > \u3084 < array > , < algorithm > \u306a\u3069\u3001\u3088\u304f\u4f7f\u308f\u308c\u308b C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3059\u3067\u306b\u5185\u90e8\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002C++ \u6a19\u6e96\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u6642\u306b\u3060\u3051\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308c\u3070 OK \u3067\u3059\u3002\u4f8b\u3068\u3057\u3066 std :: any \u3092\u4f7f\u3046\u306b\u306f < any > , std :: variant \u3092\u4f7f\u3046\u306b\u306f < variant > \u3092\u8ffd\u52a0\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 std :: vector \u3084 std :: string \u3092\u4f7f\u3046 \u00b6 std :: vector \u3084 std :: string \u3092\u4f7f\u3046\u3068\u3001Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3068\u9023\u4fc2\u3059\u308b\u3068\u304d\u306b\u5909\u63db\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u304c\u7c21\u5358\u306a\u95a2\u6570\u3067\u5b9f\u73fe\u3067\u304d\u306a\u3044\u305f\u3081\u975e\u52b9\u7387\u3067\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u52d5\u7684\u914d\u5217\u306b Array , \u6587\u5b57\u5217\u306b\u306f String \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u9759\u7684\u306a\u914d\u5217\u306b\u306f std :: array \u3092\u4f7f\u3044\u307e\u3059\u3002 \u5186\u5468\u7387\u3092\u65b0\u3057\u304f\u5b9a\u7fa9\u3059\u308b \u00b6 Siv3D \u3067\u306f\u3001\u5186\u5468\u7387\u306f Math :: Pi , 2\u03c0 \u306f Math :: TwoPi \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 1 _pi \u3084 2 _pi , 0 . 5 _pi \u306e\u3088\u3046\u306b _pi \u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3046\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7de8 \u00b6 Siv3D \u306e\u95a2\u6570\u3092\u4e0d\u5fc5\u8981\u306b\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059 \u00b6 Scene :: Delta () \u3084 Cursor :: Pos () \u306f\u540c\u4e00\u30d5\u30ec\u30fc\u30e0\u5185\u3067\u306f\u3064\u306d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u8efd\u91cf\u306a\u95a2\u6570\u306a\u306e\u3067\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u306f\u5927\u304d\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059\u306e\u306f\u7121\u99c4\u3067\u3059\u3002\u3053\u3046\u3057\u305f\u95a2\u6570\u3092\u8907\u6570\u56de\u547c\u3093\u3067\u3044\u308b\u5834\u5408\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067\u5024\u3092\u5909\u6570\u306b\u4ee3\u5165\u3057\u3001\u305d\u308c\u3092\u518d\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u6e1b\u3089\u3057\u3001\u6700\u5927\u9650\u306e\u5b9f\u884c\u6642\u6027\u80fd\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 Scene :: Time () \u306e\u547c\u3073\u51fa\u3057\u304c\u4e0d\u5fc5\u8981\u306b\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { // Scene::Time() \u304c\u6bce\u30d5\u30ec\u30fc\u30e0 100 \u56de\u5b9f\u884c\u3055\u308c\u308b Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , Scene :: Time () * 30 _deg ). draw (); } } } } \u6b21\u306e\u3088\u3046\u306b\u3001\u5909\u6570\u306b\u4ee3\u5165\u3057\u3066\u304a\u304f\u3068\u547c\u3073\u51fa\u3057\u306e\u56de\u6570\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // Scene::Time() \u306e\u547c\u3073\u51fa\u3057\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 1 \u56de const double t = Scene :: Time (); for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , t * 30 _deg ). draw (); } } } } \u305d\u306e\u4ed6\u7de8 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092 Unicode \u4ee5\u5916\u306e\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b \u00b6 Unicode \u5f62\u5f0f\u4ee5\u5916\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u306f\u6b63\u3057\u304f\u5185\u5bb9\u304c\u8aad\u307f\u8fbc\u3081\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f Unicode \u3078\u306e\u5909\u63db\u3067\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3082\u304b\u304b\u308a\u307e\u3059\u3002UTF-8 \u306a\u3069\u3001Unicode \u5f62\u5f0f\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u306a\u304a\u3001Siv3D \u3067\u306f BOM \u7121\u3057\u306e UTF-8 \u3088\u308a\u3082 BOM \u4ed8\u304d\u306e UTF-8 \u5f62\u5f0f\u306e\u307b\u3046\u304c\u3001\u8aad\u307f\u8fbc\u307f\u306e\u901f\u5ea6\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044"},{"location":"ja-jp/articles/mistakes/#_1","text":"","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044"},{"location":"ja-jp/articles/mistakes/#_2","text":"","title":"\u521d\u5fc3\u8005\u7de8"},{"location":"ja-jp/articles/mistakes/#texture","text":"Texture , Font , Audio \u30af\u30e9\u30b9\u306f\u3001\u53c2\u7167\u30ab\u30a6\u30f3\u30c8\u65b9\u5f0f\u3067\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4e00\u5ea6\u4f5c\u6210\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30d4\u30fc\u306f\u8efd\u91cf\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // OK: \u30b3\u30b9\u30c8\u7121\u3057\u3067\u30b3\u30d4\u30fc const Texture texture2 = texture ; while ( System :: Update ()) { texture2 . draw ( 0 , 0 ); } } \u307e\u305f\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u53c2\u7167\u30ab\u30a6\u30f3\u30bf\u304c 0 \u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u3001\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u304b\u3089\u89e3\u653e\u3059\u308b\u306e\u3067\u3001\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u7834\u68c4\u306e\u51e6\u7406\u3092\u660e\u793a\u7684\u306b\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3002Siv3D \u306e\u30af\u30e9\u30b9\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u308f\u305a\u306b\u305d\u306e\u307e\u307e\u6271\u3046\u306e\u304c\u4f5c\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Texture * pTexture = new Texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 pTexture -> draw ( 0 , 0 ); } // \u975e\u63a8\u5968: \u308f\u3056\u308f\u3056\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 delete pTexture ; }","title":"Texture \u3092\u30dd\u30a4\u30f3\u30bf\u3067\u7ba1\u7406\u3059\u308b"},{"location":"ja-jp/articles/mistakes/#_3","text":"Texture , Font , Audio \u3068\u3044\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3084\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306b\u975e\u5e38\u306b\u5927\u304d\u306a\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u3067\u7e70\u308a\u8fd4\u3057\u3053\u308c\u3089\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306e\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3001Siv3D \u306f\u5b9f\u884c\u4e2d\u306b\u8b66\u544a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u8aa4\u308a Texture ( U \"example/windmill.png\" ). draw ( 0 , 0 ); } } \u6b21\u306e\u3088\u3046\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u306b 1 \u5ea6\u3060\u3051\u4f5c\u6210 const Texture texture ( U \"example/windmill.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } } \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528\u3059\u308b\u306e\u3082 OK \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u5229\u7528 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); while ( System :: Update ()) { TextureAsset ( U \"Windmill\" ). draw ( 0 , 0 ); } }","title":"\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u5185\u3067\u91cd\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b"},{"location":"ja-jp/articles/mistakes/#_4","text":"\u6700\u8fd1\u306f 120Hz \u3084 144Hz \u306a\u3069\u3001\u9ad8\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u306e\u30e2\u30cb\u30bf\u30fc\u304c\u5897\u3048\u3066\u3044\u307e\u3059\u3002\u300c\u6bce\u30d5\u30ec\u30fc\u30e0 3 \u30d4\u30af\u30bb\u30eb\u79fb\u52d5\u300d\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300160Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb\u3001120Hz \u306e\u30e2\u30cb\u30bf\u30fc\u3067\u306f\u6bce\u79d2 360 \u30d4\u30af\u30bb\u30eb\u3068\u3001\u901f\u5ea6\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u66f8\u304d\u65b9\u306f\u907f\u3051\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002 Scene :: Delta () \u3084 Scene :: Time () , Stopwatch \u3092\u4f7f\u3063\u3066\u3001\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u304b\u3001 Effect , Transition , Periodic \u306e\u3088\u3046\u306b\u6642\u9593\u30d9\u30fc\u30b9\u3067\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3092\u4f7f\u3063\u3066\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u5909\u5316\u3059\u308b\u3068\u5186\u306e\u79fb\u52d5\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // NG: \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u79fb\u52d5\u91cf const double speed = 3 ; // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= speed ; } if ( KeyRight . pressed ()) { pos . x += speed ; } if ( KeyUp . pressed ()) { pos . y -= speed ; } if ( KeyDown . pressed ()) { pos . y += speed ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } } \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f Scene :: Delta () \u306b\u5fdc\u3058\u3066\u79fb\u52d5\u91cf\u3092\u8abf\u6574\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3042\u3089\u3086\u308b\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3067\u3082\u4e00\u5b9a\u306e\u901f\u5ea6\u3092\u7dad\u6301\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr std :: array < int32 , 5 > framerates = { 15 , 30 , 60 , 120 , 240 }; size_t index = 2 ; Graphics :: SetTargetFrameRateHz ( framerates [ index ]); Vec2 pos = Scene :: Center (); while ( System :: Update ()) { // \u6bce\u79d2 180 \u30d4\u30af\u30bb\u30eb const double speed = 180.0 ; // ok: \u30d5\u30ec\u30fc\u30e0\u306e\u7d4c\u904e\u6642\u9593\u306b\u5fdc\u3058\u305f\u79fb\u52d5\u91cf const double delta = speed * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } Circle ( pos , 50 ). draw ( Palette :: Skyblue ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092\u5909\u66f4 if ( SimpleGUI :: RadioButtons ( index , { U \"15FPS\" , U \"30FPS\" , U \"60FPS\" , U \"120FPS\" , U \"240FPS\" }, Vec2 ( 600 , 20 ))) { Graphics :: SetTargetFrameRateHz ( framerates [ index ]); } } }","title":"\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3059\u308b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b"},{"location":"ja-jp/articles/mistakes/#_5","text":"Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306e\u3044\u304f\u3064\u304b\u306f\u3001\u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u3092\u3057\u305f\u3068\u304d\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e9b\u7d30\u306a\u8b66\u544a\u306e\u7121\u8996\u3092\u7d9a\u3051\u3066\u3044\u308b\u3068\u3001\u3053\u3046\u3057\u305f\u8b66\u544a\u306b\u3088\u3063\u3066\u767a\u898b\u3067\u304d\u308b\u30d0\u30b0\u3092\u898b\u904e\u3054\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002Siv3D \u3067\u306f\u3001\u30e6\u30fc\u30b6\u306e\u30b3\u30fc\u30c9\u306b\u7531\u6765\u3059\u308b\u8b66\u544a\u3092\u4e00\u5207\u51fa\u3055\u305a\u306b\u3001\u975e\u5e38\u306b\u5927\u304d\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u8b66\u544a\u306a\u3057\u3092\u76ee\u6307\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u767a\u3059\u308b\u306e\u3067\u5bb9\u6613\u306b\u767a\u898b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Circle circle ( 200 , 300 , 40 ); while ( System :: Update ()) { if ( MouseL . down ()) { // moveBy \u3068\u9593\u9055\u3048\u3066 movedBy \u3092\u4f7f\u3063\u3066\u3044\u308b circle . movedBy ( 20 , 0 ); } circle . draw (); } }","title":"\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u8b66\u544a\u3092\u7121\u8996\u3059\u308b"},{"location":"ja-jp/articles/mistakes/#_6","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u304d\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u3067\u306f App \u30d5\u30a9\u30eb\u30c0\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b example / windmill . png \u3082\u3053\u3053\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u81ea\u5206\u3067\u7528\u610f\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3044\u3068\u304d\u306f\u3001 App \u30d5\u30a9\u30eb\u30c0\u306b\u914d\u7f6e\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // App \u30d5\u30a9\u30eb\u30c0\u306bmy-picture.png \u3092\u914d\u7f6e\u3057\u305f\u5834\u5408 const Texture texture ( U \"my-picture.png\" ); while ( System :: Update ()) { texture . draw ( 0 , 0 ); } }","title":"\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5207\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u306a\u3044"},{"location":"ja-jp/articles/mistakes/#_7","text":"","title":"\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u7de8"},{"location":"ja-jp/articles/mistakes/#texture-static","text":"Texture , Font , Audio \u306f\u3001Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u3042\u3068\u306b\u4f5c\u6210\u3055\u308c\u3001Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u524d\u306b\u7834\u68c4\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Main () \u95a2\u6570\u306e\u4e2d\u3084\u3001\u305d\u3053\u3067\u4f7f\u308f\u308c\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3067\u3042\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u306f Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u305f\u308a\u3001\u7d42\u4e86\u51e6\u7406\u5f8c\u306b\u7834\u68c4\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u524d\u8005\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u306e\u4f7f\u7528\u3092\u907f\u3051\u3001\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // NG: Siv3D \u306e\u521d\u671f\u5316\u3088\u308a\u3082\u524d\u306b\u4f5c\u6210\u3055\u308c\u308b\u306e\u3067\u5b9f\u884c\u6642\u30a8\u30e9\u30fc Texture global_texture ( U \"example/windmill.png\" ); void Draw () { // \u975e\u63a8\u5968: Siv3D \u306e\u7d42\u4e86\u51e6\u7406\u3088\u308a\u3082\u3042\u3068\u306b\u7834\u68c4\u3055\u308c\u308b static Texture static_texture ( U \"example/windmill.png\" ); static_texture . draw ( 0 , 0 ); } void Main () { while ( System :: Update ()) { } }","title":"Texture \u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3084 static \u5909\u6570\u3068\u3057\u3066\u4f7f\u3046"},{"location":"ja-jp/articles/mistakes/#texturedescmipped","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3057\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f TextureDesc :: Mipped \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u7e2e\u5c0f\u63cf\u753b\u3057\u305f\u3068\u304d\u306b\u753b\u8cea\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u304b\u3089 Texture \u3092\u4f5c\u308b\u969b\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8a18\u8ff0\u306f\u4e0d\u8981\u3067\u3059\u3002","title":"\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092 TextureDesc::Mipped \u6307\u5b9a\u3057\u306a\u3044"},{"location":"ja-jp/articles/mistakes/#_8","text":"","title":"\u30b3\u30fc\u30c9\u5168\u822c\u7de8"},{"location":"ja-jp/articles/mistakes/#c","text":"< Siv3D . hpp > \u306f < cmath > \u3084 < array > , < algorithm > \u306a\u3069\u3001\u3088\u304f\u4f7f\u308f\u308c\u308b C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3059\u3067\u306b\u5185\u90e8\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002C++ \u6a19\u6e96\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u6642\u306b\u3060\u3051\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308c\u3070 OK \u3067\u3059\u3002\u4f8b\u3068\u3057\u3066 std :: any \u3092\u4f7f\u3046\u306b\u306f < any > , std :: variant \u3092\u4f7f\u3046\u306b\u306f < variant > \u3092\u8ffd\u52a0\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002","title":"\u4e0d\u5fc5\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b"},{"location":"ja-jp/articles/mistakes/#stdvector-stdstring","text":"std :: vector \u3084 std :: string \u3092\u4f7f\u3046\u3068\u3001Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3068\u9023\u4fc2\u3059\u308b\u3068\u304d\u306b\u5909\u63db\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u304c\u7c21\u5358\u306a\u95a2\u6570\u3067\u5b9f\u73fe\u3067\u304d\u306a\u3044\u305f\u3081\u975e\u52b9\u7387\u3067\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u52d5\u7684\u914d\u5217\u306b Array , \u6587\u5b57\u5217\u306b\u306f String \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u9759\u7684\u306a\u914d\u5217\u306b\u306f std :: array \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"std::vector \u3084 std::string \u3092\u4f7f\u3046"},{"location":"ja-jp/articles/mistakes/#_9","text":"Siv3D \u3067\u306f\u3001\u5186\u5468\u7387\u306f Math :: Pi , 2\u03c0 \u306f Math :: TwoPi \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 1 _pi \u3084 2 _pi , 0 . 5 _pi \u306e\u3088\u3046\u306b _pi \u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3046\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002","title":"\u5186\u5468\u7387\u3092\u65b0\u3057\u304f\u5b9a\u7fa9\u3059\u308b"},{"location":"ja-jp/articles/mistakes/#_10","text":"","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7de8"},{"location":"ja-jp/articles/mistakes/#siv3d","text":"Scene :: Delta () \u3084 Cursor :: Pos () \u306f\u540c\u4e00\u30d5\u30ec\u30fc\u30e0\u5185\u3067\u306f\u3064\u306d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u8efd\u91cf\u306a\u95a2\u6570\u306a\u306e\u3067\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u306f\u5927\u304d\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059\u306e\u306f\u7121\u99c4\u3067\u3059\u3002\u3053\u3046\u3057\u305f\u95a2\u6570\u3092\u8907\u6570\u56de\u547c\u3093\u3067\u3044\u308b\u5834\u5408\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067\u5024\u3092\u5909\u6570\u306b\u4ee3\u5165\u3057\u3001\u305d\u308c\u3092\u518d\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092\u6e1b\u3089\u3057\u3001\u6700\u5927\u9650\u306e\u5b9f\u884c\u6642\u6027\u80fd\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 Scene :: Time () \u306e\u547c\u3073\u51fa\u3057\u304c\u4e0d\u5fc5\u8981\u306b\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { // Scene::Time() \u304c\u6bce\u30d5\u30ec\u30fc\u30e0 100 \u56de\u5b9f\u884c\u3055\u308c\u308b Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , Scene :: Time () * 30 _deg ). draw (); } } } } \u6b21\u306e\u3088\u3046\u306b\u3001\u5909\u6570\u306b\u4ee3\u5165\u3057\u3066\u304a\u304f\u3068\u547c\u3073\u51fa\u3057\u306e\u56de\u6570\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // Scene::Time() \u306e\u547c\u3073\u51fa\u3057\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 1 \u56de const double t = Scene :: Time (); for ( int32 y : step ( 10 )) { for ( int32 x : step ( 10 )) { Triangle ( 50 + x * 50 , 50 + y * 50 , 30 , t * 30 _deg ). draw (); } } } }","title":"Siv3D \u306e\u95a2\u6570\u3092\u4e0d\u5fc5\u8981\u306b\u983b\u7e41\u306b\u547c\u3073\u51fa\u3059"},{"location":"ja-jp/articles/mistakes/#_11","text":"","title":"\u305d\u306e\u4ed6\u7de8"},{"location":"ja-jp/articles/mistakes/#unicode","text":"Unicode \u5f62\u5f0f\u4ee5\u5916\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306e\u74b0\u5883\u306b\u3088\u3063\u3066\u306f\u6b63\u3057\u304f\u5185\u5bb9\u304c\u8aad\u307f\u8fbc\u3081\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f Unicode \u3078\u306e\u5909\u63db\u3067\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3082\u304b\u304b\u308a\u307e\u3059\u3002UTF-8 \u306a\u3069\u3001Unicode \u5f62\u5f0f\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u306a\u304a\u3001Siv3D \u3067\u306f BOM \u7121\u3057\u306e UTF-8 \u3088\u308a\u3082 BOM \u4ed8\u304d\u306e UTF-8 \u5f62\u5f0f\u306e\u307b\u3046\u304c\u3001\u8aad\u307f\u8fbc\u307f\u306e\u901f\u5ea6\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092 Unicode \u4ee5\u5916\u306e\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b"},{"location":"ja-jp/community/community/","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u00b6 Siv3D \u30e6\u30fc\u30b6 Slack \u00b6 Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u306f\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002 Siv3D Slack \u306b\u53c2\u52a0\u3059\u308b \u3000 OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 OpenSiv3D \u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u8b70\u8ad6\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002Siv3D Slack \u306e # open - siv3d \u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u958b\u50ac\u60c5\u5831\u304c\u63b2\u8f09\u3055\u308c\u307e\u3059\u3002 Twitter \u00b6 \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 # Siv3D \u3084 # OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 @Siv3D @Reputeless GitHub Issues \u00b6 \u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues BBS \u00b6 \u533f\u540d\u3067\u8cea\u554f\u3092\u6295\u7a3f\u3067\u304d\u308b\u63b2\u793a\u677f\u3067\u3059\u3002Slack \u3084 Twitter \u3088\u308a\u3082\u56de\u7b54\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#_1","text":"","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#siv3d-slack","text":"Siv3D \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3067\u3059\u3002\u76ee\u7684\u5225\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\uff09\u304c\u7528\u610f\u3055\u308c\u3001Siv3D \u306b\u3064\u3044\u3066\u8a71\u3057\u305f\u308a\u3001\u8cea\u554f\u3092\u3057\u305f\u308a\u3001\u81ea\u5206\u306e\u4f5c\u54c1\u3092\u7d39\u4ecb\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002Siv3D \u672c\u4f53\u306e\u958b\u767a\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306e\u305f\u3081\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u306f\u3001\u958b\u767a\u72b6\u6cc1\u3092\u3044\u3061\u306f\u3084\u304f\u5171\u6709\u3059\u308b\u307b\u304b\u3001\u65b0\u6a5f\u80fd\u306e\u5171\u540c\u958b\u767a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u95b2\u89a7\u306e\u307f\u3084\u7121\u8a00\u3082 OK \u3067\u3001\u3044\u3064\u3067\u3082\u9000\u4f1a\u53ef\u80fd\u3067\u3059\u3002 Siv3D Slack \u306b\u53c2\u52a0\u3059\u308b","title":"Siv3D \u30e6\u30fc\u30b6 Slack"},{"location":"ja-jp/community/community/#opensiv3d","text":"OpenSiv3D \u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u8b70\u8ad6\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002Siv3D Slack \u306e # open - siv3d \u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u958b\u50ac\u60c5\u5831\u304c\u63b2\u8f09\u3055\u308c\u307e\u3059\u3002","title":"OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/community/community/#twitter","text":"\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 # Siv3D \u3084 # OpenSiv3D \u304c\u4ed8\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u3092\u5de1\u56de\u3057\u3066\u3044\u307e\u3059\u3002Twitter \u306e\u4ed5\u69d8\u3067\u691c\u7d22\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u78ba\u5b9f\u306b\u8fd4\u7b54\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f @Reputeless \u306b\u30ea\u30d7\u30e9\u30a4\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u306f\u3001\u8fc5\u901f\u306a\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308b\u3088\u3046\u3001\u554f\u984c\u3084\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u51fa\u529b\u7b49\u3092\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u6dfb\u4ed8\u3057\u3001Gist \u306a\u3069\u306e URL \u3067\u554f\u984c\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 @Siv3D @Reputeless","title":"Twitter"},{"location":"ja-jp/community/community/#github-issues","text":"\u4e0d\u5177\u5408\u306e\u5831\u544a\u3084\u65b0\u6a5f\u80fd\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f OpenSiv3D \u306e GitHub \u30ea\u30dd\u30b8\u30c8\u30ea\u306e Issues \u306b\u6295\u7a3f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u81ea\u7531\u3067\u3059\u304c\u3001\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u68c4\u5374\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 OpenSiv3D Issues","title":"GitHub Issues"},{"location":"ja-jp/community/community/#bbs","text":"\u533f\u540d\u3067\u8cea\u554f\u3092\u6295\u7a3f\u3067\u304d\u308b\u63b2\u793a\u677f\u3067\u3059\u3002Slack \u3084 Twitter \u3088\u308a\u3082\u56de\u7b54\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"BBS"},{"location":"ja-jp/community/dev-day/","text":"OpenSiv3D \u5b9f\u88c5\u4f1a \u00b6 OpenSiv3D \u5b9f\u88c5\u4f1a\u3068\u306f\uff1f \u00b6 OpenSiv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u5b9f\u88c5\u4f1a\u306e\u69d8\u5b50 (\u65e9\u7a32\u7530\u4f1a\u5834) \u4e3b\u306a\u6d3b\u52d5 \u00b6 \u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8 \u53c2\u52a0\u65b9\u6cd5\u306f\uff1f \u00b6 Siv3D Slack \u306b\u767b\u9332\u5f8c\u3001# open-siv3d \u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u52df\u96c6\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5bfe\u3057\u3066\u53c2\u52a0\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u307b\u304b\u3001\u5b9f\u88c5\u4f1a\u4f1a\u5834\u62c5\u5f53\u8005\u306e\u62db\u5f85\u3067\u3082\u53c2\u52a0\u3067\u304d\u307e\u3059 \u9060\u9694\u53c2\u52a0\u3067\u304d\u308b\uff1f \u00b6 \u4ee5\u4e0b\u306e\u65b9\u3092\u5bfe\u8c61\u306b\u3001Skype \u53c2\u52a0\u306e\u62db\u5f85\u3092\u9001\u3063\u3066\u3044\u307e\u3059 \u30b9\u30dd\u30f3\u30b5\u30fc \u4f5c\u54c1\u958b\u767a\u3084\u5b9f\u88c5\u3078\u306e\u8ca2\u732e\u5b9f\u7e3e\u304c\u9855\u8457\u3067\u306a\u304a\u304b\u3064\u73fe\u5730\u53c2\u52a0\u304c\u96e3\u3057\u3044\u65b9 \u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8 \u00b6 \u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u3053\u308c\u307e\u3067\u306e\u5b9f\u88c5\u4f1a \u00b6 \u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66","title":"\u5b9f\u88c5\u4f1a"},{"location":"ja-jp/community/dev-day/#opensiv3d","text":"","title":"OpenSiv3D \u5b9f\u88c5\u4f1a"},{"location":"ja-jp/community/dev-day/#opensiv3d_1","text":"OpenSiv3D \u306e\u958b\u767a\u8005\u3084\u30e6\u30fc\u30b6\u304c\u96c6\u307e\u3063\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u8cea\u554f\u30fb\u76f8\u8ac7\u3057\u305f\u308a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3001\u65b0\u6a5f\u80fd\u3092\u63d0\u6848\u30fb\u8b70\u8ad6\u30fb\u5b9f\u88c5\u3057\u305f\u308a\u3001OpenSiv3D \u3067\u4f55\u304b\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u4f1a\u3067\u3059\u3002\u57fa\u672c\u500b\u4eba\u306e\u30da\u30fc\u30b9\u3067\u3086\u308b\u3086\u308b\u9032\u307f\u307e\u3059\u3002 \u5b9f\u88c5\u4f1a\u306e\u69d8\u5b50 (\u65e9\u7a32\u7530\u4f1a\u5834)","title":"OpenSiv3D \u5b9f\u88c5\u4f1a\u3068\u306f\uff1f"},{"location":"ja-jp/community/dev-day/#_1","text":"\u3064\u304f\u3063\u3066\u3044\u308b\u4f5c\u54c1\u306e\u7d39\u4ecb \u958b\u767a\u4e2d\u306e\u6a5f\u80fd\u306e\u7d39\u4ecb Siv3D \u306e\u52c9\u5f37 (\u672a\u7d4c\u9a13\u8005) \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u76f8\u8ac7 \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc \u65b0\u6a5f\u80fd\u306e\u63d0\u6848\u3084\u5b9f\u88c5 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u57f7\u7b46 \u500b\u4eba\u306e\u958b\u767a\u4f5c\u696d \u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a OpenSiv3D \u5b9f\u88c5\u4f1a\u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8","title":"\u4e3b\u306a\u6d3b\u52d5"},{"location":"ja-jp/community/dev-day/#_2","text":"Siv3D Slack \u306b\u767b\u9332\u5f8c\u3001# open-siv3d \u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001\u52df\u96c6\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5bfe\u3057\u3066\u53c2\u52a0\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u307b\u304b\u3001\u5b9f\u88c5\u4f1a\u4f1a\u5834\u62c5\u5f53\u8005\u306e\u62db\u5f85\u3067\u3082\u53c2\u52a0\u3067\u304d\u307e\u3059","title":"\u53c2\u52a0\u65b9\u6cd5\u306f\uff1f"},{"location":"ja-jp/community/dev-day/#_3","text":"\u4ee5\u4e0b\u306e\u65b9\u3092\u5bfe\u8c61\u306b\u3001Skype \u53c2\u52a0\u306e\u62db\u5f85\u3092\u9001\u3063\u3066\u3044\u307e\u3059 \u30b9\u30dd\u30f3\u30b5\u30fc \u4f5c\u54c1\u958b\u767a\u3084\u5b9f\u88c5\u3078\u306e\u8ca2\u732e\u5b9f\u7e3e\u304c\u9855\u8457\u3067\u306a\u304a\u304b\u3064\u73fe\u5730\u53c2\u52a0\u304c\u96e3\u3057\u3044\u65b9","title":"\u9060\u9694\u53c2\u52a0\u3067\u304d\u308b\uff1f"},{"location":"ja-jp/community/dev-day/#_4","text":"\u4eca\u56de\u521d\u3081\u3066\u306e\u53c2\u52a0\u3067\u79c1\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3068\u3066\u3082\u4e0d\u5b89\u3067\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3084\u8cea\u554f\u306b\u5168\u3066\u5206\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u30013\u6642\u9593\u3068\u3044\u3046\u77ed\u3044\u6642\u9593\u3067\u4e00\u304b\u3089\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u5b8c\u6210\u3055\u305b\u308b\u4f53\u9a13\u3082\u3067\u304d\u3001\u3068\u3066\u3082\u6709\u610f\u7fa9\u306a\u6642\u9593\u306b\u306a\u308a\u307e\u3057\u305f OpenSiv3D\u5b9f\u88c5\u4f1a\u306b\u306f\u7d04\uff11\u5e74\u3076\u308a\u306e\u53c2\u52a0\u3067\u3057\u305f\u306e\u3067\u3001\u65b0\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3066\u9802\u304d\u306a\u304c\u3089\u306e\u3093\u3073\u308a\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u904e\u3054\u3057\u307e\u3057\u305f\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u4e0d\u8981\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u6a5f\u80fd\u304c\u5f37\u529b\u3067\u3001\u5b9f\u969b\u306b\u30b2\u30fc\u30e0\u3092\u4f5c\u308b\u69d8\u5b50\u3092\u8d85\u9ad8\u901f\u30b2\u30fc\u30e0\u958b\u767a\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3068\u3066\u3082\u70ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u53c2\u52a0\u8005\u306e\u30b3\u30e1\u30f3\u30c8"},{"location":"ja-jp/community/dev-day/#_5","text":"\u56de \u958b\u50ac\u65e5 \u4f1a\u5834 #41 2020-01-12 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #40 2019-12-08 \u65e9\u7a32\u7530\u5927\u5b66 #39 2019-11-24 \u65e9\u7a32\u7530\u5927\u5b66 #38 2019-11-10 \u6771\u4eac\u5de5\u696d\u5927\u5b66 \u5927\u5ca1\u5c71\u30ad\u30e3\u30f3\u30d1\u30b9 Attic Lab #37 2019-10-26 \u65e9\u7a32\u7530\u5927\u5b66 #36 2019-10-20 \u65e9\u7a32\u7530\u5927\u5b66 #35 2019-09-28 \u65e9\u7a32\u7530\u5927\u5b66 #34 2019-09-08 \u5343\u8449\u5de5\u696d\u5927\u5b66 \u6d25\u7530\u6cbc\u30ad\u30e3\u30f3\u30d1\u30b9 #33 2019-08-25 \u65e9\u7a32\u7530\u5927\u5b66 #32 2019-07-06 \u65e9\u7a32\u7530\u5927\u5b66 #31 2019-06-23 \u65e9\u7a32\u7530\u5927\u5b66 #30 2019-05-02 \u65e9\u7a32\u7530\u5927\u5b66 #29 2019-05-01 \u65e9\u7a32\u7530\u5927\u5b66 #28 2019-03-23 \u65e9\u7a32\u7530\u5927\u5b66 #27 2019-02-09 \u65e9\u7a32\u7530\u5927\u5b66 #26 2018-12-22 \u65e9\u7a32\u7530\u5927\u5b66 #25 2018-12-08 \u77f3\u5ddd\u770c \u91d1\u6ca2\u5e02 IT \u30d3\u30b8\u30cd\u30b9\u30d7\u30e9\u30b6\u6b66\u8535 #24 2018-11-10 \u65e9\u7a32\u7530\u5927\u5b66 #23 2018-10-07 \u65e9\u7a32\u7530\u5927\u5b66 #22 2018-09-30 \u9577\u91ce\u9ad8\u5c02 #21 2018-09-16 \u65e9\u7a32\u7530\u5927\u5b66 #20 2018-08-26 \u65e9\u7a32\u7530\u5927\u5b66 #19 2018-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #18 2018-07-07 \u7b51\u6ce2\u5927\u5b66\u30b5\u30c6\u30e9\u30a4\u30c8\u30aa\u30d5\u30a3\u30b9 #17 2018-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #16 2018-05-20 \u65e9\u7a32\u7530\u5927\u5b66 #15 2018-05-12 \u770c\u7acb\u5e83\u5cf6\u5927\u5b66 \u30b5\u30c6\u30e9\u30a4\u30c8\u30ad\u30e3\u30f3\u30d1\u30b9\u3072\u308d\u3057\u307e #14 2018-04-21 \u65e9\u7a32\u7530\u5927\u5b66 #13 2018-03-15 \u65e9\u7a32\u7530\u5927\u5b66 #12 2018-03-13 \u65e9\u7a32\u7530\u5927\u5b66 #11 2018-02-03 \u65e9\u7a32\u7530\u5927\u5b66 #10 2017-08-30 \u65e9\u7a32\u7530\u5927\u5b66 #9 2017-08-16 \u65e9\u7a32\u7530\u5927\u5b66 #8 2017-08-11 \u65e9\u7a32\u7530\u5927\u5b66 #7 2017-08-06 \u65e9\u7a32\u7530\u5927\u5b66 #6 2017-07-22 \u65e9\u7a32\u7530\u5927\u5b66 #5 2017-07-08 \u65e9\u7a32\u7530\u5927\u5b66 #4 2017-06-24 \u65e9\u7a32\u7530\u5927\u5b66 #3 2017-05-21 \u65e9\u7a32\u7530\u5927\u5b66 #2 2017-04-08 \u65e9\u7a32\u7530\u5927\u5b66 #1 2016-12-27 \u65e9\u7a32\u7530\u5927\u5b66","title":"\u3053\u308c\u307e\u3067\u306e\u5b9f\u88c5\u4f1a"},{"location":"ja-jp/external/external/","text":"Siv3D Advent Calendar \u00b6 2019 2018 2017 2016 2015 Siv3D \u30df\u30cb\u30b5\u30f3\u30d7\u30eb\u96c6 \u00b6 https://scrapbox.io/voidproc-siv3d-examples/Siv3D%E3%83%9F%E3%83%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E9%9B%86 @voidproc \u3055\u3093\u304c\u57f7\u7b46\u3055\u308c\u3066\u3044\u308b OpenSiv3D \u304a\u3088\u3073\u65e7 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u96c6\u3067\u3059\u3002","title":"\u5916\u90e8\u30b5\u30a4\u30c8"},{"location":"ja-jp/external/external/#siv3d-advent-calendar","text":"2019 2018 2017 2016 2015","title":"Siv3D Advent Calendar"},{"location":"ja-jp/external/external/#siv3d","text":"https://scrapbox.io/voidproc-siv3d-examples/Siv3D%E3%83%9F%E3%83%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E9%9B%86 @voidproc \u3055\u3093\u304c\u57f7\u7b46\u3055\u308c\u3066\u3044\u308b OpenSiv3D \u304a\u3088\u3073\u65e7 Siv3D \u306e\u30b5\u30f3\u30d7\u30eb\u96c6\u3067\u3059\u3002","title":"Siv3D \u30df\u30cb\u30b5\u30f3\u30d7\u30eb\u96c6"},{"location":"ja-jp/logo/logo/","text":"\u30ed\u30b4\u753b\u50cf \u00b6 \u30a2\u30a4\u30b3\u30f3\u753b\u50cf \u00b6","title":"\u30ed\u30b4\u753b\u50cf"},{"location":"ja-jp/logo/logo/#_1","text":"","title":"\u30ed\u30b4\u753b\u50cf"},{"location":"ja-jp/logo/logo/#_2","text":"","title":"\u30a2\u30a4\u30b3\u30f3\u753b\u50cf"},{"location":"ja-jp/mascot/mascot/","text":"Siv3D \u304f\u3093 \u00b6 Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u300cSiv3D \u304f\u3093\u300d 2015 \u5e74\u306b\u516c\u52df\u3092\u5b9f\u65bd\u3057\u30019 \u4ef6\u306e\u5fdc\u52df\u304b\u3089 \u7070\u8272 \u3055\u3093\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u9078\u3070\u308c\u307e\u3057\u305f\u3002 \u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u7279\u5fb4 \u00b6 144\u30bb\u30f3\u30c1 / 36\u30ad\u30ed / 12\u6b73 \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b\u5bfe\u6bd4\u304c\u30c4\u30dc \uff08\u5236\u4f5c\u8005\u30b3\u30e1\u30f3\u30c8\u3088\u308a\uff09 \u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u5229\u7528\u306e Q & A \u00b6 Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u4f7f\u7528\u306f CC BY-NC 4.0 \u30e9\u30a4\u30bb\u30f3\u30b9 (\u65e5\u672c\u8a9e) \u3067\u3059\u3002 \u3053\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u8a31\u8afe\u3055\u308c\u308b\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u5229\u7528\uff08\u5546\u7528\u4f5c\u54c1\u3067\u306e\u5229\u7528\u7b49\uff09\u306b\u3064\u3044\u3066\u306f\u30e1\u30fc\u30eb\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002 \u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\u4f8b \u00b6 Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u753b\u50cf\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u5834\u5408 Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 / Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3092\u5229\u7528\u3057\u305f\u4e8c\u6b21\u5275\u4f5c\u7269\u3092\u516c\u958b\u3059\u308b\u5834\u5408 This work features an adaptation of Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 / \u8a2d\u5b9a\u8cc7\u6599 \u00b6","title":"\u30de\u30b9\u30b3\u30c3\u30c8"},{"location":"ja-jp/mascot/mascot/#siv3d","text":"Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u300cSiv3D \u304f\u3093\u300d 2015 \u5e74\u306b\u516c\u52df\u3092\u5b9f\u65bd\u3057\u30019 \u4ef6\u306e\u5fdc\u52df\u304b\u3089 \u7070\u8272 \u3055\u3093\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u9078\u3070\u308c\u307e\u3057\u305f\u3002","title":"Siv3D \u304f\u3093"},{"location":"ja-jp/mascot/mascot/#_1","text":"144\u30bb\u30f3\u30c1 / 36\u30ad\u30ed / 12\u6b73 \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b\u5bfe\u6bd4\u304c\u30c4\u30dc \uff08\u5236\u4f5c\u8005\u30b3\u30e1\u30f3\u30c8\u3088\u308a\uff09","title":"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u7279\u5fb4"},{"location":"ja-jp/mascot/mascot/#q-a","text":"Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u4f7f\u7528\u306f CC BY-NC 4.0 \u30e9\u30a4\u30bb\u30f3\u30b9 (\u65e5\u672c\u8a9e) \u3067\u3059\u3002 \u3053\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u8a31\u8afe\u3055\u308c\u308b\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u5229\u7528\uff08\u5546\u7528\u4f5c\u54c1\u3067\u306e\u5229\u7528\u7b49\uff09\u306b\u3064\u3044\u3066\u306f\u30e1\u30fc\u30eb\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002","title":"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u5229\u7528\u306e Q &amp; A"},{"location":"ja-jp/mascot/mascot/#_2","text":"Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u753b\u50cf\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u5834\u5408 Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 / Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3092\u5229\u7528\u3057\u305f\u4e8c\u6b21\u5275\u4f5c\u7269\u3092\u516c\u958b\u3059\u308b\u5834\u5408 This work features an adaptation of Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 /","title":"\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\u4f8b"},{"location":"ja-jp/mascot/mascot/#_3","text":"","title":"\u8a2d\u5b9a\u8cc7\u6599"},{"location":"ja-jp/news/news/","text":"2020-01-06 \u00b6 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb/\u30b7\u30fc\u30f3\u7ba1\u7406 \u3092\u4f5c\u6210 2020-01-05 \u00b6 API \u4e00\u89a7 \u3092\u66f4\u65b0 2019-12-31 \u00b6 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0/\u4e09\u76ee\u4e26\u3079 \u3092\u4f5c\u6210 \u5916\u90e8\u30b5\u30a4\u30c8 \u3092\u4f5c\u6210 2019-12-29 \u00b6 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0/\u5186\u3092\u914d\u7f6e\u3059\u308b \u3092\u4f5c\u6210 2019-12-28 \u00b6 API \u4e00\u89a7 \u3092\u66f4\u65b0 2019-12-27 \u00b6 API \u4e00\u89a7 \u3092\u66f4\u65b0 2019-12-24 \u00b6 \u30b3\u30df\u30e5\u30cb\u30c6\u30a3/OpenSiv3D \u5b9f\u88c5\u4f1a \u30da\u30fc\u30b8\u3092\u4f5c\u6210 API \u4e00\u89a7 \u3092\u66f4\u65b0 2019-12-23 \u00b6 \u30b5\u30f3\u30d7\u30eb/\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe \u3092\u66f4\u65b0 2019-12-22 \u00b6 \u30b5\u30f3\u30d7\u30eb/\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe \u3092\u66f4\u65b0 API \u4e00\u89a7 \u3092\u66f4\u65b0 2019-12-20 \u00b6 API \u4e00\u89a7 \u3092\u66f4\u65b0 2019-12-09 \u00b6 Linux \u306e\u4e00\u90e8\u74b0\u5883\u3067 v0.4.2 \u306e\u30d3\u30eb\u30c9\u306b\u5931\u6557\u3059\u308b\u554f\u984c\u3092\u6700\u65b0 master \u3067\u4fee\u6b63 OpenSiv3D \u5b9f\u88c5\u4f1a #41 (2020-1-12 (\u65e5) @\u6771\u4eac\u5de5\u696d\u5927\u5b66) \u306e\u53c2\u52a0\u767b\u9332\u3092\u958b\u59cb 2019-12-08 \u00b6 OpenSiv3D \u5b9f\u88c5\u4f1a #40 \u3092\u65e9\u7a32\u7530\u5927\u5b66\u3067\u958b\u50ac 2019-12-07 \u00b6 Siv3D \u52c9\u5f37\u4f1a in \u4ed9\u53f0 (2020) (2020-01-25 (\u571f) \u958b\u50ac) \u306e\u53c2\u52a0\u767b\u9332\u3092\u958b\u59cb 2019-12-04 \u00b6 Siv3D \u306e \u30ed\u30b4\u753b\u50cf \u30da\u30fc\u30b8\u3092\u4f5c\u6210 Siv3D \u306e \u30de\u30b9\u30b3\u30c3\u30c8 \u30da\u30fc\u30b8\u3092\u4f5c\u6210 OpenSiv3D v0.4.2 \u30b2\u30fc\u30e0\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u3092\u30ea\u30ea\u30fc\u30b9 2019-12-02 \u00b6 OpenSiv3D v0.4.2 \u3092\u30ea\u30ea\u30fc\u30b9 | \u65b0\u6a5f\u80fd\u7d39\u4ecb Visual Studio 2019 16.4 \u3067\u306f\u3001v0.4.2 \u3088\u308a\u3082\u53e4\u3044 OpenSiv3D \u304c\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u306b\u306a\u308a\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093 2019-12-01 \u00b6 \u304a\u77e5\u3089\u305b\u30da\u30fc\u30b8\u3092\u4f5c\u6210 Siv3D Advent Calendar 2019 \u304c\u30b9\u30bf\u30fc\u30c8","title":"\ud83d\udce2 \u304a\u77e5\u3089\u305b"},{"location":"ja-jp/news/news/#2020-01-06","text":"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb/\u30b7\u30fc\u30f3\u7ba1\u7406 \u3092\u4f5c\u6210","title":"2020-01-06"},{"location":"ja-jp/news/news/#2020-01-05","text":"API \u4e00\u89a7 \u3092\u66f4\u65b0","title":"2020-01-05"},{"location":"ja-jp/news/news/#2019-12-31","text":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0/\u4e09\u76ee\u4e26\u3079 \u3092\u4f5c\u6210 \u5916\u90e8\u30b5\u30a4\u30c8 \u3092\u4f5c\u6210","title":"2019-12-31"},{"location":"ja-jp/news/news/#2019-12-29","text":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0/\u5186\u3092\u914d\u7f6e\u3059\u308b \u3092\u4f5c\u6210","title":"2019-12-29"},{"location":"ja-jp/news/news/#2019-12-28","text":"API \u4e00\u89a7 \u3092\u66f4\u65b0","title":"2019-12-28"},{"location":"ja-jp/news/news/#2019-12-27","text":"API \u4e00\u89a7 \u3092\u66f4\u65b0","title":"2019-12-27"},{"location":"ja-jp/news/news/#2019-12-24","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3/OpenSiv3D \u5b9f\u88c5\u4f1a \u30da\u30fc\u30b8\u3092\u4f5c\u6210 API \u4e00\u89a7 \u3092\u66f4\u65b0","title":"2019-12-24"},{"location":"ja-jp/news/news/#2019-12-23","text":"\u30b5\u30f3\u30d7\u30eb/\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe \u3092\u66f4\u65b0","title":"2019-12-23"},{"location":"ja-jp/news/news/#2019-12-22","text":"\u30b5\u30f3\u30d7\u30eb/\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe \u3092\u66f4\u65b0 API \u4e00\u89a7 \u3092\u66f4\u65b0","title":"2019-12-22"},{"location":"ja-jp/news/news/#2019-12-20","text":"API \u4e00\u89a7 \u3092\u66f4\u65b0","title":"2019-12-20"},{"location":"ja-jp/news/news/#2019-12-09","text":"Linux \u306e\u4e00\u90e8\u74b0\u5883\u3067 v0.4.2 \u306e\u30d3\u30eb\u30c9\u306b\u5931\u6557\u3059\u308b\u554f\u984c\u3092\u6700\u65b0 master \u3067\u4fee\u6b63 OpenSiv3D \u5b9f\u88c5\u4f1a #41 (2020-1-12 (\u65e5) @\u6771\u4eac\u5de5\u696d\u5927\u5b66) \u306e\u53c2\u52a0\u767b\u9332\u3092\u958b\u59cb","title":"2019-12-09"},{"location":"ja-jp/news/news/#2019-12-08","text":"OpenSiv3D \u5b9f\u88c5\u4f1a #40 \u3092\u65e9\u7a32\u7530\u5927\u5b66\u3067\u958b\u50ac","title":"2019-12-08"},{"location":"ja-jp/news/news/#2019-12-07","text":"Siv3D \u52c9\u5f37\u4f1a in \u4ed9\u53f0 (2020) (2020-01-25 (\u571f) \u958b\u50ac) \u306e\u53c2\u52a0\u767b\u9332\u3092\u958b\u59cb","title":"2019-12-07"},{"location":"ja-jp/news/news/#2019-12-04","text":"Siv3D \u306e \u30ed\u30b4\u753b\u50cf \u30da\u30fc\u30b8\u3092\u4f5c\u6210 Siv3D \u306e \u30de\u30b9\u30b3\u30c3\u30c8 \u30da\u30fc\u30b8\u3092\u4f5c\u6210 OpenSiv3D v0.4.2 \u30b2\u30fc\u30e0\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u3092\u30ea\u30ea\u30fc\u30b9","title":"2019-12-04"},{"location":"ja-jp/news/news/#2019-12-02","text":"OpenSiv3D v0.4.2 \u3092\u30ea\u30ea\u30fc\u30b9 | \u65b0\u6a5f\u80fd\u7d39\u4ecb Visual Studio 2019 16.4 \u3067\u306f\u3001v0.4.2 \u3088\u308a\u3082\u53e4\u3044 OpenSiv3D \u304c\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u306b\u306a\u308a\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093","title":"2019-12-02"},{"location":"ja-jp/news/news/#2019-12-01","text":"\u304a\u77e5\u3089\u305b\u30da\u30fc\u30b8\u3092\u4f5c\u6210 Siv3D Advent Calendar 2019 \u304c\u30b9\u30bf\u30fc\u30c8","title":"2019-12-01"},{"location":"ja-jp/news/v041/","text":"1. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u3053\u308c\u307e\u3067\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b7\u30fc\u30f3\u306b\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7528\u610f\u3057\u305f\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 RenderTexture \u3092\u4f5c\u6210\u3057\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3068\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\uff08\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5909\u66f4\uff09\u3002\u63cf\u753b\u3055\u308c\u305f\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u89e3\u9664\u3055\u308c\u305f\u3042\u3068\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u63cf\u753b\u306b\u8ee2\u7528\u3067\u304d\u307e\u3059\u3002 Warning \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u6700\u4e2d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u7d75\u6587\u5b57 const Texture emoji ( Emoji ( U \"\ud83d\ude07\" )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 600 , 600 , Palette :: White ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . drawAt ( Cursor :: Pos ()); } rt . draw (); emoji . drawAt ( Cursor :: Pos ()); // Clear \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 650 , 20 ))) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u767d\u3067\u30af\u30ea\u30a2 rt . clear ( Palette :: White ); } } } 2. \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u901a\u5e38\u306e RenderTexture \u3078\u306e\u63cf\u753b\u3067\u306f\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u304c\u6709\u52b9\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u56f3\u5f62\u3092\u63cf\u753b\u3057\u305f\u969b\u306b\u30b8\u30e3\u30ae\u30fc\u304c\u751f\u3058\u307e\u3059\u3002 MSRenderTexture \u3092\u4f7f\u3046\u3068\u3001\u901a\u5e38\u306e\u30b7\u30fc\u30f3\u3078\u306e\u63cf\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 MSRenderTexture \u306b\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u3001\u5225\u306e\u63cf\u753b\u3067\u4f7f\u3046\u969b\u306b\u306f\u3001 Graphics2D :: Flush () \u306b\u3088\u3063\u3066\u305d\u306e\u6642\u70b9\u307e\u3067\u306e\u63cf\u753b\u51e6\u7406\u3092\u3059\u3079\u3066\u5b9f\u884c\uff08\u30d5\u30e9\u30c3\u30b7\u30e5\uff09\u3057\u3066 MSRenderTexture \u306b\u78ba\u5b9f\u306b\u63cf\u753b\u3057\u305f\u3042\u3068\u306b\u3001 MSRenderTexture :: resolve () \u3092\u884c\u3044\u3001 MSRenderTexture \u5185\u306e\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 200 , 200 ); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture msrt ( 200 , 200 ); while ( System :: Update ()) { rt . clear ( ColorF ( 0.0 , 1.0 )); { ScopedRenderTarget2D target ( rt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } msrt . clear ( ColorF ( 0.0 , 1.0 )); { { ScopedRenderTarget2D target ( msrt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } // 2D \u63cf\u753b\u3092\u30d5\u30e9\u30c3\u30b7\u30e5 Graphics2D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db msrt . resolve (); } rt . draw ( 100 , 0 ); msrt . draw ( 400 , 0 ); } } 3. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u30b7\u30a7\u30fc\u30c0\u51e6\u7406 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u69d8\u3005\u306a\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570 1 \u3064\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u5909\u66f4\u3082\u4e0d\u8981\u3067\u3059\u3002\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 void Copy ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void Downsample ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u7e2e\u5c0f\u3057\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurH ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurV ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u7e26\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur ( const TextureRegion & from , RenderTexture & to , const Vec2 & direction ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 direction: \u30d6\u30e9\u30fc\u306e\u65b9\u5411 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6307\u5b9a\u3057\u305f\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur ( const TextureRegion & from , RenderTexture & internalBuffer , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 internalBuffer: \u4e2d\u9593\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u306b\u7e26\u65b9\u5411\u3068\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from , internalBuffer , to \u306f\u3044\u305a\u308c\u3082\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u96a3\u308a\u5408\u3046\u3082\u306e\u540c\u58eb\u306f\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 GaussianBlurH ( from , internalBuffer ); GaussianBlurV ( internalBuffer , to ); \u3068\u7b49\u4fa1\u3067\u3059\u3002 \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 \u00b6 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // \u7e26\u3001\u6a2a\u304c 4 \u5206\u306e 1 \u30b5\u30a4\u30ba\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( texture . size () / 4 ); // \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 Shader :: Downsample ( texture , rt ); while ( System :: Update ()) { rt . draw (); } } \u30ac\u30a6\u30b9\u307c\u304b\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // bay.jpg \u306f 2560x1440 \u306a\u306e\u3067\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3057\u3066\u30ed\u30fc\u30c9 const Texture texture ( Image ( U \"example/bay.jpg\" ). scale ( 1280 , 720 )); // \u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba constexpr Size blurAreaSize ( 480 , 320 ); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f RenderTexture rtA ( blurAreaSize ), rtB ( blurAreaSize ); RenderTexture rtA4 ( blurAreaSize / 4 ), rtB4 ( blurAreaSize / 4 ); RenderTexture rtA8 ( blurAreaSize / 8 ), rtB8 ( blurAreaSize / 8 ); while ( System :: Update ()) { const Point cursorPos = Cursor :: Pos (); // \u80cc\u666f\u753b\u50cf\u306e\u3046\u3061\u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df const Rect blurArea ( cursorPos , blurAreaSize ); // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/8\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( texture ( blurArea ), rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); // \u80cc\u666f\u3092\u63cf\u753b texture . draw (); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u5f8c\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 RoundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b RoundRect ( cursorPos , blurAreaSize , 40 )( rtA8 . resized ( blurAreaSize )). draw (); } } 4. \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 \u00b6 2D \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u56f3\u5f62\u304c\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u63cf\u304b\u308c\u308b\u3068\u304d\u3001\u3069\u306e\u3088\u3046\u306a\u8272\u3092\u51fa\u529b\u3059\u308b\u304b\u306f\u3001\u300c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u2015\u30c0\u300d\u3068\u547c\u3070\u308c\u308b\u3001\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b GPU \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u901a\u3057\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Windows (Direct3D) \u3067\u306f\u300cHLSL\u300d\u3001macOS/Linux (OpenGL) \u3067\u306f\u300cGLSL\u300d\u3068\u3044\u3046\u8a00\u8a9e\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\u30ab\u30b9\u30bf\u30e0\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u524d\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3069\u306e\u3088\u3046\u306a\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u63cf\u304b\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0 \u00b6 HLSL \u00b6 PS () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b PSInput \u578b\u306e\u5024 input \u306e .position , .color , .uv \u30e1\u30f3\u30d0\u5909\u6570\u306e\u3046\u3061 .color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 input . color \u304c float4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f flaot4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b return float4 ( 1 , 0 , 0 , 1 ) \u3092\u8fd4\u305b\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { return input . color + g_colorAdd ; } GLSL \u00b6 main () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b vec4 \u578b\u306e\u5024 Color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3001 FragColor \u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 Color \u304c vec4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f vec4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b FragColor = vec4 ( 1 , 0 , 0 , 1 ) \u3068\u3059\u308c\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.frag #version 410 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { FragColor = Color + g_colorAdd ; } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0 \u00b6 HLSL \u00b6 \u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3 g_texture0 \u3068\u30b5\u30f3\u30d7\u30e9\u30fc g_sampler0 \u3092\u4f7f\u3063\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b input . uv \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float4 texColor = g_texture0 . Sample ( g_sampler0 , input . uv ); return ( texColor * input . color ) + g_colorAdd ; } GLSL \u00b6 \u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30e9\u30fc Texture0 \u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b\u5024 UV \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.frag #version 410 uniform sampler2D Texture0 ; layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { vec4 texColor = texture ( Texture0 , UV ); FragColor = ( texColor * Color ) + g_colorAdd ; } \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528 \u00b6 \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f PixelShader \u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u958b\u767a\u3067\u306f\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u4f7f\u3044\u5206\u3051\u308b\u305f\u3081\u306b SIV3D_SELECT_SHADER \u30de\u30af\u30ed\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u4ed8\u3051\u306e\u305f\u3081\u306b { { U \"PSConstants2D\" , 0 } } \u3092\u8a18\u8ff0\u3057\u307e\u3059\u30022D \u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u304a\u3044\u3066\u306f\u3001Siv3D \u5185\u90e8\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\u3001 U \"PSConstants2D\" \u3068\u3044\u3046\u540d\u524d\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u5e38\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if (!ps) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 ScopedCustomShader2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u3088\u3063\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e R \u6210\u5206\u3068 B \u6210\u5206\u3092\u5165\u308c\u66ff\u3048\u3066\u63cf\u753b\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528 (Windows \u306e\u307f) \u00b6 Platform :: Windows :: Shader :: CompileHLSLToFile () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001HLSL \u30d5\u30a1\u30a4\u30eb\u3092\u3042\u3089\u304b\u3058\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u5b9f\u884c\u6642\u306e\u51e6\u7406\u3092\u524a\u6e1b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306e\u30b7\u30a7\u30fc\u30c0\u306f PixelShader \u3067\u305d\u306e\u307e\u307e\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u5168\u3066\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); # if SIV3D_PLATFORM(WINDOWS) // \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u3092\u4f5c\u3063\u3066\u4fdd\u5b58\u3059\u308b\uff081 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308c\u3070 OK\uff09 //Platform::Windows::Shader::CompileHLSLToFile( // U\"example/shader/2d/rgb_to_bgr.hlsl\", // U\"example/shader/2d/rgb_to_bgr.ps\", // ShaderStage::Pixel, U\"PS\"); # endif // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f ps, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".ps\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 RGB \u30b7\u30d5\u30c8 \u00b6 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_shift\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316 \u00b6 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba \u00b6 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/posterize\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } Poisson-Disk Sampling \u00b6 \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u3068\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5024\u3092\u6e21\u305b\u307e\u3059\u3002\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306f 16 \u306e\u500d\u6570\u306e\u30b5\u30a4\u30ba\u3067\u7528\u610f\u3057\u307e\u3059\u30021 \u3064\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f 64KB \u3067\u3059\u3002 \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u65b0\u3057\u3044\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u306b\u306f\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8ffd\u52a0\u3057\u3001 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b58\u5728\u3059\u308b PSConstants2D \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 ConstantBuffer <> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u308a\u3001\u3053\u306e\u30af\u30e9\u30b9\u7d4c\u7531\u3067\u5024\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002\u63cf\u753b\u524d\u306b\u3001 Graphics2D :: SetConstantBuffer () \u306b\u3088\u3063\u3066\u3001\u9069\u5207\u306a\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PoissonDisk { // 1 \u30d4\u30af\u30bb\u30eb\u3042\u305f\u308a\u306e UV \u30b5\u30a4\u30ba Float2 pixelSize ; // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 float diskRadius ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 float _unused = 0.0f ; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // Poisson-Disk Sampling \u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/poisson_disk\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PoissonDisk\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PoissonDisk > cb ; cb -> pixelSize = Float2 ( 1.0 , 1.0 ) / windmill . size (); // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 double diskRadius = 0.0 ; while ( System :: Update ()) { // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84\u3092\u30b9\u30e9\u30a4\u30c0\u30fc\u3067\u5909\u66f4 SimpleGUI :: Slider ( U \"diskRadius\" , diskRadius , 0.0 , 8.0 , Vec2 ( 10 , 340 ), 120 , 200 ); cb -> diskRadius = static_cast < float > ( diskRadius ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u3001\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 1 \u306b\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // Poisson-Disk Sampling \u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u6e26\u5dfb\u304d\u52b9\u679c \u00b6 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; while ( System :: Update ()) { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 720 _deg ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d6\u30ec\u30f3\u30c9 \u00b6 \u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u63cf\u753b\u3067\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Graphics2D :: SetTexture () \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8907\u6570\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Graphics2D :: SetTexture () \u306b none \u3092\u6e21\u3059\u3053\u3068\u3067\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture emojiCat ( Emoji ( U \"\ud83d\udc08\" )); const Texture windmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_blend\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { // windmill \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , windmill ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); emojiCat . scaled ( 2 ). drawAt ( Scene :: Center ()); } } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30de\u30b9\u30af \u00b6 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 960x600 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 960 , 600 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_mask\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u7d75\u6587\u5b57\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u753b\u50cf const Texture emoji ( Emoji :: CreateSilhouetteImage ( U \"\ud83c\udf4e\" ), TextureDesc :: Mipped ); // \u98a8\u8eca\u306e\u5199\u771f const Texture windmill ( U \"example/windmill.png\" ); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 RenderTexture rt ( 480 , 320 ); while ( System :: Update ()) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( ColorF ( 0.0 , 1.0 )); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . scaled ( 2 ). rotated ( Scene :: Time () * 60 _deg ). drawAt ( rt . size () / 2 ); } // \u63cf\u753b\u3055\u308c\u305f rt \u3092\u8868\u793a rt . draw ( 0 , 140 ); // rt \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , rt ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 480 , 140 ); } } } GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 \u00b6 \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30bb\u30eb\u306e\u6570 (1280x720) constexpr Size FieldSize ( 1280 , 720 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); while ( System :: Update ()) { { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } } GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff082D \u30ab\u30e1\u30e9\u64cd\u4f5c\u5bfe\u5fdc\u7248\uff09 \u00b6 \u30de\u30a6\u30b9\u3084\u30ad\u30fc\u3092\u4f7f\u3063\u305f 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u3067\u62e1\u5927\u7e2e\u5c0f\u3084\u79fb\u52d5\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u30b0\u30ec\u30fc\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.5 )); // \u30bb\u30eb\u306e\u6570 (2048x2048), \u6700\u5927 (8192x8192) constexpr Size FieldSize ( 2048 , 2048 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 4 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); // 2D \u30ab\u30e1\u30e9\u306e UI \u3092\u63cf\u753b camera . draw ( Palette :: Orange ); } { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } } \u30b2\u30fc\u30e0\u753b\u9762\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528 \u00b6 \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u30b2\u30fc\u30e0\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u63cf\u753b\u3057\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30fc\u30f3\u306b\u63cf\u753b\u3059\u308b\u969b\u306b\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30b2\u30fc\u30e0\u753b\u9762\u5168\u4f53\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { // \u30b2\u30fc\u30e0\u306e\u63cf\u753b\u7528\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture rt ( Scene :: Size ()); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psGrayscale ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! psGrayscale ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psSwirl ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! psSwirl ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rtA ( rt . size ()), rtB ( rt . size ()); RenderTexture rtA4 ( rt . size () / 4 ), rtB4 ( rt . size () / 4 ); RenderTexture rtA8 ( rt . size () / 8 ), rtB8 ( rt . size () / 8 ); // \u30b2\u30fc\u30e0\u753b\u9762\u306b\u9069\u7528\u3059\u308b\u30a8\u30d5\u30a7\u30af\u30c8 size_t effectIndex = 0 ; // \u80cc\u666f\u8272 constexpr ColorF backgroundColor ( 0.3 , 0.4 , 0.5 ); // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u81ea\u52d5\u30d7\u30ec\u30a4\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf double paddleCenter = 400 ; double randomOffset = 0.0 ; while ( System :: Update ()) { // \u81ea\u52d5\u30d7\u30ec\u30a4 paddleCenter = Math :: Damp ( paddleCenter , ball . x + ballVelocity . x * 1.2 + randomOffset , 0.9 , Scene :: DeltaTime ()); // \u30d1\u30c9\u30eb const RectF paddle ( Arg :: center ( paddleCenter , 500 ), 120 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); randomOffset = Random ( - 40 , 40 ); } // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( backgroundColor ); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); for ( auto y : Range ( 1 , 5 )) { Line ( 0 , y * 100 , 800 , y * 100 ). draw ( 1 , Palette :: Gray ); } for ( auto x : Range ( 1 , 7 )) { Line ( x * 100 , 0 , x * 100 , 600 ). draw ( 1 , Palette :: Gray ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } // resolve \u306e\u305f\u3081\u306b\u63cf\u753b\u3092\u5b8c\u4e86\u3055\u305b\u308b Graphics2D :: Flush (); // multi-sample \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 resolve \u3057\u3066 // multi-sample \u3067\u306f\u306a\u3044\u3001\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5f97\u308b rt . resolve (); if ( effectIndex == 0 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u305d\u306e\u307e\u307e\u63cf\u753b { rt . draw (); } else if ( effectIndex == 1 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3057\u3066\u63cf\u753b { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psGrayscale ); rt . draw (); } else if ( effectIndex == 2 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u6e26\u5dfb\u304d\u52b9\u679c\u3067\u63cf\u753b { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 240 _deg ); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psSwirl ); rt . draw (); } else if ( effectIndex == 3 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3067\u63cf\u753b { // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( rt , rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); rtA8 . scaled ( 8 ). draw (); } // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u7a2e\u985e\u306e\u9078\u629e SimpleGUI :: RadioButtons ( effectIndex , { U \"Default\" , U \"Grayscale\" , U \"Swirl\" , U \"GaussianBlur\" }, Vec2 ( 10 , 10 )); } } 5. \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210 \u00b6 \u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u300c\u5b50\u30d7\u30ed\u30bb\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\u3001\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u305f\u308a\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u969b\u306b\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"C:/Windows/System32/notepad.exe\" ; # elif SIV3D_PLATFORM(MACOS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210 ChildProcess child = Process :: Spawn ( path ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } while ( System :: Update ()) { ClearPrint (); // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u304b\u3092\u53d6\u5f97 Print << child . isRunning (); // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u30b3\u30fc\u30c9 Print << child . getExitCode (); if ( child . isRunning ()) { if ( SimpleGUI :: Button ( U \"Terminate\" , Vec2 ( 100 , 20 ))) { // \u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86 child . terminate (); } } } } \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406 \u00b6 \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u4e00\u65b9\u306e\u6a19\u6e96\u51fa\u529b\u3092\u4ed6\u65b9\u306e\u6a19\u6e96\u5165\u529b\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\"Console\" \u306f\u901a\u5e38\u306e C++ \u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 Console # include <iostream> int main () { int a , b ; std :: cin >> a >> b ; std :: cout << ( a + b ) << std :: endl ; } Siv3D # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console.exe\" ; # else // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff09 ChildProcess child = Process :: Spawn ( path , Pipe :: StdInOut ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } child . ostream () << 10 << std :: endl ; child . ostream () << 20 << std :: endl ; int32 result ; child . istream () >> result ; Print << U \"result: \" << result ; while ( System :: Update ()) { } } 6. \u5b9f\u9a13\u7684\u306a 3D \u63cf\u753b\u5bfe\u5fdc \u00b6 \u5b9f\u9a13\u7684\u306a 3D \u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); experimental :: Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { experimental :: Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); experimental :: Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } experimental :: AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); experimental :: AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); experimental :: AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); experimental :: AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); experimental :: AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 \u30de\u30a6\u30b9\u30af\u30ea\u30c3\u30af\u3067\u3001\u5de6\u4e0a\u306e\u9ad8\u3055\u30de\u30c3\u30d7\u306b\u5c71\u3092\u63cf\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } }","title":"v0.4.1 \u306e\u65b0\u6a5f\u80fd"},{"location":"ja-jp/news/v041/#1","text":"\u3053\u308c\u307e\u3067\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b7\u30fc\u30f3\u306b\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7528\u610f\u3057\u305f\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 RenderTexture \u3092\u4f5c\u6210\u3057\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3068\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\uff08\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5909\u66f4\uff09\u3002\u63cf\u753b\u3055\u308c\u305f\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u89e3\u9664\u3055\u308c\u305f\u3042\u3068\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u63cf\u753b\u306b\u8ee2\u7528\u3067\u304d\u307e\u3059\u3002 Warning \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u6700\u4e2d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u7d75\u6587\u5b57 const Texture emoji ( Emoji ( U \"\ud83d\ude07\" )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 600 , 600 , Palette :: White ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . drawAt ( Cursor :: Pos ()); } rt . draw (); emoji . drawAt ( Cursor :: Pos ()); // Clear \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 650 , 20 ))) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u767d\u3067\u30af\u30ea\u30a2 rt . clear ( Palette :: White ); } } }","title":"1. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"ja-jp/news/v041/#2","text":"\u901a\u5e38\u306e RenderTexture \u3078\u306e\u63cf\u753b\u3067\u306f\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u304c\u6709\u52b9\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u56f3\u5f62\u3092\u63cf\u753b\u3057\u305f\u969b\u306b\u30b8\u30e3\u30ae\u30fc\u304c\u751f\u3058\u307e\u3059\u3002 MSRenderTexture \u3092\u4f7f\u3046\u3068\u3001\u901a\u5e38\u306e\u30b7\u30fc\u30f3\u3078\u306e\u63cf\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 MSRenderTexture \u306b\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u3001\u5225\u306e\u63cf\u753b\u3067\u4f7f\u3046\u969b\u306b\u306f\u3001 Graphics2D :: Flush () \u306b\u3088\u3063\u3066\u305d\u306e\u6642\u70b9\u307e\u3067\u306e\u63cf\u753b\u51e6\u7406\u3092\u3059\u3079\u3066\u5b9f\u884c\uff08\u30d5\u30e9\u30c3\u30b7\u30e5\uff09\u3057\u3066 MSRenderTexture \u306b\u78ba\u5b9f\u306b\u63cf\u753b\u3057\u305f\u3042\u3068\u306b\u3001 MSRenderTexture :: resolve () \u3092\u884c\u3044\u3001 MSRenderTexture \u5185\u306e\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 200 , 200 ); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture msrt ( 200 , 200 ); while ( System :: Update ()) { rt . clear ( ColorF ( 0.0 , 1.0 )); { ScopedRenderTarget2D target ( rt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } msrt . clear ( ColorF ( 0.0 , 1.0 )); { { ScopedRenderTarget2D target ( msrt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } // 2D \u63cf\u753b\u3092\u30d5\u30e9\u30c3\u30b7\u30e5 Graphics2D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db msrt . resolve (); } rt . draw ( 100 , 0 ); msrt . draw ( 400 , 0 ); } }","title":"2. \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"ja-jp/news/v041/#3","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u69d8\u3005\u306a\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570 1 \u3064\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u5909\u66f4\u3082\u4e0d\u8981\u3067\u3059\u3002\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002","title":"3. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u30b7\u30a7\u30fc\u30c0\u51e6\u7406"},{"location":"ja-jp/news/v041/#void-copyconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void Copy(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"ja-jp/news/v041/#void-downsampleconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u7e2e\u5c0f\u3057\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void Downsample(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"ja-jp/news/v041/#void-gaussianblurhconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void GaussianBlurH(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"ja-jp/news/v041/#void-gaussianblurvconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u7e26\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void GaussianBlurV(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"ja-jp/news/v041/#void-gaussianblurconst-textureregion-from-rendertexture-to-const-vec2-direction","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 direction: \u30d6\u30e9\u30fc\u306e\u65b9\u5411 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6307\u5b9a\u3057\u305f\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void GaussianBlur(const TextureRegion&amp; from, RenderTexture&amp; to, const Vec2&amp; direction);"},{"location":"ja-jp/news/v041/#void-gaussianblurconst-textureregion-from-rendertexture-internalbuffer-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 internalBuffer: \u4e2d\u9593\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u306b\u7e26\u65b9\u5411\u3068\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from , internalBuffer , to \u306f\u3044\u305a\u308c\u3082\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u96a3\u308a\u5408\u3046\u3082\u306e\u540c\u58eb\u306f\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 GaussianBlurH ( from , internalBuffer ); GaussianBlurV ( internalBuffer , to ); \u3068\u7b49\u4fa1\u3067\u3059\u3002","title":"void GaussianBlur(const TextureRegion&amp; from, RenderTexture&amp; internalBuffer, RenderTexture&amp; to);"},{"location":"ja-jp/news/v041/#_1","text":"# include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // \u7e26\u3001\u6a2a\u304c 4 \u5206\u306e 1 \u30b5\u30a4\u30ba\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( texture . size () / 4 ); // \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 Shader :: Downsample ( texture , rt ); while ( System :: Update ()) { rt . draw (); } }","title":"\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0"},{"location":"ja-jp/news/v041/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // bay.jpg \u306f 2560x1440 \u306a\u306e\u3067\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3057\u3066\u30ed\u30fc\u30c9 const Texture texture ( Image ( U \"example/bay.jpg\" ). scale ( 1280 , 720 )); // \u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba constexpr Size blurAreaSize ( 480 , 320 ); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f RenderTexture rtA ( blurAreaSize ), rtB ( blurAreaSize ); RenderTexture rtA4 ( blurAreaSize / 4 ), rtB4 ( blurAreaSize / 4 ); RenderTexture rtA8 ( blurAreaSize / 8 ), rtB8 ( blurAreaSize / 8 ); while ( System :: Update ()) { const Point cursorPos = Cursor :: Pos (); // \u80cc\u666f\u753b\u50cf\u306e\u3046\u3061\u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df const Rect blurArea ( cursorPos , blurAreaSize ); // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/8\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( texture ( blurArea ), rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); // \u80cc\u666f\u3092\u63cf\u753b texture . draw (); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u5f8c\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 RoundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b RoundRect ( cursorPos , blurAreaSize , 40 )( rtA8 . resized ( blurAreaSize )). draw (); } }","title":"\u30ac\u30a6\u30b9\u307c\u304b\u3057"},{"location":"ja-jp/news/v041/#4","text":"2D \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u56f3\u5f62\u304c\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u63cf\u304b\u308c\u308b\u3068\u304d\u3001\u3069\u306e\u3088\u3046\u306a\u8272\u3092\u51fa\u529b\u3059\u308b\u304b\u306f\u3001\u300c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u2015\u30c0\u300d\u3068\u547c\u3070\u308c\u308b\u3001\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b GPU \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u901a\u3057\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Windows (Direct3D) \u3067\u306f\u300cHLSL\u300d\u3001macOS/Linux (OpenGL) \u3067\u306f\u300cGLSL\u300d\u3068\u3044\u3046\u8a00\u8a9e\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\u30ab\u30b9\u30bf\u30e0\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u524d\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3069\u306e\u3088\u3046\u306a\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u63cf\u304b\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"4. \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0"},{"location":"ja-jp/news/v041/#_3","text":"","title":"\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0"},{"location":"ja-jp/news/v041/#hlsl","text":"PS () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b PSInput \u578b\u306e\u5024 input \u306e .position , .color , .uv \u30e1\u30f3\u30d0\u5909\u6570\u306e\u3046\u3061 .color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 input . color \u304c float4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f flaot4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b return float4 ( 1 , 0 , 0 , 1 ) \u3092\u8fd4\u305b\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { return input . color + g_colorAdd ; }","title":"HLSL"},{"location":"ja-jp/news/v041/#glsl","text":"main () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b vec4 \u578b\u306e\u5024 Color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3001 FragColor \u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 Color \u304c vec4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f vec4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b FragColor = vec4 ( 1 , 0 , 0 , 1 ) \u3068\u3059\u308c\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.frag #version 410 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { FragColor = Color + g_colorAdd ; }","title":"GLSL"},{"location":"ja-jp/news/v041/#_4","text":"","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0"},{"location":"ja-jp/news/v041/#hlsl_1","text":"\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3 g_texture0 \u3068\u30b5\u30f3\u30d7\u30e9\u30fc g_sampler0 \u3092\u4f7f\u3063\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b input . uv \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float4 texColor = g_texture0 . Sample ( g_sampler0 , input . uv ); return ( texColor * input . color ) + g_colorAdd ; }","title":"HLSL"},{"location":"ja-jp/news/v041/#glsl_1","text":"\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30e9\u30fc Texture0 \u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b\u5024 UV \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.frag #version 410 uniform sampler2D Texture0 ; layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { vec4 texColor = texture ( Texture0 , UV ); FragColor = ( texColor * Color ) + g_colorAdd ; }","title":"GLSL"},{"location":"ja-jp/news/v041/#_5","text":"\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f PixelShader \u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u958b\u767a\u3067\u306f\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u4f7f\u3044\u5206\u3051\u308b\u305f\u3081\u306b SIV3D_SELECT_SHADER \u30de\u30af\u30ed\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u4ed8\u3051\u306e\u305f\u3081\u306b { { U \"PSConstants2D\" , 0 } } \u3092\u8a18\u8ff0\u3057\u307e\u3059\u30022D \u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u304a\u3044\u3066\u306f\u3001Siv3D \u5185\u90e8\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\u3001 U \"PSConstants2D\" \u3068\u3044\u3046\u540d\u524d\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u5e38\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if (!ps) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 ScopedCustomShader2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u3088\u3063\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e R \u6210\u5206\u3068 B \u6210\u5206\u3092\u5165\u308c\u66ff\u3048\u3066\u63cf\u753b\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528"},{"location":"ja-jp/news/v041/#windows","text":"Platform :: Windows :: Shader :: CompileHLSLToFile () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001HLSL \u30d5\u30a1\u30a4\u30eb\u3092\u3042\u3089\u304b\u3058\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u5b9f\u884c\u6642\u306e\u51e6\u7406\u3092\u524a\u6e1b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306e\u30b7\u30a7\u30fc\u30c0\u306f PixelShader \u3067\u305d\u306e\u307e\u307e\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u5168\u3066\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); # if SIV3D_PLATFORM(WINDOWS) // \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u3092\u4f5c\u3063\u3066\u4fdd\u5b58\u3059\u308b\uff081 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308c\u3070 OK\uff09 //Platform::Windows::Shader::CompileHLSLToFile( // U\"example/shader/2d/rgb_to_bgr.hlsl\", // U\"example/shader/2d/rgb_to_bgr.ps\", // ShaderStage::Pixel, U\"PS\"); # endif // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f ps, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".ps\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528 (Windows \u306e\u307f)"},{"location":"ja-jp/news/v041/#_6","text":"","title":"\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/news/v041/#rgb","text":"# include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_shift\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"RGB \u30b7\u30d5\u30c8"},{"location":"ja-jp/news/v041/#_7","text":"# include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316"},{"location":"ja-jp/news/v041/#_8","text":"# include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/posterize\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30dd\u30b9\u30bf\u30e9\u30a4\u30ba"},{"location":"ja-jp/news/v041/#poisson-disk-sampling","text":"\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u3068\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5024\u3092\u6e21\u305b\u307e\u3059\u3002\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306f 16 \u306e\u500d\u6570\u306e\u30b5\u30a4\u30ba\u3067\u7528\u610f\u3057\u307e\u3059\u30021 \u3064\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f 64KB \u3067\u3059\u3002 \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u65b0\u3057\u3044\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u306b\u306f\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8ffd\u52a0\u3057\u3001 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b58\u5728\u3059\u308b PSConstants2D \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 ConstantBuffer <> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u308a\u3001\u3053\u306e\u30af\u30e9\u30b9\u7d4c\u7531\u3067\u5024\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002\u63cf\u753b\u524d\u306b\u3001 Graphics2D :: SetConstantBuffer () \u306b\u3088\u3063\u3066\u3001\u9069\u5207\u306a\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PoissonDisk { // 1 \u30d4\u30af\u30bb\u30eb\u3042\u305f\u308a\u306e UV \u30b5\u30a4\u30ba Float2 pixelSize ; // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 float diskRadius ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 float _unused = 0.0f ; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // Poisson-Disk Sampling \u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/poisson_disk\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PoissonDisk\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PoissonDisk > cb ; cb -> pixelSize = Float2 ( 1.0 , 1.0 ) / windmill . size (); // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 double diskRadius = 0.0 ; while ( System :: Update ()) { // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84\u3092\u30b9\u30e9\u30a4\u30c0\u30fc\u3067\u5909\u66f4 SimpleGUI :: Slider ( U \"diskRadius\" , diskRadius , 0.0 , 8.0 , Vec2 ( 10 , 340 ), 120 , 200 ); cb -> diskRadius = static_cast < float > ( diskRadius ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u3001\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 1 \u306b\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // Poisson-Disk Sampling \u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"Poisson-Disk Sampling"},{"location":"ja-jp/news/v041/#_9","text":"# include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; while ( System :: Update ()) { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 720 _deg ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u6e26\u5dfb\u304d\u52b9\u679c"},{"location":"ja-jp/news/v041/#_10","text":"\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u63cf\u753b\u3067\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Graphics2D :: SetTexture () \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8907\u6570\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Graphics2D :: SetTexture () \u306b none \u3092\u6e21\u3059\u3053\u3068\u3067\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture emojiCat ( Emoji ( U \"\ud83d\udc08\" )); const Texture windmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_blend\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { // windmill \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , windmill ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); emojiCat . scaled ( 2 ). drawAt ( Scene :: Center ()); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d6\u30ec\u30f3\u30c9"},{"location":"ja-jp/news/v041/#_11","text":"# include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 960x600 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 960 , 600 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_mask\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u7d75\u6587\u5b57\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u753b\u50cf const Texture emoji ( Emoji :: CreateSilhouetteImage ( U \"\ud83c\udf4e\" ), TextureDesc :: Mipped ); // \u98a8\u8eca\u306e\u5199\u771f const Texture windmill ( U \"example/windmill.png\" ); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 RenderTexture rt ( 480 , 320 ); while ( System :: Update ()) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( ColorF ( 0.0 , 1.0 )); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . scaled ( 2 ). rotated ( Scene :: Time () * 60 _deg ). drawAt ( rt . size () / 2 ); } // \u63cf\u753b\u3055\u308c\u305f rt \u3092\u8868\u793a rt . draw ( 0 , 140 ); // rt \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , rt ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 480 , 140 ); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30de\u30b9\u30af"},{"location":"ja-jp/news/v041/#gpu","text":"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30bb\u30eb\u306e\u6570 (1280x720) constexpr Size FieldSize ( 1280 , 720 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); while ( System :: Update ()) { { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } }","title":"GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/news/v041/#gpu-2d","text":"\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u3092\u4f7f\u3063\u305f 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u3067\u62e1\u5927\u7e2e\u5c0f\u3084\u79fb\u52d5\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u30b0\u30ec\u30fc\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.5 )); // \u30bb\u30eb\u306e\u6570 (2048x2048), \u6700\u5927 (8192x8192) constexpr Size FieldSize ( 2048 , 2048 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 4 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); // 2D \u30ab\u30e1\u30e9\u306e UI \u3092\u63cf\u753b camera . draw ( Palette :: Orange ); } { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } }","title":"GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff082D \u30ab\u30e1\u30e9\u64cd\u4f5c\u5bfe\u5fdc\u7248\uff09"},{"location":"ja-jp/news/v041/#_12","text":"\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u30b2\u30fc\u30e0\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u63cf\u753b\u3057\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30fc\u30f3\u306b\u63cf\u753b\u3059\u308b\u969b\u306b\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30b2\u30fc\u30e0\u753b\u9762\u5168\u4f53\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { // \u30b2\u30fc\u30e0\u306e\u63cf\u753b\u7528\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture rt ( Scene :: Size ()); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psGrayscale ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! psGrayscale ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psSwirl ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! psSwirl ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rtA ( rt . size ()), rtB ( rt . size ()); RenderTexture rtA4 ( rt . size () / 4 ), rtB4 ( rt . size () / 4 ); RenderTexture rtA8 ( rt . size () / 8 ), rtB8 ( rt . size () / 8 ); // \u30b2\u30fc\u30e0\u753b\u9762\u306b\u9069\u7528\u3059\u308b\u30a8\u30d5\u30a7\u30af\u30c8 size_t effectIndex = 0 ; // \u80cc\u666f\u8272 constexpr ColorF backgroundColor ( 0.3 , 0.4 , 0.5 ); // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u81ea\u52d5\u30d7\u30ec\u30a4\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf double paddleCenter = 400 ; double randomOffset = 0.0 ; while ( System :: Update ()) { // \u81ea\u52d5\u30d7\u30ec\u30a4 paddleCenter = Math :: Damp ( paddleCenter , ball . x + ballVelocity . x * 1.2 + randomOffset , 0.9 , Scene :: DeltaTime ()); // \u30d1\u30c9\u30eb const RectF paddle ( Arg :: center ( paddleCenter , 500 ), 120 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); randomOffset = Random ( - 40 , 40 ); } // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( backgroundColor ); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); for ( auto y : Range ( 1 , 5 )) { Line ( 0 , y * 100 , 800 , y * 100 ). draw ( 1 , Palette :: Gray ); } for ( auto x : Range ( 1 , 7 )) { Line ( x * 100 , 0 , x * 100 , 600 ). draw ( 1 , Palette :: Gray ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } // resolve \u306e\u305f\u3081\u306b\u63cf\u753b\u3092\u5b8c\u4e86\u3055\u305b\u308b Graphics2D :: Flush (); // multi-sample \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 resolve \u3057\u3066 // multi-sample \u3067\u306f\u306a\u3044\u3001\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5f97\u308b rt . resolve (); if ( effectIndex == 0 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u305d\u306e\u307e\u307e\u63cf\u753b { rt . draw (); } else if ( effectIndex == 1 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3057\u3066\u63cf\u753b { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psGrayscale ); rt . draw (); } else if ( effectIndex == 2 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u6e26\u5dfb\u304d\u52b9\u679c\u3067\u63cf\u753b { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 240 _deg ); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psSwirl ); rt . draw (); } else if ( effectIndex == 3 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3067\u63cf\u753b { // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( rt , rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); rtA8 . scaled ( 8 ). draw (); } // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u7a2e\u985e\u306e\u9078\u629e SimpleGUI :: RadioButtons ( effectIndex , { U \"Default\" , U \"Grayscale\" , U \"Swirl\" , U \"GaussianBlur\" }, Vec2 ( 10 , 10 )); } }","title":"\u30b2\u30fc\u30e0\u753b\u9762\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528"},{"location":"ja-jp/news/v041/#5","text":"\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u300c\u5b50\u30d7\u30ed\u30bb\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\u3001\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u305f\u308a\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u969b\u306b\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"C:/Windows/System32/notepad.exe\" ; # elif SIV3D_PLATFORM(MACOS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210 ChildProcess child = Process :: Spawn ( path ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } while ( System :: Update ()) { ClearPrint (); // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u304b\u3092\u53d6\u5f97 Print << child . isRunning (); // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u30b3\u30fc\u30c9 Print << child . getExitCode (); if ( child . isRunning ()) { if ( SimpleGUI :: Button ( U \"Terminate\" , Vec2 ( 100 , 20 ))) { // \u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86 child . terminate (); } } } }","title":"5. \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210"},{"location":"ja-jp/news/v041/#_13","text":"\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u4e00\u65b9\u306e\u6a19\u6e96\u51fa\u529b\u3092\u4ed6\u65b9\u306e\u6a19\u6e96\u5165\u529b\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\"Console\" \u306f\u901a\u5e38\u306e C++ \u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 Console # include <iostream> int main () { int a , b ; std :: cin >> a >> b ; std :: cout << ( a + b ) << std :: endl ; } Siv3D # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console.exe\" ; # else // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff09 ChildProcess child = Process :: Spawn ( path , Pipe :: StdInOut ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } child . ostream () << 10 << std :: endl ; child . ostream () << 20 << std :: endl ; int32 result ; child . istream () >> result ; Print << U \"result: \" << result ; while ( System :: Update ()) { } }","title":"\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406"},{"location":"ja-jp/news/v041/#6-3d","text":"\u5b9f\u9a13\u7684\u306a 3D \u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044","title":"6. \u5b9f\u9a13\u7684\u306a 3D \u63cf\u753b\u5bfe\u5fdc"},{"location":"ja-jp/news/v041/#3d-triangles","text":"# include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); experimental :: Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } }","title":"3D Triangles"},{"location":"ja-jp/news/v041/#3d-aabb","text":"# include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { experimental :: Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); experimental :: Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } experimental :: AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); experimental :: AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); experimental :: AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); experimental :: AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); experimental :: AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } }","title":"3D AABB"},{"location":"ja-jp/news/v041/#3d-terrain","text":"\u30de\u30a6\u30b9\u30af\u30ea\u30c3\u30af\u3067\u3001\u5de6\u4e0a\u306e\u9ad8\u3055\u30de\u30c3\u30d7\u306b\u5c71\u3092\u63cf\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } }","title":"3D Terrain"},{"location":"ja-jp/news/v042/","text":"1. SDFFont \u00b6 SDFFont \u306f\u3001\u30b0\u30ea\u30d5\u306e\u753b\u50cf\u3092 Distance field \u5f62\u5f0f\u3067\u6301\u3064 Font \u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u56fa\u5b9a\u30b5\u30a4\u30ba\u3067\u30b0\u30ea\u30d5\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u62e1\u5927\u63cf\u753b\u6642\u306b\u307c\u3084\u3051\u308b\u306a\u3069\u3001\u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u5f31\u304f\u3001\u7e01\u53d6\u308a\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 SDFFont \u30af\u30e9\u30b9\u306f\u3001\u30b0\u30ea\u30d5\u3054\u3068\u306e Distance Field \u3092\u751f\u6210\u3057\u3001\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002 draw () \u3054\u3068\u306b\u7b2c\u4e00\u5f15\u6570\u3067\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u7d50\u679c\u304c\u307c\u3084\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001 Garphics2D :: SetSDFParameters () \u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6587\u5b57\u3092\u592a\u3089\u305b\u3089\u308c\u307e\u3059\u3002\u592a\u3055\u3068\u8272\u3092\u5909\u3048\u3066 2 \u56de\u4ee5\u4e0a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u7e01\u53d6\u308a\u306e\u8868\u73fe\u3082\u53ef\u80fd\u3067\u3059\u3002 \u305f\u3060\u3057\u3001 SDFFont \u306e\u751f\u6210\u3084\u63cf\u753b\u306e\u30b3\u30b9\u30c8\u306f Font \u306b\u6bd4\u3079\u3066\u5927\u304d\u3044\u305f\u3081\u3001 Font \u3067\u5341\u5206\u306a\u30b1\u30fc\u30b9\u3067\u306f\u5f93\u6765\u901a\u308a Font \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002 SDFFont \u306e\u54c1\u8cea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30d5\u306e Distance Field \u306e\u30b5\u30a4\u30ba\u3068\u3001\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e Distance Field \u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u6587\u5b57\u306e\u592a\u3089\u305b\u306b\u3064\u3044\u3066\u3082\u3001\u5927\u304d\u3044\u5024\u3067\u306f\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 SDFFont \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a Distance Field \u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 SDFFont \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; // SDFFont const SDFFont sdfFont ( distanceFieldSize , Typeface :: Bold ); const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 40 , Vec2 ( 20 , 20 )); sdfFont ( text ). draw ( 80 , Vec2 ( 20 , 80 )); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 180 )); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.2 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.2 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 ), Palette :: Black ); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.0 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.0 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 )); } } SDFFont \u306e\u4e8b\u524d\u751f\u6210 \u00b6 SDFFont \u306e\u5404\u30b0\u30ea\u30d5\u306e Distance field \u306f\u3001\u751f\u6210\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u30b0\u30ea\u30d5\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u901f\u5ea6\u4f4e\u4e0b\u304c\u9632\u3052\u307e\u3059\u3002 SDFFont :: preload ( s ) \u3067\u3001\u6587\u5b57\u5217 s \u542b\u307e\u308c\u308b\u30b0\u30ea\u30d5\u306e Distance field \u3092\u751f\u6210\u3001 SDFFont :: preload ( imagePath , jsonPath ) \u3067 2 \u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3001 SDFFont \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u4e8b\u524d\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u30b0\u30ea\u30d5\u306f\u5b9f\u884c\u6642\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( distanceFieldSize , Typeface :: Bold ) . preload ( s ) . saveGlyphs ( U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 // \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3084 Distance field \u304c\u4e00\u81f4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044 const SDFFont sdfFont ({ U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" }, distanceFieldSize , Typeface :: Bold ); if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 20 )); } } \u6bd4\u8f03\u7528\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); constexpr Vec2 pos ( 0 , 0 ); const String text = U \"OpenSiv3D \\n \u3042\u3044\u3046\u3048\u304a\" ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } s += text ; // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3068 text \u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( 60 , Typeface :: Light ). preload ( s ). saveGlyphs ( U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" ); SDFFont ( 60 , Typeface :: Heavy ). preload ( s ). saveGlyphs ( U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" ); SDFFont ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ). preload ( s ). saveGlyphs ( U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 const Array < SDFFont > sdfFonts = { SDFFont ({ U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" }, 60 , Typeface :: Light ), SDFFont ({ U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" }, 60 , Typeface :: Heavy ), SDFFont ({ U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" }, 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; for ( const auto & sdfFont : sdfFonts ) { if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } } // \u6bd4\u8f03\u7528\u306e\u901a\u5e38 Font const Array < Font > fonts = { Font ( 60 , Typeface :: Light ), Font ( 60 , Typeface :: Heavy ), Font ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; size_t fontIndex = 0 , method = 0 ; double fontSize = 80 , outline1 = 0.0 , outline2 = 0.0 ; HSV innerColor = Palette :: Black , outlineColor = Palette :: White ; while ( System :: Update ()) { const auto & sdfFont = sdfFonts [ fontIndex ]; const auto & font = fonts [ fontIndex ]; if ( method == 0 ) { Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline2 ); sdfFont ( text ). draw ( fontSize , pos , innerColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline1 ); sdfFont ( text ). draw ( fontSize , pos , outlineColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( fontSize , pos , innerColor ); } else if ( method == 1 ) { Transformer2D tr ( Mat3x2 :: Scale ( fontSize / font . fontSize ())); font ( text ). draw ( pos , innerColor ); } SimpleGUI :: RadioButtons ( fontIndex , { U \"Light 60\" , U \"Heavy 60\" , U \"Logo 50\" }, Vec2 ( 20 , 360 ), 150 ); SimpleGUI :: RadioButtons ( method , { U \"SDFFont\" , U \"Font\" }, Vec2 ( 20 , 480 ), 150 ); SimpleGUI :: Slider ( U \"size: {:.0f}\" _fmt ( fontSize ), fontSize , 15 , 550 , Vec2 ( 20 , 560 ), 150 , 200 ); SimpleGUI :: Slider ( U \"outline1: {:.2f}\" _fmt ( outline1 ), outline1 , 0.0 , 0.49 , Vec2 ( 20 , 600 ), 150 , 200 , ( method == 0 )); SimpleGUI :: Slider ( U \"outline2: {:.2f}\" _fmt ( outline2 ), outline2 , 0.0 , 0.49 , Vec2 ( 20 , 640 ), 150 , 200 , ( method == 0 )); SimpleGUI :: ColorPicker ( innerColor , Vec2 ( 400 , 560 )); SimpleGUI :: ColorPicker ( outlineColor , Vec2 ( 580 , 560 )); } } 2. \u96c6\u4e2d\u7dda\u63cf\u753b \u00b6 \u5b9f\u9a13\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4 HamFramework \u306b\u8ffd\u52a0\u3055\u308c\u305f SaturatedLinework \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u3001\u30b3\u30df\u30ab\u30eb\u306a\u52b9\u679c\u3084\u75be\u8d70\u611f\u3092\u6f14\u51fa\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7dda\u3092\u7c21\u5358\u306b\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62\u3001\u5916\u5468\u306e\u9577\u65b9\u5f62\u3001\u7dda\u306e\u672c\u6570\u3001\u7dda\u306e\u592a\u3055\u3001\u9577\u3055\u306e\u3070\u3089\u3064\u304d\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u306a\u3069\u304c\u3042\u308a\u3001 .draw () \u306e\u5f15\u6570\u3067\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u591a\u6570\u306e\u4e09\u89d2\u5f62\u3092\u751f\u6210\u3057\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3001\u751f\u6210\u3057\u305f\u4e09\u89d2\u5f62\u306f\u518d\u5229\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> # include <HamFramework.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.98 , 0.96 , 0.94 )); // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62 Ellipse target ( 400 , 300 , 180 , 120 ); // \u5916\u5468\u306e\u9577\u65b9\u5f62 Rect outer = Scene :: Rect (); // \u7dda\u306e\u592a\u3055 double minThickness = 3.0 , maxThickness = 10.0 ; // \u7dda\u306e\u672c\u6570 double lineCount = 150 ; // \u7dda\u306e\u9577\u3055\u306e\u3070\u3089\u3064\u304d double offsetRange = 60.0 ; // \u4e71\u6570\u30b7\u30fc\u30c9 uint64 seed = 12345 ; SaturatedLinework < Ellipse > linework ( target , outer ); linework . setThickness ( minThickness , maxThickness ) . setLineCount ( static_cast < size_t > ( lineCount )) . setOffsetRange ( offsetRange ); const Texture texture ( Emoji ( U \"\ud83e\udd80\" )); while ( System :: Update ()) { if ( MouseR . down ()) { target . setCenter ( Cursor :: Pos ()); linework . setTargetShape ( target ); } texture . scaled ( 1.6 ). drawAt ( target . center ); // \u96c6\u4e2d\u7dda\u3092\u63cf\u753b linework . draw ( ColorF ( 0.1 )); if ( SimpleGUI :: Slider ( U \"lineCount\" , lineCount , 0.0 , 400.0 , Vec2 ( 20 , 20 ), 150 )) { linework . setLineCount ( static_cast < size_t > ( lineCount )); } if ( SimpleGUI :: Slider ( U \"offsetRange\" , offsetRange , 0.0 , 100.0 , Vec2 ( 20 , 60 ), 150 )) { linework . setOffsetRange ( offsetRange ); } if ( SimpleGUI :: Button ( U \"Change seed\" , Vec2 ( 20 , 100 ))) { seed = RandomUint64 (); linework . setSeed ( seed ); } } } 3. \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 \u00b6 \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u4f7f\u3063\u3066\u3001\u5916\u90e8\u30c7\u30d0\u30a4\u30b9\u3068\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3067\u306f Arduino UNO \u3067 LED \u306e\u70b9\u706f/\u6d88\u706f\u3092 PC \u304b\u3089\u5236\u5fa1\u3057\u3001\u5408\u308f\u305b\u3066 1 \u30d0\u30a4\u30c8\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002 Arduino \u306e\u30b3\u30fc\u30c9 \u00b6 void setup () { pinMode ( 13 , OUTPUT ); // 13 \u30d4\u30f3 - LED - \u62b5\u6297 - GND // 9600bps \u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u958b\u304f Serial . begin ( 9600 ); } unsigned char i = 0 ; // \u30c6\u30b9\u30c8\u7528\u306b PC \u5074\u306b\u9001\u308b\u5024 void loop () { // 250 \u30df\u30ea\u79d2\u6b62\u3081\u308b delay ( 250 ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b 1 \u30d0\u30a4\u30c8\u51fa\u529b Serial . write ( i ); ++ i ; // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const int val = Serial . read (); if ( val == - 1 ) // \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u304c\u7121\u3044 { return ; } if ( val == 0 ) { digitalWrite ( 13 , LOW ); // LOW \u3092\u51fa\u529b } else if ( val == 1 ) { digitalWrite ( 13 , HIGH ); // HIGH \u3092\u51fa\u529b } else if ( val == 2 ) { i = 0 ; } } PC \u5074\u306e\u30b3\u30fc\u30c9 \u00b6 # include <Siv3D.hpp> void Main () { // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const Array < SerialPortInfo > infos = System :: EnumerateSerialPorts (); const Array < String > options = infos . map ([]( const SerialPortInfo & info ) { return U \"{} ({})\" _fmt ( info . port , info . description ); }) << U \"none\" ; Serial serial ; size_t index = ( options . size () - 1 ); while ( System :: Update ()) { const bool isOpened = serial . isOpened (); if ( SimpleGUI :: Button ( U \"Write 0\" , Vec2 ( 200 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (0) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 0 ); } if ( SimpleGUI :: Button ( U \"Write 1\" , Vec2 ( 340 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (1) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 1 ); } if ( SimpleGUI :: Button ( U \"Write 2\" , Vec2 ( 480 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (2) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 2 ); } if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 200 , 60 ))) { ClearPrint (); if ( index == ( options . size () - 1 )) { serial = Serial (); } else { Print << U \"Open {}\" _fmt ( infos [ index ]. port ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 if ( serial . open ( infos [ index ]. port )) { Print << U \"Succeeded\" ; } else { Print << U \"Failed\" ; } } } if ( const size_t available = serial . available ()) { // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a Print << U \"READ: \" << serial . readBytes (); } } } 4. PoissonDisk2D \u00b6 \u307b\u3069\u3088\u3044\u8ddd\u96e2\u3067\u91cd\u306a\u3089\u306a\u3044\u70b9\u7fa4\u3092\u751f\u6210\u3059\u308b PoissonDisk2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); const Rect rect ( 100 , 100 , 600 , 400 ); double r = 15.0 ; // \u70b9\u7fa4\u3092\u751f\u6210 PoissonDisk2D pd ( rect . size , r ); while ( System :: Update ()) { rect . drawFrame ( 1 , 1 , ColorF ( 0.2 )); for ( const auto & point : pd . getPoints ()) { Circle ( point , r / 4 ). movedBy ( rect . pos ). draw (); } if ( SimpleGUI :: Slider ( r , 5.0 , 40.0 , Vec2 ( 10 , 10 ))) { pd = PoissonDisk2D ( rect . size , r ); } } } 5. JSONWriter \u00b6 \u6210\u5f62\u3055\u308c\u305f JSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u9806\u6b21\u51fa\u529b\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u4fdd\u5b58\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { JSONWriter json ; json . startObject (); { json . key ( U \"Window\" ). startObject (); { json . key ( U \"title\" ). write ( U \"My application\" ); json . key ( U \"width\" ). write ( 800 ); json . key ( U \"height\" ). write ( 600 ); json . key ( U \"sizable\" ). write ( false ); } json . endObject (); json . key ( U \"Scene\" ). startObject (); { json . key ( U \"background\" ). write ( ColorF ( 0.8 , 0.9 , 1.0 )); } json . endObject (); json . key ( U \"Array\" ). startObject (); { json . key ( U \"values\" ). writeArray ({ 11 , 22 , 33 , 44 , 55 }); } json . endObject (); json . key ( U \"Items\" ). startArray (); { json . startObject (); { json . key ( U \"label\" ). write ( U \"Forest\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 100 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Ocean\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 300 ); json . key ( U \"y\" ). write ( 200 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Mountain\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 500 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); } json . endArray (); } json . endObject (); // \u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u4fdd\u5b58 json . save ( U \"test.json\" ); while ( System :: Update ()) { } } \u51fa\u529b\u3055\u308c\u308b JSON \u30d5\u30a1\u30a4\u30eb { \"Window\" : { \"title\" : \"My application\" , \"width\" : 800 , \"height\" : 600 , \"sizable\" : \"false\" }, \"Scene\" : { \"background\" : \"(0.8, 0.9, 1, 1)\" }, \"Array\" : { \"values\" : [ 11 , 22 , 33 , 44 , 55 ] }, \"Items\" : [ { \"label\" : \"Forest\" , \"pos\" : { \"x\" : 100 , \"y\" : 100 } }, { \"label\" : \"Ocean\" , \"pos\" : { \"x\" : 300 , \"y\" : 200 } }, { \"label\" : \"Mountain\" , \"pos\" : { \"x\" : 500 , \"y\" : 100 } } ] } 6. Geometry2D::IsClockwise() \u00b6 \u9802\u70b9\u306e\u914d\u5217\u304c\u6642\u8a08\u56de\u308a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.96 , 0.98 , 1.0 )); Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); } if ( MouseR . down ()) { points . clear (); } const bool isClockwise = Geometry2D :: IsClockwise ( points ); ClearPrint (); Print << isClockwise ; for ( const auto & point : points ) { Circle ( point , 10 ). draw ( Palette :: Orange ); } if ( points . size () > 2 ) { // \u6642\u8a08\u56de\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u77e2\u5370\u3067\u3064\u306a\u3050 if ( isClockwise ) { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } else { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . reversed () . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } } } } 7. Circle::draw(innerColor, outerColor) \u00b6 Circle \u3084 Ellipse \u3067\u4e2d\u5fc3\u306e\u8272\u3068\u5916\u5468\u306e\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u304c\u9ec4\u8272\u3001\u5916\u5468\u304c\u9ed2 Circle ( Scene :: Center (), 400 ). draw ( Palette :: Yellow , Palette :: Black ); } } 8. SimpleGUI::Headline / ColorPicker \u00b6 SimpleGUI \u306b\u3001\u898b\u51fa\u3057\u3092\u4ed8\u3051\u308b\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3068\u3001\u8272\u3092\u9078\u629e\u3059\u308b\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { double p0 = 1.0 , p1 = 0.4 , p2 = 0.5 ; HSV hsv = Palette :: Gray ; size_t index = 0 ; while ( System :: Update ()) { Scene :: SetBackground ( hsv ); // Headline SimpleGUI :: Headline ( U \"Config\" , Vec2 ( 20 , 20 )); { SimpleGUI :: Slider ( U \"Param1\" , p0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"Param2\" , p1 , Vec2 ( 20 , 100 )); SimpleGUI :: Slider ( U \"Param3\" , p2 , Vec2 ( 20 , 140 )); } SimpleGUI :: Headline ( U \"Background\" , Vec2 ( 240 , 20 )); { // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc SimpleGUI :: ColorPicker ( hsv , Vec2 ( 240 , 60 )); } SimpleGUI :: Headline ( U \"Terrain\" , Vec2 ( 420 , 20 )); { SimpleGUI :: RadioButtons ( index , { U \"Plain\" , U \"Hill\" , U \"Mountain\" }, Vec2 ( 420 , 60 ), 150 ); } } } 9. ToastNotification \u00b6 Windows \u3067\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 , 0.6 , 0.3 )); // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID NotificationID latest = - 1 ; // \u753b\u50cf\u3092\u4f5c\u6210\u30fb\u4fdd\u5b58 Emoji :: CreateImage ( U \"\ud83c\udf55\" ). save ( U \"pizza.png\" ); while ( System :: Update ()) { ClearPrint (); // \u901a\u77e5\u306e\u72b6\u614b Print << ( int32 ) Platform :: Windows :: ToastNotification :: GetState ( latest ); // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\u306e\u7d50\u679c Print << U \"Action: \" << Platform :: Windows :: ToastNotification :: GetAction ( latest ); if ( SimpleGUI :: Button ( U \"Send a notification\" , Vec2 ( 10 , 70 ))) { ToastNotificationProperty toast { . title = U \"Title\" , // \u901a\u77e5\u306e\u30bf\u30a4\u30c8\u30eb . message = U \"Message\" , // \u901a\u77e5\u306e\u672c\u6587 . imagePath = U \"pizza.png\" , // \u5927\u304d\u3044\u753b\u50cf\u3060\u3068\u4f7f\u308f\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b . actions = { U \"Yes\" , U \"No\" } // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\uff08\u4e0d\u8981\u306a\u5834\u5408\u306f\u8a2d\u5b9a\u3057\u306a\u3044\uff09 }; // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID \u3092\u53d6\u5f97 latest = Platform :: Windows :: ToastNotification :: Show ( toast ); } } } 10. SimpleGUIManager \u00b6 TOML \u30d5\u30a1\u30a4\u30eb\u306b SimpleGUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u8a18\u8ff0\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u884c\u4e2d\u306b\u64cd\u4f5c\u3057\u305f\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // SimpleGUI \u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb const FilePath tomlPath = FileSystem :: FullPath ( U \"example/gui/gui.toml\" ); // \u66f4\u65b0\u3092\u691c\u77e5 const DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // GUI \u3092\u30ed\u30fc\u30c9 SimpleGUIManager gui ( tomlPath ); while ( System :: Update ()) { // TOML \u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 GUI \u3092\u518d\u30ed\u30fc\u30c9 for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) { ClearPrint (); gui . load ( tomlPath ); } } // GUI \u3092\u66f4\u65b0\u30fb\u63cf\u753b gui . draw (); if ( gui . button ( U \"bt-OK\" )) // \"bt-OK\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"OK\" ; } else if ( gui . button ( U \"bt-Cancel\" )) // \"bt-Cancel\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"Cancel\" ; } Scene :: SetBackground ( gui . colorPicker ( U \"cp-Color\" )); // \"cp-Color \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5024 } // \u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3068\u5024\u3092 save.toml \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3059\u308b // \u3053\u308c\u3092 SimpleGUIManager \u3067\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b //gui.save(U\"save.toml\"); } 11. Print \u306e\u6392\u4ed6\u5236\u5fa1 \u00b6 \u30c7\u30d0\u30c3\u30b0\u306a\u3069\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001 Print \u3092\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 // Siv3D \u306e\u4e26\u5217\u51e6\u7406\u95a2\u6570\u3092\u6709\u52b9\u5316\u3059\u308b\u30de\u30af\u30ed // \u30d8\u30c3\u30c0\u304c\u5897\u3048\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u5c11\u3057\u9577\u304f\u306a\u308b # define SIV3D_CONCURRENT # include <Siv3D.hpp> void Main () { // 0\uff5e15 \u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406 Range ( 0 , 15 ). parallel_each ([]( int32 i ) { // \u30b9\u30ec\u30c3\u30c9\u8b58\u5225\u5b50\u3092\u5408\u308f\u305b\u3066\u8868\u793a Print << U \"{}: {}\" _fmt ( std :: this_thread :: get_id (), i ); }); while ( System :: Update ()) { } } 12. 3D \u5f62\u72b6 \u00b6 Quaternion , OBB \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Ray \u3068\u5404\u7a2e 3D \u5f62\u72b6\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3082\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u305f\u3060\u3057 v0.4.1 \u3068\u540c\u69d8\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); Array < OBB > objects ; for ( auto x : Range ( - 2 , 2 )) { for ( auto z : Range ( 2 , - 2 , - 1 )) { objects << OBB ( Vec3 ( x * 4 , 1 , z * 4 ), Vec3 ( 3 , 2 , 0.5 ), Quaternion :: RollPitchYaw ( 0 , x * 30 _deg , 0 )); objects << OBB ( Vec3 ( x * 4 , 5 , z * 4 ), Vec3 ( 2 , 1 , 2 ), Quaternion :: RollPitchYaw ( x * 30 _deg , 0 , 0 )); } } while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } const Vec3 eyePos = camera . getEyePosition (); const Vec3 rayEnd = camera . screenToWorldPoint ( Cursor :: Pos (), 0.5f ); const Ray cursorRay ( eyePos , ( rayEnd - eyePos ). normalized ()); objects . sort_by ([ & ]( const OBB & a , const OBB & b ) { return ( eyePos . distanceFromSq ( a . center )) > ( eyePos . distanceFromSq ( b . center )); }); Optional < size_t > intersectionIndex ; for ( auto [ i , object ] : IndexedReversed ( objects )) { if ( cursorRay . intersects ( object )) { intersectionIndex = i ; Cursor :: RequestStyle ( CursorStyle :: Hand ); break ; } } for ( auto [ i , object ] : Indexed ( objects )) { const HSV color (( object . center . x * 50 + object . center . z * 10 ), 1.0 , ( i == intersectionIndex ) ? 1.0 : 0.3 ); object . draw ( mat , color ); } } } } v0.4.1 \u30b5\u30f3\u30d7\u30eb\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \u00b6 AABB , Triangle3D , Line3D \u306a\u3069\u304c\u3001 s3d :: experimental \u540d\u524d\u7a7a\u9593\u304b\u3089 s3d \u540d\u524d\u7a7a\u9593\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } } 13. Microphone \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 macOS \u306a\u3069\u4e00\u90e8\u306e\u74b0\u5883\u3067\u30de\u30a4\u30af\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); // unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u65e2\u5b9a\u306e\u97f3\u58f0\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); LineString points ( 800 ); FFTResult fft ; while ( System :: Update ()) { // \u6ce2\u5f62\u3092\u53ef\u8996\u5316 { const size_t pos = mic . posSample (); const Array < WaveSampleS16 >& buffer = mic . getBuffer (); const size_t bufferLength = buffer . size (); for ( size_t i = 0 ; i < points . size (); ++ i ) { const size_t bufferPos = ( pos + bufferLength - ( 800 - i )) % bufferLength ; const double value = buffer [ bufferPos ]. left / 32768.0 ; points [ i ]. set ( i , 300 - value * 300 ); } points . draw ( 2 ); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u53d6\u5f97 mic . fft ( fft ); // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u4e0a\u306b\u5468\u6ce2\u6570\u3092\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } 14. QRDecoder \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 \u8907\u6570\u306e QR \u30b3\u30fc\u30c9\u306e\u691c\u51fa\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // Web \u30ab\u30e1\u30e9\u3092\u8d77\u52d5 Webcam webcam ( 0 ); webcam . setResolution ( 1280 , 720 ); if ( ! webcam . start ()) { throw Error ( U \"\" ); } Image image ; DynamicTexture texture ; QRDecoder qrDecoder ; Array < std :: pair < Quad , bool >> quads ; while ( System :: Update ()) { // \u65b0\u3057\u3044\u64ae\u5f71\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u5f97 if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); Array < QRContent > qrs ; // QR \u30b3\u30fc\u30c9\u3092\u691c\u51fa qrDecoder . decode ( image , qrs ); quads . clear (); for ( const auto & qr : qrs ) { quads . emplace_back ( qr . quad , qr . isValid ()); // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a if ( qr . isValid ()) { Print << qr . text ; } } texture . fill ( image ); } texture . draw (); // QR \u30b3\u30fc\u30c9\u306e\u9818\u57df\u3092\u8868\u793a // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u8d64\u8272 for ( const auto & quad : quads ) { quad . first . drawFrame ( 6 , quad . second ? Palette :: Red : Palette :: Gray ); } } } 15. RenderTexture, MSRenderTexture \u6539\u5584 \u00b6 RenderTexture \u3084 MSRenderTexture \u306e .clear () , .read () , .resolve () \u304c const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u4fee\u6b63\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \uff08\u30b5\u30f3\u30d7\u30eb\u7701\u7565\uff09","title":"v0.4.2 \u306e\u65b0\u6a5f\u80fd"},{"location":"ja-jp/news/v042/#1-sdffont","text":"SDFFont \u306f\u3001\u30b0\u30ea\u30d5\u306e\u753b\u50cf\u3092 Distance field \u5f62\u5f0f\u3067\u6301\u3064 Font \u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u56fa\u5b9a\u30b5\u30a4\u30ba\u3067\u30b0\u30ea\u30d5\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u62e1\u5927\u63cf\u753b\u6642\u306b\u307c\u3084\u3051\u308b\u306a\u3069\u3001\u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u5f31\u304f\u3001\u7e01\u53d6\u308a\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 SDFFont \u30af\u30e9\u30b9\u306f\u3001\u30b0\u30ea\u30d5\u3054\u3068\u306e Distance Field \u3092\u751f\u6210\u3057\u3001\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002 draw () \u3054\u3068\u306b\u7b2c\u4e00\u5f15\u6570\u3067\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u7d50\u679c\u304c\u307c\u3084\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001 Garphics2D :: SetSDFParameters () \u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6587\u5b57\u3092\u592a\u3089\u305b\u3089\u308c\u307e\u3059\u3002\u592a\u3055\u3068\u8272\u3092\u5909\u3048\u3066 2 \u56de\u4ee5\u4e0a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u7e01\u53d6\u308a\u306e\u8868\u73fe\u3082\u53ef\u80fd\u3067\u3059\u3002 \u305f\u3060\u3057\u3001 SDFFont \u306e\u751f\u6210\u3084\u63cf\u753b\u306e\u30b3\u30b9\u30c8\u306f Font \u306b\u6bd4\u3079\u3066\u5927\u304d\u3044\u305f\u3081\u3001 Font \u3067\u5341\u5206\u306a\u30b1\u30fc\u30b9\u3067\u306f\u5f93\u6765\u901a\u308a Font \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002 SDFFont \u306e\u54c1\u8cea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30d5\u306e Distance Field \u306e\u30b5\u30a4\u30ba\u3068\u3001\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e Distance Field \u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u6587\u5b57\u306e\u592a\u3089\u305b\u306b\u3064\u3044\u3066\u3082\u3001\u5927\u304d\u3044\u5024\u3067\u306f\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 SDFFont \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a Distance Field \u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002","title":"1. SDFFont"},{"location":"ja-jp/news/v042/#sdffont","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; // SDFFont const SDFFont sdfFont ( distanceFieldSize , Typeface :: Bold ); const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 40 , Vec2 ( 20 , 20 )); sdfFont ( text ). draw ( 80 , Vec2 ( 20 , 80 )); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 180 )); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.2 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.2 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 ), Palette :: Black ); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.0 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.0 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 )); } }","title":"SDFFont \u306e\u57fa\u672c"},{"location":"ja-jp/news/v042/#sdffont_1","text":"SDFFont \u306e\u5404\u30b0\u30ea\u30d5\u306e Distance field \u306f\u3001\u751f\u6210\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u30b0\u30ea\u30d5\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u901f\u5ea6\u4f4e\u4e0b\u304c\u9632\u3052\u307e\u3059\u3002 SDFFont :: preload ( s ) \u3067\u3001\u6587\u5b57\u5217 s \u542b\u307e\u308c\u308b\u30b0\u30ea\u30d5\u306e Distance field \u3092\u751f\u6210\u3001 SDFFont :: preload ( imagePath , jsonPath ) \u3067 2 \u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3001 SDFFont \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u4e8b\u524d\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u30b0\u30ea\u30d5\u306f\u5b9f\u884c\u6642\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( distanceFieldSize , Typeface :: Bold ) . preload ( s ) . saveGlyphs ( U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 // \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3084 Distance field \u304c\u4e00\u81f4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044 const SDFFont sdfFont ({ U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" }, distanceFieldSize , Typeface :: Bold ); if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 20 )); } }","title":"SDFFont \u306e\u4e8b\u524d\u751f\u6210"},{"location":"ja-jp/news/v042/#_1","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); constexpr Vec2 pos ( 0 , 0 ); const String text = U \"OpenSiv3D \\n \u3042\u3044\u3046\u3048\u304a\" ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } s += text ; // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3068 text \u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( 60 , Typeface :: Light ). preload ( s ). saveGlyphs ( U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" ); SDFFont ( 60 , Typeface :: Heavy ). preload ( s ). saveGlyphs ( U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" ); SDFFont ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ). preload ( s ). saveGlyphs ( U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 const Array < SDFFont > sdfFonts = { SDFFont ({ U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" }, 60 , Typeface :: Light ), SDFFont ({ U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" }, 60 , Typeface :: Heavy ), SDFFont ({ U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" }, 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; for ( const auto & sdfFont : sdfFonts ) { if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } } // \u6bd4\u8f03\u7528\u306e\u901a\u5e38 Font const Array < Font > fonts = { Font ( 60 , Typeface :: Light ), Font ( 60 , Typeface :: Heavy ), Font ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; size_t fontIndex = 0 , method = 0 ; double fontSize = 80 , outline1 = 0.0 , outline2 = 0.0 ; HSV innerColor = Palette :: Black , outlineColor = Palette :: White ; while ( System :: Update ()) { const auto & sdfFont = sdfFonts [ fontIndex ]; const auto & font = fonts [ fontIndex ]; if ( method == 0 ) { Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline2 ); sdfFont ( text ). draw ( fontSize , pos , innerColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline1 ); sdfFont ( text ). draw ( fontSize , pos , outlineColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( fontSize , pos , innerColor ); } else if ( method == 1 ) { Transformer2D tr ( Mat3x2 :: Scale ( fontSize / font . fontSize ())); font ( text ). draw ( pos , innerColor ); } SimpleGUI :: RadioButtons ( fontIndex , { U \"Light 60\" , U \"Heavy 60\" , U \"Logo 50\" }, Vec2 ( 20 , 360 ), 150 ); SimpleGUI :: RadioButtons ( method , { U \"SDFFont\" , U \"Font\" }, Vec2 ( 20 , 480 ), 150 ); SimpleGUI :: Slider ( U \"size: {:.0f}\" _fmt ( fontSize ), fontSize , 15 , 550 , Vec2 ( 20 , 560 ), 150 , 200 ); SimpleGUI :: Slider ( U \"outline1: {:.2f}\" _fmt ( outline1 ), outline1 , 0.0 , 0.49 , Vec2 ( 20 , 600 ), 150 , 200 , ( method == 0 )); SimpleGUI :: Slider ( U \"outline2: {:.2f}\" _fmt ( outline2 ), outline2 , 0.0 , 0.49 , Vec2 ( 20 , 640 ), 150 , 200 , ( method == 0 )); SimpleGUI :: ColorPicker ( innerColor , Vec2 ( 400 , 560 )); SimpleGUI :: ColorPicker ( outlineColor , Vec2 ( 580 , 560 )); } }","title":"\u6bd4\u8f03\u7528\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/news/v042/#2","text":"\u5b9f\u9a13\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4 HamFramework \u306b\u8ffd\u52a0\u3055\u308c\u305f SaturatedLinework \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u3001\u30b3\u30df\u30ab\u30eb\u306a\u52b9\u679c\u3084\u75be\u8d70\u611f\u3092\u6f14\u51fa\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7dda\u3092\u7c21\u5358\u306b\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62\u3001\u5916\u5468\u306e\u9577\u65b9\u5f62\u3001\u7dda\u306e\u672c\u6570\u3001\u7dda\u306e\u592a\u3055\u3001\u9577\u3055\u306e\u3070\u3089\u3064\u304d\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u306a\u3069\u304c\u3042\u308a\u3001 .draw () \u306e\u5f15\u6570\u3067\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u591a\u6570\u306e\u4e09\u89d2\u5f62\u3092\u751f\u6210\u3057\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3001\u751f\u6210\u3057\u305f\u4e09\u89d2\u5f62\u306f\u518d\u5229\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> # include <HamFramework.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.98 , 0.96 , 0.94 )); // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62 Ellipse target ( 400 , 300 , 180 , 120 ); // \u5916\u5468\u306e\u9577\u65b9\u5f62 Rect outer = Scene :: Rect (); // \u7dda\u306e\u592a\u3055 double minThickness = 3.0 , maxThickness = 10.0 ; // \u7dda\u306e\u672c\u6570 double lineCount = 150 ; // \u7dda\u306e\u9577\u3055\u306e\u3070\u3089\u3064\u304d double offsetRange = 60.0 ; // \u4e71\u6570\u30b7\u30fc\u30c9 uint64 seed = 12345 ; SaturatedLinework < Ellipse > linework ( target , outer ); linework . setThickness ( minThickness , maxThickness ) . setLineCount ( static_cast < size_t > ( lineCount )) . setOffsetRange ( offsetRange ); const Texture texture ( Emoji ( U \"\ud83e\udd80\" )); while ( System :: Update ()) { if ( MouseR . down ()) { target . setCenter ( Cursor :: Pos ()); linework . setTargetShape ( target ); } texture . scaled ( 1.6 ). drawAt ( target . center ); // \u96c6\u4e2d\u7dda\u3092\u63cf\u753b linework . draw ( ColorF ( 0.1 )); if ( SimpleGUI :: Slider ( U \"lineCount\" , lineCount , 0.0 , 400.0 , Vec2 ( 20 , 20 ), 150 )) { linework . setLineCount ( static_cast < size_t > ( lineCount )); } if ( SimpleGUI :: Slider ( U \"offsetRange\" , offsetRange , 0.0 , 100.0 , Vec2 ( 20 , 60 ), 150 )) { linework . setOffsetRange ( offsetRange ); } if ( SimpleGUI :: Button ( U \"Change seed\" , Vec2 ( 20 , 100 ))) { seed = RandomUint64 (); linework . setSeed ( seed ); } } }","title":"2. \u96c6\u4e2d\u7dda\u63cf\u753b"},{"location":"ja-jp/news/v042/#3","text":"\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u4f7f\u3063\u3066\u3001\u5916\u90e8\u30c7\u30d0\u30a4\u30b9\u3068\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3067\u306f Arduino UNO \u3067 LED \u306e\u70b9\u706f/\u6d88\u706f\u3092 PC \u304b\u3089\u5236\u5fa1\u3057\u3001\u5408\u308f\u305b\u3066 1 \u30d0\u30a4\u30c8\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002","title":"3. \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1"},{"location":"ja-jp/news/v042/#arduino","text":"void setup () { pinMode ( 13 , OUTPUT ); // 13 \u30d4\u30f3 - LED - \u62b5\u6297 - GND // 9600bps \u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u958b\u304f Serial . begin ( 9600 ); } unsigned char i = 0 ; // \u30c6\u30b9\u30c8\u7528\u306b PC \u5074\u306b\u9001\u308b\u5024 void loop () { // 250 \u30df\u30ea\u79d2\u6b62\u3081\u308b delay ( 250 ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b 1 \u30d0\u30a4\u30c8\u51fa\u529b Serial . write ( i ); ++ i ; // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const int val = Serial . read (); if ( val == - 1 ) // \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u304c\u7121\u3044 { return ; } if ( val == 0 ) { digitalWrite ( 13 , LOW ); // LOW \u3092\u51fa\u529b } else if ( val == 1 ) { digitalWrite ( 13 , HIGH ); // HIGH \u3092\u51fa\u529b } else if ( val == 2 ) { i = 0 ; } }","title":"Arduino \u306e\u30b3\u30fc\u30c9"},{"location":"ja-jp/news/v042/#pc","text":"# include <Siv3D.hpp> void Main () { // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const Array < SerialPortInfo > infos = System :: EnumerateSerialPorts (); const Array < String > options = infos . map ([]( const SerialPortInfo & info ) { return U \"{} ({})\" _fmt ( info . port , info . description ); }) << U \"none\" ; Serial serial ; size_t index = ( options . size () - 1 ); while ( System :: Update ()) { const bool isOpened = serial . isOpened (); if ( SimpleGUI :: Button ( U \"Write 0\" , Vec2 ( 200 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (0) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 0 ); } if ( SimpleGUI :: Button ( U \"Write 1\" , Vec2 ( 340 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (1) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 1 ); } if ( SimpleGUI :: Button ( U \"Write 2\" , Vec2 ( 480 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (2) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 2 ); } if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 200 , 60 ))) { ClearPrint (); if ( index == ( options . size () - 1 )) { serial = Serial (); } else { Print << U \"Open {}\" _fmt ( infos [ index ]. port ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 if ( serial . open ( infos [ index ]. port )) { Print << U \"Succeeded\" ; } else { Print << U \"Failed\" ; } } } if ( const size_t available = serial . available ()) { // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a Print << U \"READ: \" << serial . readBytes (); } } }","title":"PC \u5074\u306e\u30b3\u30fc\u30c9"},{"location":"ja-jp/news/v042/#4-poissondisk2d","text":"\u307b\u3069\u3088\u3044\u8ddd\u96e2\u3067\u91cd\u306a\u3089\u306a\u3044\u70b9\u7fa4\u3092\u751f\u6210\u3059\u308b PoissonDisk2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); const Rect rect ( 100 , 100 , 600 , 400 ); double r = 15.0 ; // \u70b9\u7fa4\u3092\u751f\u6210 PoissonDisk2D pd ( rect . size , r ); while ( System :: Update ()) { rect . drawFrame ( 1 , 1 , ColorF ( 0.2 )); for ( const auto & point : pd . getPoints ()) { Circle ( point , r / 4 ). movedBy ( rect . pos ). draw (); } if ( SimpleGUI :: Slider ( r , 5.0 , 40.0 , Vec2 ( 10 , 10 ))) { pd = PoissonDisk2D ( rect . size , r ); } } }","title":"4. PoissonDisk2D"},{"location":"ja-jp/news/v042/#5-jsonwriter","text":"\u6210\u5f62\u3055\u308c\u305f JSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u9806\u6b21\u51fa\u529b\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u4fdd\u5b58\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { JSONWriter json ; json . startObject (); { json . key ( U \"Window\" ). startObject (); { json . key ( U \"title\" ). write ( U \"My application\" ); json . key ( U \"width\" ). write ( 800 ); json . key ( U \"height\" ). write ( 600 ); json . key ( U \"sizable\" ). write ( false ); } json . endObject (); json . key ( U \"Scene\" ). startObject (); { json . key ( U \"background\" ). write ( ColorF ( 0.8 , 0.9 , 1.0 )); } json . endObject (); json . key ( U \"Array\" ). startObject (); { json . key ( U \"values\" ). writeArray ({ 11 , 22 , 33 , 44 , 55 }); } json . endObject (); json . key ( U \"Items\" ). startArray (); { json . startObject (); { json . key ( U \"label\" ). write ( U \"Forest\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 100 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Ocean\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 300 ); json . key ( U \"y\" ). write ( 200 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Mountain\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 500 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); } json . endArray (); } json . endObject (); // \u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u4fdd\u5b58 json . save ( U \"test.json\" ); while ( System :: Update ()) { } } \u51fa\u529b\u3055\u308c\u308b JSON \u30d5\u30a1\u30a4\u30eb { \"Window\" : { \"title\" : \"My application\" , \"width\" : 800 , \"height\" : 600 , \"sizable\" : \"false\" }, \"Scene\" : { \"background\" : \"(0.8, 0.9, 1, 1)\" }, \"Array\" : { \"values\" : [ 11 , 22 , 33 , 44 , 55 ] }, \"Items\" : [ { \"label\" : \"Forest\" , \"pos\" : { \"x\" : 100 , \"y\" : 100 } }, { \"label\" : \"Ocean\" , \"pos\" : { \"x\" : 300 , \"y\" : 200 } }, { \"label\" : \"Mountain\" , \"pos\" : { \"x\" : 500 , \"y\" : 100 } } ] }","title":"5. JSONWriter"},{"location":"ja-jp/news/v042/#6-geometry2disclockwise","text":"\u9802\u70b9\u306e\u914d\u5217\u304c\u6642\u8a08\u56de\u308a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.96 , 0.98 , 1.0 )); Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); } if ( MouseR . down ()) { points . clear (); } const bool isClockwise = Geometry2D :: IsClockwise ( points ); ClearPrint (); Print << isClockwise ; for ( const auto & point : points ) { Circle ( point , 10 ). draw ( Palette :: Orange ); } if ( points . size () > 2 ) { // \u6642\u8a08\u56de\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u77e2\u5370\u3067\u3064\u306a\u3050 if ( isClockwise ) { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } else { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . reversed () . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } } } }","title":"6. Geometry2D::IsClockwise()"},{"location":"ja-jp/news/v042/#7-circledrawinnercolor-outercolor","text":"Circle \u3084 Ellipse \u3067\u4e2d\u5fc3\u306e\u8272\u3068\u5916\u5468\u306e\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u304c\u9ec4\u8272\u3001\u5916\u5468\u304c\u9ed2 Circle ( Scene :: Center (), 400 ). draw ( Palette :: Yellow , Palette :: Black ); } }","title":"7. Circle::draw(innerColor, outerColor)"},{"location":"ja-jp/news/v042/#8-simpleguiheadline-colorpicker","text":"SimpleGUI \u306b\u3001\u898b\u51fa\u3057\u3092\u4ed8\u3051\u308b\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3068\u3001\u8272\u3092\u9078\u629e\u3059\u308b\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { double p0 = 1.0 , p1 = 0.4 , p2 = 0.5 ; HSV hsv = Palette :: Gray ; size_t index = 0 ; while ( System :: Update ()) { Scene :: SetBackground ( hsv ); // Headline SimpleGUI :: Headline ( U \"Config\" , Vec2 ( 20 , 20 )); { SimpleGUI :: Slider ( U \"Param1\" , p0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"Param2\" , p1 , Vec2 ( 20 , 100 )); SimpleGUI :: Slider ( U \"Param3\" , p2 , Vec2 ( 20 , 140 )); } SimpleGUI :: Headline ( U \"Background\" , Vec2 ( 240 , 20 )); { // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc SimpleGUI :: ColorPicker ( hsv , Vec2 ( 240 , 60 )); } SimpleGUI :: Headline ( U \"Terrain\" , Vec2 ( 420 , 20 )); { SimpleGUI :: RadioButtons ( index , { U \"Plain\" , U \"Hill\" , U \"Mountain\" }, Vec2 ( 420 , 60 ), 150 ); } } }","title":"8. SimpleGUI::Headline / ColorPicker"},{"location":"ja-jp/news/v042/#9-toastnotification","text":"Windows \u3067\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 , 0.6 , 0.3 )); // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID NotificationID latest = - 1 ; // \u753b\u50cf\u3092\u4f5c\u6210\u30fb\u4fdd\u5b58 Emoji :: CreateImage ( U \"\ud83c\udf55\" ). save ( U \"pizza.png\" ); while ( System :: Update ()) { ClearPrint (); // \u901a\u77e5\u306e\u72b6\u614b Print << ( int32 ) Platform :: Windows :: ToastNotification :: GetState ( latest ); // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\u306e\u7d50\u679c Print << U \"Action: \" << Platform :: Windows :: ToastNotification :: GetAction ( latest ); if ( SimpleGUI :: Button ( U \"Send a notification\" , Vec2 ( 10 , 70 ))) { ToastNotificationProperty toast { . title = U \"Title\" , // \u901a\u77e5\u306e\u30bf\u30a4\u30c8\u30eb . message = U \"Message\" , // \u901a\u77e5\u306e\u672c\u6587 . imagePath = U \"pizza.png\" , // \u5927\u304d\u3044\u753b\u50cf\u3060\u3068\u4f7f\u308f\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b . actions = { U \"Yes\" , U \"No\" } // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\uff08\u4e0d\u8981\u306a\u5834\u5408\u306f\u8a2d\u5b9a\u3057\u306a\u3044\uff09 }; // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID \u3092\u53d6\u5f97 latest = Platform :: Windows :: ToastNotification :: Show ( toast ); } } }","title":"9. ToastNotification"},{"location":"ja-jp/news/v042/#10-simpleguimanager","text":"TOML \u30d5\u30a1\u30a4\u30eb\u306b SimpleGUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u8a18\u8ff0\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u884c\u4e2d\u306b\u64cd\u4f5c\u3057\u305f\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // SimpleGUI \u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb const FilePath tomlPath = FileSystem :: FullPath ( U \"example/gui/gui.toml\" ); // \u66f4\u65b0\u3092\u691c\u77e5 const DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // GUI \u3092\u30ed\u30fc\u30c9 SimpleGUIManager gui ( tomlPath ); while ( System :: Update ()) { // TOML \u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 GUI \u3092\u518d\u30ed\u30fc\u30c9 for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) { ClearPrint (); gui . load ( tomlPath ); } } // GUI \u3092\u66f4\u65b0\u30fb\u63cf\u753b gui . draw (); if ( gui . button ( U \"bt-OK\" )) // \"bt-OK\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"OK\" ; } else if ( gui . button ( U \"bt-Cancel\" )) // \"bt-Cancel\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"Cancel\" ; } Scene :: SetBackground ( gui . colorPicker ( U \"cp-Color\" )); // \"cp-Color \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5024 } // \u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3068\u5024\u3092 save.toml \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3059\u308b // \u3053\u308c\u3092 SimpleGUIManager \u3067\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b //gui.save(U\"save.toml\"); }","title":"10. SimpleGUIManager"},{"location":"ja-jp/news/v042/#11-print","text":"\u30c7\u30d0\u30c3\u30b0\u306a\u3069\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001 Print \u3092\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 // Siv3D \u306e\u4e26\u5217\u51e6\u7406\u95a2\u6570\u3092\u6709\u52b9\u5316\u3059\u308b\u30de\u30af\u30ed // \u30d8\u30c3\u30c0\u304c\u5897\u3048\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u5c11\u3057\u9577\u304f\u306a\u308b # define SIV3D_CONCURRENT # include <Siv3D.hpp> void Main () { // 0\uff5e15 \u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406 Range ( 0 , 15 ). parallel_each ([]( int32 i ) { // \u30b9\u30ec\u30c3\u30c9\u8b58\u5225\u5b50\u3092\u5408\u308f\u305b\u3066\u8868\u793a Print << U \"{}: {}\" _fmt ( std :: this_thread :: get_id (), i ); }); while ( System :: Update ()) { } }","title":"11. Print \u306e\u6392\u4ed6\u5236\u5fa1"},{"location":"ja-jp/news/v042/#12-3d","text":"Quaternion , OBB \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Ray \u3068\u5404\u7a2e 3D \u5f62\u72b6\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3082\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u305f\u3060\u3057 v0.4.1 \u3068\u540c\u69d8\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); Array < OBB > objects ; for ( auto x : Range ( - 2 , 2 )) { for ( auto z : Range ( 2 , - 2 , - 1 )) { objects << OBB ( Vec3 ( x * 4 , 1 , z * 4 ), Vec3 ( 3 , 2 , 0.5 ), Quaternion :: RollPitchYaw ( 0 , x * 30 _deg , 0 )); objects << OBB ( Vec3 ( x * 4 , 5 , z * 4 ), Vec3 ( 2 , 1 , 2 ), Quaternion :: RollPitchYaw ( x * 30 _deg , 0 , 0 )); } } while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } const Vec3 eyePos = camera . getEyePosition (); const Vec3 rayEnd = camera . screenToWorldPoint ( Cursor :: Pos (), 0.5f ); const Ray cursorRay ( eyePos , ( rayEnd - eyePos ). normalized ()); objects . sort_by ([ & ]( const OBB & a , const OBB & b ) { return ( eyePos . distanceFromSq ( a . center )) > ( eyePos . distanceFromSq ( b . center )); }); Optional < size_t > intersectionIndex ; for ( auto [ i , object ] : IndexedReversed ( objects )) { if ( cursorRay . intersects ( object )) { intersectionIndex = i ; Cursor :: RequestStyle ( CursorStyle :: Hand ); break ; } } for ( auto [ i , object ] : Indexed ( objects )) { const HSV color (( object . center . x * 50 + object . center . z * 10 ), 1.0 , ( i == intersectionIndex ) ? 1.0 : 0.3 ); object . draw ( mat , color ); } } } }","title":"12. 3D \u5f62\u72b6"},{"location":"ja-jp/news/v042/#v041","text":"AABB , Triangle3D , Line3D \u306a\u3069\u304c\u3001 s3d :: experimental \u540d\u524d\u7a7a\u9593\u304b\u3089 s3d \u540d\u524d\u7a7a\u9593\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002","title":"v0.4.1 \u30b5\u30f3\u30d7\u30eb\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8"},{"location":"ja-jp/news/v042/#3d-triangles","text":"# include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } }","title":"3D Triangles"},{"location":"ja-jp/news/v042/#3d-aabb","text":"# include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } }","title":"3D AABB"},{"location":"ja-jp/news/v042/#3d-terrain","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } }","title":"3D Terrain"},{"location":"ja-jp/news/v042/#13-microphone","text":"macOS \u306a\u3069\u4e00\u90e8\u306e\u74b0\u5883\u3067\u30de\u30a4\u30af\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); // unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u65e2\u5b9a\u306e\u97f3\u58f0\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); LineString points ( 800 ); FFTResult fft ; while ( System :: Update ()) { // \u6ce2\u5f62\u3092\u53ef\u8996\u5316 { const size_t pos = mic . posSample (); const Array < WaveSampleS16 >& buffer = mic . getBuffer (); const size_t bufferLength = buffer . size (); for ( size_t i = 0 ; i < points . size (); ++ i ) { const size_t bufferPos = ( pos + bufferLength - ( 800 - i )) % bufferLength ; const double value = buffer [ bufferPos ]. left / 32768.0 ; points [ i ]. set ( i , 300 - value * 300 ); } points . draw ( 2 ); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u53d6\u5f97 mic . fft ( fft ); // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u4e0a\u306b\u5468\u6ce2\u6570\u3092\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"13. Microphone \u4e0d\u5177\u5408\u4fee\u6b63"},{"location":"ja-jp/news/v042/#14-qrdecoder","text":"\u8907\u6570\u306e QR \u30b3\u30fc\u30c9\u306e\u691c\u51fa\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // Web \u30ab\u30e1\u30e9\u3092\u8d77\u52d5 Webcam webcam ( 0 ); webcam . setResolution ( 1280 , 720 ); if ( ! webcam . start ()) { throw Error ( U \"\" ); } Image image ; DynamicTexture texture ; QRDecoder qrDecoder ; Array < std :: pair < Quad , bool >> quads ; while ( System :: Update ()) { // \u65b0\u3057\u3044\u64ae\u5f71\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u5f97 if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); Array < QRContent > qrs ; // QR \u30b3\u30fc\u30c9\u3092\u691c\u51fa qrDecoder . decode ( image , qrs ); quads . clear (); for ( const auto & qr : qrs ) { quads . emplace_back ( qr . quad , qr . isValid ()); // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a if ( qr . isValid ()) { Print << qr . text ; } } texture . fill ( image ); } texture . draw (); // QR \u30b3\u30fc\u30c9\u306e\u9818\u57df\u3092\u8868\u793a // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u8d64\u8272 for ( const auto & quad : quads ) { quad . first . drawFrame ( 6 , quad . second ? Palette :: Red : Palette :: Gray ); } } }","title":"14. QRDecoder \u4e0d\u5177\u5408\u4fee\u6b63"},{"location":"ja-jp/news/v042/#15-rendertexture-msrendertexture","text":"RenderTexture \u3084 MSRenderTexture \u306e .clear () , .read () , .resolve () \u304c const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u4fee\u6b63\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \uff08\u30b5\u30f3\u30d7\u30eb\u7701\u7565\uff09","title":"15. RenderTexture, MSRenderTexture \u6539\u5584"},{"location":"ja-jp/reference/2d-geometry/","text":"2D \u8a08\u7b97\u5e7e\u4f55 \u00b6 \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } } \u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u56f3\u5f62\u306e\u5f15\u304d\u7b97 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u70b9\u7fa4\u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } } Polygon \u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } } Polygon \u306e\u62e1\u5f35 \u00b6 # include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } } Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"2D \u8a08\u7b97\u5e7e\u4f55"},{"location":"ja-jp/reference/2d-geometry/#2d","text":"","title":"2D \u8a08\u7b97\u5e7e\u4f55"},{"location":"ja-jp/reference/2d-geometry/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } }","title":"\u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2"},{"location":"ja-jp/reference/2d-geometry/#_2","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df"},{"location":"ja-jp/reference/2d-geometry/#_3","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u5f15\u304d\u7b97"},{"location":"ja-jp/reference/2d-geometry/#_4","text":"# include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } }","title":"\u70b9\u7fa4\u306e\u51f8\u5305"},{"location":"ja-jp/reference/2d-geometry/#polygon","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } }","title":"Polygon \u306e\u51f8\u5305"},{"location":"ja-jp/reference/2d-geometry/#polygon_1","text":"# include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } }","title":"Polygon \u306e\u62e1\u5f35"},{"location":"ja-jp/reference/2d-geometry/#polygon_2","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b"},{"location":"ja-jp/reference/2d-particle/","text":"2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf \u00b6 # include <Siv3D.hpp> // Siv3D-kun \u306e\u5f62\u306e Polygon \u3092\u4f5c\u6210 Polygon CreatePolygon () { return Image ( U \"example/siv3d-kun.png\" ) . alphaToPolygonCentered (). simplified ( 1 ). scaled ( 1.3 ); } void Main () { Window :: Resize ( 1280 , 720 ); const Texture textureSiv3D ( U \"example/siv3d-kun.png\" ); const std :: array < BlendState , 4 > blends = { BlendState :: Default , BlendState :: Additive , BlendState :: Opaque , BlendState :: Subtractive }; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( U \"example/particle.png\" , TextureDesc :: Mipped ); // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b bool debugMode = false ; // \u80cc\u666f\u3092\u767d\u306b bool whiteBackground = false ; // Siv3D-kun \u3092\u8868\u793a bool drawTexture = false ; Vec2 position ( 300 , 340 ); Vec2 force ( 0.0 , 0.0 ); HSV startColor = ColorF ( 1.0 ); size_t blendIndex = 1 ; size_t emitterIndex = 1 ; CircleEmitter2D circleEmitter ; ArcEmitter2D arcEmitter ; RectEmitter2D rectEmitter ; PolygonEmitter2D polygonEmitter ( CreatePolygon ()); ParticleSystem2DParameters parameters ; ParticleSystem2D particleSystem ( position , force ); particleSystem . setEmitter ( arcEmitter ); particleSystem . setTexture ( texture ); particleSystem . setParameters ( parameters ); particleSystem . prewarm (); while ( System :: Update ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u500b\u6570\u3092\u8868\u793a ClearPrint (); Print << U \"{} particles\" _fmt ( particleSystem . num_particles ()); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . update (); if ( debugMode ) { // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . drawDebug (); } else { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } if ( emitterIndex == 3 && drawTexture ) { // Siv3D-kun \u3092\u8868\u793a textureSiv3D . scaled ( 1.3 ). drawAt ( position ); } if ( MouseR . pressed ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\u4f4d\u7f6e\u3092\u79fb\u52d5 particleSystem . setPosition ( position = Cursor :: Pos ()); } SimpleGUI :: CheckBox ( debugMode , U \"Debug\" , Vec2 ( 80 , 660 ), 140 ); SimpleGUI :: CheckBox ( whiteBackground , U \"White\" , Vec2 ( 240 , 660 ), 140 ); SimpleGUI :: CheckBox ( drawTexture , U \"Texture\" , Vec2 ( 400 , 660 ), 140 , ( emitterIndex == 3 )); Scene :: SetBackground ( whiteBackground ? Color ( 250 , 252 , 255 ) : Palette :: DefaultBackground ); const int32 x0 = 560 , x1 = 900 ; { SimpleGUI :: Slider ( U \"Rate\" , parameters . rate , 1.0 , 500.0 , Vec2 ( x0 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Max\" , parameters . maxParticles , 50.0 , 2500.0 , Vec2 ( x0 , 60 ), 120 , 200 ); SimpleGUI :: Slider ( U \"LifeTime\" , parameters . startLifeTime , 0.0 , 5.0 , Vec2 ( x0 , 100 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Speed\" , parameters . startSpeed , 0.0 , 320.0 , Vec2 ( x0 , 140 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color H\" , startColor . h , 0.0 , 360.0 , Vec2 ( x0 , 180 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color S\" , startColor . s , 0.0 , 1.0 , Vec2 ( x0 , 220 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color V\" , startColor . v , 0.0 , 1.0 , Vec2 ( x0 , 260 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color A\" , startColor . a , 0.0 , 1.0 , Vec2 ( x0 , 300 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Size\" , parameters . startSize , 0.0 , 150.0 , Vec2 ( x0 , 340 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Rotation\" , parameters . startRotationDeg , - 180 , 180 , Vec2 ( x0 , 380 ), 120 , 200 ); SimpleGUI :: Slider ( U \"AngularVel\" , parameters . startAngularVelocityDeg , - 720 , 720 , Vec2 ( x0 , 420 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force X\" , force . x , - 320.0 , 320.0 , Vec2 ( x0 , 460 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force Y\" , force . y , - 320 , 320.0 , Vec2 ( x0 , 500 ), 120 , 200 ); SimpleGUI :: RadioButtons ( blendIndex , { U \"Default\" , U \"Additive\" , U \"Opaque\" , U \"Subtractive\" }, Vec2 ( x0 , 540 ), 320 ); parameters . blendState = blends [ blendIndex ]; parameters . startColor = startColor ; particleSystem . setParameters ( parameters ); particleSystem . setForce ( force ); } { bool changed = false ; changed |= SimpleGUI :: RadioButtons ( emitterIndex , { U \"Circle\" , U \"Arc\" , U \"Rect\" , U \"Polygon\" }, Vec2 ( x1 , 20 ), 360 ); if ( emitterIndex == 0 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , circleEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , circleEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 260 ), 360 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 300 ), 300 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( circleEmitter ); } } else if ( emitterIndex == 1 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , arcEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , arcEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Direction\" , arcEmitter . direction , - 180 , 180 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Angle\" , arcEmitter . angle , 0.0 , 360 , Vec2 ( x1 , 300 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 340 ), 360 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 380 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( arcEmitter ); } } else if ( emitterIndex == 2 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , rectEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Width\" , rectEmitter . width , 0 , 720 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Height\" , rectEmitter . height , 0 , 720 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 300 ), 360 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 340 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( rectEmitter ); } } else if ( emitterIndex == 3 ) { if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( polygonEmitter ); } } } } } \u30b2\u30fc\u30e0\u3078\u306e\u7d44\u307f\u8fbc\u307f \u00b6 # include <Siv3D.hpp> // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 class BallParticleSystem { private : // 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2D m_system ; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 Texture m_texture ; public : BallParticleSystem ( const Vec2 & pos , const Vec2 & force ) : m_system ( pos , force ) , m_texture ( U \"example/particle.png\" , TextureDesc :: Mipped ) { m_system . setTexture ( m_texture ); // \u30d1\u30e9\u30e1\u30fc\u30bf ParticleSystem2DParameters parameters ; parameters . rate = 300.0 ; parameters . startSpeed = 50.0 ; parameters . startColor = HSV ( 10.0 , 0.8 , 0.25 ); parameters . startSize = 60.0 ; parameters . blendState = BlendState :: Additive ; m_system . setParameters ( parameters ); // \u30a8\u30df\u30c3\u30bf\u30fc CircleEmitter2D circleEmitter ; circleEmitter . r = 12.0 ; m_system . setEmitter ( circleEmitter ); m_system . prewarm (); } void setPos ( const Vec2 & pos ) { m_system . setPosition ( pos ); } void update () { m_system . update (); } void draw () const { m_system . draw (); } }; void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 BallParticleSystem particleSystem ( ball . center , Vec2 ( 0.0 , - 120 )); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . setPos ( ball . center ); particleSystem . update (); // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } }","title":"2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0"},{"location":"ja-jp/reference/2d-particle/#2d","text":"","title":"2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0"},{"location":"ja-jp/reference/2d-particle/#_1","text":"# include <Siv3D.hpp> // Siv3D-kun \u306e\u5f62\u306e Polygon \u3092\u4f5c\u6210 Polygon CreatePolygon () { return Image ( U \"example/siv3d-kun.png\" ) . alphaToPolygonCentered (). simplified ( 1 ). scaled ( 1.3 ); } void Main () { Window :: Resize ( 1280 , 720 ); const Texture textureSiv3D ( U \"example/siv3d-kun.png\" ); const std :: array < BlendState , 4 > blends = { BlendState :: Default , BlendState :: Additive , BlendState :: Opaque , BlendState :: Subtractive }; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( U \"example/particle.png\" , TextureDesc :: Mipped ); // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b bool debugMode = false ; // \u80cc\u666f\u3092\u767d\u306b bool whiteBackground = false ; // Siv3D-kun \u3092\u8868\u793a bool drawTexture = false ; Vec2 position ( 300 , 340 ); Vec2 force ( 0.0 , 0.0 ); HSV startColor = ColorF ( 1.0 ); size_t blendIndex = 1 ; size_t emitterIndex = 1 ; CircleEmitter2D circleEmitter ; ArcEmitter2D arcEmitter ; RectEmitter2D rectEmitter ; PolygonEmitter2D polygonEmitter ( CreatePolygon ()); ParticleSystem2DParameters parameters ; ParticleSystem2D particleSystem ( position , force ); particleSystem . setEmitter ( arcEmitter ); particleSystem . setTexture ( texture ); particleSystem . setParameters ( parameters ); particleSystem . prewarm (); while ( System :: Update ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u500b\u6570\u3092\u8868\u793a ClearPrint (); Print << U \"{} particles\" _fmt ( particleSystem . num_particles ()); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . update (); if ( debugMode ) { // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . drawDebug (); } else { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } if ( emitterIndex == 3 && drawTexture ) { // Siv3D-kun \u3092\u8868\u793a textureSiv3D . scaled ( 1.3 ). drawAt ( position ); } if ( MouseR . pressed ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\u4f4d\u7f6e\u3092\u79fb\u52d5 particleSystem . setPosition ( position = Cursor :: Pos ()); } SimpleGUI :: CheckBox ( debugMode , U \"Debug\" , Vec2 ( 80 , 660 ), 140 ); SimpleGUI :: CheckBox ( whiteBackground , U \"White\" , Vec2 ( 240 , 660 ), 140 ); SimpleGUI :: CheckBox ( drawTexture , U \"Texture\" , Vec2 ( 400 , 660 ), 140 , ( emitterIndex == 3 )); Scene :: SetBackground ( whiteBackground ? Color ( 250 , 252 , 255 ) : Palette :: DefaultBackground ); const int32 x0 = 560 , x1 = 900 ; { SimpleGUI :: Slider ( U \"Rate\" , parameters . rate , 1.0 , 500.0 , Vec2 ( x0 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Max\" , parameters . maxParticles , 50.0 , 2500.0 , Vec2 ( x0 , 60 ), 120 , 200 ); SimpleGUI :: Slider ( U \"LifeTime\" , parameters . startLifeTime , 0.0 , 5.0 , Vec2 ( x0 , 100 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Speed\" , parameters . startSpeed , 0.0 , 320.0 , Vec2 ( x0 , 140 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color H\" , startColor . h , 0.0 , 360.0 , Vec2 ( x0 , 180 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color S\" , startColor . s , 0.0 , 1.0 , Vec2 ( x0 , 220 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color V\" , startColor . v , 0.0 , 1.0 , Vec2 ( x0 , 260 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color A\" , startColor . a , 0.0 , 1.0 , Vec2 ( x0 , 300 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Size\" , parameters . startSize , 0.0 , 150.0 , Vec2 ( x0 , 340 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Rotation\" , parameters . startRotationDeg , - 180 , 180 , Vec2 ( x0 , 380 ), 120 , 200 ); SimpleGUI :: Slider ( U \"AngularVel\" , parameters . startAngularVelocityDeg , - 720 , 720 , Vec2 ( x0 , 420 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force X\" , force . x , - 320.0 , 320.0 , Vec2 ( x0 , 460 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force Y\" , force . y , - 320 , 320.0 , Vec2 ( x0 , 500 ), 120 , 200 ); SimpleGUI :: RadioButtons ( blendIndex , { U \"Default\" , U \"Additive\" , U \"Opaque\" , U \"Subtractive\" }, Vec2 ( x0 , 540 ), 320 ); parameters . blendState = blends [ blendIndex ]; parameters . startColor = startColor ; particleSystem . setParameters ( parameters ); particleSystem . setForce ( force ); } { bool changed = false ; changed |= SimpleGUI :: RadioButtons ( emitterIndex , { U \"Circle\" , U \"Arc\" , U \"Rect\" , U \"Polygon\" }, Vec2 ( x1 , 20 ), 360 ); if ( emitterIndex == 0 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , circleEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , circleEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 260 ), 360 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 300 ), 300 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( circleEmitter ); } } else if ( emitterIndex == 1 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , arcEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , arcEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Direction\" , arcEmitter . direction , - 180 , 180 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Angle\" , arcEmitter . angle , 0.0 , 360 , Vec2 ( x1 , 300 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 340 ), 360 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 380 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( arcEmitter ); } } else if ( emitterIndex == 2 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , rectEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Width\" , rectEmitter . width , 0 , 720 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Height\" , rectEmitter . height , 0 , 720 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 300 ), 360 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 340 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( rectEmitter ); } } else if ( emitterIndex == 3 ) { if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( polygonEmitter ); } } } } }","title":"\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"ja-jp/reference/2d-particle/#_2","text":"# include <Siv3D.hpp> // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 class BallParticleSystem { private : // 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2D m_system ; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 Texture m_texture ; public : BallParticleSystem ( const Vec2 & pos , const Vec2 & force ) : m_system ( pos , force ) , m_texture ( U \"example/particle.png\" , TextureDesc :: Mipped ) { m_system . setTexture ( m_texture ); // \u30d1\u30e9\u30e1\u30fc\u30bf ParticleSystem2DParameters parameters ; parameters . rate = 300.0 ; parameters . startSpeed = 50.0 ; parameters . startColor = HSV ( 10.0 , 0.8 , 0.25 ); parameters . startSize = 60.0 ; parameters . blendState = BlendState :: Additive ; m_system . setParameters ( parameters ); // \u30a8\u30df\u30c3\u30bf\u30fc CircleEmitter2D circleEmitter ; circleEmitter . r = 12.0 ; m_system . setEmitter ( circleEmitter ); m_system . prewarm (); } void setPos ( const Vec2 & pos ) { m_system . setPosition ( pos ); } void update () { m_system . update (); } void draw () const { m_system . draw (); } }; void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 BallParticleSystem particleSystem ( ball . center , Vec2 ( 0.0 , - 120 )); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . setPos ( ball . center ); particleSystem . update (); // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } }","title":"\u30b2\u30fc\u30e0\u3078\u306e\u7d44\u307f\u8fbc\u307f"},{"location":"ja-jp/reference/2d-physics/","text":"2D \u7269\u7406\u6f14\u7b97 \u00b6 \u30ef\u30fc\u30eb\u30c9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 1 \u00b6 \u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u3053\u308d\u306b\u30dc\u30fc\u30eb\u304c\u767a\u751f\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306b 60FPS \u306e\u5b9a\u6570\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408\u306f true, \u5b9f\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408 false constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4e0a\u9650\u3092 60 FPS \u306b Graphics :: SetTargetFrameRateHz ( 60 ); } // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20.0 ); // \u7269\u7406\u6f14\u7b97\u306e\u7cbe\u5ea6 constexpr int32 velocityIterations = 12 ; constexpr int32 positionIterations = 4 ; // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 9.8 ); // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); // \u7269\u4f53 Array < P2Body > bodies ; while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210\u30fb\u9069\u7528 const auto t = camera . createTransformer (); if ( MouseL . down ()) { // \u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u30dc\u30fc\u30eb\u3092\u4f5c\u6210 bodies << world . createCircle ( Cursor :: PosF (), 0.5 ); } // (y > 10) \u307e\u3067\u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 10 ; }); // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0 world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), velocityIterations , positionIterations ); // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Skyblue ); // \u7269\u4f53\u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 10 , 0.7 , 0.9 )); } } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } \u9244\u7403\u306b\u3088\u308b\u7834\u58ca \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.7 , 1.0 )); constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { Graphics :: SetTargetFrameRateHz ( 60 ); } P2World world ( 9.8 ); P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); Array < P2Body > bodies ; for ( auto y : Range ( 0 , 12 )) { for ( auto x : Range ( 0 , 20 )) { bodies << world . createDynamicRect ( Vec2 ( x * 0.5 , - 0.5 - y * 1 ), SizeF ( 0.5 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } } for ( auto x : Range ( 0 , 9 )) { bodies << world . createDynamicRect ( Vec2 ( 0.5 + x * 1.0 , - 13.5 ), SizeF ( 1 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } // \u632f\u308a\u5b50\u306e\u8ef8 constexpr Vec2 base ( 0 , - 24 ); // \u30c1\u30a7\u30fc\u30f3\u306e\u6570 constexpr int32 chainCount = 16 ; // \u9244\u7403\u306e\u534a\u5f84 constexpr double ballR = 2.0 ; // \u9244\u7403\u306e\u521d\u671f\u5ea7\u6a19 constexpr Vec2 ballCenter = base . movedBy ( - chainCount - ballR , 0 ); // \u9244\u7403 const P2Body ball = world . createDynamicCircle ( ballCenter , ballR ); // \u632f\u308a\u5b50\u306e\u8ef8 bodies << world . createStaticDummy ( base ); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 Array < P2PivotJoint > joints ; for ( auto i : step ( chainCount )) { const RectF rect ( Arg :: rightCenter = base . movedBy ( 0 - i , 0 ), 1.0 , 0.1 ); bodies << world . createDynamicRect ( rect . center (), rect . size ); joints << world . createPivotJoint ( bodies [ bodies . size () - 2 ], bodies . back (), rect . rightCenter ()); } joints << world . createPivotJoint ( bodies . back (), ball , base . movedBy ( - chainCount , 0 )); // \u30b9\u30c8\u30c3\u30d1\u30fc bool hasStopper = true ; bodies << world . createStaticLine ( ballCenter . movedBy ( 0 , 2 ), Line ( - 4 , 2 , 4 , 0 )); Camera2D camera ( Vec2 ( 0 , - 12 ), 24.0 ); while ( System :: Update ()) { ClearPrint (); Print << U \"Balls: {}\" _fmt ( bodies . size ()); // \u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 20 ; }); world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), 12 , 4 ); camera . update (); { const auto t = camera . createTransformer (); line . draw ( Palette :: Skyblue ); for ( const auto & body : bodies ) { body . draw ( ColorF ( 0.6 , 0.4 , 0.2 )); } ball . draw ( ColorF ( 0.25 )); } if ( SimpleGUI :: Button ( U \"Go\" , Vec2 ( 1100 , 20 )) && hasStopper ) { bodies . pop_back (); hasStopper = false ; } camera . draw ( Palette :: Orange ); } // \u30b8\u30e7\u30a4\u30f3\u30c8\uff08joints \u306f \u95a2\u9023\u3059\u308b Body \u3088\u308a\u5148\u306b\u7834\u68c4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff09 joints . clear (); }","title":"2D \u7269\u7406\u6f14\u7b97"},{"location":"ja-jp/reference/2d-physics/#2d","text":"","title":"2D \u7269\u7406\u6f14\u7b97"},{"location":"ja-jp/reference/2d-physics/#1","text":"\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u3053\u308d\u306b\u30dc\u30fc\u30eb\u304c\u767a\u751f\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306b 60FPS \u306e\u5b9a\u6570\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408\u306f true, \u5b9f\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408 false constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4e0a\u9650\u3092 60 FPS \u306b Graphics :: SetTargetFrameRateHz ( 60 ); } // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20.0 ); // \u7269\u7406\u6f14\u7b97\u306e\u7cbe\u5ea6 constexpr int32 velocityIterations = 12 ; constexpr int32 positionIterations = 4 ; // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 9.8 ); // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); // \u7269\u4f53 Array < P2Body > bodies ; while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210\u30fb\u9069\u7528 const auto t = camera . createTransformer (); if ( MouseL . down ()) { // \u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u30dc\u30fc\u30eb\u3092\u4f5c\u6210 bodies << world . createCircle ( Cursor :: PosF (), 0.5 ); } // (y > 10) \u307e\u3067\u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 10 ; }); // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0 world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), velocityIterations , positionIterations ); // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Skyblue ); // \u7269\u4f53\u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 10 , 0.7 , 0.9 )); } } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"\u30ef\u30fc\u30eb\u30c9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 1"},{"location":"ja-jp/reference/2d-physics/#_1","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.7 , 1.0 )); constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { Graphics :: SetTargetFrameRateHz ( 60 ); } P2World world ( 9.8 ); P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); Array < P2Body > bodies ; for ( auto y : Range ( 0 , 12 )) { for ( auto x : Range ( 0 , 20 )) { bodies << world . createDynamicRect ( Vec2 ( x * 0.5 , - 0.5 - y * 1 ), SizeF ( 0.5 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } } for ( auto x : Range ( 0 , 9 )) { bodies << world . createDynamicRect ( Vec2 ( 0.5 + x * 1.0 , - 13.5 ), SizeF ( 1 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } // \u632f\u308a\u5b50\u306e\u8ef8 constexpr Vec2 base ( 0 , - 24 ); // \u30c1\u30a7\u30fc\u30f3\u306e\u6570 constexpr int32 chainCount = 16 ; // \u9244\u7403\u306e\u534a\u5f84 constexpr double ballR = 2.0 ; // \u9244\u7403\u306e\u521d\u671f\u5ea7\u6a19 constexpr Vec2 ballCenter = base . movedBy ( - chainCount - ballR , 0 ); // \u9244\u7403 const P2Body ball = world . createDynamicCircle ( ballCenter , ballR ); // \u632f\u308a\u5b50\u306e\u8ef8 bodies << world . createStaticDummy ( base ); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 Array < P2PivotJoint > joints ; for ( auto i : step ( chainCount )) { const RectF rect ( Arg :: rightCenter = base . movedBy ( 0 - i , 0 ), 1.0 , 0.1 ); bodies << world . createDynamicRect ( rect . center (), rect . size ); joints << world . createPivotJoint ( bodies [ bodies . size () - 2 ], bodies . back (), rect . rightCenter ()); } joints << world . createPivotJoint ( bodies . back (), ball , base . movedBy ( - chainCount , 0 )); // \u30b9\u30c8\u30c3\u30d1\u30fc bool hasStopper = true ; bodies << world . createStaticLine ( ballCenter . movedBy ( 0 , 2 ), Line ( - 4 , 2 , 4 , 0 )); Camera2D camera ( Vec2 ( 0 , - 12 ), 24.0 ); while ( System :: Update ()) { ClearPrint (); Print << U \"Balls: {}\" _fmt ( bodies . size ()); // \u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 20 ; }); world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), 12 , 4 ); camera . update (); { const auto t = camera . createTransformer (); line . draw ( Palette :: Skyblue ); for ( const auto & body : bodies ) { body . draw ( ColorF ( 0.6 , 0.4 , 0.2 )); } ball . draw ( ColorF ( 0.25 )); } if ( SimpleGUI :: Button ( U \"Go\" , Vec2 ( 1100 , 20 )) && hasStopper ) { bodies . pop_back (); hasStopper = false ; } camera . draw ( Palette :: Orange ); } // \u30b8\u30e7\u30a4\u30f3\u30c8\uff08joints \u306f \u95a2\u9023\u3059\u308b Body \u3088\u308a\u5148\u306b\u7834\u68c4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff09 joints . clear (); }","title":"\u9244\u7403\u306b\u3088\u308b\u7834\u58ca"},{"location":"ja-jp/reference/2d-shadow/","text":"2D \u56f3\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u306b\u5f71\u3092\u713c\u304d\u3053\u3080 \u00b6 \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"2D \u56f3\u5f62\u306e\u5f71"},{"location":"ja-jp/reference/2d-shadow/#2d","text":"Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"2D \u56f3\u5f62\u306e\u5f71"},{"location":"ja-jp/reference/2d-shadow/#_1","text":"\u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"\u30b7\u30fc\u30f3\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u306b\u5f71\u3092\u713c\u304d\u3053\u3080"},{"location":"ja-jp/reference/fullscreen/","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3 \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b \u00b6 Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"ja-jp/reference/fullscreen/#_1","text":"","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"ja-jp/reference/fullscreen/#_2","text":"Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b"},{"location":"ja-jp/reference/gamepad/","text":"\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \u00b6 XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9 \u00b6 PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u306f XInput \u3092\u901a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 640 , 480 ); constexpr ColorF background ( 0.6 , 0.8 , 0.7 ); Scene :: SetBackground ( background ); constexpr Ellipse buttonLB ( 160 , 140 , 50 , 24 ); constexpr Ellipse buttonRB ( 520 , 140 , 50 , 24 ); constexpr RectF leftTrigger ( 150 , 16 , 40 , 100 ); constexpr RectF rightTrigger ( 500 , 16 , 40 , 100 ); constexpr Circle buttonLThumb ( 170 , 250 , 35 ); constexpr Circle buttonRThumb ( 420 , 350 , 35 ); constexpr Circle buttonDPad ( 260 , 350 , 40 ); constexpr Circle buttonA ( 510 , 300 , 20 ); constexpr Circle buttonB ( 560 , 250 , 20 ); constexpr Circle buttonX ( 460 , 250 , 20 ); constexpr Circle buttonY ( 510 , 200 , 20 ); constexpr Circle buttonBack ( 270 , 250 , 15 ); constexpr Circle buttonStart ( 410 , 250 , 15 ); // \u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0 - 3) size_t userIndex = 0 ; // \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u6709\u52b9\u7121\u52b9 bool deadZone = false ; // \u632f\u52d5 (0.0 - 1.0) double leftV = 0.0 , rightV = 0.0 ; while ( System :: Update ()) { // \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u53d6\u5f97 auto controller = XInput ( userIndex ); if ( deadZone ) { controller . setLeftTriggerDeadZone (); controller . setRightTriggerDeadZone (); controller . setLeftThumbDeadZone (); controller . setRightThumbDeadZone (); } else { controller . setLeftTriggerDeadZone ( DeadZone :: Disabled ()); controller . setRightTriggerDeadZone ( DeadZone :: Disabled ()); controller . setLeftThumbDeadZone ( DeadZone :: Disabled ()); controller . setRightThumbDeadZone ( DeadZone :: Disabled ()); } // \u632f\u52d5 controller . setVibration ( leftV , rightV ); buttonLB . draw ( ColorF ( controller . buttonLB . pressed () ? 1.0 : 0.7 )); buttonRB . draw ( ColorF ( controller . buttonRB . pressed () ? 1.0 : 0.7 )); Ellipse ( 340 + 3.0 * Random ( leftV + rightV ), 480 , 300 , 440 ). draw ( ColorF ( 0.9 )); Ellipse ( 340 , 40 , 220 , 120 ). draw ( background ); Circle ( 340 , 660 , 240 ). draw ( background ); Circle ( 340 , 250 , 30 ). draw ( ColorF ( 0.6 )); // \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u63a5\u7d9a\u306e\u6709\u7121 if ( controller . isConnected ()) { Circle ( 340 , 250 , 32 ). drawPie ( - 0.5 _pi + 0.5 _pi * controller . userIndex , 0.5 _pi , ColorF ( 0.7 , 1.0 , 0.5 )); } Circle ( 340 , 250 , 25 ). draw ( ColorF ( 0.6 )); leftTrigger . draw ( AlphaF ( 0.25 )); leftTrigger . stretched (( controller . leftTrigger - 1.0 ) * leftTrigger . h , 0 , 0 , 0 ). draw (); rightTrigger . draw ( AlphaF ( 0.25 )); rightTrigger . stretched (( controller . rightTrigger - 1.0 ) * rightTrigger . h , 0 , 0 , 0 ). draw (); buttonLThumb . draw ( ColorF ( controller . buttonLThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonLThumb . center + Vec2 ( controller . leftThumbX , - controller . leftThumbY ) * 25 , 20 ). draw (); buttonRThumb . draw ( ColorF ( controller . buttonRThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonRThumb . center + Vec2 ( controller . rightThumbX , - controller . rightThumbY ) * 25 , 20 ). draw (); buttonDPad . draw ( ColorF ( 0.5 )); const Vec2 direction ( controller . buttonRight . pressed () - controller . buttonLeft . pressed (), controller . buttonDown . pressed () - controller . buttonUp . pressed ()); if ( ! direction . isZero ()) { Circle ( buttonDPad . center + direction . normalized () * 25 , 15 ). draw (); } buttonA . draw ( ColorF ( 0.0 , 1.0 , 0.3 ). setA ( controller . buttonA . pressed () ? 1.0 : 0.3 )); buttonB . draw ( ColorF ( 1.0 , 0.0 , 0.3 ). setA ( controller . buttonB . pressed () ? 1.0 : 0.3 )); buttonX . draw ( ColorF ( 0.0 , 0.3 , 1.0 ). setA ( controller . buttonX . pressed () ? 1.0 : 0.3 )); buttonY . draw ( ColorF ( 1.0 , 0.5 , 0.0 ). setA ( controller . buttonY . pressed () ? 1.0 : 0.3 )); buttonBack . draw ( ColorF ( controller . buttonBack . pressed () ? 1.0 : 0.7 )); buttonStart . draw ( ColorF ( controller . buttonStart . pressed () ? 1.0 : 0.7 )); SimpleGUI :: RadioButtons ( userIndex , { U \"1P\" , U \"2P\" , U \"3P\" , U \"4P\" }, Vec2 ( 10 , 10 )); SimpleGUI :: CheckBox ( deadZone , U \"DeadZone\" , Vec2 ( 240 , 10 )); SimpleGUI :: Slider ( U \"left\" , leftV , Vec2 ( 240 , 50 )); SimpleGUI :: Slider ( U \"right\" , rightV , Vec2 ( 240 , 90 )); } } Joy-Con \u00b6 PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Joy-Con \u306e\u60c5\u5831\u306f JoyConL \u307e\u305f\u306f JoyConR \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 )); Window :: Resize ( 1280 , 720 ); Effect effect ; Vec2 left ( 640 - 100 , 100 ), right ( 640 + 100 , 100 ); double angle = 0 _deg ; double scale = 400.0 ; bool covered = true ; while ( System :: Update ()) { Circle ( Vec2 ( 640 - 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); Circle ( Vec2 ( 640 + 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); // Joy-Con (L) \u3092\u53d6\u5f97 if ( const auto joy = JoyConL ( 0 )) { joy . drawAt ( Vec2 ( 640 - 300 , 450 ), scale , - 90 _deg - angle , covered ); if ( auto d = joy . povD8 ()) { left += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = left ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } // Joy-Con (R) \u3092\u53d6\u5f97 if ( const auto joy = JoyConR ( 0 )) { joy . drawAt ( Vec2 ( 640 + 300 , 450 ), scale , 90 _deg + angle , covered ); if ( auto d = joy . povD8 ()) { right += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = right ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } Circle ( left , 30 ). draw ( ColorF ( 0.0 , 0.75 , 0.9 )); Circle ( right , 30 ). draw ( ColorF ( 1.0 , 0.4 , 0.3 )); effect . update (); SimpleGUI :: Slider ( U \"Rotation: \" , angle , - 180 _deg , 180 _deg , Vec2 ( 20 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Scale: \" , scale , 100.0 , 600.0 , Vec2 ( 20 , 60 ), 120 , 200 ); SimpleGUI :: CheckBox ( covered , U \"Covered\" , Vec2 ( 20 , 100 )); } } Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc \u00b6 PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u60c5\u5831\u306f ProController \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53d6\u5f97 if ( const auto pro = ProController ( 0 )) { // \u5404\u30dc\u30bf\u30f3\u306e\u72b6\u614b\u3092\u8868\u793a Print << U \"A: \" << pro . buttonA . pressed (); Print << U \"B: \" << pro . buttonB . pressed (); Print << U \"X: \" << pro . buttonX . pressed (); Print << U \"Y: \" << pro . buttonY . pressed (); Print << U \"L: \" << pro . buttonL . pressed (); Print << U \"R: \" << pro . buttonR . pressed (); Print << U \"ZL: \" << pro . buttonZL . pressed (); Print << U \"ZR: \" << pro . buttonZR . pressed (); Print << U \"-: \" << pro . buttonMinus . pressed (); Print << U \"+: \" << pro . buttonPlus . pressed (); Print << U \"LS: \" << pro . buttonLStick . pressed (); Print << U \"RS: \" << pro . buttonRStick . pressed (); Print << U \"Screenshot: \" << pro . buttonScreenshot . pressed (); Print << U \"Home: \" << pro . buttonHome . pressed (); Print << U \"LStick: \" << pro . LStick (); Print << U \"RStick: \" << pro . RStick (); Print << U \"POV: \" << pro . povD8 (); } else { Print << U \"No Pro Controller found\" ; } } } \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \u00b6 \u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u6c4e\u7528\u7684\u306a\u30af\u30e9\u30b9\u304c Gamepad \u3067\u3059\u3002\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f Gamepad . MaxUserCount - 1 \u3067\u5b9a\u7fa9\u3055\u308c\u308b 15 \u304c\u6700\u5927\u5024\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 800 , 680 ); size_t userIndex = 0 ; const Array < String > indices = Iota ( Gamepad . MaxUserCount ). map ( Format ); while ( System :: Update ()) { ClearPrint (); if ( const auto gamepad = Gamepad ( userIndex )) { Print << U \"[{}] {}\" _fmt ( gamepad . getInfo (). index , gamepad . getInfo (). name ); for ( auto [ i , button ] : Indexed ( gamepad . buttons )) { Print << U \"button{}: {}\" _fmt ( i , button . pressed ()); } for ( auto [ i , axe ] : Indexed ( gamepad . axes )) { Print << U \"axe{}: {}\" _fmt ( i , axe ); } Print << U \"POV: \" << gamepad . povD8 (); } SimpleGUI :: RadioButtons ( userIndex , indices , Vec2 ( 500 , 20 )); } } \u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u5217\u6319 \u00b6 # include <Siv3D.hpp> void Main () { for ( const auto & info : System :: EnumerateGamepads ()) { Print << U \"[{}] {}\" _fmt ( info . index , info . name ); } while ( System :: Update ()) { } }","title":"\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9"},{"location":"ja-jp/reference/gamepad/#_1","text":"","title":"\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9"},{"location":"ja-jp/reference/gamepad/#xinput","text":"PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u306f XInput \u3092\u901a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 640 , 480 ); constexpr ColorF background ( 0.6 , 0.8 , 0.7 ); Scene :: SetBackground ( background ); constexpr Ellipse buttonLB ( 160 , 140 , 50 , 24 ); constexpr Ellipse buttonRB ( 520 , 140 , 50 , 24 ); constexpr RectF leftTrigger ( 150 , 16 , 40 , 100 ); constexpr RectF rightTrigger ( 500 , 16 , 40 , 100 ); constexpr Circle buttonLThumb ( 170 , 250 , 35 ); constexpr Circle buttonRThumb ( 420 , 350 , 35 ); constexpr Circle buttonDPad ( 260 , 350 , 40 ); constexpr Circle buttonA ( 510 , 300 , 20 ); constexpr Circle buttonB ( 560 , 250 , 20 ); constexpr Circle buttonX ( 460 , 250 , 20 ); constexpr Circle buttonY ( 510 , 200 , 20 ); constexpr Circle buttonBack ( 270 , 250 , 15 ); constexpr Circle buttonStart ( 410 , 250 , 15 ); // \u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0 - 3) size_t userIndex = 0 ; // \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u6709\u52b9\u7121\u52b9 bool deadZone = false ; // \u632f\u52d5 (0.0 - 1.0) double leftV = 0.0 , rightV = 0.0 ; while ( System :: Update ()) { // \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u53d6\u5f97 auto controller = XInput ( userIndex ); if ( deadZone ) { controller . setLeftTriggerDeadZone (); controller . setRightTriggerDeadZone (); controller . setLeftThumbDeadZone (); controller . setRightThumbDeadZone (); } else { controller . setLeftTriggerDeadZone ( DeadZone :: Disabled ()); controller . setRightTriggerDeadZone ( DeadZone :: Disabled ()); controller . setLeftThumbDeadZone ( DeadZone :: Disabled ()); controller . setRightThumbDeadZone ( DeadZone :: Disabled ()); } // \u632f\u52d5 controller . setVibration ( leftV , rightV ); buttonLB . draw ( ColorF ( controller . buttonLB . pressed () ? 1.0 : 0.7 )); buttonRB . draw ( ColorF ( controller . buttonRB . pressed () ? 1.0 : 0.7 )); Ellipse ( 340 + 3.0 * Random ( leftV + rightV ), 480 , 300 , 440 ). draw ( ColorF ( 0.9 )); Ellipse ( 340 , 40 , 220 , 120 ). draw ( background ); Circle ( 340 , 660 , 240 ). draw ( background ); Circle ( 340 , 250 , 30 ). draw ( ColorF ( 0.6 )); // \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u63a5\u7d9a\u306e\u6709\u7121 if ( controller . isConnected ()) { Circle ( 340 , 250 , 32 ). drawPie ( - 0.5 _pi + 0.5 _pi * controller . userIndex , 0.5 _pi , ColorF ( 0.7 , 1.0 , 0.5 )); } Circle ( 340 , 250 , 25 ). draw ( ColorF ( 0.6 )); leftTrigger . draw ( AlphaF ( 0.25 )); leftTrigger . stretched (( controller . leftTrigger - 1.0 ) * leftTrigger . h , 0 , 0 , 0 ). draw (); rightTrigger . draw ( AlphaF ( 0.25 )); rightTrigger . stretched (( controller . rightTrigger - 1.0 ) * rightTrigger . h , 0 , 0 , 0 ). draw (); buttonLThumb . draw ( ColorF ( controller . buttonLThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonLThumb . center + Vec2 ( controller . leftThumbX , - controller . leftThumbY ) * 25 , 20 ). draw (); buttonRThumb . draw ( ColorF ( controller . buttonRThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonRThumb . center + Vec2 ( controller . rightThumbX , - controller . rightThumbY ) * 25 , 20 ). draw (); buttonDPad . draw ( ColorF ( 0.5 )); const Vec2 direction ( controller . buttonRight . pressed () - controller . buttonLeft . pressed (), controller . buttonDown . pressed () - controller . buttonUp . pressed ()); if ( ! direction . isZero ()) { Circle ( buttonDPad . center + direction . normalized () * 25 , 15 ). draw (); } buttonA . draw ( ColorF ( 0.0 , 1.0 , 0.3 ). setA ( controller . buttonA . pressed () ? 1.0 : 0.3 )); buttonB . draw ( ColorF ( 1.0 , 0.0 , 0.3 ). setA ( controller . buttonB . pressed () ? 1.0 : 0.3 )); buttonX . draw ( ColorF ( 0.0 , 0.3 , 1.0 ). setA ( controller . buttonX . pressed () ? 1.0 : 0.3 )); buttonY . draw ( ColorF ( 1.0 , 0.5 , 0.0 ). setA ( controller . buttonY . pressed () ? 1.0 : 0.3 )); buttonBack . draw ( ColorF ( controller . buttonBack . pressed () ? 1.0 : 0.7 )); buttonStart . draw ( ColorF ( controller . buttonStart . pressed () ? 1.0 : 0.7 )); SimpleGUI :: RadioButtons ( userIndex , { U \"1P\" , U \"2P\" , U \"3P\" , U \"4P\" }, Vec2 ( 10 , 10 )); SimpleGUI :: CheckBox ( deadZone , U \"DeadZone\" , Vec2 ( 240 , 10 )); SimpleGUI :: Slider ( U \"left\" , leftV , Vec2 ( 240 , 50 )); SimpleGUI :: Slider ( U \"right\" , rightV , Vec2 ( 240 , 90 )); } }","title":"XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9"},{"location":"ja-jp/reference/gamepad/#joy-con","text":"PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Joy-Con \u306e\u60c5\u5831\u306f JoyConL \u307e\u305f\u306f JoyConR \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 )); Window :: Resize ( 1280 , 720 ); Effect effect ; Vec2 left ( 640 - 100 , 100 ), right ( 640 + 100 , 100 ); double angle = 0 _deg ; double scale = 400.0 ; bool covered = true ; while ( System :: Update ()) { Circle ( Vec2 ( 640 - 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); Circle ( Vec2 ( 640 + 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); // Joy-Con (L) \u3092\u53d6\u5f97 if ( const auto joy = JoyConL ( 0 )) { joy . drawAt ( Vec2 ( 640 - 300 , 450 ), scale , - 90 _deg - angle , covered ); if ( auto d = joy . povD8 ()) { left += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = left ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } // Joy-Con (R) \u3092\u53d6\u5f97 if ( const auto joy = JoyConR ( 0 )) { joy . drawAt ( Vec2 ( 640 + 300 , 450 ), scale , 90 _deg + angle , covered ); if ( auto d = joy . povD8 ()) { right += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = right ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } Circle ( left , 30 ). draw ( ColorF ( 0.0 , 0.75 , 0.9 )); Circle ( right , 30 ). draw ( ColorF ( 1.0 , 0.4 , 0.3 )); effect . update (); SimpleGUI :: Slider ( U \"Rotation: \" , angle , - 180 _deg , 180 _deg , Vec2 ( 20 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Scale: \" , scale , 100.0 , 600.0 , Vec2 ( 20 , 60 ), 120 , 200 ); SimpleGUI :: CheckBox ( covered , U \"Covered\" , Vec2 ( 20 , 100 )); } }","title":"Joy-Con"},{"location":"ja-jp/reference/gamepad/#pro","text":"PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u60c5\u5831\u306f ProController \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53d6\u5f97 if ( const auto pro = ProController ( 0 )) { // \u5404\u30dc\u30bf\u30f3\u306e\u72b6\u614b\u3092\u8868\u793a Print << U \"A: \" << pro . buttonA . pressed (); Print << U \"B: \" << pro . buttonB . pressed (); Print << U \"X: \" << pro . buttonX . pressed (); Print << U \"Y: \" << pro . buttonY . pressed (); Print << U \"L: \" << pro . buttonL . pressed (); Print << U \"R: \" << pro . buttonR . pressed (); Print << U \"ZL: \" << pro . buttonZL . pressed (); Print << U \"ZR: \" << pro . buttonZR . pressed (); Print << U \"-: \" << pro . buttonMinus . pressed (); Print << U \"+: \" << pro . buttonPlus . pressed (); Print << U \"LS: \" << pro . buttonLStick . pressed (); Print << U \"RS: \" << pro . buttonRStick . pressed (); Print << U \"Screenshot: \" << pro . buttonScreenshot . pressed (); Print << U \"Home: \" << pro . buttonHome . pressed (); Print << U \"LStick: \" << pro . LStick (); Print << U \"RStick: \" << pro . RStick (); Print << U \"POV: \" << pro . povD8 (); } else { Print << U \"No Pro Controller found\" ; } } }","title":"Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc"},{"location":"ja-jp/reference/gamepad/#_2","text":"\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u6c4e\u7528\u7684\u306a\u30af\u30e9\u30b9\u304c Gamepad \u3067\u3059\u3002\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f Gamepad . MaxUserCount - 1 \u3067\u5b9a\u7fa9\u3055\u308c\u308b 15 \u304c\u6700\u5927\u5024\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 800 , 680 ); size_t userIndex = 0 ; const Array < String > indices = Iota ( Gamepad . MaxUserCount ). map ( Format ); while ( System :: Update ()) { ClearPrint (); if ( const auto gamepad = Gamepad ( userIndex )) { Print << U \"[{}] {}\" _fmt ( gamepad . getInfo (). index , gamepad . getInfo (). name ); for ( auto [ i , button ] : Indexed ( gamepad . buttons )) { Print << U \"button{}: {}\" _fmt ( i , button . pressed ()); } for ( auto [ i , axe ] : Indexed ( gamepad . axes )) { Print << U \"axe{}: {}\" _fmt ( i , axe ); } Print << U \"POV: \" << gamepad . povD8 (); } SimpleGUI :: RadioButtons ( userIndex , indices , Vec2 ( 500 , 20 )); } }","title":"\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9"},{"location":"ja-jp/reference/gamepad/#_3","text":"# include <Siv3D.hpp> void Main () { for ( const auto & info : System :: EnumerateGamepads ()) { Print << U \"[{}] {}\" _fmt ( info . index , info . name ); } while ( System :: Update ()) { } }","title":"\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u5217\u6319"},{"location":"ja-jp/reference/json/","text":"JSON \u30d5\u30a1\u30a4\u30eb \u00b6 JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 # include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"JSON \u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/reference/json/#json","text":"","title":"JSON \u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/reference/json/#json_1","text":"# include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/reference/kd-tree/","text":"kd \u6728 \u00b6 \u534a\u5f84\u306b\u3088\u308b\u63a2\u7d22\u3068 k \u8fd1\u508d\u6cd5\u306b\u3088\u308b\u63a2\u7d22 \u00b6 # include <Siv3D.hpp> struct Unit { Circle circle ; ColorF color ; void draw () const { circle . draw ( color ); } }; // Unit \u3092 KDTree \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30c0\u30d7\u30bf struct UnitAdpater : KDTreeAdapter < Array < Unit > , Vec2 , double , 2 > { static const element_type * GetPointer ( const point_type & point ) { return & point . x ; } static element_type GetElement ( const dataset_type & dataset , size_t index , size_t dim ) { return dataset [ index ]. circle . center . elem ( dim ); } static element_type DistanceSq ( const dataset_type & dataset , size_t index , const element_type * other ) { return dataset [ index ]. circle . center . distanceFromSq ( Vec2 ( other [ 0 ], other [ 1 ])); } }; void Main () { // 4000 \u500b\u306e Unit \u3092\u751f\u6210 Array < Unit > units ; for ( size_t i = 0 ; i < 4000 ; ++ i ) { Unit unit ; unit . circle = Circle ( RandomVec2 ( Circle ( 0 , 0 , 100 )), 0.25 ); unit . color = RandomColorF (); units << unit ; } // kd-tree \u3092\u69cb\u7bc9 KDTree < UnitAdpater > kdTree ( units ); // \u63a2\u7d22\u306e\u7a2e\u985e\uff08\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff09 size_t searchTypeIndex = 0 ; // radius search \u3059\u308b\u969b\u306e\u63a2\u7d22\u8ddd\u96e2 double searchDistance = 4.0 ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 24 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); // \u753b\u9762\u5185\u306e\u30e6\u30cb\u30c3\u30c8\u3060\u3051\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u57fa\u6e96\u306e\u9577\u65b9\u5f62 const RectF viewRect = camera . getRegion (); const RectF viewRectScaled = viewRect . scaledAt ( viewRect . center (), 1.2 ); { auto t = camera . createTransformer (); const Vec2 cursorPos = Cursor :: PosF (); if ( searchTypeIndex == 0 ) // radius search { Circle ( cursorPos , searchDistance ). draw ( ColorF ( 1.0 , 0.2 )); // searchDistance \u4ee5\u5185\u306e\u8ddd\u96e2\u306b\u3042\u308b Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . radiusSearch ( cursorPos , searchDistance )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } else // k-NN search { const size_t k = ( searchTypeIndex == 1 ) ? 1 : 5 ; // \u6700\u3082\u8fd1\u3044 k \u500b\u306e Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . knnSearch ( k , cursorPos )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } // \u30e6\u30cb\u30c3\u30c8\u3092\u63cf\u753b for ( const auto & unit : units ) { // \u63cf\u753b\u8ca0\u8377\u524a\u6e1b\u306e\u305f\u3081\u3001\u753b\u9762\u5185 (viewRectScaled) \u306b\u7121\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7 if ( ! unit . circle . center . intersects ( viewRectScaled )) { continue ; } unit . draw (); } } SimpleGUI :: RadioButtons ( searchTypeIndex , { U \"radius\" , U \"k-NN (k=1)\" , U \"k-NN (k=5)\" }, Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"searchDistance\" , searchDistance , 0.0 , 20.0 , Vec2 ( 180 , 20 ), 160 , 120 , ( searchTypeIndex == 0 )); if ( SimpleGUI :: Button ( U \"Move units\" , Vec2 ( 180 , 60 ))) { // Unit \u3092\u30e9\u30f3\u30c0\u30e0\u306b\u79fb\u52d5 for ( auto & unit : units ) { unit . circle . moveBy ( RandomVec2 ( 0.5 )); } // Unit \u306e\u5ea7\u6a19\u304c\u66f4\u65b0\u3055\u308c\u305f\u306e\u3067 kd-tree \u3092\u518d\u69cb\u7bc9 kdTree . rebuildIndex (); } camera . draw ( Palette :: Orange ); } }","title":"kd \u6728"},{"location":"ja-jp/reference/kd-tree/#kd","text":"","title":"kd \u6728"},{"location":"ja-jp/reference/kd-tree/#k","text":"# include <Siv3D.hpp> struct Unit { Circle circle ; ColorF color ; void draw () const { circle . draw ( color ); } }; // Unit \u3092 KDTree \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30c0\u30d7\u30bf struct UnitAdpater : KDTreeAdapter < Array < Unit > , Vec2 , double , 2 > { static const element_type * GetPointer ( const point_type & point ) { return & point . x ; } static element_type GetElement ( const dataset_type & dataset , size_t index , size_t dim ) { return dataset [ index ]. circle . center . elem ( dim ); } static element_type DistanceSq ( const dataset_type & dataset , size_t index , const element_type * other ) { return dataset [ index ]. circle . center . distanceFromSq ( Vec2 ( other [ 0 ], other [ 1 ])); } }; void Main () { // 4000 \u500b\u306e Unit \u3092\u751f\u6210 Array < Unit > units ; for ( size_t i = 0 ; i < 4000 ; ++ i ) { Unit unit ; unit . circle = Circle ( RandomVec2 ( Circle ( 0 , 0 , 100 )), 0.25 ); unit . color = RandomColorF (); units << unit ; } // kd-tree \u3092\u69cb\u7bc9 KDTree < UnitAdpater > kdTree ( units ); // \u63a2\u7d22\u306e\u7a2e\u985e\uff08\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff09 size_t searchTypeIndex = 0 ; // radius search \u3059\u308b\u969b\u306e\u63a2\u7d22\u8ddd\u96e2 double searchDistance = 4.0 ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 24 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); // \u753b\u9762\u5185\u306e\u30e6\u30cb\u30c3\u30c8\u3060\u3051\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u57fa\u6e96\u306e\u9577\u65b9\u5f62 const RectF viewRect = camera . getRegion (); const RectF viewRectScaled = viewRect . scaledAt ( viewRect . center (), 1.2 ); { auto t = camera . createTransformer (); const Vec2 cursorPos = Cursor :: PosF (); if ( searchTypeIndex == 0 ) // radius search { Circle ( cursorPos , searchDistance ). draw ( ColorF ( 1.0 , 0.2 )); // searchDistance \u4ee5\u5185\u306e\u8ddd\u96e2\u306b\u3042\u308b Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . radiusSearch ( cursorPos , searchDistance )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } else // k-NN search { const size_t k = ( searchTypeIndex == 1 ) ? 1 : 5 ; // \u6700\u3082\u8fd1\u3044 k \u500b\u306e Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . knnSearch ( k , cursorPos )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } // \u30e6\u30cb\u30c3\u30c8\u3092\u63cf\u753b for ( const auto & unit : units ) { // \u63cf\u753b\u8ca0\u8377\u524a\u6e1b\u306e\u305f\u3081\u3001\u753b\u9762\u5185 (viewRectScaled) \u306b\u7121\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7 if ( ! unit . circle . center . intersects ( viewRectScaled )) { continue ; } unit . draw (); } } SimpleGUI :: RadioButtons ( searchTypeIndex , { U \"radius\" , U \"k-NN (k=1)\" , U \"k-NN (k=5)\" }, Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"searchDistance\" , searchDistance , 0.0 , 20.0 , Vec2 ( 180 , 20 ), 160 , 120 , ( searchTypeIndex == 0 )); if ( SimpleGUI :: Button ( U \"Move units\" , Vec2 ( 180 , 60 ))) { // Unit \u3092\u30e9\u30f3\u30c0\u30e0\u306b\u79fb\u52d5 for ( auto & unit : units ) { unit . circle . moveBy ( RandomVec2 ( 0.5 )); } // Unit \u306e\u5ea7\u6a19\u304c\u66f4\u65b0\u3055\u308c\u305f\u306e\u3067 kd-tree \u3092\u518d\u69cb\u7bc9 kdTree . rebuildIndex (); } camera . draw ( Palette :: Orange ); } }","title":"\u534a\u5f84\u306b\u3088\u308b\u63a2\u7d22\u3068 k \u8fd1\u508d\u6cd5\u306b\u3088\u308b\u63a2\u7d22"},{"location":"ja-jp/reference/math-parser/","text":"\u6570\u5f0f\u51e6\u7406 \u00b6 \u6570\u5f0f\u306e\u8a08\u7b97 \u00b6 Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"\u6570\u5f0f\u51e6\u7406"},{"location":"ja-jp/reference/math-parser/#_1","text":"","title":"\u6570\u5f0f\u51e6\u7406"},{"location":"ja-jp/reference/math-parser/#_2","text":"Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"\u6570\u5f0f\u306e\u8a08\u7b97"},{"location":"ja-jp/reference/navmesh/","text":"\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 \u00b6 2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh \u00b6 # include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5"},{"location":"ja-jp/reference/navmesh/#_1","text":"","title":"\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5"},{"location":"ja-jp/reference/navmesh/#2d-navmesh","text":"# include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh"},{"location":"ja-jp/reference/network/","text":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af \u00b6 1 \u5bfe 1 \u306e TCP \u901a\u4fe1 \u00b6 \u30b5\u30fc\u30d0\u5074 \u00b6 # include <Siv3D.hpp> void Main () { constexpr uint16 port = 50000 ; bool connected = false ; TCPServer server ; server . startAccept ( port ); Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); Point clientPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point serverPlayerPos = Cursor :: Pos (); if ( server . hasSession ()) { if ( ! connected ) // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a { connected = true ; Window :: SetTitle ( U \"TCPServer: Connection established!\" ); } // \u9001\u4fe1 server . send ( serverPlayerPos ); // \u53d7\u4fe1 while ( server . read ( clientPlayerPos )); } // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5207\u65ad if ( connected && ! server . hasSession ()) { // \u5207\u65ad server . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); server . startAccept ( port ); } Circle ( serverPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( clientPlayerPos , 10 ). draw ( Palette :: Orange ); } } \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074 \u00b6 # include <Siv3D.hpp> void Main () { const IPv4 ip = IPv4 :: Localhost (); constexpr uint16 port = 50000 ; bool connected = false ; TCPClient client ; client . connect ( ip , port ); Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); Point serverPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point clientPlayerPos = Cursor :: Pos (); if ( client . isConnected ()) { if ( ! connected ) { connected = true ; Window :: SetTitle ( U \"TCPClient: Connection established!\" ); } // \u9001\u4fe1 client . send ( clientPlayerPos ); // \u53d7\u4fe1 while ( client . read ( serverPlayerPos )); } if ( client . hasError ()) // \u5207\u65ad/\u63a5\u7d9a\u30a8\u30e9\u30fc { client . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); client . connect ( ip , port ); } Circle ( clientPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( serverPlayerPos , 30 ). draw ( Palette :: Orange ); } }","title":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"},{"location":"ja-jp/reference/network/#_1","text":"","title":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"},{"location":"ja-jp/reference/network/#1-1-tcp","text":"","title":"1 \u5bfe 1 \u306e TCP \u901a\u4fe1"},{"location":"ja-jp/reference/network/#_2","text":"# include <Siv3D.hpp> void Main () { constexpr uint16 port = 50000 ; bool connected = false ; TCPServer server ; server . startAccept ( port ); Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); Point clientPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point serverPlayerPos = Cursor :: Pos (); if ( server . hasSession ()) { if ( ! connected ) // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a { connected = true ; Window :: SetTitle ( U \"TCPServer: Connection established!\" ); } // \u9001\u4fe1 server . send ( serverPlayerPos ); // \u53d7\u4fe1 while ( server . read ( clientPlayerPos )); } // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5207\u65ad if ( connected && ! server . hasSession ()) { // \u5207\u65ad server . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); server . startAccept ( port ); } Circle ( serverPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( clientPlayerPos , 10 ). draw ( Palette :: Orange ); } }","title":"\u30b5\u30fc\u30d0\u5074"},{"location":"ja-jp/reference/network/#_3","text":"# include <Siv3D.hpp> void Main () { const IPv4 ip = IPv4 :: Localhost (); constexpr uint16 port = 50000 ; bool connected = false ; TCPClient client ; client . connect ( ip , port ); Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); Point serverPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point clientPlayerPos = Cursor :: Pos (); if ( client . isConnected ()) { if ( ! connected ) { connected = true ; Window :: SetTitle ( U \"TCPClient: Connection established!\" ); } // \u9001\u4fe1 client . send ( clientPlayerPos ); // \u53d7\u4fe1 while ( client . read ( serverPlayerPos )); } if ( client . hasError ()) // \u5207\u65ad/\u63a5\u7d9a\u30a8\u30e9\u30fc { client . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); client . connect ( ip , port ); } Circle ( clientPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( serverPlayerPos , 30 ). draw ( Palette :: Orange ); } }","title":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074"},{"location":"ja-jp/reference/nlp/","text":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406 \u00b6 \u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"},{"location":"ja-jp/reference/nlp/#_1","text":"","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"},{"location":"ja-jp/reference/nlp/#_2","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"\u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790"},{"location":"ja-jp/reference/objdetection/","text":"\u7269\u4f53\u691c\u51fa \u00b6 \u30a4\u30e9\u30b9\u30c8\u304b\u3089\u306e\u9854\u691c\u51fa \u00b6 \u30a4\u30e9\u30b9\u30c8\u63d0\u4f9b: \u53e4\u53e4\u7c73\u3055\u3093 # include <Siv3D.hpp> void Main () { Texture texture ; double scale = 1.0 ; Array < Rect > detectedFaces ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u30a4\u30e9\u30b9\u30c8\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: AnimeFace ); // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); // \u753b\u50cf\u306e\u62e1\u5927\u7e2e\u5c0f\u7387 scale = static_cast < double > ( texture . width ()) / image . width (); } } if ( texture ) { texture . draw ( 0 , 0 ); // \u9854\u306e\u9818\u57df\u306e\u5ea7\u6a19\u3092\u8868\u793a\u306b\u5408\u308f\u305b\u308b Transformer2D t ( Mat3x2 :: Scale ( scale )); for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 / scale , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } } } \u30ab\u30e1\u30e9\u304b\u3089\u306e\u9854\u691c\u51fa \u00b6 # include <Siv3D.hpp> void Main () { Webcam webcam ( 0 ); // \u5927\u304d\u3044\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304b\u3089\u9854\u3092\u691c\u51fa\u3059\u308b\u306e\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067 640x480 \u524d\u5f8c\u3067 webcam . setResolution ( Size ( 640 , 480 )); const Size resolution = webcam . getResolution (); if ( ! webcam . start ()) { throw Error ( U \"Webcam not available.\" ); } Window :: Resize ( resolution ); Image image ; DynamicTexture texture ; Array < Rect > detectedFaces ; // \u753b\u50cf\u4e2d\u306e\u9854\u306e\u6700\u4f4e\u30b5\u30a4\u30ba\u306e\u76ee\u5b89 const Size minimumFaceSize = Size :: All ( image . height () / 8 ); while ( System :: Update ()) { if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); // \u753b\u50cf\u5185\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: Face , 3 , minimumFaceSize ); texture . fillIfNotBusy ( image ); } if ( texture ) { texture . draw (); } for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } }","title":"\u7269\u4f53\u691c\u51fa"},{"location":"ja-jp/reference/objdetection/#_1","text":"","title":"\u7269\u4f53\u691c\u51fa"},{"location":"ja-jp/reference/objdetection/#_2","text":"\u30a4\u30e9\u30b9\u30c8\u63d0\u4f9b: \u53e4\u53e4\u7c73\u3055\u3093 # include <Siv3D.hpp> void Main () { Texture texture ; double scale = 1.0 ; Array < Rect > detectedFaces ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u30a4\u30e9\u30b9\u30c8\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: AnimeFace ); // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); // \u753b\u50cf\u306e\u62e1\u5927\u7e2e\u5c0f\u7387 scale = static_cast < double > ( texture . width ()) / image . width (); } } if ( texture ) { texture . draw ( 0 , 0 ); // \u9854\u306e\u9818\u57df\u306e\u5ea7\u6a19\u3092\u8868\u793a\u306b\u5408\u308f\u305b\u308b Transformer2D t ( Mat3x2 :: Scale ( scale )); for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 / scale , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } } }","title":"\u30a4\u30e9\u30b9\u30c8\u304b\u3089\u306e\u9854\u691c\u51fa"},{"location":"ja-jp/reference/objdetection/#_3","text":"# include <Siv3D.hpp> void Main () { Webcam webcam ( 0 ); // \u5927\u304d\u3044\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304b\u3089\u9854\u3092\u691c\u51fa\u3059\u308b\u306e\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067 640x480 \u524d\u5f8c\u3067 webcam . setResolution ( Size ( 640 , 480 )); const Size resolution = webcam . getResolution (); if ( ! webcam . start ()) { throw Error ( U \"Webcam not available.\" ); } Window :: Resize ( resolution ); Image image ; DynamicTexture texture ; Array < Rect > detectedFaces ; // \u753b\u50cf\u4e2d\u306e\u9854\u306e\u6700\u4f4e\u30b5\u30a4\u30ba\u306e\u76ee\u5b89 const Size minimumFaceSize = Size :: All ( image . height () / 8 ); while ( System :: Update ()) { if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); // \u753b\u50cf\u5185\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: Face , 3 , minimumFaceSize ); texture . fillIfNotBusy ( image ); } if ( texture ) { texture . draw (); } for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } }","title":"\u30ab\u30e1\u30e9\u304b\u3089\u306e\u9854\u691c\u51fa"},{"location":"ja-jp/reference/twitter/","text":"Twitter \u00b6 \u30c4\u30a4\u30fc\u30c8\u306e\u6295\u7a3f\u753b\u9762\u3092\u8868\u793a \u00b6 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D! #Siv3D\" ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Tweet\" , Vec2 ( 20 , 20 ))) { // text \u3092\u3064\u3076\u3084\u304f\u30c4\u30a4\u30fc\u30c8\u6295\u7a3f\u753b\u9762\u3092\u958b\u304f Twitter :: OpenTweetWindow ( text ); } } }","title":"Twitter"},{"location":"ja-jp/reference/twitter/#twitter","text":"","title":"Twitter"},{"location":"ja-jp/reference/twitter/#_1","text":"# include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D! #Siv3D\" ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Tweet\" , Vec2 ( 20 , 20 ))) { // text \u3092\u3064\u3076\u3084\u304f\u30c4\u30a4\u30fc\u30c8\u6295\u7a3f\u753b\u9762\u3092\u958b\u304f Twitter :: OpenTweetWindow ( text ); } } }","title":"\u30c4\u30a4\u30fc\u30c8\u306e\u6295\u7a3f\u753b\u9762\u3092\u8868\u793a"},{"location":"ja-jp/reference/unicode/","text":"\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5909\u63db \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f String \u3092\u6a19\u6e96\u306e\u6587\u5b57\u5217\u578b\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u4e92\u63db\u306e\u305f\u3081\u306b\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5909\u63db\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 std::string, std::wstring, String \u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e std::string \u304b\u3089 std::wstring \u304b\u3089 String \u304b\u3089 std::string \u3078 - N/A String::narrow() std::wstring \u3078 N/A - String::toWstr() String \u3078 Unicode::Widen() Unicode::FromWString() - const char* \u3078 std::string::c_str() N/A String::narrow().c_str() const wchar_t* \u3078 N/A std::wstring::c_str() String::toWstr().c_str() String \u304b\u3089 Unicode \u3078\u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e String \u304b\u3089 std::string (UTF-8) \u3078 String::toUTF8() std::u16string (UTF-16) \u3078 String::toUTF16() std::u32string (UTF-32) \u3078 String::toUTF32() Unicode \u304b\u3089 String \u3078\u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 String \u3078 Unicode::FromUTF8() Unicode::FromUTF16() Unicode::FromUTF32() Unicode \u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 std::string (UTF-8) \u3078 - Unicode::UTF16ToUTF8() Unicode::UTF32ToUTF8() std::u16string (UTF-16) \u3078 Unicode::UTF8ToUTF16() - Unicode::UTF32ToUTF16() std::u32string (UTF-32) \u3078 Unicode::UTF8ToUTF32() Unicode::UTF16ToUTF32() - ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408 \u00b6 \u30c6\u30ad\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u304c ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3068\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 std::string_view \u2192 String \u3078\u306e\u5909\u63db: Unicode :: WidenAscii () StringView \u2192 std::string \u3078\u306e\u5909\u63db: Unicode :: NarrowAscii () \u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406 \u00b6 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u305f\u3081\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u3067\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 Translator_UTF8toUTF32 Translator_UTF16toUTF32 Translator_UTF32toUTF8 Translator_UTF32toUTF16","title":"\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5909\u63db"},{"location":"ja-jp/reference/unicode/#_1","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f String \u3092\u6a19\u6e96\u306e\u6587\u5b57\u5217\u578b\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u4e92\u63db\u306e\u305f\u3081\u306b\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5909\u63db\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5909\u63db"},{"location":"ja-jp/reference/unicode/#stdstring-stdwstring-string","text":"\u5909\u63db\u306e\u7a2e\u985e std::string \u304b\u3089 std::wstring \u304b\u3089 String \u304b\u3089 std::string \u3078 - N/A String::narrow() std::wstring \u3078 N/A - String::toWstr() String \u3078 Unicode::Widen() Unicode::FromWString() - const char* \u3078 std::string::c_str() N/A String::narrow().c_str() const wchar_t* \u3078 N/A std::wstring::c_str() String::toWstr().c_str()","title":"std::string, std::wstring, String \u306e\u5909\u63db"},{"location":"ja-jp/reference/unicode/#string-unicode","text":"\u5909\u63db\u306e\u7a2e\u985e String \u304b\u3089 std::string (UTF-8) \u3078 String::toUTF8() std::u16string (UTF-16) \u3078 String::toUTF16() std::u32string (UTF-32) \u3078 String::toUTF32()","title":"String \u304b\u3089 Unicode \u3078\u306e\u5909\u63db"},{"location":"ja-jp/reference/unicode/#unicode-string","text":"\u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 String \u3078 Unicode::FromUTF8() Unicode::FromUTF16() Unicode::FromUTF32()","title":"Unicode \u304b\u3089 String \u3078\u306e\u5909\u63db"},{"location":"ja-jp/reference/unicode/#unicode","text":"\u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 std::string (UTF-8) \u3078 - Unicode::UTF16ToUTF8() Unicode::UTF32ToUTF8() std::u16string (UTF-16) \u3078 Unicode::UTF8ToUTF16() - Unicode::UTF32ToUTF16() std::u32string (UTF-32) \u3078 Unicode::UTF8ToUTF32() Unicode::UTF16ToUTF32() -","title":"Unicode \u306e\u5909\u63db"},{"location":"ja-jp/reference/unicode/#ascii","text":"\u30c6\u30ad\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u304c ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3068\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 std::string_view \u2192 String \u3078\u306e\u5909\u63db: Unicode :: WidenAscii () StringView \u2192 std::string \u3078\u306e\u5909\u63db: Unicode :: NarrowAscii ()","title":"ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408"},{"location":"ja-jp/reference/unicode/#_2","text":"\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u305f\u3081\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u3067\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 Translator_UTF8toUTF32 Translator_UTF16toUTF32 Translator_UTF32toUTF8 Translator_UTF32toUTF16","title":"\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406"},{"location":"ja-jp/sample/app/","text":"\u30a2\u30d7\u30ea \u00b6 \u30b9\u30b1\u30c3\u30c1 \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } \u30d4\u30a2\u30ce \u00b6 # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s ); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } } \u4e07\u83ef\u93e1\u30b9\u30b1\u30c3\u30c1 \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } } Image to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } } Sketch to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } \u97f3\u697d\u30d7\u30ec\u30a4\u30e4\u30fc \u00b6 # include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } } Text to Polygon \u00b6 # include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } } \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408 \u00b6 # include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } } \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf \u00b6 # include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } } QR \u30b3\u30fc\u30c9\u4f5c\u6210 \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } } \u30c9\u30c3\u30c8\u304a\u7d75\u304b\u304d \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } } \u6642\u8a08 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } } JPEG Glitch \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } } \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790 \u00b6 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } Sketch to P2Body \u00b6 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } } \u753b\u50cf\u30d3\u30e5\u30fc\u30a2 \u00b6 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); } } if ( texture ) { texture . drawAt ( Scene :: Center ()); } } }","title":"\u30a2\u30d7\u30ea"},{"location":"ja-jp/sample/app/#_1","text":"","title":"\u30a2\u30d7\u30ea"},{"location":"ja-jp/sample/app/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"\u30b9\u30b1\u30c3\u30c1"},{"location":"ja-jp/sample/app/#_3","text":"# include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s ); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"\u30d4\u30a2\u30ce"},{"location":"ja-jp/sample/app/#_4","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } }","title":"\u4e07\u83ef\u93e1\u30b9\u30b1\u30c3\u30c1"},{"location":"ja-jp/sample/app/#image-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } }","title":"Image to Polygon"},{"location":"ja-jp/sample/app/#sketch-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch to Polygon"},{"location":"ja-jp/sample/app/#_5","text":"# include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } }","title":"\u97f3\u697d\u30d7\u30ec\u30a4\u30e4\u30fc"},{"location":"ja-jp/sample/app/#text-to-polygon","text":"# include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } }","title":"Text to Polygon"},{"location":"ja-jp/sample/app/#_6","text":"# include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } }","title":"\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408"},{"location":"ja-jp/sample/app/#_7","text":"# include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } }","title":"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf"},{"location":"ja-jp/sample/app/#qr","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } }","title":"QR \u30b3\u30fc\u30c9\u4f5c\u6210"},{"location":"ja-jp/sample/app/#_8","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } }","title":"\u30c9\u30c3\u30c8\u304a\u7d75\u304b\u304d"},{"location":"ja-jp/sample/app/#_9","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } }","title":"\u6642\u8a08"},{"location":"ja-jp/sample/app/#jpeg-glitch","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } }","title":"JPEG Glitch"},{"location":"ja-jp/sample/app/#_10","text":"# include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"\u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790"},{"location":"ja-jp/sample/app/#sketch-to-p2body","text":"# include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } }","title":"Sketch to P2Body"},{"location":"ja-jp/sample/app/#_11","text":"# include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); } } if ( texture ) { texture . drawAt ( Scene :: Center ()); } } }","title":"\u753b\u50cf\u30d3\u30e5\u30fc\u30a2"},{"location":"ja-jp/sample/game-launcher/","text":"\u30b2\u30fc\u30e0\u30e9\u30f3\u30c1\u30e3\u30fc \u00b6 \u30b2\u30fc\u30e0\u5c55\u793a\u30a4\u30d9\u30f3\u30c8\u7b49\u3067\u8907\u6570\u306e\u30b2\u30fc\u30e0\u3092\u5c55\u793a\u3059\u308b\u969b\u306b\u6d3b\u7528\u3067\u304d\u308b\u30e9\u30f3\u30c1\u30e3\u30fc\u3067\u3059\u3002\u5404\u30b2\u30fc\u30e0\u306e\u30d5\u30a9\u30eb\u30c0\u304b\u3089\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3084\u753b\u50cf\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002Web \u30a2\u30d7\u30ea\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002 \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u914d\u7f6e \u00b6 \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u4f5c\u6210\u3057\u305f Launcher.exe \u304c\u5b58\u5728\u3059\u308b\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001\u5404\u30b2\u30fc\u30e0\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u914d\u7f6e\u3057\u307e\u3059 \u5404\u30b2\u30fc\u30e0\u306e\u30d5\u30a9\u30eb\u30c0\u306b launcher_info . ini \u3092\u914d\u7f6e\u3057\u307e\u3059 Games / ( \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea ) | + -- Launcher.exe (\u30e9\u30f3\u30c1\u30e3\u30fc) | + -- FunnyGame/ (\u30b2\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 1) | | | + launcher_info . ini | + ... | + -- CoolGame/ (\u30b2\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 2) | | | + launcher_info . ini | + ... | + -- NiceGame/ (\u30b2\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 3) | | | + launcher_info . ini | + ... | ... launcher_info . ini \u306e\u66f8\u5f0f \u00b6 \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3084\u64cd\u4f5c\u306b\u4f7f\u3046\u30c7\u30d0\u30a4\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 Warning macOS \u306e\u5834\u5408\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u306f\u30a2\u30d7\u30ea\u30d5\u30a9\u30eb\u30c0 Game . app \u3067\u306f\u306a\u304f Game . app / Contents / MacOS / Game \u306e\u3088\u3046\u306b\u5b9f\u969b\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 [Game] title = \u30bf\u30a4\u30c8\u30eb path = \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30da\u30fc\u30b8\u306e\u30d1\u30b9\uff08Game.exe, Geme.html, https://example.com/\uff09 image = \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30bf\u30a4\u30eb\u306b\u8868\u793a\u3059\u308b\u753b\u50cf\u306e\u30d1\u30b9\uff08\u76f8\u5bfe\u30d1\u30b9\uff09 desc = \u8aac\u660e\u6587\uff08\\n \u3067\u6539\u884c) staff = \u958b\u767a\u30b9\u30bf\u30c3\u30d5 tools = \u958b\u767a\u306b\u4f7f\u3063\u305f\u30c4\u30fc\u30eb mouse = \u30de\u30a6\u30b9\u64cd\u4f5c ; true \u307e\u305f\u306f false keyboard = \u30ad\u30fc\u30dc\u30fc\u30c9\u64cd\u4f5c ; true \u307e\u305f\u306f false gamepad = \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u64cd\u4f5c ; true \u307e\u305f\u306f false priority = \u30e9\u30f3\u30c1\u30e3\u30fc\u3067\u306e\u8868\u793a\u512a\u5148\u5ea6\uff08\u5927\u304d\u3044\u307b\u3069\u4e00\u89a7\u3067\u5148\u982d\u306b\u8868\u793a\uff09 ; \u6574\u6570\u5024 \u4f8b: [Game] title = Nice Game path = NiceGame.exe image = game.png desc = \u30ca\u30a4\u30b9\u306a\u30b2\u30fc\u30e0\u3067\u3059\\n\u3068\u3066\u3082\u30ca\u30a4\u30b9\u3067\u3059 staff = \u30d7\u30ed\u30b0\u30e9\u30e0: \u91ce\u53e3\u82f1\u4e16\u3000\u30a4\u30e9\u30b9\u30c8: \u798f\u6ca2\u8aed\u5409\u3000\u97f3\u697d: \u6a0b\u53e3\u4e00\u8449 tools = C++/OpenSiv3D mouse = true keyboard = true gamepad = true priority = 100 \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 (OpenSiv3D v0.4.1 \u4ee5\u964d) \u00b6 # include <Siv3D.hpp> // OpenSiv3D v0.4.1 // \u30b2\u30fc\u30e0\u306e\u60c5\u5831 struct Game { // \u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb String title ; // \u30b2\u30fc\u30e0\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb \u307e\u305f\u306f URL FilePath path ; // Web \u30d6\u30e9\u30a6\u30b6\u3067\u8d77\u52d5 bool isWebApp = false ; // \u30b2\u30fc\u30e0\u306e\u753b\u50cf Texture texture ; // \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u6587 String desc ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30b9\u30bf\u30c3\u30d5 String staff ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30c4\u30fc\u30eb String tools ; // \u30de\u30a6\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useMouse = false ; // \u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useKeyboard = false ; // \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useGamepad = false ; // \u30e9\u30f3\u30c1\u30e3\u30fc\u8868\u793a\u512a\u5148\u5ea6\uff08\u5927\u304d\u3044\u307b\u3069\u512a\u5148\uff09 int32 priority = 0 ; }; // \u30b2\u30fc\u30e0\u306e\u30d1\u30b9\u304c Web \u30da\u30fc\u30b8\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u95a2\u6570 bool IsURL ( const String & path ) { return path . starts_with ( U \"http://\" ) || path . starts_with ( U \"https://\" ); } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570 Array < Game > LoadGames () { // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8 Array < Game > games ; // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea const FilePath homeDirectory = FileSystem :: CurrentDirectory (); // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u691c\u7d22 for ( const FilePath & gameDirectory : FileSystem :: DirectoryContents ( homeDirectory , false )) { // \u30d5\u30a9\u30eb\u30c0\u3067\u306a\u3044\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! FileSystem :: IsDirectory ( gameDirectory )) { continue ; } // launcher_info.ini \u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( gameDirectory + U \"launcher_info.ini\" ); // \u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557 if ( ini . isEmpty ()) { continue ; } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080 Game game ; game . title = ini [ U \"Game.title\" ]; game . texture = Texture ( Image ( gameDirectory + ini [ U \"Game.image\" ]). squareClipped (), TextureDesc :: Mipped ); game . desc = ini [ U \"Game.desc\" ]. replaced ( U \" \\\\ n\" , U \" \\n \" ); game . staff = ini [ U \"Game.staff\" ]; game . tools = ini [ U \"Game.tools\" ]; game . useMouse = ini . get < bool > ( U \"Game.mouse\" ); game . useKeyboard = ini . get < bool > ( U \"Game.keyboard\" ); game . useGamepad = ini . get < bool > ( U \"Game.gamepad\" ); game . priority = ini . get < int32 > ( U \"Game.priority\" ); const String path = game . path = ini [ U \"Game.path\" ]; game . path = IsURL ( path ) ? path : ( gameDirectory + path ); game . isWebApp = ! path . ends_with ( U \".exe\" ); // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0 games << game ; } // \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u306b\u57fa\u3065\u3044\u3066\u30b2\u30fc\u30e0\u3092\u30bd\u30fc\u30c8 return games . sort_by ([]( const Game & a , const Game & b ) { return a . priority > b . priority ; }); } namespace Config { // Web \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b Web \u30d6\u30e9\u30a6\u30b6\u306e\u30d1\u30b9 const FilePath BrowserPath = U \"C:/Program Files (x86)/Google/Chrome/Application/chrome.exe\" ; } namespace UI { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba constexpr Size WindowSize ( 1280 , 640 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u8868\u793a\u3059\u308b\u304b constexpr bool Frameless = true ; // \u30bf\u30a4\u30eb\u306e\u57fa\u672c\u30b5\u30a4\u30ba constexpr double TileSize = 250 ; // \u80cc\u666f\u8272 constexpr ColorF BackgroundColor ( 0.85 , 0.9 , 0.95 ); // \u30bf\u30a4\u30eb\u9078\u629e\u306e\u8272 constexpr ColorF TileFrmaeColor ( 1.0 , 0.7 , 0.3 ); constexpr Vec2 BaseTilePos ( 240 , 200 ); constexpr RectF InfoArea ( 180 , 340 , 715 , 185 ); constexpr RectF StaffArea ( 180 , 530 , 715 , 70 ); constexpr RectF PlayButton ( 900 , 340 , 220 , 85 ); constexpr ColorF PlayButtonColor ( 0.0 , 0.67 , 1.0 ); constexpr RectF ControlArea ( 900 , 430 , 220 , 170 ); constexpr ColorF InfoAreaMouseOverColor ( 1.0 , 0.95 , 0.9 ); constexpr ColorF TextColor ( 0.2 ); constexpr double InfoAreaRound = 8.0 ; } void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u80cc\u666f\u8272 Window :: SetTitle ( U \"Game Launcher\" ); Window :: Resize ( UI :: WindowSize ); Window :: SetStyle ( UI :: Frameless ? WindowStyle :: Frameless : WindowStyle :: Fixed ); Scene :: SetBackground ( UI :: BackgroundColor ); // \u30d5\u30a9\u30f3\u30c8 FontAsset :: Register ( U \"Game.Title\" , 42 , Typeface :: Heavy ); FontAsset :: Register ( U \"Game.Desc\" , 26 ); FontAsset :: Register ( U \"Game.Small\" , 16 ); FontAsset :: Register ( U \"Game.Play\" , 30 , Typeface :: Heavy ); // \u518d\u751f\u30de\u30fc\u30af TextureAsset :: Register ( U \"Icon.Play\" , Icon ( 0xf144 , 48 )); // \u30b2\u30fc\u30e0\u60c5\u5831 const Array < Game > games = LoadGames (); if ( ! games ) { System :: ShowMessageBox ( U \"\u30b2\u30fc\u30e0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\" ); return ; } // \u5b9f\u884c\u4e2d\u306e\u30b2\u30fc\u30e0\u306e\u30d7\u30ed\u30bb\u30b9 Optional < ChildProcess > process ; // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [0, games.size()-1] size_t activeGameIndex = 0 ; // \u30bf\u30a4\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u7528\u306e\u5909\u6570 double tileOffsetX = 0.0 , targetTileOffsetX = 0.0 , tileOffsetXVelocity = 0.0 ; while ( System :: Update ()) { // \u73fe\u5728\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0 const Game & game = games [ activeGameIndex ]; /////////////////////////////////////////////// // // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5c0f\u5316\u30fb\u5fa9\u5e30 // if ( process ) { // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u306a\u3089 if ( process -> isRunning ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); continue ; } else // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u3089 { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5fa9\u5e30 Window :: Restore (); process = none ; } } /////////////////////////////////////////////// // // \u30b2\u30fc\u30e0\u306e\u8d77\u52d5 // if ( UI :: PlayButton . leftClicked ()) { if ( game . isWebApp ) { // Web \u30d6\u30e9\u30a6\u30b6\u3092\u8d77\u52d5 process = Process :: Spawn ( Config :: BrowserPath , U \"-- {}\" _fmt ( game . path )); } else { // \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u8d77\u52d5 process = Process :: Spawn ( game . path ); } } /////////////////////////////////////////////// // // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u5909\u66f4 // for ( auto i : step ( games . size ())) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u30bf\u30a4\u30eb\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u9078\u629e if ( tile . leftClicked ()) { activeGameIndex = i ; } } // [\u2190][\u2192] \u30ad\u30fc\u3092\u62bc\u3057\u3066\u9078\u629e\u306e\u79fb\u52d5 if ( KeyLeft . down ()) { activeGameIndex = ( activeGameIndex > 0 ) ? ( activeGameIndex - 1 ) : 0 ; } else if ( KeyRight . down ()) { activeGameIndex = Min ( activeGameIndex + 1 , games . size () - 1 ); } /////////////////////////////////////////////// // // \u30bf\u30a4\u30eb\u8868\u793a\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u66f4\u65b0 // { const Vec2 center = UI :: BaseTilePos . movedBy ( targetTileOffsetX + activeGameIndex * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u5de6\u7aef\u3001\u53f3\u7aef\u306e\u30bf\u30a4\u30eb\u304c\u753b\u9762\u5916\u306a\u3089\u30b9\u30af\u30ed\u30fc\u30eb if ( tile . x <= 0 ) { targetTileOffsetX += UI :: TileSize ; } else if ( Scene :: Width () <= tile . tr (). x ) { targetTileOffsetX -= UI :: TileSize ; } // \u30b9\u30e0\u30fc\u30ba\u30b9\u30af\u30ed\u30fc\u30eb tileOffsetX = Math :: SmoothDamp ( tileOffsetX , targetTileOffsetX , tileOffsetXVelocity , 0.1 , Scene :: DeltaTime ()); } /////////////////////////////////////////////// // // \u63cf\u753b // for ( auto [ i , g ] : Indexed ( games )) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u9078\u629e\u3055\u308c\u3066\u3044\u305f\u3089\u3001\u30bf\u30a4\u30eb\u306e\u67a0\u3092\u63cf\u753b if ( activeGameIndex == i ) { tile . stretched ( 6 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 0 ) . draw ( UI :: BackgroundColor ) . drawFrame ( 4 , 0 , ColorF ( UI :: TileFrmaeColor , 0.6 + Periodic :: Sine0_1 ( 1 s ) * 0.4 )); } // \u30b2\u30fc\u30e0\u753b\u50cf\u3092\u63cf\u753b tile ( g . texture ). drawAt ( center ); if ( tile . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u30bf\u30a4\u30c8\u30eb\u3068\u8aac\u660e { UI :: InfoArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: InfoArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Title\" )( game . title ). draw ( UI :: InfoArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); FontAsset ( U \"Game.Desc\" )( game . desc ). draw ( UI :: InfoArea . stretched ( - 80 , - 30 , - 20 , - 30 ), UI :: TextColor ); } // \u30b9\u30bf\u30c3\u30d5\u3068\u958b\u767a\u30c4\u30fc\u30eb { UI :: StaffArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: StaffArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Small\" )( game . staff ). draw ( UI :: StaffArea . pos . movedBy ( 30 , 10 ), UI :: TextColor ); FontAsset ( U \"Game.Small\" )( U \"\u958b\u767a\u30c4\u30fc\u30eb: {}\" _fmt ( game . tools )). draw ( UI :: StaffArea . pos . movedBy ( 30 , 35 ), UI :: TextColor ); } // \u30d7\u30ec\u30a4\u30dc\u30bf\u30f3 { UI :: PlayButton . rounded ( UI :: InfoAreaRound ). draw ( UI :: PlayButton . mouseOver () ? ColorF ( HSV ( UI :: PlayButtonColor ) + HSV ( 10.0 , - 0.1 , 0.0 )) : UI :: PlayButtonColor ); Transformer2D t ( Mat3x2 :: Scale ( 0.95 + Periodic :: Sine0_1 ( 1.2 s ) * 0.05 , UI :: PlayButton . center ())); TextureAsset ( U \"Icon.Play\" ). drawAt ( UI :: PlayButton . center (). movedBy ( - 60 , 0 )); FontAsset ( U \"Game.Play\" )( U \"\u3042\u305d\u3076\" ). draw ( Arg :: leftCenter = UI :: PlayButton . center (). movedBy ( - 25 , 0 )); if ( UI :: PlayButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u64cd\u4f5c\u65b9\u6cd5 { UI :: ControlArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: ControlArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); String control = U \"\u64cd\u4f5c \\n \" ; control += game . useMouse ? U \"\u30fb\u30de\u30a6\u30b9 \\n \" : U \"\" ; control += game . useKeyboard ? U \"\u30fb\u30ad\u30fc\u30dc\u30fc\u30c9 \\n \" : U \"\" ; control += game . useGamepad ? U \"\u30fb\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \\n \" : U \"\" ; FontAsset ( U \"Game.Small\" )( control ). draw ( UI :: ControlArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); } } } (\u53c2\u8003) \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 (OpenSiv3D v0.4.0) \u00b6 OpenSiv3D v0.4.0 \u306b\u306f Process \u6a5f\u80fd\u304c\u306a\u3044\u305f\u3081\u3001Windows \u3067\u306f\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 CreateProcess.hpp \u304a\u3088\u3073 CreateProcess.cpp # include <Siv3D.hpp> // OpenSiv3D v0.4.0 # include \"CreateProcess.hpp\" // CreateProcess() \u95a2\u6570\u306e\u30b5\u30dd\u30fc\u30c8 # if !SIV3D_PLATFORM(WINDOWS) # error \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Windows \u5c02\u7528 # endif // \u30b2\u30fc\u30e0\u306e\u60c5\u5831 struct Game { // \u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb String title ; // \u30b2\u30fc\u30e0\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb \u307e\u305f\u306f URL FilePath path ; // Web \u30d6\u30e9\u30a6\u30b6\u3067\u8d77\u52d5 bool isWebApp = false ; // \u30b2\u30fc\u30e0\u306e\u753b\u50cf Texture texture ; // \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u6587 String desc ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30b9\u30bf\u30c3\u30d5 String staff ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30c4\u30fc\u30eb String tools ; // \u30de\u30a6\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useMouse = false ; // \u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useKeyboard = false ; // \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useGamepad = false ; // \u30e9\u30f3\u30c1\u30e3\u30fc\u8868\u793a\u512a\u5148\u5ea6\uff08\u5927\u304d\u3044\u307b\u3069\u512a\u5148\uff09 int32 priority = 0 ; }; // \u30b2\u30fc\u30e0\u306e\u30d1\u30b9\u304c Web \u30da\u30fc\u30b8\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u95a2\u6570 bool IsURL ( const String & path ) { return path . starts_with ( U \"http://\" ) || path . starts_with ( U \"https://\" ); } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570 Array < Game > LoadGames () { // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8 Array < Game > games ; // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea const FilePath homeDirectory = FileSystem :: CurrentDirectory (); // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u691c\u7d22 for ( const FilePath & gameDirectory : FileSystem :: DirectoryContents ( homeDirectory , false )) { // \u30d5\u30a9\u30eb\u30c0\u3067\u306a\u3044\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! FileSystem :: IsDirectory ( gameDirectory )) { continue ; } // launcher_info.ini \u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( gameDirectory + U \"launcher_info.ini\" ); // \u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557 if ( ini . isEmpty ()) { continue ; } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080 Game game ; game . title = ini [ U \"Game.title\" ]; game . texture = Texture ( Image ( gameDirectory + ini [ U \"Game.image\" ]). squareClipped (), TextureDesc :: Mipped ); game . desc = ini [ U \"Game.desc\" ]. replaced ( U \" \\\\ n\" , U \" \\n \" ); game . staff = ini [ U \"Game.staff\" ]; game . tools = ini [ U \"Game.tools\" ]; game . useMouse = ini . get < bool > ( U \"Game.mouse\" ); game . useKeyboard = ini . get < bool > ( U \"Game.keyboard\" ); game . useGamepad = ini . get < bool > ( U \"Game.gamepad\" ); game . priority = ini . get < int32 > ( U \"Game.priority\" ); const String path = game . path = ini [ U \"Game.path\" ]; game . path = IsURL ( path ) ? path : ( gameDirectory + path ); game . isWebApp = ! path . ends_with ( U \".exe\" ); // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0 games << game ; } // \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u306b\u57fa\u3065\u3044\u3066\u30b2\u30fc\u30e0\u3092\u30bd\u30fc\u30c8 return games . sort_by ([]( const Game & a , const Game & b ) { return a . priority > b . priority ; }); } namespace Config { // Web \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b Web \u30d6\u30e9\u30a6\u30b6\u306e\u30d1\u30b9 const FilePath BrowserPath = U \"C:/Program Files (x86)/Google/Chrome/Application/chrome.exe\" ; } namespace UI { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba constexpr Size WindowSize ( 1280 , 640 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u8868\u793a\u3059\u308b\u304b constexpr bool Frameless = true ; // \u30bf\u30a4\u30eb\u306e\u57fa\u672c\u30b5\u30a4\u30ba constexpr double TileSize = 250 ; // \u80cc\u666f\u8272 constexpr ColorF BackgroundColor ( 0.85 , 0.9 , 0.95 ); // \u30bf\u30a4\u30eb\u9078\u629e\u306e\u8272 constexpr ColorF TileFrmaeColor ( 1.0 , 0.7 , 0.3 ); constexpr Vec2 BaseTilePos ( 240 , 200 ); constexpr RectF InfoArea ( 180 , 340 , 715 , 185 ); constexpr RectF StaffArea ( 180 , 530 , 715 , 70 ); constexpr RectF PlayButton ( 900 , 340 , 220 , 85 ); constexpr ColorF PlayButtonColor ( 0.0 , 0.67 , 1.0 ); constexpr RectF ControlArea ( 900 , 430 , 220 , 170 ); constexpr ColorF InfoAreaMouseOverColor ( 1.0 , 0.95 , 0.9 ); constexpr ColorF TextColor ( 0.2 ); constexpr double InfoAreaRound = 8.0 ; } void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u80cc\u666f\u8272 Window :: SetTitle ( U \"Game Launcher\" ); Window :: Resize ( UI :: WindowSize ); Window :: SetStyle ( UI :: Frameless ? WindowStyle :: Frameless : WindowStyle :: Fixed ); Scene :: SetBackground ( UI :: BackgroundColor ); // \u30d5\u30a9\u30f3\u30c8 FontAsset :: Register ( U \"Game.Title\" , 42 , Typeface :: Heavy ); FontAsset :: Register ( U \"Game.Desc\" , 26 ); FontAsset :: Register ( U \"Game.Small\" , 16 ); FontAsset :: Register ( U \"Game.Play\" , 30 , Typeface :: Heavy ); // \u518d\u751f\u30de\u30fc\u30af TextureAsset :: Register ( U \"Icon.Play\" , Icon ( 0xf144 , 48 )); // \u30b2\u30fc\u30e0\u60c5\u5831 const Array < Game > games = LoadGames (); if ( ! games ) { System :: ShowMessageBox ( U \"\u30b2\u30fc\u30e0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\" ); return ; } // \u5b9f\u884c\u4e2d\u306e\u30b2\u30fc\u30e0\u306e\u30d7\u30ed\u30bb\u30b9 Optional < s3dx :: ProcessInfo > process ; // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [0, games.size()-1] size_t activeGameIndex = 0 ; // \u30bf\u30a4\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u7528\u306e\u5909\u6570 double tileOffsetX = 0.0 , targetTileOffsetX = 0.0 , tileOffsetXVelocity = 0.0 ; while ( System :: Update ()) { // \u73fe\u5728\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0 const Game & game = games [ activeGameIndex ]; /////////////////////////////////////////////// // // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5c0f\u5316\u30fb\u5fa9\u5e30 // if ( process ) { // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u306a\u3089 if ( process -> isRunning ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); continue ; } else // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u3089 { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5fa9\u5e30 Window :: Restore (); process = none ; } } /////////////////////////////////////////////// // // \u30b2\u30fc\u30e0\u306e\u8d77\u52d5 // if ( UI :: PlayButton . leftClicked ()) { if ( game . isWebApp ) { // Web \u30d6\u30e9\u30a6\u30b6\u3092\u8d77\u52d5 process = s3dx :: System :: CreateProcess ( Config :: BrowserPath , U \"-- {}\" _fmt ( game . path )); } else { // \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u8d77\u52d5 process = s3dx :: System :: CreateProcess ( game . path ); } } /////////////////////////////////////////////// // // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u5909\u66f4 // for ( auto i : step ( games . size ())) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u30bf\u30a4\u30eb\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u9078\u629e if ( tile . leftClicked ()) { activeGameIndex = i ; } } // [\u2190][\u2192] \u30ad\u30fc\u3092\u62bc\u3057\u3066\u9078\u629e\u306e\u79fb\u52d5 if ( KeyLeft . down ()) { activeGameIndex = ( activeGameIndex > 0 ) ? ( activeGameIndex - 1 ) : 0 ; } else if ( KeyRight . down ()) { activeGameIndex = Min ( activeGameIndex + 1 , games . size () - 1 ); } /////////////////////////////////////////////// // // \u30bf\u30a4\u30eb\u8868\u793a\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u66f4\u65b0 // { const Vec2 center = UI :: BaseTilePos . movedBy ( targetTileOffsetX + activeGameIndex * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u5de6\u7aef\u3001\u53f3\u7aef\u306e\u30bf\u30a4\u30eb\u304c\u753b\u9762\u5916\u306a\u3089\u30b9\u30af\u30ed\u30fc\u30eb if ( tile . x <= 0 ) { targetTileOffsetX += UI :: TileSize ; } else if ( Scene :: Width () <= tile . tr (). x ) { targetTileOffsetX -= UI :: TileSize ; } // \u30b9\u30e0\u30fc\u30ba\u30b9\u30af\u30ed\u30fc\u30eb tileOffsetX = Math :: SmoothDamp ( tileOffsetX , targetTileOffsetX , tileOffsetXVelocity , 0.1 , Scene :: DeltaTime ()); } /////////////////////////////////////////////// // // \u63cf\u753b // for ( auto [ i , g ] : Indexed ( games )) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u9078\u629e\u3055\u308c\u3066\u3044\u305f\u3089\u3001\u30bf\u30a4\u30eb\u306e\u67a0\u3092\u63cf\u753b if ( activeGameIndex == i ) { tile . stretched ( 6 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 0 ) . draw ( UI :: BackgroundColor ) . drawFrame ( 4 , 0 , ColorF ( UI :: TileFrmaeColor , 0.6 + Periodic :: Sine0_1 ( 1 s ) * 0.4 )); } // \u30b2\u30fc\u30e0\u753b\u50cf\u3092\u63cf\u753b tile ( g . texture ). drawAt ( center ); if ( tile . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u30bf\u30a4\u30c8\u30eb\u3068\u8aac\u660e { UI :: InfoArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: InfoArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Title\" )( game . title ). draw ( UI :: InfoArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); FontAsset ( U \"Game.Desc\" )( game . desc ). draw ( UI :: InfoArea . stretched ( - 80 , - 30 , - 20 , - 30 ), UI :: TextColor ); } // \u30b9\u30bf\u30c3\u30d5\u3068\u958b\u767a\u30c4\u30fc\u30eb { UI :: StaffArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: StaffArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Small\" )( game . staff ). draw ( UI :: StaffArea . pos . movedBy ( 30 , 10 ), UI :: TextColor ); FontAsset ( U \"Game.Small\" )( U \"\u958b\u767a\u30c4\u30fc\u30eb: {}\" _fmt ( game . tools )). draw ( UI :: StaffArea . pos . movedBy ( 30 , 35 ), UI :: TextColor ); } // \u30d7\u30ec\u30a4\u30dc\u30bf\u30f3 { UI :: PlayButton . rounded ( UI :: InfoAreaRound ). draw ( UI :: PlayButton . mouseOver () ? ColorF ( HSV ( UI :: PlayButtonColor ) + HSV ( 10.0 , - 0.1 , 0.0 )) : UI :: PlayButtonColor ); Transformer2D t ( Mat3x2 :: Scale ( 0.95 + Periodic :: Sine0_1 ( 1.2 s ) * 0.05 , UI :: PlayButton . center ())); TextureAsset ( U \"Icon.Play\" ). drawAt ( UI :: PlayButton . center (). movedBy ( - 60 , 0 )); FontAsset ( U \"Game.Play\" )( U \"\u3042\u305d\u3076\" ). draw ( Arg :: leftCenter = UI :: PlayButton . center (). movedBy ( - 25 , 0 )); if ( UI :: PlayButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u64cd\u4f5c\u65b9\u6cd5 { UI :: ControlArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: ControlArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); String control = U \"\u64cd\u4f5c \\n \" ; control += game . useMouse ? U \"\u30fb\u30de\u30a6\u30b9 \\n \" : U \"\" ; control += game . useKeyboard ? U \"\u30fb\u30ad\u30fc\u30dc\u30fc\u30c9 \\n \" : U \"\" ; control += game . useGamepad ? U \"\u30fb\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \\n \" : U \"\" ; FontAsset ( U \"Game.Small\" )( control ). draw ( UI :: ControlArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); } } }","title":"\u30b2\u30fc\u30e0\u30e9\u30f3\u30c1\u30e3\u30fc"},{"location":"ja-jp/sample/game-launcher/#_1","text":"\u30b2\u30fc\u30e0\u5c55\u793a\u30a4\u30d9\u30f3\u30c8\u7b49\u3067\u8907\u6570\u306e\u30b2\u30fc\u30e0\u3092\u5c55\u793a\u3059\u308b\u969b\u306b\u6d3b\u7528\u3067\u304d\u308b\u30e9\u30f3\u30c1\u30e3\u30fc\u3067\u3059\u3002\u5404\u30b2\u30fc\u30e0\u306e\u30d5\u30a9\u30eb\u30c0\u304b\u3089\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3084\u753b\u50cf\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002Web \u30a2\u30d7\u30ea\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002","title":"\u30b2\u30fc\u30e0\u30e9\u30f3\u30c1\u30e3\u30fc"},{"location":"ja-jp/sample/game-launcher/#_2","text":"\u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u4f5c\u6210\u3057\u305f Launcher.exe \u304c\u5b58\u5728\u3059\u308b\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001\u5404\u30b2\u30fc\u30e0\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u914d\u7f6e\u3057\u307e\u3059 \u5404\u30b2\u30fc\u30e0\u306e\u30d5\u30a9\u30eb\u30c0\u306b launcher_info . ini \u3092\u914d\u7f6e\u3057\u307e\u3059 Games / ( \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea ) | + -- Launcher.exe (\u30e9\u30f3\u30c1\u30e3\u30fc) | + -- FunnyGame/ (\u30b2\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 1) | | | + launcher_info . ini | + ... | + -- CoolGame/ (\u30b2\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 2) | | | + launcher_info . ini | + ... | + -- NiceGame/ (\u30b2\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 3) | | | + launcher_info . ini | + ... | ...","title":"\u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u914d\u7f6e"},{"location":"ja-jp/sample/game-launcher/#launcher_infoini","text":"\u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3084\u64cd\u4f5c\u306b\u4f7f\u3046\u30c7\u30d0\u30a4\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 Warning macOS \u306e\u5834\u5408\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u306f\u30a2\u30d7\u30ea\u30d5\u30a9\u30eb\u30c0 Game . app \u3067\u306f\u306a\u304f Game . app / Contents / MacOS / Game \u306e\u3088\u3046\u306b\u5b9f\u969b\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 [Game] title = \u30bf\u30a4\u30c8\u30eb path = \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30da\u30fc\u30b8\u306e\u30d1\u30b9\uff08Game.exe, Geme.html, https://example.com/\uff09 image = \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30bf\u30a4\u30eb\u306b\u8868\u793a\u3059\u308b\u753b\u50cf\u306e\u30d1\u30b9\uff08\u76f8\u5bfe\u30d1\u30b9\uff09 desc = \u8aac\u660e\u6587\uff08\\n \u3067\u6539\u884c) staff = \u958b\u767a\u30b9\u30bf\u30c3\u30d5 tools = \u958b\u767a\u306b\u4f7f\u3063\u305f\u30c4\u30fc\u30eb mouse = \u30de\u30a6\u30b9\u64cd\u4f5c ; true \u307e\u305f\u306f false keyboard = \u30ad\u30fc\u30dc\u30fc\u30c9\u64cd\u4f5c ; true \u307e\u305f\u306f false gamepad = \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u64cd\u4f5c ; true \u307e\u305f\u306f false priority = \u30e9\u30f3\u30c1\u30e3\u30fc\u3067\u306e\u8868\u793a\u512a\u5148\u5ea6\uff08\u5927\u304d\u3044\u307b\u3069\u4e00\u89a7\u3067\u5148\u982d\u306b\u8868\u793a\uff09 ; \u6574\u6570\u5024 \u4f8b: [Game] title = Nice Game path = NiceGame.exe image = game.png desc = \u30ca\u30a4\u30b9\u306a\u30b2\u30fc\u30e0\u3067\u3059\\n\u3068\u3066\u3082\u30ca\u30a4\u30b9\u3067\u3059 staff = \u30d7\u30ed\u30b0\u30e9\u30e0: \u91ce\u53e3\u82f1\u4e16\u3000\u30a4\u30e9\u30b9\u30c8: \u798f\u6ca2\u8aed\u5409\u3000\u97f3\u697d: \u6a0b\u53e3\u4e00\u8449 tools = C++/OpenSiv3D mouse = true keyboard = true gamepad = true priority = 100","title":"launcher_info.ini \u306e\u66f8\u5f0f"},{"location":"ja-jp/sample/game-launcher/#opensiv3d-v041","text":"# include <Siv3D.hpp> // OpenSiv3D v0.4.1 // \u30b2\u30fc\u30e0\u306e\u60c5\u5831 struct Game { // \u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb String title ; // \u30b2\u30fc\u30e0\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb \u307e\u305f\u306f URL FilePath path ; // Web \u30d6\u30e9\u30a6\u30b6\u3067\u8d77\u52d5 bool isWebApp = false ; // \u30b2\u30fc\u30e0\u306e\u753b\u50cf Texture texture ; // \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u6587 String desc ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30b9\u30bf\u30c3\u30d5 String staff ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30c4\u30fc\u30eb String tools ; // \u30de\u30a6\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useMouse = false ; // \u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useKeyboard = false ; // \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useGamepad = false ; // \u30e9\u30f3\u30c1\u30e3\u30fc\u8868\u793a\u512a\u5148\u5ea6\uff08\u5927\u304d\u3044\u307b\u3069\u512a\u5148\uff09 int32 priority = 0 ; }; // \u30b2\u30fc\u30e0\u306e\u30d1\u30b9\u304c Web \u30da\u30fc\u30b8\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u95a2\u6570 bool IsURL ( const String & path ) { return path . starts_with ( U \"http://\" ) || path . starts_with ( U \"https://\" ); } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570 Array < Game > LoadGames () { // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8 Array < Game > games ; // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea const FilePath homeDirectory = FileSystem :: CurrentDirectory (); // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u691c\u7d22 for ( const FilePath & gameDirectory : FileSystem :: DirectoryContents ( homeDirectory , false )) { // \u30d5\u30a9\u30eb\u30c0\u3067\u306a\u3044\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! FileSystem :: IsDirectory ( gameDirectory )) { continue ; } // launcher_info.ini \u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( gameDirectory + U \"launcher_info.ini\" ); // \u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557 if ( ini . isEmpty ()) { continue ; } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080 Game game ; game . title = ini [ U \"Game.title\" ]; game . texture = Texture ( Image ( gameDirectory + ini [ U \"Game.image\" ]). squareClipped (), TextureDesc :: Mipped ); game . desc = ini [ U \"Game.desc\" ]. replaced ( U \" \\\\ n\" , U \" \\n \" ); game . staff = ini [ U \"Game.staff\" ]; game . tools = ini [ U \"Game.tools\" ]; game . useMouse = ini . get < bool > ( U \"Game.mouse\" ); game . useKeyboard = ini . get < bool > ( U \"Game.keyboard\" ); game . useGamepad = ini . get < bool > ( U \"Game.gamepad\" ); game . priority = ini . get < int32 > ( U \"Game.priority\" ); const String path = game . path = ini [ U \"Game.path\" ]; game . path = IsURL ( path ) ? path : ( gameDirectory + path ); game . isWebApp = ! path . ends_with ( U \".exe\" ); // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0 games << game ; } // \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u306b\u57fa\u3065\u3044\u3066\u30b2\u30fc\u30e0\u3092\u30bd\u30fc\u30c8 return games . sort_by ([]( const Game & a , const Game & b ) { return a . priority > b . priority ; }); } namespace Config { // Web \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b Web \u30d6\u30e9\u30a6\u30b6\u306e\u30d1\u30b9 const FilePath BrowserPath = U \"C:/Program Files (x86)/Google/Chrome/Application/chrome.exe\" ; } namespace UI { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba constexpr Size WindowSize ( 1280 , 640 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u8868\u793a\u3059\u308b\u304b constexpr bool Frameless = true ; // \u30bf\u30a4\u30eb\u306e\u57fa\u672c\u30b5\u30a4\u30ba constexpr double TileSize = 250 ; // \u80cc\u666f\u8272 constexpr ColorF BackgroundColor ( 0.85 , 0.9 , 0.95 ); // \u30bf\u30a4\u30eb\u9078\u629e\u306e\u8272 constexpr ColorF TileFrmaeColor ( 1.0 , 0.7 , 0.3 ); constexpr Vec2 BaseTilePos ( 240 , 200 ); constexpr RectF InfoArea ( 180 , 340 , 715 , 185 ); constexpr RectF StaffArea ( 180 , 530 , 715 , 70 ); constexpr RectF PlayButton ( 900 , 340 , 220 , 85 ); constexpr ColorF PlayButtonColor ( 0.0 , 0.67 , 1.0 ); constexpr RectF ControlArea ( 900 , 430 , 220 , 170 ); constexpr ColorF InfoAreaMouseOverColor ( 1.0 , 0.95 , 0.9 ); constexpr ColorF TextColor ( 0.2 ); constexpr double InfoAreaRound = 8.0 ; } void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u80cc\u666f\u8272 Window :: SetTitle ( U \"Game Launcher\" ); Window :: Resize ( UI :: WindowSize ); Window :: SetStyle ( UI :: Frameless ? WindowStyle :: Frameless : WindowStyle :: Fixed ); Scene :: SetBackground ( UI :: BackgroundColor ); // \u30d5\u30a9\u30f3\u30c8 FontAsset :: Register ( U \"Game.Title\" , 42 , Typeface :: Heavy ); FontAsset :: Register ( U \"Game.Desc\" , 26 ); FontAsset :: Register ( U \"Game.Small\" , 16 ); FontAsset :: Register ( U \"Game.Play\" , 30 , Typeface :: Heavy ); // \u518d\u751f\u30de\u30fc\u30af TextureAsset :: Register ( U \"Icon.Play\" , Icon ( 0xf144 , 48 )); // \u30b2\u30fc\u30e0\u60c5\u5831 const Array < Game > games = LoadGames (); if ( ! games ) { System :: ShowMessageBox ( U \"\u30b2\u30fc\u30e0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\" ); return ; } // \u5b9f\u884c\u4e2d\u306e\u30b2\u30fc\u30e0\u306e\u30d7\u30ed\u30bb\u30b9 Optional < ChildProcess > process ; // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [0, games.size()-1] size_t activeGameIndex = 0 ; // \u30bf\u30a4\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u7528\u306e\u5909\u6570 double tileOffsetX = 0.0 , targetTileOffsetX = 0.0 , tileOffsetXVelocity = 0.0 ; while ( System :: Update ()) { // \u73fe\u5728\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0 const Game & game = games [ activeGameIndex ]; /////////////////////////////////////////////// // // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5c0f\u5316\u30fb\u5fa9\u5e30 // if ( process ) { // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u306a\u3089 if ( process -> isRunning ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); continue ; } else // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u3089 { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5fa9\u5e30 Window :: Restore (); process = none ; } } /////////////////////////////////////////////// // // \u30b2\u30fc\u30e0\u306e\u8d77\u52d5 // if ( UI :: PlayButton . leftClicked ()) { if ( game . isWebApp ) { // Web \u30d6\u30e9\u30a6\u30b6\u3092\u8d77\u52d5 process = Process :: Spawn ( Config :: BrowserPath , U \"-- {}\" _fmt ( game . path )); } else { // \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u8d77\u52d5 process = Process :: Spawn ( game . path ); } } /////////////////////////////////////////////// // // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u5909\u66f4 // for ( auto i : step ( games . size ())) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u30bf\u30a4\u30eb\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u9078\u629e if ( tile . leftClicked ()) { activeGameIndex = i ; } } // [\u2190][\u2192] \u30ad\u30fc\u3092\u62bc\u3057\u3066\u9078\u629e\u306e\u79fb\u52d5 if ( KeyLeft . down ()) { activeGameIndex = ( activeGameIndex > 0 ) ? ( activeGameIndex - 1 ) : 0 ; } else if ( KeyRight . down ()) { activeGameIndex = Min ( activeGameIndex + 1 , games . size () - 1 ); } /////////////////////////////////////////////// // // \u30bf\u30a4\u30eb\u8868\u793a\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u66f4\u65b0 // { const Vec2 center = UI :: BaseTilePos . movedBy ( targetTileOffsetX + activeGameIndex * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u5de6\u7aef\u3001\u53f3\u7aef\u306e\u30bf\u30a4\u30eb\u304c\u753b\u9762\u5916\u306a\u3089\u30b9\u30af\u30ed\u30fc\u30eb if ( tile . x <= 0 ) { targetTileOffsetX += UI :: TileSize ; } else if ( Scene :: Width () <= tile . tr (). x ) { targetTileOffsetX -= UI :: TileSize ; } // \u30b9\u30e0\u30fc\u30ba\u30b9\u30af\u30ed\u30fc\u30eb tileOffsetX = Math :: SmoothDamp ( tileOffsetX , targetTileOffsetX , tileOffsetXVelocity , 0.1 , Scene :: DeltaTime ()); } /////////////////////////////////////////////// // // \u63cf\u753b // for ( auto [ i , g ] : Indexed ( games )) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u9078\u629e\u3055\u308c\u3066\u3044\u305f\u3089\u3001\u30bf\u30a4\u30eb\u306e\u67a0\u3092\u63cf\u753b if ( activeGameIndex == i ) { tile . stretched ( 6 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 0 ) . draw ( UI :: BackgroundColor ) . drawFrame ( 4 , 0 , ColorF ( UI :: TileFrmaeColor , 0.6 + Periodic :: Sine0_1 ( 1 s ) * 0.4 )); } // \u30b2\u30fc\u30e0\u753b\u50cf\u3092\u63cf\u753b tile ( g . texture ). drawAt ( center ); if ( tile . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u30bf\u30a4\u30c8\u30eb\u3068\u8aac\u660e { UI :: InfoArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: InfoArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Title\" )( game . title ). draw ( UI :: InfoArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); FontAsset ( U \"Game.Desc\" )( game . desc ). draw ( UI :: InfoArea . stretched ( - 80 , - 30 , - 20 , - 30 ), UI :: TextColor ); } // \u30b9\u30bf\u30c3\u30d5\u3068\u958b\u767a\u30c4\u30fc\u30eb { UI :: StaffArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: StaffArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Small\" )( game . staff ). draw ( UI :: StaffArea . pos . movedBy ( 30 , 10 ), UI :: TextColor ); FontAsset ( U \"Game.Small\" )( U \"\u958b\u767a\u30c4\u30fc\u30eb: {}\" _fmt ( game . tools )). draw ( UI :: StaffArea . pos . movedBy ( 30 , 35 ), UI :: TextColor ); } // \u30d7\u30ec\u30a4\u30dc\u30bf\u30f3 { UI :: PlayButton . rounded ( UI :: InfoAreaRound ). draw ( UI :: PlayButton . mouseOver () ? ColorF ( HSV ( UI :: PlayButtonColor ) + HSV ( 10.0 , - 0.1 , 0.0 )) : UI :: PlayButtonColor ); Transformer2D t ( Mat3x2 :: Scale ( 0.95 + Periodic :: Sine0_1 ( 1.2 s ) * 0.05 , UI :: PlayButton . center ())); TextureAsset ( U \"Icon.Play\" ). drawAt ( UI :: PlayButton . center (). movedBy ( - 60 , 0 )); FontAsset ( U \"Game.Play\" )( U \"\u3042\u305d\u3076\" ). draw ( Arg :: leftCenter = UI :: PlayButton . center (). movedBy ( - 25 , 0 )); if ( UI :: PlayButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u64cd\u4f5c\u65b9\u6cd5 { UI :: ControlArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: ControlArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); String control = U \"\u64cd\u4f5c \\n \" ; control += game . useMouse ? U \"\u30fb\u30de\u30a6\u30b9 \\n \" : U \"\" ; control += game . useKeyboard ? U \"\u30fb\u30ad\u30fc\u30dc\u30fc\u30c9 \\n \" : U \"\" ; control += game . useGamepad ? U \"\u30fb\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \\n \" : U \"\" ; FontAsset ( U \"Game.Small\" )( control ). draw ( UI :: ControlArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); } } }","title":"\u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 (OpenSiv3D v0.4.1 \u4ee5\u964d)"},{"location":"ja-jp/sample/game-launcher/#opensiv3d-v040","text":"OpenSiv3D v0.4.0 \u306b\u306f Process \u6a5f\u80fd\u304c\u306a\u3044\u305f\u3081\u3001Windows \u3067\u306f\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 CreateProcess.hpp \u304a\u3088\u3073 CreateProcess.cpp # include <Siv3D.hpp> // OpenSiv3D v0.4.0 # include \"CreateProcess.hpp\" // CreateProcess() \u95a2\u6570\u306e\u30b5\u30dd\u30fc\u30c8 # if !SIV3D_PLATFORM(WINDOWS) # error \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Windows \u5c02\u7528 # endif // \u30b2\u30fc\u30e0\u306e\u60c5\u5831 struct Game { // \u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb String title ; // \u30b2\u30fc\u30e0\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb \u307e\u305f\u306f URL FilePath path ; // Web \u30d6\u30e9\u30a6\u30b6\u3067\u8d77\u52d5 bool isWebApp = false ; // \u30b2\u30fc\u30e0\u306e\u753b\u50cf Texture texture ; // \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u6587 String desc ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30b9\u30bf\u30c3\u30d5 String staff ; // \u30b2\u30fc\u30e0\u306e\u958b\u767a\u30c4\u30fc\u30eb String tools ; // \u30de\u30a6\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useMouse = false ; // \u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useKeyboard = false ; // \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u304b bool useGamepad = false ; // \u30e9\u30f3\u30c1\u30e3\u30fc\u8868\u793a\u512a\u5148\u5ea6\uff08\u5927\u304d\u3044\u307b\u3069\u512a\u5148\uff09 int32 priority = 0 ; }; // \u30b2\u30fc\u30e0\u306e\u30d1\u30b9\u304c Web \u30da\u30fc\u30b8\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u95a2\u6570 bool IsURL ( const String & path ) { return path . starts_with ( U \"http://\" ) || path . starts_with ( U \"https://\" ); } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u30ed\u30fc\u30c9\u3059\u308b\u95a2\u6570 Array < Game > LoadGames () { // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8 Array < Game > games ; // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea const FilePath homeDirectory = FileSystem :: CurrentDirectory (); // \u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u691c\u7d22 for ( const FilePath & gameDirectory : FileSystem :: DirectoryContents ( homeDirectory , false )) { // \u30d5\u30a9\u30eb\u30c0\u3067\u306a\u3044\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! FileSystem :: IsDirectory ( gameDirectory )) { continue ; } // launcher_info.ini \u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( gameDirectory + U \"launcher_info.ini\" ); // \u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557 if ( ini . isEmpty ()) { continue ; } // \u30b2\u30fc\u30e0\u306e\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080 Game game ; game . title = ini [ U \"Game.title\" ]; game . texture = Texture ( Image ( gameDirectory + ini [ U \"Game.image\" ]). squareClipped (), TextureDesc :: Mipped ); game . desc = ini [ U \"Game.desc\" ]. replaced ( U \" \\\\ n\" , U \" \\n \" ); game . staff = ini [ U \"Game.staff\" ]; game . tools = ini [ U \"Game.tools\" ]; game . useMouse = ini . get < bool > ( U \"Game.mouse\" ); game . useKeyboard = ini . get < bool > ( U \"Game.keyboard\" ); game . useGamepad = ini . get < bool > ( U \"Game.gamepad\" ); game . priority = ini . get < int32 > ( U \"Game.priority\" ); const String path = game . path = ini [ U \"Game.path\" ]; game . path = IsURL ( path ) ? path : ( gameDirectory + path ); game . isWebApp = ! path . ends_with ( U \".exe\" ); // \u30b2\u30fc\u30e0\u306e\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0 games << game ; } // \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u306b\u57fa\u3065\u3044\u3066\u30b2\u30fc\u30e0\u3092\u30bd\u30fc\u30c8 return games . sort_by ([]( const Game & a , const Game & b ) { return a . priority > b . priority ; }); } namespace Config { // Web \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b Web \u30d6\u30e9\u30a6\u30b6\u306e\u30d1\u30b9 const FilePath BrowserPath = U \"C:/Program Files (x86)/Google/Chrome/Application/chrome.exe\" ; } namespace UI { // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba constexpr Size WindowSize ( 1280 , 640 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u8868\u793a\u3059\u308b\u304b constexpr bool Frameless = true ; // \u30bf\u30a4\u30eb\u306e\u57fa\u672c\u30b5\u30a4\u30ba constexpr double TileSize = 250 ; // \u80cc\u666f\u8272 constexpr ColorF BackgroundColor ( 0.85 , 0.9 , 0.95 ); // \u30bf\u30a4\u30eb\u9078\u629e\u306e\u8272 constexpr ColorF TileFrmaeColor ( 1.0 , 0.7 , 0.3 ); constexpr Vec2 BaseTilePos ( 240 , 200 ); constexpr RectF InfoArea ( 180 , 340 , 715 , 185 ); constexpr RectF StaffArea ( 180 , 530 , 715 , 70 ); constexpr RectF PlayButton ( 900 , 340 , 220 , 85 ); constexpr ColorF PlayButtonColor ( 0.0 , 0.67 , 1.0 ); constexpr RectF ControlArea ( 900 , 430 , 220 , 170 ); constexpr ColorF InfoAreaMouseOverColor ( 1.0 , 0.95 , 0.9 ); constexpr ColorF TextColor ( 0.2 ); constexpr double InfoAreaRound = 8.0 ; } void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3068\u80cc\u666f\u8272 Window :: SetTitle ( U \"Game Launcher\" ); Window :: Resize ( UI :: WindowSize ); Window :: SetStyle ( UI :: Frameless ? WindowStyle :: Frameless : WindowStyle :: Fixed ); Scene :: SetBackground ( UI :: BackgroundColor ); // \u30d5\u30a9\u30f3\u30c8 FontAsset :: Register ( U \"Game.Title\" , 42 , Typeface :: Heavy ); FontAsset :: Register ( U \"Game.Desc\" , 26 ); FontAsset :: Register ( U \"Game.Small\" , 16 ); FontAsset :: Register ( U \"Game.Play\" , 30 , Typeface :: Heavy ); // \u518d\u751f\u30de\u30fc\u30af TextureAsset :: Register ( U \"Icon.Play\" , Icon ( 0xf144 , 48 )); // \u30b2\u30fc\u30e0\u60c5\u5831 const Array < Game > games = LoadGames (); if ( ! games ) { System :: ShowMessageBox ( U \"\u30b2\u30fc\u30e0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\" ); return ; } // \u5b9f\u884c\u4e2d\u306e\u30b2\u30fc\u30e0\u306e\u30d7\u30ed\u30bb\u30b9 Optional < s3dx :: ProcessInfo > process ; // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [0, games.size()-1] size_t activeGameIndex = 0 ; // \u30bf\u30a4\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u7528\u306e\u5909\u6570 double tileOffsetX = 0.0 , targetTileOffsetX = 0.0 , tileOffsetXVelocity = 0.0 ; while ( System :: Update ()) { // \u73fe\u5728\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0 const Game & game = games [ activeGameIndex ]; /////////////////////////////////////////////// // // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5c0f\u5316\u30fb\u5fa9\u5e30 // if ( process ) { // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u306a\u3089 if ( process -> isRunning ()) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); continue ; } else // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u3089 { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u5fa9\u5e30 Window :: Restore (); process = none ; } } /////////////////////////////////////////////// // // \u30b2\u30fc\u30e0\u306e\u8d77\u52d5 // if ( UI :: PlayButton . leftClicked ()) { if ( game . isWebApp ) { // Web \u30d6\u30e9\u30a6\u30b6\u3092\u8d77\u52d5 process = s3dx :: System :: CreateProcess ( Config :: BrowserPath , U \"-- {}\" _fmt ( game . path )); } else { // \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u8d77\u52d5 process = s3dx :: System :: CreateProcess ( game . path ); } } /////////////////////////////////////////////// // // \u9078\u629e\u3057\u3066\u3044\u308b\u30bf\u30a4\u30eb\u306e\u5909\u66f4 // for ( auto i : step ( games . size ())) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u30bf\u30a4\u30eb\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u9078\u629e if ( tile . leftClicked ()) { activeGameIndex = i ; } } // [\u2190][\u2192] \u30ad\u30fc\u3092\u62bc\u3057\u3066\u9078\u629e\u306e\u79fb\u52d5 if ( KeyLeft . down ()) { activeGameIndex = ( activeGameIndex > 0 ) ? ( activeGameIndex - 1 ) : 0 ; } else if ( KeyRight . down ()) { activeGameIndex = Min ( activeGameIndex + 1 , games . size () - 1 ); } /////////////////////////////////////////////// // // \u30bf\u30a4\u30eb\u8868\u793a\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u66f4\u65b0 // { const Vec2 center = UI :: BaseTilePos . movedBy ( targetTileOffsetX + activeGameIndex * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u5de6\u7aef\u3001\u53f3\u7aef\u306e\u30bf\u30a4\u30eb\u304c\u753b\u9762\u5916\u306a\u3089\u30b9\u30af\u30ed\u30fc\u30eb if ( tile . x <= 0 ) { targetTileOffsetX += UI :: TileSize ; } else if ( Scene :: Width () <= tile . tr (). x ) { targetTileOffsetX -= UI :: TileSize ; } // \u30b9\u30e0\u30fc\u30ba\u30b9\u30af\u30ed\u30fc\u30eb tileOffsetX = Math :: SmoothDamp ( tileOffsetX , targetTileOffsetX , tileOffsetXVelocity , 0.1 , Scene :: DeltaTime ()); } /////////////////////////////////////////////// // // \u63cf\u753b // for ( auto [ i , g ] : Indexed ( games )) { const Vec2 center = UI :: BaseTilePos . movedBy ( tileOffsetX + i * UI :: TileSize , 0 ); const RectF tile ( Arg :: center = center , ( UI :: TileSize - 20 )); // \u9078\u629e\u3055\u308c\u3066\u3044\u305f\u3089\u3001\u30bf\u30a4\u30eb\u306e\u67a0\u3092\u63cf\u753b if ( activeGameIndex == i ) { tile . stretched ( 6 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 0 ) . draw ( UI :: BackgroundColor ) . drawFrame ( 4 , 0 , ColorF ( UI :: TileFrmaeColor , 0.6 + Periodic :: Sine0_1 ( 1 s ) * 0.4 )); } // \u30b2\u30fc\u30e0\u753b\u50cf\u3092\u63cf\u753b tile ( g . texture ). drawAt ( center ); if ( tile . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u30bf\u30a4\u30c8\u30eb\u3068\u8aac\u660e { UI :: InfoArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: InfoArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Title\" )( game . title ). draw ( UI :: InfoArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); FontAsset ( U \"Game.Desc\" )( game . desc ). draw ( UI :: InfoArea . stretched ( - 80 , - 30 , - 20 , - 30 ), UI :: TextColor ); } // \u30b9\u30bf\u30c3\u30d5\u3068\u958b\u767a\u30c4\u30fc\u30eb { UI :: StaffArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: StaffArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); FontAsset ( U \"Game.Small\" )( game . staff ). draw ( UI :: StaffArea . pos . movedBy ( 30 , 10 ), UI :: TextColor ); FontAsset ( U \"Game.Small\" )( U \"\u958b\u767a\u30c4\u30fc\u30eb: {}\" _fmt ( game . tools )). draw ( UI :: StaffArea . pos . movedBy ( 30 , 35 ), UI :: TextColor ); } // \u30d7\u30ec\u30a4\u30dc\u30bf\u30f3 { UI :: PlayButton . rounded ( UI :: InfoAreaRound ). draw ( UI :: PlayButton . mouseOver () ? ColorF ( HSV ( UI :: PlayButtonColor ) + HSV ( 10.0 , - 0.1 , 0.0 )) : UI :: PlayButtonColor ); Transformer2D t ( Mat3x2 :: Scale ( 0.95 + Periodic :: Sine0_1 ( 1.2 s ) * 0.05 , UI :: PlayButton . center ())); TextureAsset ( U \"Icon.Play\" ). drawAt ( UI :: PlayButton . center (). movedBy ( - 60 , 0 )); FontAsset ( U \"Game.Play\" )( U \"\u3042\u305d\u3076\" ). draw ( Arg :: leftCenter = UI :: PlayButton . center (). movedBy ( - 25 , 0 )); if ( UI :: PlayButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u64cd\u4f5c\u65b9\u6cd5 { UI :: ControlArea . rounded ( UI :: InfoAreaRound ). draw ( UI :: ControlArea . mouseOver () ? UI :: InfoAreaMouseOverColor : ColorF ( 1.0 )); String control = U \"\u64cd\u4f5c \\n \" ; control += game . useMouse ? U \"\u30fb\u30de\u30a6\u30b9 \\n \" : U \"\" ; control += game . useKeyboard ? U \"\u30fb\u30ad\u30fc\u30dc\u30fc\u30c9 \\n \" : U \"\" ; control += game . useGamepad ? U \"\u30fb\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \\n \" : U \"\" ; FontAsset ( U \"Game.Small\" )( control ). draw ( UI :: ControlArea . pos . movedBy ( 30 , 20 ), UI :: TextColor ); } } }","title":"(\u53c2\u8003) \u30e9\u30f3\u30c1\u30e3\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 (OpenSiv3D v0.4.0)"},{"location":"ja-jp/sample/game-template/","text":"\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u958b\u767a\u3092\u3059\u3050\u306b\u59cb\u3081\u3089\u308c\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059\u3002 \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002 https://github.com/Siv3D/GameTemplate \u6a5f\u80fd \u00b6 \u57fa\u672c\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5206\u5272\u3068 SceneManager \u5bfe\u5fdc\u6e08\u307f OpenSiv3D \u7528\u306e .gitignore \u304c\u4ed8\u5c5e Visual Studio \u7528\u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3068\u3001Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u68b1\u3057\u3001\u3069\u3061\u3089\u304b\u3089\u3067\u3082\u958b\u767a\u53ef\u80fd \u4f7f\u7528\u624b\u9806 \u00b6 \u6700\u65b0\u306e OpenSiv3D SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059 macOS \u306e\u5834\u5408\u3001\u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e README . md \u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u3001SDK \u306e include \u3068 lib \u30d5\u30a9\u30eb\u30c0\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059 Visual Studio \u306e\u5834\u5408\u306f\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3001Xcode \u306e\u5834\u5408\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u307e\u3059 \u30b7\u30fc\u30f3\u9077\u79fb\uff081 \u30d5\u30a1\u30a4\u30eb\u7248\uff09 \u00b6 \u958b\u767a\u521d\u671f\u306b\u306f\u958b\u767a\u901f\u5ea6\u304c\u91cd\u8981\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b Main.cpp \u306b\u3059\u3079\u3066\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"\u306f\u3058\u3081\u308b\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"\u304a\u308f\u308b\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } } \u30bf\u30a4\u30d4\u30f3\u30b0\u30b2\u30fc\u30e0\u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ja-jp/sample/game-template/#_1","text":"","title":"\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ja-jp/sample/game-template/#_2","text":"\u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u958b\u767a\u3092\u3059\u3050\u306b\u59cb\u3081\u3089\u308c\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059\u3002 \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002 https://github.com/Siv3D/GameTemplate","title":"\u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ja-jp/sample/game-template/#_3","text":"\u57fa\u672c\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5206\u5272\u3068 SceneManager \u5bfe\u5fdc\u6e08\u307f OpenSiv3D \u7528\u306e .gitignore \u304c\u4ed8\u5c5e Visual Studio \u7528\u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3068\u3001Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u68b1\u3057\u3001\u3069\u3061\u3089\u304b\u3089\u3067\u3082\u958b\u767a\u53ef\u80fd","title":"\u6a5f\u80fd"},{"location":"ja-jp/sample/game-template/#_4","text":"\u6700\u65b0\u306e OpenSiv3D SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059 macOS \u306e\u5834\u5408\u3001\u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e README . md \u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u3001SDK \u306e include \u3068 lib \u30d5\u30a9\u30eb\u30c0\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059 Visual Studio \u306e\u5834\u5408\u306f\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3001Xcode \u306e\u5834\u5408\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u307e\u3059","title":"\u4f7f\u7528\u624b\u9806"},{"location":"ja-jp/sample/game-template/#1","text":"\u958b\u767a\u521d\u671f\u306b\u306f\u958b\u767a\u901f\u5ea6\u304c\u91cd\u8981\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b Main.cpp \u306b\u3059\u3079\u3066\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"\u306f\u3058\u3081\u308b\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"\u304a\u308f\u308b\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } }","title":"\u30b7\u30fc\u30f3\u9077\u79fb\uff081 \u30d5\u30a1\u30a4\u30eb\u7248\uff09"},{"location":"ja-jp/sample/game-template/#_5","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"\u30bf\u30a4\u30d4\u30f3\u30b0\u30b2\u30fc\u30e0\u306e\u57fa\u672c"},{"location":"ja-jp/sample/game/","text":"\u30b2\u30fc\u30e0 \u00b6 \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } } \u30d4\u30f3\u30dc\u30fc\u30eb \u00b6 # include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } } \u7d75\u6587\u5b57\u30bf\u30ef\u30fc \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } \u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0 \u00b6 # include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } } 15 \u30d1\u30ba\u30eb \u00b6 # include <Siv3D.hpp> bool Swappable ( int32 a , int32 b ) { return ( a / 4 == b / 4 && Abs ( a - b ) == 1 ) || ( a % 4 == b % 4 && Abs ( a - b ) == 4 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); constexpr int32 cellSize = 100 ; constexpr Point offset ( 60 , 40 ); // \u30c0\u30a4\u30a2\u30ed\u30b0\u304b\u3089\u753b\u50cf\u3092\u9078\u629e const Image image = Dialog :: OpenImage (); // \u6b63\u65b9\u5f62\u306b\u5207\u308a\u629c\u304f const Texture texture ( image . squareClipped (), TextureDesc :: Mipped ); Optional < int32 > grabbed ; // \u30e9\u30f3\u30c0\u30e0\u306a\u64cd\u4f5c\u3067\u30d1\u30ba\u30eb\u3092\u30b7\u30e3\u30c3\u30d5\u30eb Array < int32 > pieces = Range ( 0 , 15 ); { int32 pos15 = 15 ; for ( int32 i = 0 ; i < 1000 ; ++ i ) { const int32 to = pos15 + Sample ({ - 4 , - 1 , 1 , 4 }); if ( InRange ( to , 0 , 15 ) && Swappable ( pos15 , to )) { std :: swap ( pieces [ pos15 ], pieces [ to ]); pos15 = to ; } } } while ( System :: Update ()) { Rect ( offset , 4 * cellSize ) . drawShadow ( Vec2 ( 0 , 2 ), 12 , 8 ) . draw ( ColorF ( 0.25 )) . drawFrame ( 0 , 8 , ColorF ( 0.3 , 0.5 , 0.7 )); if ( ! MouseL . pressed ()) { grabbed = none ; } for ( auto i : step ( 16 )) { const int32 pieceID = pieces [ i ]; const Rect rect = Rect ( i % 4 * cellSize , i / 4 * cellSize , cellSize ). movedBy ( offset ); if ( pieceID == 15 ) { if ( grabbed && rect . mouseOver () && Swappable ( i , grabbed . value ())) { std :: swap ( pieces [ i ], pieces [ grabbed . value ()]); grabbed = i ; } continue ; } if ( rect . leftClicked ()) { grabbed = i ; } rect ( texture . uv ( pieceID % 4 * 0.25 , pieceID / 4 * 0.25 , 0.25 , 0.25 )) . draw () . drawFrame ( 1 , 0 , ColorF ( 1.0 , 0.75 )); if ( grabbed == i ) { rect . draw ( ColorF ( 1.0 , 0.5 , 0.0 , 0.3 )); } if ( rect . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } texture . resized ( 180 ) . draw ( offset . x + cellSize * 4 + 40 , offset . y ) . drawFrame ( 0 , 4 , ColorF ( 0.3 , 0.5 , 0.7 )); } } \u6570\u3064\u306a\u304e \u00b6 # include <Siv3D.hpp> struct Bubble { // \u30d0\u30d6\u30eb\u306e\u5186\u306e\u534a\u5f84 static constexpr int32 CircleR = 30 ; // \u30d0\u30d6\u30eb\u306e\u5186 Circle circle ; // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 int32 index ; // \u63a5\u7d9a\u6e08\u307f\u306a\u3089 true \u306b bool connected = false ; void draw () const { if ( connected ) { circle . drawShadow ( Vec2 ( 1 , 2 ), 10 , 3 ). draw () . drawFrame ( 2 , 0 , ColorF ( 0.3 , 0.6 , 1.0 )); } else { circle . draw (); } FontAsset ( U \"Bubble\" )( index + 1 ). drawAt ( circle . center , ColorF ( 0.25 )); } }; // \u30d0\u30d6\u30eb\u3069\u3046\u3057\u304c\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af bool CheckBubbles ( const Array < Bubble >& bubbles ) { for ( auto i : step ( bubbles . size ())) { for ( auto k : step ( bubbles . size ())) { // \u91cd\u306a\u3063\u3066\u3044\u308b if ( i != k && bubbles [ i ]. circle . stretched ( 5 ). intersects ( bubbles [ k ]. circle . stretched ( 5 ))) { return false ; } } } return true ; } // \u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u30d0\u30d6\u30eb\u3092\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u751f\u6210 Array < Bubble > MakeBubbles ( int32 count ) { Array < Bubble > bubbles ( count ); do { for ( auto i : step ( count )) { // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 bubbles [ i ]. index = i ; // \u30d0\u30d6\u30eb\u306e\u5186 bubbles [ i ]. circle . set ( RandomVec2 ( Circle ( Scene :: Center (), Scene :: Height () / 2 - Bubble :: CircleR )), Bubble :: CircleR ); } } while ( ! CheckBubbles ( bubbles )); return bubbles ; } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u30d0\u30d6\u30eb\u306e\u500b\u6570 constexpr int32 GetBubbleCount ( int32 level ) { return Min ( level , 15 ); } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u5236\u9650\u6642\u9593 constexpr double GetTime ( int32 level ) { return ( level <= 15 ) ? 8.0 : 8.0 - Min (( level - 15 ) * 0.05 , 2.0 ); } void Main () { Scene :: SetBackground ( Palette :: White ); FontAsset :: Register ( U \"Bubble\" , 36 , Typeface :: Medium ); Effect effect ; // \u52b9\u679c\u97f3\u3092\u4f5c\u6210 const Array < PianoKey > keys = { PianoKey :: C5 , PianoKey :: D5 , PianoKey :: E5 , PianoKey :: F5 , PianoKey :: G5 , PianoKey :: A5 , PianoKey :: B5 , PianoKey :: C6 , PianoKey :: D6 , PianoKey :: E6 , PianoKey :: F6 , PianoKey :: G6 , PianoKey :: A6 , PianoKey :: B6 , PianoKey :: C7 }; const Array < Audio > sounds = keys . map ([]( auto k ) { return Audio ( GMInstrument :: Glockenspiel , k , 0.3 s ); }); // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30ec\u30d9\u30eb int32 level = 1 ; // \u63a5\u7d9a\u6570 int32 connected = 0 ; // \u6b8b\u308a\u6642\u9593\u306e\u30bf\u30a4\u30de\u30fc Timer timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb Array < Bubble > bubbles = MakeBubbles ( GetBubbleCount ( level )); while ( System :: Update ()) { const double delta = Scene :: DeltaTime (); // \u5236\u9650\u6642\u9593\u3092\u8868\u3059\u80cc\u666f RectF ( Scene :: Size () * Vec2 ( 1 , timer . progress0_1 ())). draw ( HSV ( level * 30 , 0.3 , 0.9 )); for ( auto & bubble : bubbles ) { if (( bubble . index == connected ) && ! bubble . connected && bubble . circle . stretched ( 10 ). mouseOver ()) { // \u63a5\u7d9a\u6e08\u307f\u306b bubble . connected = true ; // \u63a5\u7d9a\u6570\u3092\u5897\u3084\u3059 ++ connected ; // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = Cursor :: Pos ()]( double t ) { Circle ( pos , Bubble :: CircleR + t * 200 ). drawFrame ( 2 , 0 , ColorF ( 0.2 , 0.5 , 1.0 , 1.0 - t * 2.5 )); return t < 0.4 ; }); // \u30d0\u30d6\u30eb\u306e\u6570\u5b57\u306b\u5fdc\u3058\u3066\u52b9\u679c\u97f3\u3092\u9cf4\u3089\u3059 sounds [ bubble . index ]. playOneShot ( 0.8 ); } // \u30d0\u30d6\u30eb\u3092\u5186\u5468\u306b\u6cbf\u3063\u3066\u79fb\u52d5 bubble . circle . center = OffsetCircular ( Scene :: Center (), bubble . circle . center ) . rotate (( IsEven ( bubble . index ) ? 20 _deg : - 20 _deg ) * delta ); } // \u30d0\u30d6\u30eb\u3092\u3059\u3079\u3066\u3064\u306a\u3050\u304b\u3001\u6642\u9593\u5207\u308c\u306b\u306a\u3063\u305f\u3089 if ( const bool failed = timer . reachedZero (); ( connected == GetBubbleCount ( level )) || failed ) { // \u30ec\u30d9\u30eb\u3092\u66f4\u65b0 level = failed ? 1 : ++ level ; // \u63a5\u7d9a\u6570\u3092\u30ea\u30bb\u30c3\u30c8 connected = 0 ; // \u5236\u9650\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8 timer = Timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb\u3092\u518d\u751f\u6210 bubbles = MakeBubbles ( GetBubbleCount ( level )); // \u30cf\u30a4\u30b9\u30b3\u30a2\u3092\u66f4\u65b0 highScore = Max ( highScore , level ); // \u30bf\u30a4\u30c8\u30eb\u3092\u66f4\u65b0 Window :: SetTitle ( U \"Level {} (High score: {})\" _fmt ( level , highScore )); } // \u30d0\u30d6\u30eb\u3092\u3064\u306a\u3050\u7dda for ( int32 i = 0 ; i < ( connected - 1 ); ++ i ) { Line ( bubbles [ i ]. circle . center , bubbles [ i + 1 ]. circle . center ). draw ( 3 , Palette :: Orange ); } // \u30d0\u30d6\u30eb\u3092\u63cf\u753b for ( const auto & bubble : bubbles ) { bubble . draw (); } effect . update (); } }","title":"\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#_1","text":"","title":"\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } }","title":"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057"},{"location":"ja-jp/sample/game/#_3","text":"# include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } }","title":"\u30d4\u30f3\u30dc\u30fc\u30eb"},{"location":"ja-jp/sample/game/#_4","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"\u7d75\u6587\u5b57\u30bf\u30ef\u30fc"},{"location":"ja-jp/sample/game/#_5","text":"# include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } }","title":"\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#15","text":"# include <Siv3D.hpp> bool Swappable ( int32 a , int32 b ) { return ( a / 4 == b / 4 && Abs ( a - b ) == 1 ) || ( a % 4 == b % 4 && Abs ( a - b ) == 4 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); constexpr int32 cellSize = 100 ; constexpr Point offset ( 60 , 40 ); // \u30c0\u30a4\u30a2\u30ed\u30b0\u304b\u3089\u753b\u50cf\u3092\u9078\u629e const Image image = Dialog :: OpenImage (); // \u6b63\u65b9\u5f62\u306b\u5207\u308a\u629c\u304f const Texture texture ( image . squareClipped (), TextureDesc :: Mipped ); Optional < int32 > grabbed ; // \u30e9\u30f3\u30c0\u30e0\u306a\u64cd\u4f5c\u3067\u30d1\u30ba\u30eb\u3092\u30b7\u30e3\u30c3\u30d5\u30eb Array < int32 > pieces = Range ( 0 , 15 ); { int32 pos15 = 15 ; for ( int32 i = 0 ; i < 1000 ; ++ i ) { const int32 to = pos15 + Sample ({ - 4 , - 1 , 1 , 4 }); if ( InRange ( to , 0 , 15 ) && Swappable ( pos15 , to )) { std :: swap ( pieces [ pos15 ], pieces [ to ]); pos15 = to ; } } } while ( System :: Update ()) { Rect ( offset , 4 * cellSize ) . drawShadow ( Vec2 ( 0 , 2 ), 12 , 8 ) . draw ( ColorF ( 0.25 )) . drawFrame ( 0 , 8 , ColorF ( 0.3 , 0.5 , 0.7 )); if ( ! MouseL . pressed ()) { grabbed = none ; } for ( auto i : step ( 16 )) { const int32 pieceID = pieces [ i ]; const Rect rect = Rect ( i % 4 * cellSize , i / 4 * cellSize , cellSize ). movedBy ( offset ); if ( pieceID == 15 ) { if ( grabbed && rect . mouseOver () && Swappable ( i , grabbed . value ())) { std :: swap ( pieces [ i ], pieces [ grabbed . value ()]); grabbed = i ; } continue ; } if ( rect . leftClicked ()) { grabbed = i ; } rect ( texture . uv ( pieceID % 4 * 0.25 , pieceID / 4 * 0.25 , 0.25 , 0.25 )) . draw () . drawFrame ( 1 , 0 , ColorF ( 1.0 , 0.75 )); if ( grabbed == i ) { rect . draw ( ColorF ( 1.0 , 0.5 , 0.0 , 0.3 )); } if ( rect . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } texture . resized ( 180 ) . draw ( offset . x + cellSize * 4 + 40 , offset . y ) . drawFrame ( 0 , 4 , ColorF ( 0.3 , 0.5 , 0.7 )); } }","title":"15 \u30d1\u30ba\u30eb"},{"location":"ja-jp/sample/game/#_6","text":"# include <Siv3D.hpp> struct Bubble { // \u30d0\u30d6\u30eb\u306e\u5186\u306e\u534a\u5f84 static constexpr int32 CircleR = 30 ; // \u30d0\u30d6\u30eb\u306e\u5186 Circle circle ; // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 int32 index ; // \u63a5\u7d9a\u6e08\u307f\u306a\u3089 true \u306b bool connected = false ; void draw () const { if ( connected ) { circle . drawShadow ( Vec2 ( 1 , 2 ), 10 , 3 ). draw () . drawFrame ( 2 , 0 , ColorF ( 0.3 , 0.6 , 1.0 )); } else { circle . draw (); } FontAsset ( U \"Bubble\" )( index + 1 ). drawAt ( circle . center , ColorF ( 0.25 )); } }; // \u30d0\u30d6\u30eb\u3069\u3046\u3057\u304c\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af bool CheckBubbles ( const Array < Bubble >& bubbles ) { for ( auto i : step ( bubbles . size ())) { for ( auto k : step ( bubbles . size ())) { // \u91cd\u306a\u3063\u3066\u3044\u308b if ( i != k && bubbles [ i ]. circle . stretched ( 5 ). intersects ( bubbles [ k ]. circle . stretched ( 5 ))) { return false ; } } } return true ; } // \u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u30d0\u30d6\u30eb\u3092\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u751f\u6210 Array < Bubble > MakeBubbles ( int32 count ) { Array < Bubble > bubbles ( count ); do { for ( auto i : step ( count )) { // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 bubbles [ i ]. index = i ; // \u30d0\u30d6\u30eb\u306e\u5186 bubbles [ i ]. circle . set ( RandomVec2 ( Circle ( Scene :: Center (), Scene :: Height () / 2 - Bubble :: CircleR )), Bubble :: CircleR ); } } while ( ! CheckBubbles ( bubbles )); return bubbles ; } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u30d0\u30d6\u30eb\u306e\u500b\u6570 constexpr int32 GetBubbleCount ( int32 level ) { return Min ( level , 15 ); } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u5236\u9650\u6642\u9593 constexpr double GetTime ( int32 level ) { return ( level <= 15 ) ? 8.0 : 8.0 - Min (( level - 15 ) * 0.05 , 2.0 ); } void Main () { Scene :: SetBackground ( Palette :: White ); FontAsset :: Register ( U \"Bubble\" , 36 , Typeface :: Medium ); Effect effect ; // \u52b9\u679c\u97f3\u3092\u4f5c\u6210 const Array < PianoKey > keys = { PianoKey :: C5 , PianoKey :: D5 , PianoKey :: E5 , PianoKey :: F5 , PianoKey :: G5 , PianoKey :: A5 , PianoKey :: B5 , PianoKey :: C6 , PianoKey :: D6 , PianoKey :: E6 , PianoKey :: F6 , PianoKey :: G6 , PianoKey :: A6 , PianoKey :: B6 , PianoKey :: C7 }; const Array < Audio > sounds = keys . map ([]( auto k ) { return Audio ( GMInstrument :: Glockenspiel , k , 0.3 s ); }); // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30ec\u30d9\u30eb int32 level = 1 ; // \u63a5\u7d9a\u6570 int32 connected = 0 ; // \u6b8b\u308a\u6642\u9593\u306e\u30bf\u30a4\u30de\u30fc Timer timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb Array < Bubble > bubbles = MakeBubbles ( GetBubbleCount ( level )); while ( System :: Update ()) { const double delta = Scene :: DeltaTime (); // \u5236\u9650\u6642\u9593\u3092\u8868\u3059\u80cc\u666f RectF ( Scene :: Size () * Vec2 ( 1 , timer . progress0_1 ())). draw ( HSV ( level * 30 , 0.3 , 0.9 )); for ( auto & bubble : bubbles ) { if (( bubble . index == connected ) && ! bubble . connected && bubble . circle . stretched ( 10 ). mouseOver ()) { // \u63a5\u7d9a\u6e08\u307f\u306b bubble . connected = true ; // \u63a5\u7d9a\u6570\u3092\u5897\u3084\u3059 ++ connected ; // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = Cursor :: Pos ()]( double t ) { Circle ( pos , Bubble :: CircleR + t * 200 ). drawFrame ( 2 , 0 , ColorF ( 0.2 , 0.5 , 1.0 , 1.0 - t * 2.5 )); return t < 0.4 ; }); // \u30d0\u30d6\u30eb\u306e\u6570\u5b57\u306b\u5fdc\u3058\u3066\u52b9\u679c\u97f3\u3092\u9cf4\u3089\u3059 sounds [ bubble . index ]. playOneShot ( 0.8 ); } // \u30d0\u30d6\u30eb\u3092\u5186\u5468\u306b\u6cbf\u3063\u3066\u79fb\u52d5 bubble . circle . center = OffsetCircular ( Scene :: Center (), bubble . circle . center ) . rotate (( IsEven ( bubble . index ) ? 20 _deg : - 20 _deg ) * delta ); } // \u30d0\u30d6\u30eb\u3092\u3059\u3079\u3066\u3064\u306a\u3050\u304b\u3001\u6642\u9593\u5207\u308c\u306b\u306a\u3063\u305f\u3089 if ( const bool failed = timer . reachedZero (); ( connected == GetBubbleCount ( level )) || failed ) { // \u30ec\u30d9\u30eb\u3092\u66f4\u65b0 level = failed ? 1 : ++ level ; // \u63a5\u7d9a\u6570\u3092\u30ea\u30bb\u30c3\u30c8 connected = 0 ; // \u5236\u9650\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8 timer = Timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb\u3092\u518d\u751f\u6210 bubbles = MakeBubbles ( GetBubbleCount ( level )); // \u30cf\u30a4\u30b9\u30b3\u30a2\u3092\u66f4\u65b0 highScore = Max ( highScore , level ); // \u30bf\u30a4\u30c8\u30eb\u3092\u66f4\u65b0 Window :: SetTitle ( U \"Level {} (High score: {})\" _fmt ( level , highScore )); } // \u30d0\u30d6\u30eb\u3092\u3064\u306a\u3050\u7dda for ( int32 i = 0 ; i < ( connected - 1 ); ++ i ) { Line ( bubbles [ i ]. circle . center , bubbles [ i + 1 ]. circle . center ). draw ( 3 , Palette :: Orange ); } // \u30d0\u30d6\u30eb\u3092\u63cf\u753b for ( const auto & bubble : bubbles ) { bubble . draw (); } effect . update (); } }","title":"\u6570\u3064\u306a\u304e"},{"location":"ja-jp/sample/visual/","text":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe \u00b6 \u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } } \u4ed8\u7b8b \u00b6 # include <Siv3D.hpp> void DrawStickyNote ( const RectF & rect , const ColorF & noteColor ) { // \u5c11\u3057\u3060\u3051\u56de\u8ee2\u3055\u305b\u3066\u5f71\u3092\u63cf\u304f { Transformer2D t ( Mat3x2 :: Rotate ( 2 _deg , rect . pos )); rect . stretched ( - 2 , 1 , 1 , - 4 ). drawShadow ( Vec2 ( 0 , 0 ), 12 , 0 , ColorF ( 0.0 , 0.4 )); } rect . draw ( noteColor ); } void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.98 , 0.96 )); const Font font ( 36 , Typeface :: Bold ); while ( System :: Update ()) { for ( auto i : step ( 10 )) { const RectF rect ( 60 + i / 5 * 280 , 20 + i % 5 * 90 , 230 , 70 ); DrawStickyNote ( rect , HSV ( i * 36 , 0.46 , 1.0 )); font ( U \"Text\" ). draw ( rect . pos . movedBy ( 20 , 10 ), ColorF ( 0.1 , 0.95 )); } } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u53cd\u5c04 \u00b6 # include <Siv3D.hpp> void Main () { const std :: array < Texture , 3 > textures = { Texture ( Emoji ( U \"\ud83d\udcb9\" )), Texture ( Emoji ( U \"\ud83d\udcc5\" )), Texture ( Emoji ( U \"\ud83c\udfe1\" )), }; constexpr Size imageSize = Emoji :: ImageSize ; while ( System :: Update ()) { Rect ( 0 , 300 , 800 , 300 ). draw ( ColorF ( 0.2 , 0.3 , 0.4 )); for ( auto [ i , texture ] : Indexed ( textures )) { const Vec2 pos ( 140 + i * 200 , 220 ); texture . draw ( pos ); // \u53cd\u5c04\u3059\u308b\u30c6\u30af\u30b9\u30c1\u30e3 texture ( 0 , imageSize . y / 2 , imageSize . x , imageSize . y / 2 ). flipped () . draw ( pos . x , pos . y + imageSize . y , Arg :: top = AlphaF ( 0.8 ), Arg :: bottom = AlphaF ( 0.0 )); } } } \u30c6\u30ad\u30b9\u30c8\u306e\u767b\u5834 \u00b6 # include <Siv3D.hpp> // Glyph \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b void DrawText ( const DrawableText & fontText , const Vec2 & pos , const ColorF & color , double t , void f ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ), double characterdPerSec ) { Vec2 penPos = pos ; for ( const auto & glyph : fontText ) { if ( glyph . codePoint == U '\\n' ) { penPos . x = pos . x ; penPos . y += fontText . font . height (); continue ; } const double targetTime = glyph . index * characterdPerSec ; if ( targetTime > t ) { break ; } f ( penPos , glyph , color , t - targetTime ); penPos . x += glyph . xAdvance ; } } // \u6587\u5b57\u304c\u4e0a\u304b\u3089\u3086\u3063\u304f\u308a\u964d\u3063\u3066\u304f\u308b\u8868\u73fe void TextEffect1 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double y = EaseInQuad ( Saturate ( 1 - t / 0.3 )) * - 20.0 ; const double a = Min ( t / 0.3 , 1.0 ); glyph . texture . draw ( penPos + glyph . offset + Vec2 ( 0 , y ), ColorF ( color , a )); } // \u6587\u5b57\u304c\u52e2\u3044\u3088\u304f\u73fe\u308c\u308b\u8868\u73fe void TextEffect2 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double s = Min ( t / 0.1 , 1.0 ); const double a = Min ( t / 0.2 , 1.0 ); glyph . texture . scaled ( 3.0 - s * 2 ). draw ( penPos + glyph . offset , ColorF ( color , a )); } // \u843d\u3061\u3066\u304d\u305f\u6587\u5b57\u304c\u3057\u3070\u3089\u304f\u63fa\u308c\u308b\u8868\u73fe void TextEffect3 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double angle = Sin ( t * 1440 _deg ) * 25 _deg * Saturate ( 1.0 - t / 0.6 ); const double y = Saturate ( 1 - t / 0.05 ) * - 20.0 ; glyph . texture . rotated ( angle ). draw ( penPos + glyph . offset + Vec2 ( 0 , y ), color ); } void Main () { const Font font ( 32 , Typeface :: Bold ); const String text = U \"Lorem ipsum dolor sit amet, consectetur \\n \" U \"adipiscing elit, sed do eiusmod tempor \\n \" U \"incididunt ut labore et dolore magna aliqua.\" ; Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 620 , 520 ))) { stopwatch . restart (); } const double t = stopwatch . sF (); DrawText ( font ( text ), Vec2 ( 40 , 40 ), Palette :: Skyblue , t , TextEffect1 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 200 ), Palette :: Orange , t , TextEffect2 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 360 ), Palette :: Seagreen , t , TextEffect3 , 0.1 ); } } RenderTexture \u3092\u4f7f\u3063\u3066\u56f3\u5f62\u3084\u6587\u5b57\u306e\u5f71\u3092\u63cf\u304f \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 100 , Typeface :: Heavy ); const Texture emoji ( Emoji ( U \"\ud83d\udc27\" )); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture shadow ( 800 , 600 ); RenderTexture shadowInternal ( shadow . size ()); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 BlendState bs = BlendState :: Default ; bs . op = BlendOp :: Max ; bs . srcAlpha = Blend :: SrcAlpha ; bs . dstAlpha = Blend :: DestAlpha ; bs . opAlpha = BlendOp :: Max ; while ( System :: Update ()) { const RectF rect ( 100 + Periodic :: Sine0_1 ( 4 s ) * 400 , 200 , 200 ); const Line line ( 100 , 100 , 400 , 500 ); shadow . clear ( ColorF ( 1.0 , 0.0 )); { // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080 ScopedRenderTarget2D target ( shadow ); ScopedRenderStates2D blend ( bs ); font ( U \"Siv3D\" ). draw ( 400 , 60 ); rect . draw (); line . draw ( LineStyle :: RoundCap , 10 ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } // \u66f8\u304d\u8fbc\u307e\u308c\u305f\u5f71\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3057\u3066\u7070\u8272\u3067\u63cf\u753b Shader :: GaussianBlur ( shadow , shadowInternal , shadow ); const Vec2 shadowDirection = Circular ( 10 , Scene :: Time () * 50 _deg ); shadow . draw ( shadowDirection , ColorF ( 0.5 )); { // \u672c\u6765\u306e\u8272\u3067\u63cf\u753b\u3059\u308b font ( U \"Siv3D\" ). draw ( 400 , 60 , Palette :: Orange ); rect . draw ( Palette :: Seagreen ); line . draw ( LineStyle :: RoundCap , 10 , Palette :: White ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } } } 2D \u30e9\u30a4\u30c8\u30d6\u30eb\u30fc\u30e0 \u00b6 # include <Siv3D.hpp> void DrawScene () { Circle ( 680 , 40 , 20 ). draw (); Rect ( Arg :: center ( 680 , 110 ), 30 ). draw (); Triangle ( 680 , 180 , 40 ). draw (); Circle ( 740 , 40 , 20 ). draw ( HSV ( 0 )); Rect ( Arg :: center ( 740 , 110 ), 30 ). draw ( HSV ( 120 )); Triangle ( 740 , 180 , 40 ). draw ( HSV ( 240 )); Circle ( 50 , 200 , 300 ). drawFrame ( 4 ); Circle ( 550 , 450 , 200 ). drawFrame ( 4 ); for ( auto i : step ( 12 )) { const double angle = i * 30 _deg + Scene :: Time () * 5 _deg ; const Vec2 pos = OffsetCircular ( Scene :: Center (), 200 , angle ); Circle ( pos , 8 ). draw ( HSV ( i * 30 )); } } void Main () { constexpr Size sceneSize ( 800 , 600 ); RenderTexture gaussianA1 ( sceneSize ), gaussianB1 ( sceneSize ); RenderTexture gaussianA4 ( sceneSize / 4 ), gaussianB4 ( sceneSize / 4 ); RenderTexture gaussianA8 ( sceneSize / 8 ), gaussianB8 ( sceneSize / 8 ); double a8 = 0.0 , a4 = 0.0 , a1 = 0.0 ; while ( System :: Update ()) { // \u901a\u5e38\u306e\u30b7\u30fc\u30f3\u63cf\u753b DrawScene (); { // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u3046\u4e00\u5ea6\u30b7\u30fc\u30f3\u3092\u63cf\u304f gaussianA1 . clear ( ColorF ( 0.0 )); { ScopedRenderTarget2D target ( gaussianA1 ); ScopedRenderStates2D blend ( BlendState :: Additive ); DrawScene (); } // \u30aa\u30ea\u30b8\u30ca\u30eb\u30b5\u30a4\u30ba\u306e\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A1) // A1 \u3092 1/4 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A4) // A4 \u3092 1/2 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A8) Shader :: GaussianBlur ( gaussianA1 , gaussianB1 , gaussianA1 ); Shader :: Downsample ( gaussianA1 , gaussianA4 ); Shader :: GaussianBlur ( gaussianA4 , gaussianB4 , gaussianA4 ); Shader :: Downsample ( gaussianA4 , gaussianA8 ); Shader :: GaussianBlur ( gaussianA8 , gaussianB8 , gaussianA8 ); } { ScopedRenderStates2D blend ( BlendState :: Additive ); if ( a1 ) { gaussianA1 . resized ( sceneSize ). draw ( ColorF ( a1 )); } if ( a4 ) { gaussianA4 . resized ( sceneSize ). draw ( ColorF ( a4 )); } if ( a8 ) { gaussianA8 . resized ( sceneSize ). draw ( ColorF ( a8 )); } } SimpleGUI :: Slider ( U \"a8: {:.1f}\" _fmt ( a8 ), a8 , 0.0 , 4.0 , Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"a4: {:.1f}\" _fmt ( a4 ), a4 , 0.0 , 4.0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"a1: {:.1f}\" _fmt ( a1 ), a1 , 0.0 , 4.0 , Vec2 ( 20 , 100 )); if ( SimpleGUI :: Button ( U \"0, 0, 0\" , Vec2 ( 20 , 140 ))) { a1 = a4 = a8 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 0, 0\" , Vec2 ( 20 , 180 ))) { a8 = 1.0 ; a4 = a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 0\" , Vec2 ( 20 , 220 ))) { a8 = a4 = 1.0 ; a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 1\" , Vec2 ( 20 , 260 ))) { a8 = a4 = a1 = 1.0 ; } } } \u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7 \u00b6 # include <Siv3D.hpp> // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u4f5c\u308b Image CreatePattern () { Image image ( 16 , 16 , Palette :: White ); Circle ( 0 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 8 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 16 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 4 , 12 , 2 ). paint ( image , Palette :: Black ); Circle ( 12 , 12 , 2 ). paint ( image , Palette :: Black ); return image ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PatternBrush { // \u30d1\u30bf\u30fc\u30f3\u306e UV \u306e\u30b9\u30b1\u30fc\u30eb Float2 uvScale ; Float2 _unused = {}; }; void Main () { constexpr Size sceneSize ( 600 , 600 ); // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture patternTexture ( CreatePattern (), TextureDesc :: Mipped ); // \u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"pattern_brush\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PatternBrush\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PatternBrush > cb ; cb -> uvScale = Float2 ( sceneSize ) / patternTexture . size (); // \u30da\u30f3\u3067\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture renderTexture ( sceneSize , Palette :: Black ); // \u30da\u30f3\u306e\u592a\u3055 double thickness = 20 ; while ( System :: Update ()) { if ( MouseL . pressed ()) { { ScopedRenderTarget2D rt ( renderTexture ); if ( MouseL . down ()) { Circle ( Cursor :: PosF (), thickness * 0.5 ). draw (); } else if ( MouseL . pressed () && ! Cursor :: Delta (). isZero ()) { Line ( Cursor :: PreviousPosF (), Cursor :: PosF ()) . draw ( LineStyle :: RoundCap , thickness ); } } Graphics2D :: Flush (); renderTexture . resolve (); } Rect ( sceneSize ). draw (); { // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , patternTexture ); // \u30d1\u30bf\u30fc\u30f3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b Graphics2D :: SetSamplerState ( 1 , SamplerState :: RepeatLinear ); { Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); renderTexture . draw (); } } // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u53f3\u4e0a\u306b\u8868\u793a patternTexture . draw ( 620 , 20 ); } } pattern_brush.hlsl Texture2D g_texture0 : register ( t0 ); Texture2D g_texture1 : register ( t1 ); SamplerState g_sampler0 : register ( s0 ); SamplerState g_sampler1 : register ( s1 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) cbuffer PatternBrush : register ( b1 ) { float2 g_uvScale ; } // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float alpha = g_texture0 . Sample ( g_sampler0 , input . uv ). r ; float4 texColor = g_texture1 . Sample ( g_sampler1 , input . uv * g_uvScale ); texColor . a = alpha ; return ( texColor * input . color ) + g_colorAdd ; } pattern_brush.frag #version 410 uniform sampler2D Texture0 ; uniform sampler2D Texture1 ; // PS_0 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // PS_1 layout ( std140 ) uniform PatternBrush { vec2 g_uvScale ; }; // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { float alpha = texture ( Texture0 , UV ). r ; vec4 texColor = texture ( Texture1 , UV * g_uvScale ); texColor . a = alpha ; FragColor = ( texColor * Color ) + g_colorAdd ; }","title":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe"},{"location":"ja-jp/sample/visual/#_1","text":"","title":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe"},{"location":"ja-jp/sample/visual/#_2","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } }","title":"\u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b"},{"location":"ja-jp/sample/visual/#_3","text":"# include <Siv3D.hpp> void DrawStickyNote ( const RectF & rect , const ColorF & noteColor ) { // \u5c11\u3057\u3060\u3051\u56de\u8ee2\u3055\u305b\u3066\u5f71\u3092\u63cf\u304f { Transformer2D t ( Mat3x2 :: Rotate ( 2 _deg , rect . pos )); rect . stretched ( - 2 , 1 , 1 , - 4 ). drawShadow ( Vec2 ( 0 , 0 ), 12 , 0 , ColorF ( 0.0 , 0.4 )); } rect . draw ( noteColor ); } void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.98 , 0.96 )); const Font font ( 36 , Typeface :: Bold ); while ( System :: Update ()) { for ( auto i : step ( 10 )) { const RectF rect ( 60 + i / 5 * 280 , 20 + i % 5 * 90 , 230 , 70 ); DrawStickyNote ( rect , HSV ( i * 36 , 0.46 , 1.0 )); font ( U \"Text\" ). draw ( rect . pos . movedBy ( 20 , 10 ), ColorF ( 0.1 , 0.95 )); } } }","title":"\u4ed8\u7b8b"},{"location":"ja-jp/sample/visual/#_4","text":"# include <Siv3D.hpp> void Main () { const std :: array < Texture , 3 > textures = { Texture ( Emoji ( U \"\ud83d\udcb9\" )), Texture ( Emoji ( U \"\ud83d\udcc5\" )), Texture ( Emoji ( U \"\ud83c\udfe1\" )), }; constexpr Size imageSize = Emoji :: ImageSize ; while ( System :: Update ()) { Rect ( 0 , 300 , 800 , 300 ). draw ( ColorF ( 0.2 , 0.3 , 0.4 )); for ( auto [ i , texture ] : Indexed ( textures )) { const Vec2 pos ( 140 + i * 200 , 220 ); texture . draw ( pos ); // \u53cd\u5c04\u3059\u308b\u30c6\u30af\u30b9\u30c1\u30e3 texture ( 0 , imageSize . y / 2 , imageSize . x , imageSize . y / 2 ). flipped () . draw ( pos . x , pos . y + imageSize . y , Arg :: top = AlphaF ( 0.8 ), Arg :: bottom = AlphaF ( 0.0 )); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u53cd\u5c04"},{"location":"ja-jp/sample/visual/#_5","text":"# include <Siv3D.hpp> // Glyph \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b void DrawText ( const DrawableText & fontText , const Vec2 & pos , const ColorF & color , double t , void f ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ), double characterdPerSec ) { Vec2 penPos = pos ; for ( const auto & glyph : fontText ) { if ( glyph . codePoint == U '\\n' ) { penPos . x = pos . x ; penPos . y += fontText . font . height (); continue ; } const double targetTime = glyph . index * characterdPerSec ; if ( targetTime > t ) { break ; } f ( penPos , glyph , color , t - targetTime ); penPos . x += glyph . xAdvance ; } } // \u6587\u5b57\u304c\u4e0a\u304b\u3089\u3086\u3063\u304f\u308a\u964d\u3063\u3066\u304f\u308b\u8868\u73fe void TextEffect1 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double y = EaseInQuad ( Saturate ( 1 - t / 0.3 )) * - 20.0 ; const double a = Min ( t / 0.3 , 1.0 ); glyph . texture . draw ( penPos + glyph . offset + Vec2 ( 0 , y ), ColorF ( color , a )); } // \u6587\u5b57\u304c\u52e2\u3044\u3088\u304f\u73fe\u308c\u308b\u8868\u73fe void TextEffect2 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double s = Min ( t / 0.1 , 1.0 ); const double a = Min ( t / 0.2 , 1.0 ); glyph . texture . scaled ( 3.0 - s * 2 ). draw ( penPos + glyph . offset , ColorF ( color , a )); } // \u843d\u3061\u3066\u304d\u305f\u6587\u5b57\u304c\u3057\u3070\u3089\u304f\u63fa\u308c\u308b\u8868\u73fe void TextEffect3 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double angle = Sin ( t * 1440 _deg ) * 25 _deg * Saturate ( 1.0 - t / 0.6 ); const double y = Saturate ( 1 - t / 0.05 ) * - 20.0 ; glyph . texture . rotated ( angle ). draw ( penPos + glyph . offset + Vec2 ( 0 , y ), color ); } void Main () { const Font font ( 32 , Typeface :: Bold ); const String text = U \"Lorem ipsum dolor sit amet, consectetur \\n \" U \"adipiscing elit, sed do eiusmod tempor \\n \" U \"incididunt ut labore et dolore magna aliqua.\" ; Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 620 , 520 ))) { stopwatch . restart (); } const double t = stopwatch . sF (); DrawText ( font ( text ), Vec2 ( 40 , 40 ), Palette :: Skyblue , t , TextEffect1 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 200 ), Palette :: Orange , t , TextEffect2 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 360 ), Palette :: Seagreen , t , TextEffect3 , 0.1 ); } }","title":"\u30c6\u30ad\u30b9\u30c8\u306e\u767b\u5834"},{"location":"ja-jp/sample/visual/#rendertexture","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 100 , Typeface :: Heavy ); const Texture emoji ( Emoji ( U \"\ud83d\udc27\" )); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture shadow ( 800 , 600 ); RenderTexture shadowInternal ( shadow . size ()); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 BlendState bs = BlendState :: Default ; bs . op = BlendOp :: Max ; bs . srcAlpha = Blend :: SrcAlpha ; bs . dstAlpha = Blend :: DestAlpha ; bs . opAlpha = BlendOp :: Max ; while ( System :: Update ()) { const RectF rect ( 100 + Periodic :: Sine0_1 ( 4 s ) * 400 , 200 , 200 ); const Line line ( 100 , 100 , 400 , 500 ); shadow . clear ( ColorF ( 1.0 , 0.0 )); { // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080 ScopedRenderTarget2D target ( shadow ); ScopedRenderStates2D blend ( bs ); font ( U \"Siv3D\" ). draw ( 400 , 60 ); rect . draw (); line . draw ( LineStyle :: RoundCap , 10 ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } // \u66f8\u304d\u8fbc\u307e\u308c\u305f\u5f71\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3057\u3066\u7070\u8272\u3067\u63cf\u753b Shader :: GaussianBlur ( shadow , shadowInternal , shadow ); const Vec2 shadowDirection = Circular ( 10 , Scene :: Time () * 50 _deg ); shadow . draw ( shadowDirection , ColorF ( 0.5 )); { // \u672c\u6765\u306e\u8272\u3067\u63cf\u753b\u3059\u308b font ( U \"Siv3D\" ). draw ( 400 , 60 , Palette :: Orange ); rect . draw ( Palette :: Seagreen ); line . draw ( LineStyle :: RoundCap , 10 , Palette :: White ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } } }","title":"RenderTexture \u3092\u4f7f\u3063\u3066\u56f3\u5f62\u3084\u6587\u5b57\u306e\u5f71\u3092\u63cf\u304f"},{"location":"ja-jp/sample/visual/#2d","text":"# include <Siv3D.hpp> void DrawScene () { Circle ( 680 , 40 , 20 ). draw (); Rect ( Arg :: center ( 680 , 110 ), 30 ). draw (); Triangle ( 680 , 180 , 40 ). draw (); Circle ( 740 , 40 , 20 ). draw ( HSV ( 0 )); Rect ( Arg :: center ( 740 , 110 ), 30 ). draw ( HSV ( 120 )); Triangle ( 740 , 180 , 40 ). draw ( HSV ( 240 )); Circle ( 50 , 200 , 300 ). drawFrame ( 4 ); Circle ( 550 , 450 , 200 ). drawFrame ( 4 ); for ( auto i : step ( 12 )) { const double angle = i * 30 _deg + Scene :: Time () * 5 _deg ; const Vec2 pos = OffsetCircular ( Scene :: Center (), 200 , angle ); Circle ( pos , 8 ). draw ( HSV ( i * 30 )); } } void Main () { constexpr Size sceneSize ( 800 , 600 ); RenderTexture gaussianA1 ( sceneSize ), gaussianB1 ( sceneSize ); RenderTexture gaussianA4 ( sceneSize / 4 ), gaussianB4 ( sceneSize / 4 ); RenderTexture gaussianA8 ( sceneSize / 8 ), gaussianB8 ( sceneSize / 8 ); double a8 = 0.0 , a4 = 0.0 , a1 = 0.0 ; while ( System :: Update ()) { // \u901a\u5e38\u306e\u30b7\u30fc\u30f3\u63cf\u753b DrawScene (); { // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u3046\u4e00\u5ea6\u30b7\u30fc\u30f3\u3092\u63cf\u304f gaussianA1 . clear ( ColorF ( 0.0 )); { ScopedRenderTarget2D target ( gaussianA1 ); ScopedRenderStates2D blend ( BlendState :: Additive ); DrawScene (); } // \u30aa\u30ea\u30b8\u30ca\u30eb\u30b5\u30a4\u30ba\u306e\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A1) // A1 \u3092 1/4 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A4) // A4 \u3092 1/2 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A8) Shader :: GaussianBlur ( gaussianA1 , gaussianB1 , gaussianA1 ); Shader :: Downsample ( gaussianA1 , gaussianA4 ); Shader :: GaussianBlur ( gaussianA4 , gaussianB4 , gaussianA4 ); Shader :: Downsample ( gaussianA4 , gaussianA8 ); Shader :: GaussianBlur ( gaussianA8 , gaussianB8 , gaussianA8 ); } { ScopedRenderStates2D blend ( BlendState :: Additive ); if ( a1 ) { gaussianA1 . resized ( sceneSize ). draw ( ColorF ( a1 )); } if ( a4 ) { gaussianA4 . resized ( sceneSize ). draw ( ColorF ( a4 )); } if ( a8 ) { gaussianA8 . resized ( sceneSize ). draw ( ColorF ( a8 )); } } SimpleGUI :: Slider ( U \"a8: {:.1f}\" _fmt ( a8 ), a8 , 0.0 , 4.0 , Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"a4: {:.1f}\" _fmt ( a4 ), a4 , 0.0 , 4.0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"a1: {:.1f}\" _fmt ( a1 ), a1 , 0.0 , 4.0 , Vec2 ( 20 , 100 )); if ( SimpleGUI :: Button ( U \"0, 0, 0\" , Vec2 ( 20 , 140 ))) { a1 = a4 = a8 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 0, 0\" , Vec2 ( 20 , 180 ))) { a8 = 1.0 ; a4 = a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 0\" , Vec2 ( 20 , 220 ))) { a8 = a4 = 1.0 ; a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 1\" , Vec2 ( 20 , 260 ))) { a8 = a4 = a1 = 1.0 ; } } }","title":"2D \u30e9\u30a4\u30c8\u30d6\u30eb\u30fc\u30e0"},{"location":"ja-jp/sample/visual/#_6","text":"# include <Siv3D.hpp> // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u4f5c\u308b Image CreatePattern () { Image image ( 16 , 16 , Palette :: White ); Circle ( 0 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 8 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 16 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 4 , 12 , 2 ). paint ( image , Palette :: Black ); Circle ( 12 , 12 , 2 ). paint ( image , Palette :: Black ); return image ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PatternBrush { // \u30d1\u30bf\u30fc\u30f3\u306e UV \u306e\u30b9\u30b1\u30fc\u30eb Float2 uvScale ; Float2 _unused = {}; }; void Main () { constexpr Size sceneSize ( 600 , 600 ); // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture patternTexture ( CreatePattern (), TextureDesc :: Mipped ); // \u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"pattern_brush\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PatternBrush\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PatternBrush > cb ; cb -> uvScale = Float2 ( sceneSize ) / patternTexture . size (); // \u30da\u30f3\u3067\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture renderTexture ( sceneSize , Palette :: Black ); // \u30da\u30f3\u306e\u592a\u3055 double thickness = 20 ; while ( System :: Update ()) { if ( MouseL . pressed ()) { { ScopedRenderTarget2D rt ( renderTexture ); if ( MouseL . down ()) { Circle ( Cursor :: PosF (), thickness * 0.5 ). draw (); } else if ( MouseL . pressed () && ! Cursor :: Delta (). isZero ()) { Line ( Cursor :: PreviousPosF (), Cursor :: PosF ()) . draw ( LineStyle :: RoundCap , thickness ); } } Graphics2D :: Flush (); renderTexture . resolve (); } Rect ( sceneSize ). draw (); { // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , patternTexture ); // \u30d1\u30bf\u30fc\u30f3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b Graphics2D :: SetSamplerState ( 1 , SamplerState :: RepeatLinear ); { Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); renderTexture . draw (); } } // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u53f3\u4e0a\u306b\u8868\u793a patternTexture . draw ( 620 , 20 ); } } pattern_brush.hlsl Texture2D g_texture0 : register ( t0 ); Texture2D g_texture1 : register ( t1 ); SamplerState g_sampler0 : register ( s0 ); SamplerState g_sampler1 : register ( s1 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) cbuffer PatternBrush : register ( b1 ) { float2 g_uvScale ; } // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float alpha = g_texture0 . Sample ( g_sampler0 , input . uv ). r ; float4 texColor = g_texture1 . Sample ( g_sampler1 , input . uv * g_uvScale ); texColor . a = alpha ; return ( texColor * input . color ) + g_colorAdd ; } pattern_brush.frag #version 410 uniform sampler2D Texture0 ; uniform sampler2D Texture1 ; // PS_0 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // PS_1 layout ( std140 ) uniform PatternBrush { vec2 g_uvScale ; }; // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { float alpha = texture ( Texture0 , UV ). r ; vec4 texColor = texture ( Texture1 , UV * g_uvScale ); texColor . a = alpha ; FragColor = ( texColor * Color ) + g_colorAdd ; }","title":"\u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7"},{"location":"ja-jp/sponsors/sponsors/","text":"\ud83d\udc97 Siv3D \u30b9\u30dd\u30f3\u30b5\u30fc \u00b6 \u7533\u3057\u8fbc\u307f / \u7279\u5178 \u00b6 https://github.com/sponsors/Reputeless Siv3D Slack \u306e\u30b9\u30dd\u30f3\u30b5\u30fc\u5c02\u7528\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u4ee5\u4e0b\u306e\u7279\u5178\uff09\u3078\u306e\u53c2\u52a0 \u6709\u6599\u30b5\u30f3\u30d7\u30eb\u3078\u306e\u7121\u6599\u30a2\u30af\u30bb\u30b9 \u65b0\u6a5f\u80fd\u306e\u65e9\u671f\u30a2\u30af\u30bb\u30b9 \u30b9\u30dd\u30f3\u30b5\u30fc\u30ea\u30b9\u30c8 \u00b6 sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara","title":"\ud83d\udc97\u30b9\u30dd\u30f3\u30b5\u30fc"},{"location":"ja-jp/sponsors/sponsors/#siv3d","text":"","title":"\ud83d\udc97 Siv3D \u30b9\u30dd\u30f3\u30b5\u30fc"},{"location":"ja-jp/sponsors/sponsors/#_1","text":"https://github.com/sponsors/Reputeless Siv3D Slack \u306e\u30b9\u30dd\u30f3\u30b5\u30fc\u5c02\u7528\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u4ee5\u4e0b\u306e\u7279\u5178\uff09\u3078\u306e\u53c2\u52a0 \u6709\u6599\u30b5\u30f3\u30d7\u30eb\u3078\u306e\u7121\u6599\u30a2\u30af\u30bb\u30b9 \u65b0\u6a5f\u80fd\u306e\u65e9\u671f\u30a2\u30af\u30bb\u30b9","title":"\u7533\u3057\u8fbc\u307f / \u7279\u5178"},{"location":"ja-jp/sponsors/sponsors/#_2","text":"sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara","title":"\u30b9\u30dd\u30f3\u30b5\u30fc\u30ea\u30b9\u30c8"},{"location":"ja-jp/store/store/","text":"\u30b7\u30e7\u30c3\u30d7 \u00b6 LINE \u30b9\u30bf\u30f3\u30d7 \u00b6 Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"Siv3D \u30b9\u30c8\u30a2"},{"location":"ja-jp/store/store/#_1","text":"","title":"\u30b7\u30e7\u30c3\u30d7"},{"location":"ja-jp/store/store/#line","text":"Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"LINE \u30b9\u30bf\u30f3\u30d7"},{"location":"ja-jp/support/support/","text":"\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066 \u00b6 \u30e1\u30fc\u30eb\u3084\u30c0\u30a4\u30ec\u30af\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8 (DM) \u306b\u3088\u308b\u500b\u5225\u30b5\u30dd\u30fc\u30c8\u306e\u4f9d\u983c\u306f reputeless \u2709 gmail . com \u307e\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\uff08\u6709\u511f\uff09\u3002 \u305d\u308c\u4ee5\u5916\u306e\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u624b\u6bb5\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3001\u554f\u984c\u304c\u767a\u751f\u3057\u305f \u00b6 Siv3D Slack BBS Twitter \u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u898b\u3064\u3051\u305f \u00b6 GitHub Issues Siv3D Slack Twitter \u65b0\u6a5f\u80fd\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8 \u00b6 GitHub Issues Siv3D Slack Twitter \u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u307b\u3057\u3044 \u00b6 OpenSiv3D \u5b9f\u88c5\u4f1a \u5408\u8a08 1000 \u884c\u672a\u6e80\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308c\u3070 Siv3D Slack \u3082\u53ef","title":"\u30b5\u30dd\u30fc\u30c8"},{"location":"ja-jp/support/support/#_1","text":"\u30e1\u30fc\u30eb\u3084\u30c0\u30a4\u30ec\u30af\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8 (DM) \u306b\u3088\u308b\u500b\u5225\u30b5\u30dd\u30fc\u30c8\u306e\u4f9d\u983c\u306f reputeless \u2709 gmail . com \u307e\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\uff08\u6709\u511f\uff09\u3002 \u305d\u308c\u4ee5\u5916\u306e\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u624b\u6bb5\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066"},{"location":"ja-jp/support/support/#_2","text":"Siv3D Slack BBS Twitter","title":"\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3001\u554f\u984c\u304c\u767a\u751f\u3057\u305f"},{"location":"ja-jp/support/support/#_3","text":"GitHub Issues Siv3D Slack Twitter","title":"\u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u898b\u3064\u3051\u305f"},{"location":"ja-jp/support/support/#_4","text":"GitHub Issues Siv3D Slack Twitter","title":"\u65b0\u6a5f\u80fd\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8"},{"location":"ja-jp/support/support/#_5","text":"OpenSiv3D \u5b9f\u88c5\u4f1a \u5408\u8a08 1000 \u884c\u672a\u6e80\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308c\u3070 Siv3D Slack \u3082\u53ef","title":"\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u307b\u3057\u3044"},{"location":"ja-jp/training/1-1/","text":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u5186\u3092\u914d\u7f6e\u3059\u308b \u00b6 \u30af\u30ea\u30c3\u30af\u3067\u753b\u9762\u4e0a\u306b\u5186\u3092\u914d\u7f6e\u3057\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u57fa\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u308b\u305f\u3073\u306b\u3001 Array < Circle > \u306b Circle \u578b\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002 Array < Circle > \u306e\u5404\u8981\u7d20\u306b\u306f\u7bc4\u56f2 for \u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Circle > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u3092\u8ffd\u52a0 circles << Circle ( Cursor :: Pos (), circleR ); } // \u914d\u5217\u5185\u306e\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { circle . draw ( circleColor ); } } } 2. \u5bb9\u91cf\u3092\u7bc0\u7d04 \u00b6 \u5186\u306e\u534a\u5f84\u304c\u5b9a\u6570\u306e\u5834\u5408\u3001 Circle \u3092\u683c\u7d0d\u3059\u308b\u4ee3\u308f\u308a\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3067\u3042\u308b Vec2 \u3092\u683c\u7d0d\u3059\u308b\u3060\u3051\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3053\u308c\u3067\u914d\u5217\u306e\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c 3 \u5206\u306e 2 \u306b\u306a\u308a\u307e\u3059 (1 \u8981\u7d20\u3042\u305f\u308a 24 \u30d0\u30a4\u30c8 \u2192 16 \u30d0\u30a4\u30c8)\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } } 3. \u30b7\u30fc\u30f3\u4e0a\u306e\u30af\u30ea\u30c3\u30af\u306b\u9650\u308b \u00b6 \u3053\u3053\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u79fb\u52d5\u3055\u305b\u3088\u3046\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3082\u5186\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u3001\u6761\u4ef6\u3092 if ( Scene :: Rect () . leftClicked ()) \u306b\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u9818\u57df\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306e\u307f\u3001\u5186\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } } 4. \u5186\u3054\u3068\u306b\u8272\u3092\u5909\u3048\u308b \u00b6 Vec2 \u3084 Circle \u578b\u306f\u8272\u306e\u60c5\u5831\u3092\u6301\u3066\u306a\u3044\u306e\u3067\u3001\u4f4d\u7f6e\u306e\u60c5\u5831\u3068\u5408\u308f\u305b\u3066 ColorF \u3082\u6301\u3064\u65b0\u3057\u3044\u69cb\u9020\u4f53 CircleItem \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; void Main () { // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > circleItems ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 circleItems . emplace_back ( Cursor :: Pos (), RandomColorF ()); } // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : circleItems ) { circleItem . draw (); } } } 5. Main \u3092\u77ed\u304f \u00b6 Main () \u95a2\u6570\u5185\u306e\u8a18\u8ff0\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u7ba1\u7406\u7528\u306e\u30af\u30e9\u30b9 CircleItemManager \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); } // \u3059\u3079\u3066\u306e CircleItem \u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } } 6. \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u3051\u308b \u00b6 \u5186\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; // \u30a8\u30d5\u30a7\u30af\u30c8 Effect m_effect ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 m_effect . add ([ center ]( double t ) { const double e = EaseOutExpo ( t ); Circle ( center , CircleItem :: CircleR + e * 30 ) . drawFrame ( 0 , 4 * e , ColorF ( 1.0 , ( 1 - e ))); return t < 1.0 ; }); } // \u3059\u3079\u3066\u306e CircleItem \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u30fb\u63cf\u753b m_effect . update (); // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } }","title":"\u5186\u3092\u914d\u7f6e\u3059\u308b"},{"location":"ja-jp/training/1-1/#_1","text":"\u30af\u30ea\u30c3\u30af\u3067\u753b\u9762\u4e0a\u306b\u5186\u3092\u914d\u7f6e\u3057\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u5186\u3092\u914d\u7f6e\u3059\u308b"},{"location":"ja-jp/training/1-1/#1","text":"\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u308b\u305f\u3073\u306b\u3001 Array < Circle > \u306b Circle \u578b\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002 Array < Circle > \u306e\u5404\u8981\u7d20\u306b\u306f\u7bc4\u56f2 for \u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Circle > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u3092\u8ffd\u52a0 circles << Circle ( Cursor :: Pos (), circleR ); } // \u914d\u5217\u5185\u306e\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { circle . draw ( circleColor ); } } }","title":"1. \u57fa\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/training/1-1/#2","text":"\u5186\u306e\u534a\u5f84\u304c\u5b9a\u6570\u306e\u5834\u5408\u3001 Circle \u3092\u683c\u7d0d\u3059\u308b\u4ee3\u308f\u308a\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3067\u3042\u308b Vec2 \u3092\u683c\u7d0d\u3059\u308b\u3060\u3051\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3053\u308c\u3067\u914d\u5217\u306e\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c 3 \u5206\u306e 2 \u306b\u306a\u308a\u307e\u3059 (1 \u8981\u7d20\u3042\u305f\u308a 24 \u30d0\u30a4\u30c8 \u2192 16 \u30d0\u30a4\u30c8)\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } }","title":"2. \u5bb9\u91cf\u3092\u7bc0\u7d04"},{"location":"ja-jp/training/1-1/#3","text":"\u3053\u3053\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u79fb\u52d5\u3055\u305b\u3088\u3046\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3082\u5186\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u3001\u6761\u4ef6\u3092 if ( Scene :: Rect () . leftClicked ()) \u306b\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u9818\u57df\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306e\u307f\u3001\u5186\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } }","title":"3. \u30b7\u30fc\u30f3\u4e0a\u306e\u30af\u30ea\u30c3\u30af\u306b\u9650\u308b"},{"location":"ja-jp/training/1-1/#4","text":"Vec2 \u3084 Circle \u578b\u306f\u8272\u306e\u60c5\u5831\u3092\u6301\u3066\u306a\u3044\u306e\u3067\u3001\u4f4d\u7f6e\u306e\u60c5\u5831\u3068\u5408\u308f\u305b\u3066 ColorF \u3082\u6301\u3064\u65b0\u3057\u3044\u69cb\u9020\u4f53 CircleItem \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; void Main () { // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > circleItems ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 circleItems . emplace_back ( Cursor :: Pos (), RandomColorF ()); } // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : circleItems ) { circleItem . draw (); } } }","title":"4. \u5186\u3054\u3068\u306b\u8272\u3092\u5909\u3048\u308b"},{"location":"ja-jp/training/1-1/#5-main","text":"Main () \u95a2\u6570\u5185\u306e\u8a18\u8ff0\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u7ba1\u7406\u7528\u306e\u30af\u30e9\u30b9 CircleItemManager \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); } // \u3059\u3079\u3066\u306e CircleItem \u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } }","title":"5. Main \u3092\u77ed\u304f"},{"location":"ja-jp/training/1-1/#6","text":"\u5186\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; // \u30a8\u30d5\u30a7\u30af\u30c8 Effect m_effect ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 m_effect . add ([ center ]( double t ) { const double e = EaseOutExpo ( t ); Circle ( center , CircleItem :: CircleR + e * 30 ) . drawFrame ( 0 , 4 * e , ColorF ( 1.0 , ( 1 - e ))); return t < 1.0 ; }); } // \u3059\u3079\u3066\u306e CircleItem \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u30fb\u63cf\u753b m_effect . update (); // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } }","title":"6. \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/training/2-1/","text":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u4e09\u76ee\u4e26\u3079 \u00b6 2 \u4eba\u3067\u904a\u3076\u4e09\u76ee\u4e26\u3079\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u683c\u5b50\u3092\u8868\u793a\u3059\u308b \u00b6 # include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } } 2. \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3057\u305f\u30bb\u30eb\u3092\u5f37\u8abf\u8868\u793a \u00b6 # include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } } 3. \u3007 \u3068 \u00d7 \u3092\u8868\u793a \u00b6 \u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30de\u30fc\u30af\u3092 Grid < int32 > \u3067\u7ba1\u7406\u3057\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30bb\u30eb\u306f\u30de\u30fc\u30af\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; GameBoard () { // \u8868\u793a\u30c6\u30b9\u30c8\u7528\u306b\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [{ 0 , 0 }] = O_Mark ; m_grid [{ 1 , 0 }] = X_Mark ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } } 4. \u30af\u30ea\u30c3\u30af\u3067\u30de\u30fc\u30af\u3092\u7f6e\u3051\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 \u7a7a\u767d\u306e\u30bb\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3001\u4ea4\u4e92\u306b \u3007 \u3068 \u00d7 \u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3081\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . update (); gameBoard . draw (); } } 5. \u30b2\u30fc\u30e0\u76e4\u3092\u79fb\u52d5\u3055\u305b\u308b \u00b6 Transofrmer2D \u3067\u30012D \u63cf\u753b\u5ea7\u6a19\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u30b7\u30d5\u30c8\u3057\u3001\u30b2\u30fc\u30e0\u306e\u76e4\u9762\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } } 6. \u30b2\u30fc\u30e0\u7d42\u4e86\u5224\u5b9a \u00b6 \u6b8b\u308a\u306e\u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u3089\u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3057\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } } 7. \u30b2\u30fc\u30e0\u7d42\u4e86\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3059\u308b\u3068\u300cReset\u300d\u30dc\u30bf\u30f3\u304c\u73fe\u308c\u3001\u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // 3 \u3064\u306e\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8 void reset () { m_currentMark = O_Mark ; m_grid . fill ( 0 ); m_lines . clear (); m_gameOver = false ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u305f\u304b\u3092\u8fd4\u3059 bool isGameOver () const { return m_gameOver ; } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u3066\u3044\u305f\u3089 if ( gameBoard . isGameOver ()) { // Reset \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u30ea\u30bb\u30c3\u30c8 if ( SimpleGUI :: ButtonAt ( U \"Reset\" , Vec2 ( 400 , 520 ))) { gameBoard . reset (); } } } }","title":"\u4e09\u76ee\u4e26\u3079"},{"location":"ja-jp/training/2-1/#_1","text":"2 \u4eba\u3067\u904a\u3076\u4e09\u76ee\u4e26\u3079\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u4e09\u76ee\u4e26\u3079"},{"location":"ja-jp/training/2-1/#1","text":"# include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } }","title":"1. \u683c\u5b50\u3092\u8868\u793a\u3059\u308b"},{"location":"ja-jp/training/2-1/#2","text":"# include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } }","title":"2. \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3057\u305f\u30bb\u30eb\u3092\u5f37\u8abf\u8868\u793a"},{"location":"ja-jp/training/2-1/#3","text":"\u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30de\u30fc\u30af\u3092 Grid < int32 > \u3067\u7ba1\u7406\u3057\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30bb\u30eb\u306f\u30de\u30fc\u30af\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; GameBoard () { // \u8868\u793a\u30c6\u30b9\u30c8\u7528\u306b\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [{ 0 , 0 }] = O_Mark ; m_grid [{ 1 , 0 }] = X_Mark ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } }","title":"3. \u3007 \u3068 \u00d7 \u3092\u8868\u793a"},{"location":"ja-jp/training/2-1/#4","text":"\u7a7a\u767d\u306e\u30bb\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3001\u4ea4\u4e92\u306b \u3007 \u3068 \u00d7 \u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3081\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . update (); gameBoard . draw (); } }","title":"4. \u30af\u30ea\u30c3\u30af\u3067\u30de\u30fc\u30af\u3092\u7f6e\u3051\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"ja-jp/training/2-1/#5","text":"Transofrmer2D \u3067\u30012D \u63cf\u753b\u5ea7\u6a19\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u30b7\u30d5\u30c8\u3057\u3001\u30b2\u30fc\u30e0\u306e\u76e4\u9762\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } }","title":"5. \u30b2\u30fc\u30e0\u76e4\u3092\u79fb\u52d5\u3055\u305b\u308b"},{"location":"ja-jp/training/2-1/#6","text":"\u6b8b\u308a\u306e\u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u3089\u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3057\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } }","title":"6. \u30b2\u30fc\u30e0\u7d42\u4e86\u5224\u5b9a"},{"location":"ja-jp/training/2-1/#7","text":"\u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3059\u308b\u3068\u300cReset\u300d\u30dc\u30bf\u30f3\u304c\u73fe\u308c\u3001\u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // 3 \u3064\u306e\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8 void reset () { m_currentMark = O_Mark ; m_grid . fill ( 0 ); m_lines . clear (); m_gameOver = false ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u305f\u304b\u3092\u8fd4\u3059 bool isGameOver () const { return m_gameOver ; } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u3066\u3044\u305f\u3089 if ( gameBoard . isGameOver ()) { // Reset \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u30ea\u30bb\u30c3\u30c8 if ( SimpleGUI :: ButtonAt ( U \"Reset\" , Vec2 ( 400 , 520 ))) { gameBoard . reset (); } } } }","title":"7. \u30b2\u30fc\u30e0\u7d42\u4e86\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"ja-jp/tutorial/2d-intersection/","text":"4. \u3042\u305f\u308a\u5224\u5b9a \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc \u00b6 \u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } } 4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af \u00b6 \u30af\u30ea\u30c3\u30af \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } } \u62bc\u3055\u308c\u3066\u3044\u308b \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } } 4.3 \u56f3\u5f62\u306e\u4ea4\u5dee \u00b6 2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080 \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } 4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9 \u00b6 \u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4. \u3042\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/tutorial/2d-intersection/#4","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"4. \u3042\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/tutorial/2d-intersection/#41","text":"\u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc"},{"location":"ja-jp/tutorial/2d-intersection/#42","text":"","title":"4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af"},{"location":"ja-jp/tutorial/2d-intersection/#_1","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } }","title":"\u30af\u30ea\u30c3\u30af"},{"location":"ja-jp/tutorial/2d-intersection/#_2","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"\u62bc\u3055\u308c\u3066\u3044\u308b"},{"location":"ja-jp/tutorial/2d-intersection/#43","text":"2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002","title":"4.3 \u56f3\u5f62\u306e\u4ea4\u5dee"},{"location":"ja-jp/tutorial/2d-intersection/#44","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } }","title":"4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080"},{"location":"ja-jp/tutorial/2d-intersection/#45","text":"\u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002","title":"4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9"},{"location":"ja-jp/tutorial/2d-intersection/#46","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb"},{"location":"ja-jp/tutorial/2d-renderstates/","text":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u30012D \u63cf\u753b\u306e\u8a2d\u5b9a\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3001\u8868\u73fe\u306e\u5e45\u3092\u5e83\u3052\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 15.1 \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9 \u00b6 ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b BlendState :: Additive \u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u753b\u50cf\u304c\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u306f\u3001\u80cc\u666f\u8272\u306b RGB \u6210\u5206\u3092\u52a0\u7b97\u3059\u308b\u3088\u3046\u306b\u63cf\u753b\u3055\u308c\u308b\u306e\u3067\u3001\u91cd\u306d\u3066\u63cf\u753b\u3057\u305f\u90e8\u5206\u304c\u660e\u308b\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; for ( int32 i = 0 ; i < 400 ; ++ i ) { points << RandomVec2 ( Scene :: Rect ()); } bool enabled = true ; while ( System :: Update ()) { if ( enabled ) { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u6709\u52b9 const ScopedRenderStates2D state ( BlendState :: Additive ); for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } else { // \u901a\u5e38\u306e\u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9 for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } SimpleGUI :: CheckBox ( enabled , U \"AdditiveBlend\" , Vec2 ( 20 , 20 )); } } 15.2 \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97 \u00b6 \u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorAdd2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u52a0\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u52a0\u7b97\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 0.0 , 0.0 , 0.0 , 0.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97 const ScopedColorAdd2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } } 15.3 \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97 \u00b6 \u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorMul2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u4e57\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002 \u306a\u304a\u3001 .draw () \u306b\u8272\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u500b\u5225\u306b\u4e57\u7b97\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff08\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 5.10 \u53c2\u7167\uff09\u3002 ScopedColorMul2D \u306f\u305d\u306e\u8a2d\u5b9a\u3092\u4e00\u62ec\u3057\u3066\u9069\u7528\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 1.0 , 1.0 , 1.0 , 1.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97 const ScopedColorMul2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } } 15.4 \u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30d5\u30a3\u30eb\u30bf \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b\u969b\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u306b\u3088\u3063\u3066\u8272\u304c\u6ed1\u3089\u304b\u306b\u88dc\u9593\u3055\u308c\u307e\u3059\u3002\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3063\u305f\u307e\u307e\u62e1\u5927\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: ClampNearest \u3092 ScopedRenderStates2D \u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); bool linear = true ; double scale = 1.0 ; while ( System :: Update ()) { if ( linear ) { // \u901a\u5e38\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30e2\u30fc\u30c9 cat . scaled ( scale ). drawAt ( Scene :: Center ()); } else { // \u7dda\u5f62\u88dc\u9593\u306a\u3057 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( scale ). drawAt ( Scene :: Center ()); } SimpleGUI :: Slider ( scale , 0.1 , 8.0 , Vec2 ( 20 , 20 ), 200 ); SimpleGUI :: CheckBox ( linear , U \"Linear\" , Vec2 ( 20 , 60 )); } } 15.5 \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8 \u00b6 ScopedViewport2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30b7\u30fc\u30f3\u5185\u306b\u4eee\u60f3\u306e\u30b7\u30fc\u30f3\u3092\u4f5c\u308a\u3001\u65b0\u3057\u3044\u9577\u65b9\u5f62\u306e\u63cf\u753b\u9818\u57df\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u63cf\u753b\u6642\u306b\u306f\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u304c (0, 0) \u306e\u63cf\u753b\u5ea7\u6a19\u306b\u306a\u308a\u3001\u9577\u65b9\u5f62\u306e\u7bc4\u56f2\u5916\u306b\u306f\u307f\u51fa\u305f\u3082\u306e\u306f\u63cf\u753b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306f\u63cf\u753b\u306e\u5ea7\u6a19\u306b\u3057\u304b\u5f71\u97ff\u3092\u53ca\u307c\u3055\u306a\u3044\u306e\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u540c\u69d8\u306b\u79fb\u52d5\u3055\u305b\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u5f8c\u8ff0\u3059\u308b Transformer2D \u3068\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); } } } 15.6 \u5ea7\u6a19\u5909\u63db \u00b6 Transformer2D \u306f\u3001\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u3001\u4e00\u62ec\u3067\u56de\u8ee2\u30fb\u62e1\u5927\u7e2e\u5c0f\u3001\u5ea7\u6a19\u79fb\u52d5\u306a\u3069\u306e\u5ea7\u6a19\u5909\u63db\u3092\u9069\u7528\u3067\u304d\u308b\u3001\u975e\u5e38\u306b\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3059\u3002 \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092 Mat3x2 \u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3057\u3001 Transformer2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u305d\u306e\u884c\u5217\u306b\u3088\u308b\u5ea7\u6a19\u5909\u63db\u304c\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); constexpr Circle circle ( 200 , 400 , 60 ); size_t index = 0 ; while ( System :: Update ()) { // \u4f55\u3082\u3057\u306a\u3044\u884c\u5217 Mat3x2 mat = Mat3x2 :: Identity (); if ( index == 0 ) { } else if ( index == 1 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u57fa\u6e96\u306b 1.5 \u500d\u62e1\u5927 mat = Mat3x2 :: Scale ( 1.5 , Scene :: Center ()); } else if ( index == 2 ) { // (50, 50) \u79fb\u52d5 mat = Mat3x2 :: Translate ( 50 , 50 ); } else if ( index == 3 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066 30\u00b0 \u56de\u8ee2 mat = Mat3x2 :: Rotate ( 30 _deg , Scene :: Center ()); } else if ( index == 4 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066\u5f90\u3005\u306b\u56de\u8ee2\u3057\u306a\u304c\u3089\u62e1\u5927 mat = Mat3x2 :: Rotate ( Scene :: Time () * 5 _deg , Scene :: Center ()) . scaled ( 1.0 + Scene :: Time () * 0.03 , Scene :: Center ()); } { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u63cf\u753b\u3068\u540c\u69d8\u306b\u5909\u63db constexpr bool transformCursorPos = true ; // \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u9069\u7528 const Transformer2D t ( mat , transformCursorPos ); textureWindmill . draw ( 0 , 0 ); textureSiv3DKun . draw ( 360 , 100 ); circle . draw ( circle . mouseOver () ? Palette :: Red : Palette :: Yellow ); } SimpleGUI :: RadioButtons ( index , { U \"Identity\" , U \"Scale\" , U \"Translate\" , U \"Rotate\" , U \"Roatate * Scale\" }, Vec2 ( 600 , 20 )); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u307f\u5ea7\u6a19\u5909\u63db \u00b6 \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u305f\u969b\u306a\u3069\u3001\u63cf\u753b\u306e\u5ea7\u6a19\u5909\u63db\u306f\u4e0d\u8981\u3067\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u5909\u63db\u3060\u3051\u884c\u3044\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u3001 Transformer2D \u306e\u7b2c 1 \u5f15\u6570\u306b Mat3x2 : Identity () \u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u7528\u306e\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { ClearPrint (); if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); // \u63cf\u753b\u306f\u5ea7\u6a19\u5909\u63db\u305b\u305a\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3060\u3051\u5909\u63db const Transformer2D transform ( Mat3x2 :: Identity (), Mat3x2 :: Translate ( viewportRect . pos )); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u304c\u5909\u63db\u3055\u308c\u3066\u3044\u308b Print << Cursor :: PosF (); Circle ( Cursor :: PosF (), 20 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); } } } Transformer2D \u306e\u52b9\u679c\u306e\u4e57\u7b97 \u00b6 Transformer2D \u306e\u52b9\u679c\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u65b0\u3057\u3044 Transformer2D \u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u5ea7\u6a19\u5909\u63db\u306e\u52b9\u679c\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u91cd\u306d\u304c\u3051\u306b\u3088\u3063\u3066\u8907\u96d1\u306a\u52d5\u304d\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double t = Scene :: Time () * - 30 _deg ; const Transformer2D t0 ( Mat3x2 :: Translate ( Scene :: Center ())); Circle ( 0 , 0 , 40 ). draw ( Palette :: Orange ); Circle ( 0 , 0 , 160 ). drawFrame (); const Transformer2D t1 ( Mat3x2 :: Translate ( 160 , 0 ). rotated ( t )); Circle ( 0 , 0 , 20 ). draw ( Palette :: Skyblue ); Circle ( 0 , 0 , 40 ). drawFrame (); const Transformer2D t2 ( Mat3x2 :: Translate ( 40 , 0 ). rotated ( t * 4 )); Circle ( 0 , 0 , 10 ). draw ( Palette :: White ); } } 15.7 2D \u30ab\u30e1\u30e9 \u00b6 Camera2D \u3092\u4f7f\u3046\u3068\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u305f\u76f4\u611f\u7684\u306a\u64cd\u4f5c\u3067 Transformer2D \u3092\u4f5c\u6210\u3001\u66f4\u65b0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Camera2D :: update () \u3067\u306f W/A/S/D \u30ad\u30fc\u3067\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52d5\u3001\u2191/\u2193 \u30ad\u30fc\u3067\u62e1\u5927\u7e2e\u5c0f\u3001\u30de\u30a6\u30b9\u53f3\u30af\u30ea\u30c3\u30af\u3067\u81ea\u7531\u79fb\u52d5\u3001\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u62e1\u5927\u7e2e\u5c0f\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u30ad\u30fc\u64cd\u4f5c\u3092\u7121\u52b9\u306b\u3057\u305f\u3044\u5834\u5408\u306f Camera2D \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Camera2DParameters :: MouseOnly () \u3092\u6e21\u3057\u307e\u3059\u3002\u30ab\u30e1\u30e9\u306e\u6319\u52d5\u306f Camera2DParameters \u306b\u3088\u3063\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Camera2D :: draw () \u3067\u306f\u30de\u30a6\u30b9\u3067\u306e\u30ab\u30e1\u30e9\u64cd\u4f5c\u3092\u88dc\u52a9\u3059\u308b\u77e2\u5370 UI \u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 , 0.8 , 0.7 )); const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // 2D \u30ab\u30e1\u30e9 // \u4e2d\u5fc3\u304c (0, 0), \u62e1\u5927\u7387 1.0 \u306b\u306a\u308b\u3088\u3046\u306a\u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 1.0 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); for ( int32 i = 0 ; i < 8 ; ++ i ) { Circle ( 0 , 0 , 50 + i * 50 ). drawFrame ( 2 ); } cat . drawAt ( 0 , 0 ); Shape2D :: Star ( 50 , Vec2 ( 200 , 200 )). draw ( Palette :: Yellow ); } if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // 2D \u30ab\u30e1\u30e9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 camera . setCenter ( Vec2 ( 0 , 0 )); camera . setTargetCenter ( Vec2 ( 0 , 0 )); camera . setScale ( 1.0 ); camera . setTargetScale ( 1.0 ); } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } 15.8 \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u30e2\u30fc\u30c9\u3067\u63cf\u753b \u00b6 ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b RasterizerState :: WireframeCullNone \u3092\u6e21\u3059\u3068\u3001\u56f3\u5f62\u3084\u753b\u50cf\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306e\u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u304c\u63cf\u753b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u8868\u793a\u30e2\u30fc\u30c9\u306b const ScopedRenderStates2D rasterizer ( RasterizerState :: WireframeCullNone ); textureWindmill . draw ( 20 , 20 ); Circle ( Scene :: Center (), 100 ). draw (); Shape2D :: Star ( 100 , Vec2 ( 150 , 400 )). draw ( Palette :: Yellow ); } } 15.9 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u304f\u308a\u8fd4\u3057 \u00b6 ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u6642\u306b UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u306e\u51e6\u7406\u306e\u65b9\u6cd5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Texture :: mapped () \u306b\u3088\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u3060\u3051\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3088\u3046\u306a TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3092\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: RepeatLinear \u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067 .draw () \u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u304c\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture tree ( Emoji ( U \"\ud83c\udf32\" )); while ( System :: Update ()) { // UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u3001\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0 const ScopedRenderStates2D rasterizer ( SamplerState :: RepeatLinear ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3074\u3063\u305f\u308a\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u63cf\u753b tree . mapped ( Scene :: Size ()). draw (); } } 15.10 \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u00b6 ScopedRenderStates2D \u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b BlendState , SamplerState , RasterizerState \u306e 3 \u3064\u3092\u4e00\u5ea6\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 BlendState , SamplerState , RasterizerState \u306f\u3001\u3053\u306e\u7ae0\u3067\u7d39\u4ecb\u3057\u305f\u4ee5\u5916\u306b\u3082\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3061\u3001\u69d8\u3005\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u53ef\u80fd\u3067\u3059\u30022D \u63cf\u753b\u306b\u304a\u3051\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f BlendState :: Default , SamplerState :: Default2D , RasterizerState :: Default2D \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Scoped\uff5e \u306e\u306f\u305f\u3089\u304d \u00b6 Scoped \uff5e \u7cfb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084 Transformer2D \u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u4f55\u3082\u50cd\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u81ea\u8eab\u304c\u7834\u68c4\u3055\u308c\u308b\u3068\u304d\uff08\u30b9\u30b3\u30fc\u30d7\u304c\u7d42\u4e86\u3059\u308b\u3068\u304d\uff09\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6700\u521d\u306e\u72b6\u614b\u306b\u623b\u3059\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { { // \u7dda\u5f62\u88dc\u9593\u3092\u7121\u52b9\u306b\u3059\u308b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6709\u52b9\u5316 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( 4 ). drawAt ( 200 , 300 ); } // \u3053\u3053\u3067 state \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u304c\u521d\u671f\u72b6\u614b\u306b cat . scaled ( 4 ). drawAt ( 600 , 300 ); } }","title":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8"},{"location":"ja-jp/tutorial/2d-renderstates/#15-2d","text":"\u3053\u306e\u7ae0\u3067\u306f\u30012D \u63cf\u753b\u306e\u8a2d\u5b9a\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3001\u8868\u73fe\u306e\u5e45\u3092\u5e83\u3052\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8"},{"location":"ja-jp/tutorial/2d-renderstates/#151","text":"ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b BlendState :: Additive \u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u753b\u50cf\u304c\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u306f\u3001\u80cc\u666f\u8272\u306b RGB \u6210\u5206\u3092\u52a0\u7b97\u3059\u308b\u3088\u3046\u306b\u63cf\u753b\u3055\u308c\u308b\u306e\u3067\u3001\u91cd\u306d\u3066\u63cf\u753b\u3057\u305f\u90e8\u5206\u304c\u660e\u308b\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; for ( int32 i = 0 ; i < 400 ; ++ i ) { points << RandomVec2 ( Scene :: Rect ()); } bool enabled = true ; while ( System :: Update ()) { if ( enabled ) { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u6709\u52b9 const ScopedRenderStates2D state ( BlendState :: Additive ); for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } else { // \u901a\u5e38\u306e\u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9 for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } SimpleGUI :: CheckBox ( enabled , U \"AdditiveBlend\" , Vec2 ( 20 , 20 )); } }","title":"15.1 \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9"},{"location":"ja-jp/tutorial/2d-renderstates/#152","text":"\u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorAdd2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u52a0\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u52a0\u7b97\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 0.0 , 0.0 , 0.0 , 0.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97 const ScopedColorAdd2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } }","title":"15.2 \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97"},{"location":"ja-jp/tutorial/2d-renderstates/#153","text":"\u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorMul2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u4e57\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002 \u306a\u304a\u3001 .draw () \u306b\u8272\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u500b\u5225\u306b\u4e57\u7b97\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff08\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 5.10 \u53c2\u7167\uff09\u3002 ScopedColorMul2D \u306f\u305d\u306e\u8a2d\u5b9a\u3092\u4e00\u62ec\u3057\u3066\u9069\u7528\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 1.0 , 1.0 , 1.0 , 1.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97 const ScopedColorMul2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } }","title":"15.3 \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97"},{"location":"ja-jp/tutorial/2d-renderstates/#154","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b\u969b\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u306b\u3088\u3063\u3066\u8272\u304c\u6ed1\u3089\u304b\u306b\u88dc\u9593\u3055\u308c\u307e\u3059\u3002\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3063\u305f\u307e\u307e\u62e1\u5927\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: ClampNearest \u3092 ScopedRenderStates2D \u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); bool linear = true ; double scale = 1.0 ; while ( System :: Update ()) { if ( linear ) { // \u901a\u5e38\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30e2\u30fc\u30c9 cat . scaled ( scale ). drawAt ( Scene :: Center ()); } else { // \u7dda\u5f62\u88dc\u9593\u306a\u3057 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( scale ). drawAt ( Scene :: Center ()); } SimpleGUI :: Slider ( scale , 0.1 , 8.0 , Vec2 ( 20 , 20 ), 200 ); SimpleGUI :: CheckBox ( linear , U \"Linear\" , Vec2 ( 20 , 60 )); } }","title":"15.4 \u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30d5\u30a3\u30eb\u30bf"},{"location":"ja-jp/tutorial/2d-renderstates/#155","text":"ScopedViewport2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30b7\u30fc\u30f3\u5185\u306b\u4eee\u60f3\u306e\u30b7\u30fc\u30f3\u3092\u4f5c\u308a\u3001\u65b0\u3057\u3044\u9577\u65b9\u5f62\u306e\u63cf\u753b\u9818\u57df\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u63cf\u753b\u6642\u306b\u306f\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u304c (0, 0) \u306e\u63cf\u753b\u5ea7\u6a19\u306b\u306a\u308a\u3001\u9577\u65b9\u5f62\u306e\u7bc4\u56f2\u5916\u306b\u306f\u307f\u51fa\u305f\u3082\u306e\u306f\u63cf\u753b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306f\u63cf\u753b\u306e\u5ea7\u6a19\u306b\u3057\u304b\u5f71\u97ff\u3092\u53ca\u307c\u3055\u306a\u3044\u306e\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u540c\u69d8\u306b\u79fb\u52d5\u3055\u305b\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u5f8c\u8ff0\u3059\u308b Transformer2D \u3068\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); } } }","title":"15.5 \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8"},{"location":"ja-jp/tutorial/2d-renderstates/#156","text":"Transformer2D \u306f\u3001\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u3001\u4e00\u62ec\u3067\u56de\u8ee2\u30fb\u62e1\u5927\u7e2e\u5c0f\u3001\u5ea7\u6a19\u79fb\u52d5\u306a\u3069\u306e\u5ea7\u6a19\u5909\u63db\u3092\u9069\u7528\u3067\u304d\u308b\u3001\u975e\u5e38\u306b\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3059\u3002 \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092 Mat3x2 \u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3057\u3001 Transformer2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u305d\u306e\u884c\u5217\u306b\u3088\u308b\u5ea7\u6a19\u5909\u63db\u304c\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); constexpr Circle circle ( 200 , 400 , 60 ); size_t index = 0 ; while ( System :: Update ()) { // \u4f55\u3082\u3057\u306a\u3044\u884c\u5217 Mat3x2 mat = Mat3x2 :: Identity (); if ( index == 0 ) { } else if ( index == 1 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u57fa\u6e96\u306b 1.5 \u500d\u62e1\u5927 mat = Mat3x2 :: Scale ( 1.5 , Scene :: Center ()); } else if ( index == 2 ) { // (50, 50) \u79fb\u52d5 mat = Mat3x2 :: Translate ( 50 , 50 ); } else if ( index == 3 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066 30\u00b0 \u56de\u8ee2 mat = Mat3x2 :: Rotate ( 30 _deg , Scene :: Center ()); } else if ( index == 4 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066\u5f90\u3005\u306b\u56de\u8ee2\u3057\u306a\u304c\u3089\u62e1\u5927 mat = Mat3x2 :: Rotate ( Scene :: Time () * 5 _deg , Scene :: Center ()) . scaled ( 1.0 + Scene :: Time () * 0.03 , Scene :: Center ()); } { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u63cf\u753b\u3068\u540c\u69d8\u306b\u5909\u63db constexpr bool transformCursorPos = true ; // \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u9069\u7528 const Transformer2D t ( mat , transformCursorPos ); textureWindmill . draw ( 0 , 0 ); textureSiv3DKun . draw ( 360 , 100 ); circle . draw ( circle . mouseOver () ? Palette :: Red : Palette :: Yellow ); } SimpleGUI :: RadioButtons ( index , { U \"Identity\" , U \"Scale\" , U \"Translate\" , U \"Rotate\" , U \"Roatate * Scale\" }, Vec2 ( 600 , 20 )); } }","title":"15.6 \u5ea7\u6a19\u5909\u63db"},{"location":"ja-jp/tutorial/2d-renderstates/#_1","text":"\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u305f\u969b\u306a\u3069\u3001\u63cf\u753b\u306e\u5ea7\u6a19\u5909\u63db\u306f\u4e0d\u8981\u3067\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u5909\u63db\u3060\u3051\u884c\u3044\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u3001 Transformer2D \u306e\u7b2c 1 \u5f15\u6570\u306b Mat3x2 : Identity () \u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u7528\u306e\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { ClearPrint (); if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); // \u63cf\u753b\u306f\u5ea7\u6a19\u5909\u63db\u305b\u305a\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3060\u3051\u5909\u63db const Transformer2D transform ( Mat3x2 :: Identity (), Mat3x2 :: Translate ( viewportRect . pos )); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u304c\u5909\u63db\u3055\u308c\u3066\u3044\u308b Print << Cursor :: PosF (); Circle ( Cursor :: PosF (), 20 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); } } }","title":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u307f\u5ea7\u6a19\u5909\u63db"},{"location":"ja-jp/tutorial/2d-renderstates/#transformer2d","text":"Transformer2D \u306e\u52b9\u679c\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u65b0\u3057\u3044 Transformer2D \u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u5ea7\u6a19\u5909\u63db\u306e\u52b9\u679c\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u91cd\u306d\u304c\u3051\u306b\u3088\u3063\u3066\u8907\u96d1\u306a\u52d5\u304d\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double t = Scene :: Time () * - 30 _deg ; const Transformer2D t0 ( Mat3x2 :: Translate ( Scene :: Center ())); Circle ( 0 , 0 , 40 ). draw ( Palette :: Orange ); Circle ( 0 , 0 , 160 ). drawFrame (); const Transformer2D t1 ( Mat3x2 :: Translate ( 160 , 0 ). rotated ( t )); Circle ( 0 , 0 , 20 ). draw ( Palette :: Skyblue ); Circle ( 0 , 0 , 40 ). drawFrame (); const Transformer2D t2 ( Mat3x2 :: Translate ( 40 , 0 ). rotated ( t * 4 )); Circle ( 0 , 0 , 10 ). draw ( Palette :: White ); } }","title":"Transformer2D \u306e\u52b9\u679c\u306e\u4e57\u7b97"},{"location":"ja-jp/tutorial/2d-renderstates/#157-2d","text":"Camera2D \u3092\u4f7f\u3046\u3068\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u305f\u76f4\u611f\u7684\u306a\u64cd\u4f5c\u3067 Transformer2D \u3092\u4f5c\u6210\u3001\u66f4\u65b0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Camera2D :: update () \u3067\u306f W/A/S/D \u30ad\u30fc\u3067\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52d5\u3001\u2191/\u2193 \u30ad\u30fc\u3067\u62e1\u5927\u7e2e\u5c0f\u3001\u30de\u30a6\u30b9\u53f3\u30af\u30ea\u30c3\u30af\u3067\u81ea\u7531\u79fb\u52d5\u3001\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u62e1\u5927\u7e2e\u5c0f\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u30ad\u30fc\u64cd\u4f5c\u3092\u7121\u52b9\u306b\u3057\u305f\u3044\u5834\u5408\u306f Camera2D \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Camera2DParameters :: MouseOnly () \u3092\u6e21\u3057\u307e\u3059\u3002\u30ab\u30e1\u30e9\u306e\u6319\u52d5\u306f Camera2DParameters \u306b\u3088\u3063\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Camera2D :: draw () \u3067\u306f\u30de\u30a6\u30b9\u3067\u306e\u30ab\u30e1\u30e9\u64cd\u4f5c\u3092\u88dc\u52a9\u3059\u308b\u77e2\u5370 UI \u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 , 0.8 , 0.7 )); const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // 2D \u30ab\u30e1\u30e9 // \u4e2d\u5fc3\u304c (0, 0), \u62e1\u5927\u7387 1.0 \u306b\u306a\u308b\u3088\u3046\u306a\u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 1.0 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); for ( int32 i = 0 ; i < 8 ; ++ i ) { Circle ( 0 , 0 , 50 + i * 50 ). drawFrame ( 2 ); } cat . drawAt ( 0 , 0 ); Shape2D :: Star ( 50 , Vec2 ( 200 , 200 )). draw ( Palette :: Yellow ); } if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // 2D \u30ab\u30e1\u30e9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 camera . setCenter ( Vec2 ( 0 , 0 )); camera . setTargetCenter ( Vec2 ( 0 , 0 )); camera . setScale ( 1.0 ); camera . setTargetScale ( 1.0 ); } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"15.7 2D \u30ab\u30e1\u30e9"},{"location":"ja-jp/tutorial/2d-renderstates/#158","text":"ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b RasterizerState :: WireframeCullNone \u3092\u6e21\u3059\u3068\u3001\u56f3\u5f62\u3084\u753b\u50cf\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306e\u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u304c\u63cf\u753b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u8868\u793a\u30e2\u30fc\u30c9\u306b const ScopedRenderStates2D rasterizer ( RasterizerState :: WireframeCullNone ); textureWindmill . draw ( 20 , 20 ); Circle ( Scene :: Center (), 100 ). draw (); Shape2D :: Star ( 100 , Vec2 ( 150 , 400 )). draw ( Palette :: Yellow ); } }","title":"15.8 \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u30e2\u30fc\u30c9\u3067\u63cf\u753b"},{"location":"ja-jp/tutorial/2d-renderstates/#159","text":"ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u6642\u306b UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u306e\u51e6\u7406\u306e\u65b9\u6cd5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Texture :: mapped () \u306b\u3088\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u3060\u3051\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3088\u3046\u306a TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3092\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: RepeatLinear \u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067 .draw () \u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u304c\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture tree ( Emoji ( U \"\ud83c\udf32\" )); while ( System :: Update ()) { // UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u3001\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0 const ScopedRenderStates2D rasterizer ( SamplerState :: RepeatLinear ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3074\u3063\u305f\u308a\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u63cf\u753b tree . mapped ( Scene :: Size ()). draw (); } }","title":"15.9 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u304f\u308a\u8fd4\u3057"},{"location":"ja-jp/tutorial/2d-renderstates/#1510","text":"","title":"15.10 \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/2d-renderstates/#_2","text":"ScopedRenderStates2D \u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b BlendState , SamplerState , RasterizerState \u306e 3 \u3064\u3092\u4e00\u5ea6\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 BlendState , SamplerState , RasterizerState \u306f\u3001\u3053\u306e\u7ae0\u3067\u7d39\u4ecb\u3057\u305f\u4ee5\u5916\u306b\u3082\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3061\u3001\u69d8\u3005\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u53ef\u80fd\u3067\u3059\u30022D \u63cf\u753b\u306b\u304a\u3051\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f BlendState :: Default , SamplerState :: Default2D , RasterizerState :: Default2D \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"ja-jp/tutorial/2d-renderstates/#scoped","text":"Scoped \uff5e \u7cfb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084 Transformer2D \u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u4f55\u3082\u50cd\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u81ea\u8eab\u304c\u7834\u68c4\u3055\u308c\u308b\u3068\u304d\uff08\u30b9\u30b3\u30fc\u30d7\u304c\u7d42\u4e86\u3059\u308b\u3068\u304d\uff09\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6700\u521d\u306e\u72b6\u614b\u306b\u623b\u3059\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { { // \u7dda\u5f62\u88dc\u9593\u3092\u7121\u52b9\u306b\u3059\u308b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6709\u52b9\u5316 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( 4 ). drawAt ( 200 , 300 ); } // \u3053\u3053\u3067 state \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u304c\u521d\u671f\u72b6\u614b\u306b cat . scaled ( 4 ). drawAt ( 600 , 300 ); } }","title":"Scoped\uff5e \u306e\u306f\u305f\u3089\u304d"},{"location":"ja-jp/tutorial/animation/","text":"3. \u52d5\u304d\u3092\u4f5c\u308b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002 3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Scene::Time() \u00b6 Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Scene::Center() \u00b6 \u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } } Scene::DeltaTime() \u00b6 Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } } step \u00b6 Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++i) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } } OffsetCircular \u00b6 \u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } } 3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u00b6 \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8 \u00b6 Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002 MouseL.down() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } } Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b \u00b6 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } } 3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Periodic::Square0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } } Periodic::Triangle0_1() \u00b6 0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Triangle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sine0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sawtooth0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Jump0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } } 3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 \u00b6 Transition \u00b6 \u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 MouseL.pressed() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } 3.5 \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 Min, Max \u00b6 Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 \u7dda\u5f62\u88dc\u9593 \u00b6 \u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"3. \u52d5\u304d\u3092\u4f5c\u308b"},{"location":"ja-jp/tutorial/animation/#3","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002","title":"3. \u52d5\u304d\u3092\u4f5c\u308b"},{"location":"ja-jp/tutorial/animation/#31","text":"","title":"3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/animation/#scenetime","text":"Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002","title":"Scene::Time()"},{"location":"ja-jp/tutorial/animation/#scenecenter","text":"\u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"Scene::Center()"},{"location":"ja-jp/tutorial/animation/#scenedeltatime","text":"Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } }","title":"Scene::DeltaTime()"},{"location":"ja-jp/tutorial/animation/#step","text":"Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++i) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } }","title":"step"},{"location":"ja-jp/tutorial/animation/#offsetcircular","text":"\u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } }","title":"OffsetCircular"},{"location":"ja-jp/tutorial/animation/#32","text":"\u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002","title":"3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1"},{"location":"ja-jp/tutorial/animation/#stopwatch","text":"Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002","title":"Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8"},{"location":"ja-jp/tutorial/animation/#mouseldown","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"MouseL.down()"},{"location":"ja-jp/tutorial/animation/#stopwatch_1","text":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } }","title":"Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b"},{"location":"ja-jp/tutorial/animation/#33","text":"Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/animation/#periodicsquare0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } }","title":"Periodic::Square0_1()"},{"location":"ja-jp/tutorial/animation/#periodictriangle0_1","text":"0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Triangle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Triangle0_1()"},{"location":"ja-jp/tutorial/animation/#periodicsine0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sine0_1()"},{"location":"ja-jp/tutorial/animation/#periodicsawtooth0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sawtooth0_1()"},{"location":"ja-jp/tutorial/animation/#periodicjump0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } }","title":"Periodic::Jump0_1()"},{"location":"ja-jp/tutorial/animation/#34","text":"","title":"3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/animation/#transition","text":"\u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Transition"},{"location":"ja-jp/tutorial/animation/#mouselpressed","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } }","title":"MouseL.pressed()"},{"location":"ja-jp/tutorial/animation/#35","text":"","title":"3.5 \u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"ja-jp/tutorial/animation/#min-max","text":"Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Min, Max"},{"location":"ja-jp/tutorial/animation/#_1","text":"\u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } }","title":"\u7dda\u5f62\u88dc\u9593"},{"location":"ja-jp/tutorial/animation/#_2","text":"0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"ja-jp/tutorial/asset/","text":"17. \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3042\u3089\u3086\u308b\u3068\u3053\u308d\u304b\u3089 Texture , Audio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 17.1 \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u306e\u57fa\u672c \u00b6 Siv3D \u306f Texture \u3084 Aufio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u306e\u30cf\u30f3\u30c9\u30eb\u306b\u540d\u524d\u3092\u3064\u3051\u3001\u540d\u524d\u3092\u901a\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u300c\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u300d\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u6271\u3046\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332 (Register)\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30d7\u30ea\u30ed\u30fc\u30c9 (Preload)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u4f7f\u7528\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30ea\u30ea\u30fc\u30b9 (Release)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332\u89e3\u9664 (Unregister)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u767b\u9332 \u00b6 \u30a2\u30bb\u30c3\u30c8\u3092\u30a8\u30f3\u30b8\u30f3\u306b\u767b\u9332\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u7a2e\u985e\uff08\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308b\u304b\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u3067\u3042\u308b\u304b\u306a\u3069\uff09\u3092\u95a2\u6570\u3067\u6307\u5b9a\u3057\u3001\u30a2\u30bb\u30c3\u30c8\u306b\u4e00\u610f\u306e\u540d\u524d\u3092\u3064\u3051\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u3069\u306e\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002 \u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u3053\u306e\u6642\u70b9\u3067\u306f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306f\u69cb\u7bc9\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u5897\u3048\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30d7\u30ea\u30ed\u30fc\u30c9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u5b9f\u969b\u306b\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a8\u30f3\u30b8\u30f3\u304c\u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b\u4e0e\u3048\u3089\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5f93\u3063\u3066\u30e1\u30e2\u30ea\u306b\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u3059\u3067\u306b\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 \u4f7f\u7528 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u3001 Texture \u3084 Audio \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u3053\u308c\u3092\u4f7f\u3063\u3066\u3001\u524d\u7ae0\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b .draw () \u3057\u305f\u308a\u3001 .play () \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e Texture \u3084 Audio \u3092\u8fd4\u3057\u307e\u3059\u3002\u30d7\u30ea\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30fc\u30c9\u3092\u884c\u3044\u307e\u3059\u3002 \u30ea\u30ea\u30fc\u30b9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u4e0a\u304b\u3089\u89e3\u653e\u3057\u307e\u3059\u3002 \u30ea\u30ea\u30fc\u30b9\u5f8c\u3082\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u306f\u6b8b\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u518d\u5ea6\u30d7\u30ea\u30ed\u30fc\u30c9\u3057\u305f\u308a\u3001\u4f7f\u7528\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4e00\u5ea6\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3092\u3053\u306e\u5148\u3057\u3070\u3089\u304f\u4f7f\u308f\u305a\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u6291\u3048\u305f\u3044\u5834\u5408\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ea\u30ea\u30fc\u30b9\u3092\u3057\u307e\u3057\u3087\u3046\u3002 \u767b\u9332\u89e3\u9664 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u3068\u540d\u524d\u3092\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002 \u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30ea\u30ea\u30fc\u30b9\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642\u306b\u306f\u3059\u3079\u3066\u306e\u30a2\u30bb\u30c3\u30c8\u304c\u81ea\u52d5\u3067\u30ea\u30ea\u30fc\u30b9\u3001\u767b\u9332\u89e3\u9664\u3055\u308c\u308b\u305f\u3081\u3001\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u89e3\u9664\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 17.2 Texture \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { Draw (); } } 17.3 Audio \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void MakeSound () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"Sound\" ). playOneShot (); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 AudioAsset :: Register ( U \"BGM\" , U \"example/test.mp3\" ); AudioAsset :: Register ( U \"Sound\" , GMInstrument :: Piano1 , PianoKey :: A4 , 0.5 s ); // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"BGM\" ). setVolume ( 0.3 ); AudioAsset ( U \"BGM\" ). play (); while ( System :: Update ()) { if ( MouseL . down ()) { MakeSound (); } } } 17.4 Font \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 FontAsset ( U \"Title\" )( U \"My Game\" ). drawAt ( 400 , 100 ); FontAsset ( U \"Menu\" )( U \"Play\" ). drawAt ( 400 , 400 ); FontAsset ( U \"Menu\" )( U \"Exit\" ). drawAt ( 400 , 500 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 FontAsset :: Register ( U \"Title\" , 60 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 40 , Typeface :: Medium ); while ( System :: Update ()) { Draw (); } } 17.5 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u30ed\u30fc\u30c9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadImmediately () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u30b2\u30fc\u30e0\u306e\u5b9f\u884c\u4e2d\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u304c\u767a\u751f\u3057\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3059\u308b\u306e\u3092\u9632\u304e\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadImmediately ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadImmediately ()); while ( System :: Update ()) { Draw (); } } 17.6 \u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadAsync () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u30a2\u30bb\u30c3\u30c8\u3092\u540c\u6642\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30ed\u30fc\u30c9\u6642\u9593\u3092\u6e1b\u3089\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 TextureAsset :: IsReady () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u3088\u308a\u524d\u306b\u30a2\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u7a7a\u306e Texture \u3084 Audio \u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 Warning macOS \u3068 Linux \u3067\u306f\u3001 Texture \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c System :: Update () \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u5b9f\u884c\u4e2d\u306f System :: Update () \u306e\u547c\u3073\u51fa\u3057\u3092\u901a\u5e38\u901a\u308a\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadAsync ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadAsync ()); bool loaded = false ; while ( System :: Update ()) { if ( ! loaded ) { // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b\u30c1\u30a7\u30c3\u30af const bool r1 = TextureAsset :: IsReady ( U \"Windmill\" ); const bool r2 = TextureAsset :: IsReady ( U \"Siv3D-kun\" ); if ( r1 && r2 ) // \u4e21\u65b9\u3068\u3082\u30ed\u30fc\u30c9\u5b8c\u4e86 { loaded = true ; } } if ( loaded ) { Draw (); } else { // \u30ed\u30fc\u30c9\u4e2d\u306f\u5186\u3092\u8868\u793a Circle ( Scene :: Center (), 100 ). draw (); } } }","title":"17. \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406"},{"location":"ja-jp/tutorial/asset/#17","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3042\u3089\u3086\u308b\u3068\u3053\u308d\u304b\u3089 Texture , Audio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"17. \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406"},{"location":"ja-jp/tutorial/asset/#171","text":"Siv3D \u306f Texture \u3084 Aufio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u306e\u30cf\u30f3\u30c9\u30eb\u306b\u540d\u524d\u3092\u3064\u3051\u3001\u540d\u524d\u3092\u901a\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u300c\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u300d\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u6271\u3046\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332 (Register)\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30d7\u30ea\u30ed\u30fc\u30c9 (Preload)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u4f7f\u7528\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30ea\u30ea\u30fc\u30b9 (Release)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332\u89e3\u9664 (Unregister)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09","title":"17.1 \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/asset/#_1","text":"\u30a2\u30bb\u30c3\u30c8\u3092\u30a8\u30f3\u30b8\u30f3\u306b\u767b\u9332\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u7a2e\u985e\uff08\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308b\u304b\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u3067\u3042\u308b\u304b\u306a\u3069\uff09\u3092\u95a2\u6570\u3067\u6307\u5b9a\u3057\u3001\u30a2\u30bb\u30c3\u30c8\u306b\u4e00\u610f\u306e\u540d\u524d\u3092\u3064\u3051\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u3069\u306e\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002 \u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u3053\u306e\u6642\u70b9\u3067\u306f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306f\u69cb\u7bc9\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u5897\u3048\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u767b\u9332"},{"location":"ja-jp/tutorial/asset/#_2","text":"\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u5b9f\u969b\u306b\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a8\u30f3\u30b8\u30f3\u304c\u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b\u4e0e\u3048\u3089\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5f93\u3063\u3066\u30e1\u30e2\u30ea\u306b\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u3059\u3067\u306b\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"\u30d7\u30ea\u30ed\u30fc\u30c9"},{"location":"ja-jp/tutorial/asset/#_3","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u3001 Texture \u3084 Audio \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u3053\u308c\u3092\u4f7f\u3063\u3066\u3001\u524d\u7ae0\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b .draw () \u3057\u305f\u308a\u3001 .play () \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e Texture \u3084 Audio \u3092\u8fd4\u3057\u307e\u3059\u3002\u30d7\u30ea\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30fc\u30c9\u3092\u884c\u3044\u307e\u3059\u3002","title":"\u4f7f\u7528"},{"location":"ja-jp/tutorial/asset/#_4","text":"\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u4e0a\u304b\u3089\u89e3\u653e\u3057\u307e\u3059\u3002 \u30ea\u30ea\u30fc\u30b9\u5f8c\u3082\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u306f\u6b8b\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u518d\u5ea6\u30d7\u30ea\u30ed\u30fc\u30c9\u3057\u305f\u308a\u3001\u4f7f\u7528\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4e00\u5ea6\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3092\u3053\u306e\u5148\u3057\u3070\u3089\u304f\u4f7f\u308f\u305a\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u6291\u3048\u305f\u3044\u5834\u5408\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ea\u30ea\u30fc\u30b9\u3092\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u30ea\u30ea\u30fc\u30b9"},{"location":"ja-jp/tutorial/asset/#_5","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u3068\u540d\u524d\u3092\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002 \u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30ea\u30ea\u30fc\u30b9\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642\u306b\u306f\u3059\u3079\u3066\u306e\u30a2\u30bb\u30c3\u30c8\u304c\u81ea\u52d5\u3067\u30ea\u30ea\u30fc\u30b9\u3001\u767b\u9332\u89e3\u9664\u3055\u308c\u308b\u305f\u3081\u3001\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u89e3\u9664\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u767b\u9332\u89e3\u9664"},{"location":"ja-jp/tutorial/asset/#172-texture","text":"# include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { Draw (); } }","title":"17.2 Texture \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/tutorial/asset/#173-audio","text":"# include <Siv3D.hpp> void MakeSound () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"Sound\" ). playOneShot (); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 AudioAsset :: Register ( U \"BGM\" , U \"example/test.mp3\" ); AudioAsset :: Register ( U \"Sound\" , GMInstrument :: Piano1 , PianoKey :: A4 , 0.5 s ); // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"BGM\" ). setVolume ( 0.3 ); AudioAsset ( U \"BGM\" ). play (); while ( System :: Update ()) { if ( MouseL . down ()) { MakeSound (); } } }","title":"17.3 Audio \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/tutorial/asset/#174-font","text":"# include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 FontAsset ( U \"Title\" )( U \"My Game\" ). drawAt ( 400 , 100 ); FontAsset ( U \"Menu\" )( U \"Play\" ). drawAt ( 400 , 400 ); FontAsset ( U \"Menu\" )( U \"Exit\" ). drawAt ( 400 , 500 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 FontAsset :: Register ( U \"Title\" , 60 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 40 , Typeface :: Medium ); while ( System :: Update ()) { Draw (); } }","title":"17.4 Font \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"ja-jp/tutorial/asset/#175","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadImmediately () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u30b2\u30fc\u30e0\u306e\u5b9f\u884c\u4e2d\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u304c\u767a\u751f\u3057\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3059\u308b\u306e\u3092\u9632\u304e\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadImmediately ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadImmediately ()); while ( System :: Update ()) { Draw (); } }","title":"17.5 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u30ed\u30fc\u30c9"},{"location":"ja-jp/tutorial/asset/#176","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadAsync () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u30a2\u30bb\u30c3\u30c8\u3092\u540c\u6642\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30ed\u30fc\u30c9\u6642\u9593\u3092\u6e1b\u3089\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 TextureAsset :: IsReady () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u3088\u308a\u524d\u306b\u30a2\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u7a7a\u306e Texture \u3084 Audio \u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 Warning macOS \u3068 Linux \u3067\u306f\u3001 Texture \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c System :: Update () \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u5b9f\u884c\u4e2d\u306f System :: Update () \u306e\u547c\u3073\u51fa\u3057\u3092\u901a\u5e38\u901a\u308a\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadAsync ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadAsync ()); bool loaded = false ; while ( System :: Update ()) { if ( ! loaded ) { // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b\u30c1\u30a7\u30c3\u30af const bool r1 = TextureAsset :: IsReady ( U \"Windmill\" ); const bool r2 = TextureAsset :: IsReady ( U \"Siv3D-kun\" ); if ( r1 && r2 ) // \u4e21\u65b9\u3068\u3082\u30ed\u30fc\u30c9\u5b8c\u4e86 { loaded = true ; } } if ( loaded ) { Draw (); } else { // \u30ed\u30fc\u30c9\u4e2d\u306f\u5186\u3092\u8868\u793a Circle ( Scene :: Center (), 100 ). draw (); } } }","title":"17.6 \u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9"},{"location":"ja-jp/tutorial/audio/","text":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u52b9\u679c\u97f3\u3084\u97f3\u697d\u306e\u518d\u751f\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 13.1 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u305f\u3044\u3068\u304d\u306f Audio \u3092\u4f5c\u6210\u3057\u3001 .play () \u3067\u518d\u751f\u3057\u307e\u3059\u3002\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b .play () \u3092\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Audio \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Texture \u3084 Font \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Audio \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Audio \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210 const Audio audio ( U \"example/test.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } } \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.4.0 \u3067\u306f\u30014 \u7a2e\u985e\u306e\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 WAVE wav \u2714 MP3 mp3 \u2714 AAC m4a \u2714 (Windows / macOS \u306e\u307f) Ogg Vorbis ogg \u2714 Opus opus (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 13.2 \u4e00\u6642\u505c\u6b62\u3068\u5dfb\u304d\u623b\u3057 \u00b6 \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f . pause () , \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059\u306b\u306f .stop () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ))) { // \u518d\u751f audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 60 ))) { // \u4e00\u6642\u505c\u6b62 audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 ( 20 , 100 ))) { // \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop (); } } } 13.3 \u97f3\u91cf\u3092\u5909\u3048\u308b \u00b6 \u97f3\u91cf\u3092\u5909\u3048\u308b\u306b\u306f .setVolume () \u306b 0.0\uff5e1.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u5927\u306e 1.0 \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double volume = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( volume , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf\u3092\u8a2d\u5b9a (0.0 - 1.0) audio . setVolume ( volume ); } } } 13.4 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b \u00b6 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b\u306b\u306f .setSpeed () \u306b\u3001\u30b9\u30d4\u30fc\u30c9\u306e\u500d\u7387\u306b\u3042\u305f\u308b 0.1\uff5e2.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1.0 \u3067\u3059\u3002\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u304c\u901f\u304f\u306a\u308b\u3068\u97f3\u306f\u9ad8\u304f\u805e\u3053\u3048\u3001\u9045\u304f\u306a\u308b\u3068\u4f4e\u304f\u805e\u3053\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double speed = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( speed ), speed , 0.1 , 2.0 , Vec2 ( 20 , 20 ))) { // \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u8a2d\u5b9a (0.1 - 2.0) audio . setSpeed ( speed ); } } } 13.5 \u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u5408\u8a08\u518d\u751f\u6642\u9593\uff08\u79d2\uff09\u306f .lengthSec () , \u5408\u8a08\u518d\u751f\u30b5\u30f3\u30d7\u30eb\u306f .samples () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e\u3092 .posSec () \u3067\u306f\u79d2\u3001 .posSample () \u3067\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u518d\u751f\u4f4d\u7f6e\u3088\u308a\u5c11\u3057\u5148\u884c\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u306e\u30b5\u30f3\u30d7\u30eb\u4f4d\u7f6e\u3092 .streamPosSample () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53\u306e\u9577\u3055 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u73fe\u5728\u306e\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); } } 13.6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b \u00b6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 .setPosSample () \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001 .setPosSec () \u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u6642\u9593\uff08\u79d2\uff09\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); if ( SimpleGUI :: Button ( U \"0 samples\" , Vec2 ( 300 , 20 ))) { // 0 \u30b5\u30f3\u30d7\u30eb\u76ee\uff08\u66f2\u306e\u5148\u982d\uff09\u306b\u79fb\u52d5 audio . setPosSample ( 0 ); } if ( SimpleGUI :: Button ( U \"441,000 samples\" , Vec2 ( 300 , 60 ))) { // 441,000 \u30b5\u30f3\u30d7\u30eb\u76ee\u306b\u79fb\u52d5 audio . setPosSample ( 441000 ); } if ( SimpleGUI :: Button ( U \"20.0 sec\" , Vec2 ( 300 , 100 ))) { // 20 \u79d2\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5 audio . setPosSec ( 20.0 ); } } } 13.7 \u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b \u00b6 \u66f2\u306e\u518d\u751f\u304c\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u81ea\u52d5\u7684\u306b\u5148\u982d\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Arg :: loop = true \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b const Audio audio ( U \"example/test.mp3\" , Arg :: loop = true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } } .setLoop () \u306b true \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b audio . setLoop ( true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } } 13.8 \u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b \u00b6 \u518d\u751f\u6642\u306f\u66f2\u306e\u5148\u982d\u304b\u3089\u958b\u59cb\u3057\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u7d42\u7aef\u4f4d\u7f6e\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u306b\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u5148\u982d\u4f4d\u7f6e\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u308b\u306b\u306f\u3001\u5148\u982d\u4f4d\u7f6e\u3092 Arg ;; loopBegin , \u7d42\u7aef\u4f4d\u7f6e\u3092 Arg :: loopEnd \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u518d\u751f\u4f4d\u7f6e\uff08\u79d2\uff09\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); if ( const auto loop = audio . getLoop ()) { // \u30eb\u30fc\u30d7\u306e\u958b\u59cb\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopBegin: {} samples\" _fmt ( loop -> beginPos ); // \u30eb\u30fc\u30d7\u306e\u7d42\u4e86\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopEnd: {} samples\" _fmt ( loop -> endPos ); } } } \u30eb\u30fc\u30d7\u4f4d\u7f6e\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 66150 , Arg :: loopEnd = 1962450 ); audio . play (); while ( System :: Update ()) { } } .setLoop () \u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); audio . setLoop ( Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { } } 13.9 \u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b \u00b6 \u697d\u5668\u306e\u7a2e\u985e\u3068\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3092\u6307\u5b9a\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3057\u3001\u305d\u3053\u304b\u3089 Audio \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b GMInstrument \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u697d\u5668\u540d\u3001 PianoKey \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3092\u6e21\u3057\u307e\u3059\u3002 Info \u97f3\u306e\u9577\u3055\u306f 0.5 \u79d2\u306a\u3089 0 . 5 s , 2 \u79d2\u306a\u3089 2 s \u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u6307\u5b9a\u3059\u308b\u97f3\u306e\u9577\u3055\u306f\u76ee\u5b89\u3067\u3042\u308a\u3001\u5b9f\u969b\u306b\u4f5c\u6210\u3055\u308c\u308b Audio \u306f\u3053\u308c\u3088\u308a\u3082\u9577\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { piano . play (); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . play (); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . play (); } } } 13.10 \u540c\u3058\u97f3\u58f0\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b \u00b6 1 \u3064\u306e Audio \u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306b\u306f .play () \u306e\u4ee3\u308f\u308a\u306b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf 0.5 \u3067\u518d\u751f piano . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . playOneShot ( 0.5 ); } } } 13.11 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af \u00b6 if ( audio ) \u3067\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! audio ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Audio\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa \u00b6 \u7a7a\uff08\u304b\u3089\uff09\u306e Audio \u3092\u518d\u751f\u3059\u308b\u3068\u3001\u300c\u30dd\u30ef\u30fc\u300d\u3068\u9cf4\u308b\u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u304c\u9cf4\u308b audio . play (); while ( System :: Update ()) { } } \u518d\u751f\u4e2d\u304b\u3092\u30c1\u30a7\u30c3\u30af \u00b6 \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306f .isPlaying () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { // \u518d\u751f\u4e2d\u306a\u3089\u300cPause\u300d\u30dc\u30bf\u30f3 if ( audio . isPlaying ()) { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 20 ), 120 )) { audio . pause (); } } else // \u505c\u6b62\u4e2d\u306a\u3089\u300cPlay\u300d\u30dc\u30bf\u30f3 { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ), 120 )) { audio . play (); } } } }","title":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"ja-jp/tutorial/audio/#13","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u52b9\u679c\u97f3\u3084\u97f3\u697d\u306e\u518d\u751f\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"ja-jp/tutorial/audio/#131","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u305f\u3044\u3068\u304d\u306f Audio \u3092\u4f5c\u6210\u3057\u3001 .play () \u3067\u518d\u751f\u3057\u307e\u3059\u3002\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b .play () \u3092\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Audio \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Texture \u3084 Font \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Audio \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Audio \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210 const Audio audio ( U \"example/test.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } }","title":"13.1 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f"},{"location":"ja-jp/tutorial/audio/#_1","text":"OpenSiv3D v0.4.0 \u3067\u306f\u30014 \u7a2e\u985e\u306e\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 WAVE wav \u2714 MP3 mp3 \u2714 AAC m4a \u2714 (Windows / macOS \u306e\u307f) Ogg Vorbis ogg \u2714 Opus opus (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"ja-jp/tutorial/audio/#132","text":"\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f . pause () , \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059\u306b\u306f .stop () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ))) { // \u518d\u751f audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 60 ))) { // \u4e00\u6642\u505c\u6b62 audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 ( 20 , 100 ))) { // \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop (); } } }","title":"13.2 \u4e00\u6642\u505c\u6b62\u3068\u5dfb\u304d\u623b\u3057"},{"location":"ja-jp/tutorial/audio/#133","text":"\u97f3\u91cf\u3092\u5909\u3048\u308b\u306b\u306f .setVolume () \u306b 0.0\uff5e1.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u5927\u306e 1.0 \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double volume = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( volume , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf\u3092\u8a2d\u5b9a (0.0 - 1.0) audio . setVolume ( volume ); } } }","title":"13.3 \u97f3\u91cf\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/audio/#134","text":"\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b\u306b\u306f .setSpeed () \u306b\u3001\u30b9\u30d4\u30fc\u30c9\u306e\u500d\u7387\u306b\u3042\u305f\u308b 0.1\uff5e2.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1.0 \u3067\u3059\u3002\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u304c\u901f\u304f\u306a\u308b\u3068\u97f3\u306f\u9ad8\u304f\u805e\u3053\u3048\u3001\u9045\u304f\u306a\u308b\u3068\u4f4e\u304f\u805e\u3053\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double speed = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( speed ), speed , 0.1 , 2.0 , Vec2 ( 20 , 20 ))) { // \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u8a2d\u5b9a (0.1 - 2.0) audio . setSpeed ( speed ); } } }","title":"13.4 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/audio/#135","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u5408\u8a08\u518d\u751f\u6642\u9593\uff08\u79d2\uff09\u306f .lengthSec () , \u5408\u8a08\u518d\u751f\u30b5\u30f3\u30d7\u30eb\u306f .samples () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e\u3092 .posSec () \u3067\u306f\u79d2\u3001 .posSample () \u3067\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u518d\u751f\u4f4d\u7f6e\u3088\u308a\u5c11\u3057\u5148\u884c\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u306e\u30b5\u30f3\u30d7\u30eb\u4f4d\u7f6e\u3092 .streamPosSample () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53\u306e\u9577\u3055 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u73fe\u5728\u306e\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); } }","title":"13.5 \u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b"},{"location":"ja-jp/tutorial/audio/#136","text":"\u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 .setPosSample () \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001 .setPosSec () \u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u6642\u9593\uff08\u79d2\uff09\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); if ( SimpleGUI :: Button ( U \"0 samples\" , Vec2 ( 300 , 20 ))) { // 0 \u30b5\u30f3\u30d7\u30eb\u76ee\uff08\u66f2\u306e\u5148\u982d\uff09\u306b\u79fb\u52d5 audio . setPosSample ( 0 ); } if ( SimpleGUI :: Button ( U \"441,000 samples\" , Vec2 ( 300 , 60 ))) { // 441,000 \u30b5\u30f3\u30d7\u30eb\u76ee\u306b\u79fb\u52d5 audio . setPosSample ( 441000 ); } if ( SimpleGUI :: Button ( U \"20.0 sec\" , Vec2 ( 300 , 100 ))) { // 20 \u79d2\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5 audio . setPosSec ( 20.0 ); } } }","title":"13.6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/audio/#137","text":"\u66f2\u306e\u518d\u751f\u304c\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u81ea\u52d5\u7684\u306b\u5148\u982d\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Arg :: loop = true \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b const Audio audio ( U \"example/test.mp3\" , Arg :: loop = true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } } .setLoop () \u306b true \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b audio . setLoop ( true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } }","title":"13.7 \u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b"},{"location":"ja-jp/tutorial/audio/#138","text":"\u518d\u751f\u6642\u306f\u66f2\u306e\u5148\u982d\u304b\u3089\u958b\u59cb\u3057\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u7d42\u7aef\u4f4d\u7f6e\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u306b\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u5148\u982d\u4f4d\u7f6e\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u308b\u306b\u306f\u3001\u5148\u982d\u4f4d\u7f6e\u3092 Arg ;; loopBegin , \u7d42\u7aef\u4f4d\u7f6e\u3092 Arg :: loopEnd \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u518d\u751f\u4f4d\u7f6e\uff08\u79d2\uff09\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); if ( const auto loop = audio . getLoop ()) { // \u30eb\u30fc\u30d7\u306e\u958b\u59cb\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopBegin: {} samples\" _fmt ( loop -> beginPos ); // \u30eb\u30fc\u30d7\u306e\u7d42\u4e86\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopEnd: {} samples\" _fmt ( loop -> endPos ); } } } \u30eb\u30fc\u30d7\u4f4d\u7f6e\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 66150 , Arg :: loopEnd = 1962450 ); audio . play (); while ( System :: Update ()) { } } .setLoop () \u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); audio . setLoop ( Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { } }","title":"13.8 \u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b"},{"location":"ja-jp/tutorial/audio/#139","text":"\u697d\u5668\u306e\u7a2e\u985e\u3068\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3092\u6307\u5b9a\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3057\u3001\u305d\u3053\u304b\u3089 Audio \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b GMInstrument \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u697d\u5668\u540d\u3001 PianoKey \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3092\u6e21\u3057\u307e\u3059\u3002 Info \u97f3\u306e\u9577\u3055\u306f 0.5 \u79d2\u306a\u3089 0 . 5 s , 2 \u79d2\u306a\u3089 2 s \u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u6307\u5b9a\u3059\u308b\u97f3\u306e\u9577\u3055\u306f\u76ee\u5b89\u3067\u3042\u308a\u3001\u5b9f\u969b\u306b\u4f5c\u6210\u3055\u308c\u308b Audio \u306f\u3053\u308c\u3088\u308a\u3082\u9577\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { piano . play (); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . play (); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . play (); } } }","title":"13.9 \u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b"},{"location":"ja-jp/tutorial/audio/#1310","text":"1 \u3064\u306e Audio \u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306b\u306f .play () \u306e\u4ee3\u308f\u308a\u306b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf 0.5 \u3067\u518d\u751f piano . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . playOneShot ( 0.5 ); } } }","title":"13.10 \u540c\u3058\u97f3\u58f0\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b"},{"location":"ja-jp/tutorial/audio/#1311","text":"","title":"13.11 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/audio/#_2","text":"if ( audio ) \u3067\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! audio ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Audio\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af"},{"location":"ja-jp/tutorial/audio/#_3","text":"\u7a7a\uff08\u304b\u3089\uff09\u306e Audio \u3092\u518d\u751f\u3059\u308b\u3068\u3001\u300c\u30dd\u30ef\u30fc\u300d\u3068\u9cf4\u308b\u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u304c\u9cf4\u308b audio . play (); while ( System :: Update ()) { } }","title":"\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa"},{"location":"ja-jp/tutorial/audio/#_4","text":"\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306f .isPlaying () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { // \u518d\u751f\u4e2d\u306a\u3089\u300cPause\u300d\u30dc\u30bf\u30f3 if ( audio . isPlaying ()) { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 20 ), 120 )) { audio . pause (); } } else // \u505c\u6b62\u4e2d\u306a\u3089\u300cPlay\u300d\u30dc\u30bf\u30f3 { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ), 120 )) { audio . play (); } } } }","title":"\u518d\u751f\u4e2d\u304b\u3092\u30c1\u30a7\u30c3\u30af"},{"location":"ja-jp/tutorial/basic/","text":"1. Siv3D \u306e\u57fa\u672c \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0 \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 \u00b6 \u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002 1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002 1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 1.5 Hello, Siv3D! \u00b6 \u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 1.6 \u3082\u3063\u3068 Print \u00b6 Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } } 1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059 \u00b6 Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002 1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/basic/#1-siv3d","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"1. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/basic/#11","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0"},{"location":"ja-jp/tutorial/basic/#12","text":"\u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002","title":"1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8"},{"location":"ja-jp/tutorial/basic/#13","text":"\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002","title":"1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/tutorial/basic/#14","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002","title":"1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/basic/#15-hello-siv3d","text":"\u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"1.5 Hello, Siv3D!"},{"location":"ja-jp/tutorial/basic/#16-print","text":"Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } }","title":"1.6 \u3082\u3063\u3068 Print"},{"location":"ja-jp/tutorial/basic/#17-print","text":"Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059"},{"location":"ja-jp/tutorial/basic/#18","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb"},{"location":"ja-jp/tutorial/binary-file/","text":"21. \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6700\u5c0f\u9650\u306e\u30b3\u30b9\u30c8\u3067\u30d5\u30a1\u30a4\u30eb\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 21.1 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3068\u306f \u00b6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb \u306f\u3001\u30c7\u30fc\u30bf\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u306a\u304f \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf \u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070 299792458 \u3068\u3044\u3046 int32 \u578b\u306e\u6570\u5024\u306f\u3001 \"299792458\" \u3068\u3044\u3046 9 \u6587\u5b57\uff089 \u30d0\u30a4\u30c8) \u3067\u306f\u306a\u304f\u3001 00010001110111100111100001001010 \u306e\u30d3\u30c3\u30c8\u5217\u3067\u8868\u3055\u308c\u308b 4 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u969b\u3001\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u6570\u5024\u3001\u6570\u5024\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u5909\u63db\u306b\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u3001\u5fc5\u8981\u306a\u30b5\u30a4\u30ba\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u5909\u63db\u306e\u30b3\u30b9\u30c8\u304c\u304b\u304b\u3089\u305a\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u56fa\u5b9a\u30b5\u30a4\u30ba\u306e\u30c7\u30fc\u30bf\u5bb9\u91cf\u3057\u304b\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002 int32 \u3084 double \u306a\u3069\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3084\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u69cb\u6210\u3055\u308c\u305f trivially copyable \u306a\u30af\u30e9\u30b9 ( Point , Vec2 , Rect , ColorF ) \u306a\u3069\u306f\u3001\u5358\u7d14\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u3067\u5bb9\u6613\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u307e\u3059\u304c\u3001 Array \u3084 String \u306a\u3069\u3001\u30dd\u30a4\u30f3\u30bf\u3067\u5185\u90e8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u578b\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u9069\u5207\u306b\u6271\u306b\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u5f8c\u534a\u3066\u8aac\u660e\u3059\u308b \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd \u3092\u4f7f\u3046\u3068\u3001 Array \u3084 String , \u305d\u306e\u4ed6\u3044\u304f\u3064\u304b\u306e Siv3D \u306e trivially copyable \u3067\u306a\u3044\u30af\u30e9\u30b9\u3092\u7c21\u5358\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 21.2 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u5358\u7d14\u306a\u5024\u3092\u66f8\u304d\u8fbc\u3080 \u00b6 \u30d5\u30a1\u30a4\u30eb\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f BinaryWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 .BinaryWriter: : write () \u306b trivially copyable \u306a\u578b\u306e\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u5024\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 777 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 3.1415 ); // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( Point ( 123 , 456 )); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 const GameScore s = { 10 , 20 , 30 , 40 }; writer . write ( s ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.3 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5358\u7d14\u306a\u5024\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f BinaryReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 BinaryReader :: read () \u306b trivially copyable \u306a\u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u305d\u306e\u5024\u306e\u30b5\u30a4\u30ba\u5206\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u306e\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u306e\u5206\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 Point pos ; reader . read ( pos ); Print << pos ; // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } \u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306e\u79fb\u52d5 \u00b6 BinaryReader :: setPos () \u3067\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u305f\u5834\u6240\u306b\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 BinaryReader :: skip () \u3067\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u5206\u8aad\u307f\u98db\u3070\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // \u5148\u982d\u304b\u3089 4 \u30d0\u30a4\u30c8\u9032\u3093\u3060\u4f4d\u7f6e\u306b\u79fb\u52d5 reader . setPos ( 4 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // 8 \u30d0\u30a4\u30c8\u5206\u8aad\u307f\u98db\u3070\u3059 reader . skip ( 8 ); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.4 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b \u00b6 BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 BinaryReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f BinaryReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f BinaryReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { BinaryReader reader ; if ( ! reader . open ( U \"test.bin\" )) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } } 21.5 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 \u00b6 String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u306e\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u5f8c\u8ff0\u3059\u308b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test-no-serialize.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 const uint64 length = text . length (); // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( length ); // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( text . data (), sizeof ( char32 ) * length ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 \u524d\u9805\u306b\u7d9a\u3044\u3066\u3001 String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u305a\u306b\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test-no-serialize.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 uint64 length = 0 ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 String text ; // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( length ); if ( 0 < length ) { // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306e\u305f\u3081\u306b\u30ea\u30b5\u30a4\u30ba text . resize ( length ); // \u30c6\u30ad\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u5206\u3060\u3051\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( text . data (), sizeof ( char32 ) * length ); } Print << length ; Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.7 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09 \u00b6 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u578b ( trivially copyable \u3067\u306a\u3044\u578b\u3082\u542b\u3080) \u3092\u3001\u5c11\u306a\u3044\u8a18\u8ff0\u3067\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3048\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f Serializer < BinaryWriter > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Serializer < BinaryWriter > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer . getWriter ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Serializer < BinaryWriter > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"test-serialize.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer ( text ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.8 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09 \u00b6 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f Deserializer < BinaryReader > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Deserializer < BinaryReader > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader . getReader ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Deserializer < BinaryReader > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"test-serialize.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c6\u30ad\u30b9\u30c8 String text ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( text ); Print << text . length (); Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.9 \u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b \u00b6 \u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306b\u306f\u3001 template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) \u3068\u3044\u3046 public \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002 archive () \u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001\u305d\u306e\u30af\u30e9\u30b9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u308a\u3001 Serializer \u3084 Deserializer \u3067\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u3068\u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { String name ; int32 id ; int32 score ; // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) { archive ( name , id , score ); } }; void Main () { { // \u8a18\u9332\u3057\u305f\u3044\u30c7\u30fc\u30bf const Array < GameScore > scores = { GameScore { U \"Player1\" , 111 , 1000 }, GameScore { U \"Player2\" , 222 , 2000 }, GameScore { U \"Player3\" , 333 , 3000 }, }; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"score.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8a18\u9332 writer ( scores ); // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c7\u30fc\u30bf Array < GameScore > scores ; { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"score.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( scores ); // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u3093\u3060\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d for ( const auto & score : scores ) { Print << U \"{}(id: {}): {}\" _fmt ( score . name , score . id , score . score ); } while ( System :: Update ()) { } }","title":"21. \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/tutorial/binary-file/#21","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6700\u5c0f\u9650\u306e\u30b3\u30b9\u30c8\u3067\u30d5\u30a1\u30a4\u30eb\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"21. \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/tutorial/binary-file/#211","text":"\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb \u306f\u3001\u30c7\u30fc\u30bf\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u306a\u304f \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf \u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070 299792458 \u3068\u3044\u3046 int32 \u578b\u306e\u6570\u5024\u306f\u3001 \"299792458\" \u3068\u3044\u3046 9 \u6587\u5b57\uff089 \u30d0\u30a4\u30c8) \u3067\u306f\u306a\u304f\u3001 00010001110111100111100001001010 \u306e\u30d3\u30c3\u30c8\u5217\u3067\u8868\u3055\u308c\u308b 4 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u969b\u3001\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u6570\u5024\u3001\u6570\u5024\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u5909\u63db\u306b\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u3001\u5fc5\u8981\u306a\u30b5\u30a4\u30ba\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u5909\u63db\u306e\u30b3\u30b9\u30c8\u304c\u304b\u304b\u3089\u305a\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u56fa\u5b9a\u30b5\u30a4\u30ba\u306e\u30c7\u30fc\u30bf\u5bb9\u91cf\u3057\u304b\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002 int32 \u3084 double \u306a\u3069\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3084\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u69cb\u6210\u3055\u308c\u305f trivially copyable \u306a\u30af\u30e9\u30b9 ( Point , Vec2 , Rect , ColorF ) \u306a\u3069\u306f\u3001\u5358\u7d14\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u3067\u5bb9\u6613\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u307e\u3059\u304c\u3001 Array \u3084 String \u306a\u3069\u3001\u30dd\u30a4\u30f3\u30bf\u3067\u5185\u90e8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u578b\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u9069\u5207\u306b\u6271\u306b\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u5f8c\u534a\u3066\u8aac\u660e\u3059\u308b \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd \u3092\u4f7f\u3046\u3068\u3001 Array \u3084 String , \u305d\u306e\u4ed6\u3044\u304f\u3064\u304b\u306e Siv3D \u306e trivially copyable \u3067\u306a\u3044\u30af\u30e9\u30b9\u3092\u7c21\u5358\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"21.1 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3068\u306f"},{"location":"ja-jp/tutorial/binary-file/#212","text":"\u30d5\u30a1\u30a4\u30eb\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f BinaryWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 .BinaryWriter: : write () \u306b trivially copyable \u306a\u578b\u306e\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u5024\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 777 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 3.1415 ); // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( Point ( 123 , 456 )); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 const GameScore s = { 10 , 20 , 30 , 40 }; writer . write ( s ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.2 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u5358\u7d14\u306a\u5024\u3092\u66f8\u304d\u8fbc\u3080"},{"location":"ja-jp/tutorial/binary-file/#213","text":"\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f BinaryReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 BinaryReader :: read () \u306b trivially copyable \u306a\u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u305d\u306e\u5024\u306e\u30b5\u30a4\u30ba\u5206\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u306e\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u306e\u5206\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 Point pos ; reader . read ( pos ); Print << pos ; // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.3 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5358\u7d14\u306a\u5024\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/binary-file/#_1","text":"BinaryReader :: setPos () \u3067\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u305f\u5834\u6240\u306b\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 BinaryReader :: skip () \u3067\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u5206\u8aad\u307f\u98db\u3070\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // \u5148\u982d\u304b\u3089 4 \u30d0\u30a4\u30c8\u9032\u3093\u3060\u4f4d\u7f6e\u306b\u79fb\u52d5 reader . setPos ( 4 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // 8 \u30d0\u30a4\u30c8\u5206\u8aad\u307f\u98db\u3070\u3059 reader . skip ( 8 ); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306e\u79fb\u52d5"},{"location":"ja-jp/tutorial/binary-file/#214","text":"BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 BinaryReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f BinaryReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f BinaryReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { BinaryReader reader ; if ( ! reader . open ( U \"test.bin\" )) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } }","title":"21.4 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b"},{"location":"ja-jp/tutorial/binary-file/#215","text":"String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u306e\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u5f8c\u8ff0\u3059\u308b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test-no-serialize.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 const uint64 length = text . length (); // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( length ); // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( text . data (), sizeof ( char32 ) * length ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.5 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080"},{"location":"ja-jp/tutorial/binary-file/#216","text":"\u524d\u9805\u306b\u7d9a\u3044\u3066\u3001 String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u305a\u306b\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test-no-serialize.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 uint64 length = 0 ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 String text ; // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( length ); if ( 0 < length ) { // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306e\u305f\u3081\u306b\u30ea\u30b5\u30a4\u30ba text . resize ( length ); // \u30c6\u30ad\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u5206\u3060\u3051\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( text . data (), sizeof ( char32 ) * length ); } Print << length ; Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/binary-file/#217","text":"\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u578b ( trivially copyable \u3067\u306a\u3044\u578b\u3082\u542b\u3080) \u3092\u3001\u5c11\u306a\u3044\u8a18\u8ff0\u3067\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3048\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f Serializer < BinaryWriter > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Serializer < BinaryWriter > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer . getWriter ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Serializer < BinaryWriter > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"test-serialize.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer ( text ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.7 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09"},{"location":"ja-jp/tutorial/binary-file/#218","text":"\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f Deserializer < BinaryReader > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Deserializer < BinaryReader > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader . getReader ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Deserializer < BinaryReader > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"test-serialize.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c6\u30ad\u30b9\u30c8 String text ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( text ); Print << text . length (); Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.8 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09"},{"location":"ja-jp/tutorial/binary-file/#219","text":"\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306b\u306f\u3001 template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) \u3068\u3044\u3046 public \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002 archive () \u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001\u305d\u306e\u30af\u30e9\u30b9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u308a\u3001 Serializer \u3084 Deserializer \u3067\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u3068\u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { String name ; int32 id ; int32 score ; // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) { archive ( name , id , score ); } }; void Main () { { // \u8a18\u9332\u3057\u305f\u3044\u30c7\u30fc\u30bf const Array < GameScore > scores = { GameScore { U \"Player1\" , 111 , 1000 }, GameScore { U \"Player2\" , 222 , 2000 }, GameScore { U \"Player3\" , 333 , 3000 }, }; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"score.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8a18\u9332 writer ( scores ); // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c7\u30fc\u30bf Array < GameScore > scores ; { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"score.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( scores ); // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u3093\u3060\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d for ( const auto & score : scores ) { Print << U \"{}(id: {}): {}\" _fmt ( score . name , score . id , score . score ); } while ( System :: Update ()) { } }","title":"21.9 \u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b"},{"location":"ja-jp/tutorial/config-file/","text":"19. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001CSV, INI, JSON, TOML, XML \u306a\u3069\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 OpenSiv3D \u3067\u306e\u8a2d\u5b9a\u306e\u8a18\u8ff0\u306b\u306f\u3001\u8aad\u307f\u3084\u3059\u3055\u3068\u66f8\u304d\u3084\u3059\u3055\u306b\u512a\u308c\u305f TOML \u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Warning OpenSiv3D v0.4.1 \u3088\u308a\u3082\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f if ( ! ini ) \u3068 if ( ! csv ) \u304c\u53cd\u5bfe\u306e\u7d50\u679c\u3092\u8fd4\u3059\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b if ( ! ini . isOpened ()) if ( ! csv . isOpened ()) \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002OpenSiv3D v0.4.1 \u3067\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002 19.1 CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 CSV \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f CSVData \u3092\u4f7f\u3044\u307e\u3059\u3002 CSVData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! csv ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 CSV \u30c7\u30fc\u30bf\u306f Array < Array < String >> \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ row ][ col ] \u306b\u3088\u3063\u3066 row \u884c col \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002row, col \u306f 0 \u304b\u3089\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const CSVData csv ( U \"example/config/config.csv\" ); if ( ! csv ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.csv`\" ); } // \u5168\u3066\u306e\u884c\u3092\u5217\u6319 for ( size_t row = 0 ; row < csv . rows (); ++ row ) { // \u884c (Array<String>) \u306e\u8981\u7d20\u3092\u8868\u793a Print << csv [ row ]; } Print << U \"-----\" ; // 1 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97 (0 \u884c, 0 \u5217\u304b\u3089\u30ab\u30a6\u30f3\u30c8\uff09 const String windowTitle = csv [ 1 ][ 1 ]; // 2 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( csv [ 2 ][ 1 ]); // 3 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( csv [ 3 ][ 1 ]); // 4 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( csv [ 4 ][ 1 ]); // 5 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( csv [ 5 ][ 1 ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // 6 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = csv [ 6 ][ 1 ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 CSV \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( csv [ 7 ][ 1 ]); const size_t baseLine = 8 ; for ( auto i : step ( itemsCount )) { Item item ; item . label = csv [ baseLine + i * 2 ][ 1 ]; item . pos = Parse < Point > ( csv [ baseLine + i * 2 + 1 ][ 1 ]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.2 INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 INI \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f INIData \u3092\u4f7f\u3044\u307e\u3059\u3002 INIData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! ini ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 INI \u30c7\u30fc\u30bf\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b HashTable < String , String > \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"SECTION.NAME\" ] \u306b\u3088\u3063\u3066\u30bb\u30af\u30b7\u30e7\u30f3 SECTION \u306b\u3042\u308b\u540d\u524d NAME \u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( U \"example/config/config.ini\" ); if ( ! ini ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.ini`\" ); } // \u5168\u3066\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5217\u6319 for ( const auto & section : ini . sections ()) { // \u30bb\u30af\u30b7\u30e7\u30f3\u540d Print << U \"[{}]\" _fmt ( section . section ); // \u30bb\u30af\u30b7\u30e7\u30f3\u5185\u306e\u3059\u3079\u3066\u306e\u30ad\u30fc\u3092\u5217\u6319 for ( const auto & key : section . keys ) { // \u30ad\u30fc\u306e\u540d\u524d\u3068\u5024 Print << U \"{} = {}\" _fmt ( key . name , key . value ); } } Print << U \"-----\" ; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e title \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092\u53d6\u5f97 const String windowTitle = ini [ U \"Window.title\" ]; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e width \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( ini [ U \"Window.width\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e height \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( ini [ U \"Window.height\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e sizable \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( ini [ U \"Window.sizable\" ]); // Scene \u30bb\u30af\u30b7\u30e7\u30f3\u306e background \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( ini [ U \"Scene.background\" ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // Array \u30bb\u30af\u30b7\u30e7\u30f3\u306e values \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = ini [ U \"Array.values\" ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 INI \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( ini [ U \"Items.count\" ]); for ( auto i : step ( itemsCount )) { Item item ; item . label = ini [ U \"Item{}.label\" _fmt ( i )]; item . pos = Parse < Point > ( ini [ U \"Item{}.pos\" _fmt ( i )]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.3 JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 JSON \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f JSONReader \u3092\u4f7f\u3044\u307e\u3059\u3002 JSONReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! json ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 JSON \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b JSON \u306e\u8981\u7d20\u3092\u8868\u793a void ShowObject ( const JSONValue & value ) { for ( const auto & object : value . objectView ()) { switch ( object . value . getType ()) { case JSONValueType :: Empty : Print << U \"[Empty]\" << object . name ; break ; case JSONValueType :: Null : Print << U \"[Null]\" << object . name ; break ; case JSONValueType :: Object : Print << U \"[Object]\" << object . name ; ShowObject ( object . value ); break ; case JSONValueType :: Array : Print << U \"[Array]\" << object . name ; for ( const auto & element : object . value . arrayView ()) { ShowObject ( element ); } break ; case JSONValueType :: String : Print << U \"[String]\" << object . name ; Print << object . value . getString (); break ; case JSONValueType :: Number : Print << U \"[Number]\" << object . name ; Print << object . value . get < double > (); break ; case JSONValueType :: Bool : Print << U \"[Bool]\" << object . name ; Print << object . value . get < bool > (); break ; } } } void Main () { // JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const JSONReader json ( U \"example/config/config.json\" ); if ( ! json ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.json`\" ); } // JSON \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowObject ( json ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = json [ U \"Window.title\" ]. getString (); const int32 windowWidth = json [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = json [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = json [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = json [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : json [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : json [ U \"Items\" ]. arrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.4 TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 TOML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TOMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 TOMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! toml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 TOML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b TOML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowTable ( const TOMLValue & value ) { for ( const auto & table : value . tableView ()) { switch ( table . value . getType ()) { case TOMLValueType :: Empty : Print << U \"[Empty]\" << table . name ; break ; case TOMLValueType :: Table : Print << U \"[Table]\" << table . name ; ShowTable ( table . value ); break ; case TOMLValueType :: Array : Print << U \"[Array]\" << table . name ; for ( const auto & element : table . value . arrayView ()) { switch ( element . getType ()) { case TOMLValueType :: String : Print << element . getString (); break ; case TOMLValueType :: Number : Print << element . get < double > (); break ; case TOMLValueType :: Bool : Print << element . get < bool > (); break ; case TOMLValueType :: Date : Print << element . getDate (); break ; case TOMLValueType :: DateTime : Print << element . getDateTime (); break ; default : break ; } } break ; case TOMLValueType :: TableArray : Print << U \"[TableArray]\" << table . name ; for ( const auto & table2 : table . value . tableArrayView ()) { ShowTable ( table2 ); } break ; case TOMLValueType :: String : Print << U \"[String]\" << table . name ; Print << table . value . getString (); break ; case TOMLValueType :: Number : Print << U \"[Number]\" << table . name ; Print << table . value . get < double > (); break ; case TOMLValueType :: Bool : Print << U \"[Bool]\" << table . name ; Print << table . value . get < bool > (); break ; case TOMLValueType :: Date : Print << U \"[Date]\" << table . name ; Print << table . value . getDate (); break ; case TOMLValueType :: DateTime : Print << U \"[DateTime]\" << table . name ; Print << table . value . getDateTime (); break ; case TOMLValueType :: Unknown : Print << U \"[Unknown]\" << table . name ; break ; } } } void Main () { // TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const TOMLReader toml ( U \"example/config/config.toml\" ); if ( ! toml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.toml`\" ); } // TOML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowTable ( toml ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = toml [ U \"Window.title\" ]. getString (); const int32 windowWidth = toml [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = toml [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = toml [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = toml [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : toml [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.5 XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 XML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f XMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 XMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! xml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 XML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowElements () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b XML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowElements ( const XMLElement & element ) { for ( auto e = element . firstChild (); e ; e = e . nextSibling ()) { Print << U \"<{}>\" _fmt ( e . name ()); if ( const auto attributes = e . attributes ()) { Print << attributes ; } if ( const auto text = e . text ()) { Print << text ; } ShowElements ( e ); Print << U \"</{}>\" _fmt ( e . name ()); } } void Main () { // XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const XMLReader xml ( U \"example/config/config.xml\" ); if ( ! xml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.xml`\" ); } // XML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowElements ( xml ); Print << U \"-----\" ; String windowTitle ; int32 windowWidth = Window :: DefaultClientSize . x ; int32 windowHeight = Window :: DefaultClientSize . y ; bool windowSizable = false ; ColorF sceneBackground = ColorF ( 0.0 ); Array < int32 > values ; Array < Item > items ; // \u8981\u7d20\u3092\u8d70\u67fb\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u53d6\u5f97 for ( auto elem = xml . firstChild (); elem ; elem = elem . nextSibling ()) { const String name = elem . name (); if ( name == U \"Window\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"title\" ) { windowTitle = elem2 . text (); } else if ( name2 == U \"width\" ) { windowWidth = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"height\" ) { windowHeight = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"sizable\" ) { windowSizable = Parse < bool > ( elem2 . text ()); } } } else if ( name == U \"Scene\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"background\" ) { sceneBackground = Parse < ColorF > ( elem2 . text ()); } } } if ( name == U \"Array\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { values << Parse < int32 > ( elem2 . text ()); } } if ( name == U \"Items\" ) { Item item ; for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"label\" ) { item . label = elem2 . text (); } else if ( name2 == U \"pos\" ) { Point pos ( 0 , 0 ); for ( auto elem3 = elem2 . firstChild (); elem3 ; elem3 = elem3 . nextSibling ()) { const String name3 = elem3 . name (); if ( name3 == U \"x\" ) { pos . x = Parse < int32 > ( elem3 . text ()); } else if ( name3 == U \"y\" ) { pos . y = Parse < int32 > ( elem3 . text ()); } } item . pos = pos ; } } items << item ; } } Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.6 \u30d5\u30a1\u30a4\u30eb\u306e\u66f4\u65b0\u3092\u691c\u77e5\u3057\u3066\u30ea\u30ed\u30fc\u30c9\u3059\u308b \u00b6 DirectoryWatcher \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u77e5\u3067\u304d\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092 DirectoryWatcher \u3067\u76e3\u8996\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3068\u304d\u306b\u8aad\u307f\u8fbc\u307f\u306a\u304a\u3059\u4ed5\u7d44\u307f\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u306a\u304c\u3089\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u3092\u53cd\u6620\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570 Array < Item > LoadItems ( const FilePath & tomlPath ) { const TOMLReader toml ( tomlPath ); Array < Item > items ; if ( ! toml ) { return items ; } for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } return items ; } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // DirectoryWatcher \u3067\u306e\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u30d5\u30eb\u30d1\u30b9\u304c\u5fc5\u8981 const FilePath tomlPath = FileSystem :: FullPath ( U \"example/config/config.toml\" ); // `config.toml` \u304c\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u306e\u76e3\u8996 DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u30ed\u30fc\u30c9 Array < Item > items = LoadItems ( tomlPath ); // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u30c1\u30a7\u30c3\u30af for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) // TOML \u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 { Print << U \"reload\" ; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u518d\u8aad\u307f\u8fbc\u307f items = LoadItems ( tomlPath ); } } // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/tutorial/config-file/#19","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001CSV, INI, JSON, TOML, XML \u306a\u3069\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 OpenSiv3D \u3067\u306e\u8a2d\u5b9a\u306e\u8a18\u8ff0\u306b\u306f\u3001\u8aad\u307f\u3084\u3059\u3055\u3068\u66f8\u304d\u3084\u3059\u3055\u306b\u512a\u308c\u305f TOML \u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Warning OpenSiv3D v0.4.1 \u3088\u308a\u3082\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f if ( ! ini ) \u3068 if ( ! csv ) \u304c\u53cd\u5bfe\u306e\u7d50\u679c\u3092\u8fd4\u3059\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b if ( ! ini . isOpened ()) if ( ! csv . isOpened ()) \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002OpenSiv3D v0.4.1 \u3067\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002","title":"19. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/tutorial/config-file/#191-csv","text":"CSV \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f CSVData \u3092\u4f7f\u3044\u307e\u3059\u3002 CSVData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! csv ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 CSV \u30c7\u30fc\u30bf\u306f Array < Array < String >> \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ row ][ col ] \u306b\u3088\u3063\u3066 row \u884c col \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002row, col \u306f 0 \u304b\u3089\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const CSVData csv ( U \"example/config/config.csv\" ); if ( ! csv ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.csv`\" ); } // \u5168\u3066\u306e\u884c\u3092\u5217\u6319 for ( size_t row = 0 ; row < csv . rows (); ++ row ) { // \u884c (Array<String>) \u306e\u8981\u7d20\u3092\u8868\u793a Print << csv [ row ]; } Print << U \"-----\" ; // 1 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97 (0 \u884c, 0 \u5217\u304b\u3089\u30ab\u30a6\u30f3\u30c8\uff09 const String windowTitle = csv [ 1 ][ 1 ]; // 2 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( csv [ 2 ][ 1 ]); // 3 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( csv [ 3 ][ 1 ]); // 4 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( csv [ 4 ][ 1 ]); // 5 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( csv [ 5 ][ 1 ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // 6 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = csv [ 6 ][ 1 ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 CSV \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( csv [ 7 ][ 1 ]); const size_t baseLine = 8 ; for ( auto i : step ( itemsCount )) { Item item ; item . label = csv [ baseLine + i * 2 ][ 1 ]; item . pos = Parse < Point > ( csv [ baseLine + i * 2 + 1 ][ 1 ]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.1 CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/config-file/#192-ini","text":"INI \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f INIData \u3092\u4f7f\u3044\u307e\u3059\u3002 INIData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! ini ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 INI \u30c7\u30fc\u30bf\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b HashTable < String , String > \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"SECTION.NAME\" ] \u306b\u3088\u3063\u3066\u30bb\u30af\u30b7\u30e7\u30f3 SECTION \u306b\u3042\u308b\u540d\u524d NAME \u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( U \"example/config/config.ini\" ); if ( ! ini ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.ini`\" ); } // \u5168\u3066\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5217\u6319 for ( const auto & section : ini . sections ()) { // \u30bb\u30af\u30b7\u30e7\u30f3\u540d Print << U \"[{}]\" _fmt ( section . section ); // \u30bb\u30af\u30b7\u30e7\u30f3\u5185\u306e\u3059\u3079\u3066\u306e\u30ad\u30fc\u3092\u5217\u6319 for ( const auto & key : section . keys ) { // \u30ad\u30fc\u306e\u540d\u524d\u3068\u5024 Print << U \"{} = {}\" _fmt ( key . name , key . value ); } } Print << U \"-----\" ; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e title \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092\u53d6\u5f97 const String windowTitle = ini [ U \"Window.title\" ]; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e width \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( ini [ U \"Window.width\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e height \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( ini [ U \"Window.height\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e sizable \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( ini [ U \"Window.sizable\" ]); // Scene \u30bb\u30af\u30b7\u30e7\u30f3\u306e background \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( ini [ U \"Scene.background\" ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // Array \u30bb\u30af\u30b7\u30e7\u30f3\u306e values \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = ini [ U \"Array.values\" ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 INI \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( ini [ U \"Items.count\" ]); for ( auto i : step ( itemsCount )) { Item item ; item . label = ini [ U \"Item{}.label\" _fmt ( i )]; item . pos = Parse < Point > ( ini [ U \"Item{}.pos\" _fmt ( i )]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.2 INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/config-file/#193-json","text":"JSON \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f JSONReader \u3092\u4f7f\u3044\u307e\u3059\u3002 JSONReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! json ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 JSON \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b JSON \u306e\u8981\u7d20\u3092\u8868\u793a void ShowObject ( const JSONValue & value ) { for ( const auto & object : value . objectView ()) { switch ( object . value . getType ()) { case JSONValueType :: Empty : Print << U \"[Empty]\" << object . name ; break ; case JSONValueType :: Null : Print << U \"[Null]\" << object . name ; break ; case JSONValueType :: Object : Print << U \"[Object]\" << object . name ; ShowObject ( object . value ); break ; case JSONValueType :: Array : Print << U \"[Array]\" << object . name ; for ( const auto & element : object . value . arrayView ()) { ShowObject ( element ); } break ; case JSONValueType :: String : Print << U \"[String]\" << object . name ; Print << object . value . getString (); break ; case JSONValueType :: Number : Print << U \"[Number]\" << object . name ; Print << object . value . get < double > (); break ; case JSONValueType :: Bool : Print << U \"[Bool]\" << object . name ; Print << object . value . get < bool > (); break ; } } } void Main () { // JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const JSONReader json ( U \"example/config/config.json\" ); if ( ! json ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.json`\" ); } // JSON \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowObject ( json ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = json [ U \"Window.title\" ]. getString (); const int32 windowWidth = json [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = json [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = json [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = json [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : json [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : json [ U \"Items\" ]. arrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.3 JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/config-file/#194-toml","text":"TOML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TOMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 TOMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! toml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 TOML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b TOML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowTable ( const TOMLValue & value ) { for ( const auto & table : value . tableView ()) { switch ( table . value . getType ()) { case TOMLValueType :: Empty : Print << U \"[Empty]\" << table . name ; break ; case TOMLValueType :: Table : Print << U \"[Table]\" << table . name ; ShowTable ( table . value ); break ; case TOMLValueType :: Array : Print << U \"[Array]\" << table . name ; for ( const auto & element : table . value . arrayView ()) { switch ( element . getType ()) { case TOMLValueType :: String : Print << element . getString (); break ; case TOMLValueType :: Number : Print << element . get < double > (); break ; case TOMLValueType :: Bool : Print << element . get < bool > (); break ; case TOMLValueType :: Date : Print << element . getDate (); break ; case TOMLValueType :: DateTime : Print << element . getDateTime (); break ; default : break ; } } break ; case TOMLValueType :: TableArray : Print << U \"[TableArray]\" << table . name ; for ( const auto & table2 : table . value . tableArrayView ()) { ShowTable ( table2 ); } break ; case TOMLValueType :: String : Print << U \"[String]\" << table . name ; Print << table . value . getString (); break ; case TOMLValueType :: Number : Print << U \"[Number]\" << table . name ; Print << table . value . get < double > (); break ; case TOMLValueType :: Bool : Print << U \"[Bool]\" << table . name ; Print << table . value . get < bool > (); break ; case TOMLValueType :: Date : Print << U \"[Date]\" << table . name ; Print << table . value . getDate (); break ; case TOMLValueType :: DateTime : Print << U \"[DateTime]\" << table . name ; Print << table . value . getDateTime (); break ; case TOMLValueType :: Unknown : Print << U \"[Unknown]\" << table . name ; break ; } } } void Main () { // TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const TOMLReader toml ( U \"example/config/config.toml\" ); if ( ! toml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.toml`\" ); } // TOML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowTable ( toml ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = toml [ U \"Window.title\" ]. getString (); const int32 windowWidth = toml [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = toml [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = toml [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = toml [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : toml [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.4 TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/config-file/#195-xml","text":"XML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f XMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 XMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! xml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 XML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowElements () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b XML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowElements ( const XMLElement & element ) { for ( auto e = element . firstChild (); e ; e = e . nextSibling ()) { Print << U \"<{}>\" _fmt ( e . name ()); if ( const auto attributes = e . attributes ()) { Print << attributes ; } if ( const auto text = e . text ()) { Print << text ; } ShowElements ( e ); Print << U \"</{}>\" _fmt ( e . name ()); } } void Main () { // XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const XMLReader xml ( U \"example/config/config.xml\" ); if ( ! xml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.xml`\" ); } // XML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowElements ( xml ); Print << U \"-----\" ; String windowTitle ; int32 windowWidth = Window :: DefaultClientSize . x ; int32 windowHeight = Window :: DefaultClientSize . y ; bool windowSizable = false ; ColorF sceneBackground = ColorF ( 0.0 ); Array < int32 > values ; Array < Item > items ; // \u8981\u7d20\u3092\u8d70\u67fb\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u53d6\u5f97 for ( auto elem = xml . firstChild (); elem ; elem = elem . nextSibling ()) { const String name = elem . name (); if ( name == U \"Window\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"title\" ) { windowTitle = elem2 . text (); } else if ( name2 == U \"width\" ) { windowWidth = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"height\" ) { windowHeight = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"sizable\" ) { windowSizable = Parse < bool > ( elem2 . text ()); } } } else if ( name == U \"Scene\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"background\" ) { sceneBackground = Parse < ColorF > ( elem2 . text ()); } } } if ( name == U \"Array\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { values << Parse < int32 > ( elem2 . text ()); } } if ( name == U \"Items\" ) { Item item ; for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"label\" ) { item . label = elem2 . text (); } else if ( name2 == U \"pos\" ) { Point pos ( 0 , 0 ); for ( auto elem3 = elem2 . firstChild (); elem3 ; elem3 = elem3 . nextSibling ()) { const String name3 = elem3 . name (); if ( name3 == U \"x\" ) { pos . x = Parse < int32 > ( elem3 . text ()); } else if ( name3 == U \"y\" ) { pos . y = Parse < int32 > ( elem3 . text ()); } } item . pos = pos ; } } items << item ; } } Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.5 XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/config-file/#196","text":"DirectoryWatcher \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u77e5\u3067\u304d\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092 DirectoryWatcher \u3067\u76e3\u8996\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3068\u304d\u306b\u8aad\u307f\u8fbc\u307f\u306a\u304a\u3059\u4ed5\u7d44\u307f\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u306a\u304c\u3089\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u3092\u53cd\u6620\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570 Array < Item > LoadItems ( const FilePath & tomlPath ) { const TOMLReader toml ( tomlPath ); Array < Item > items ; if ( ! toml ) { return items ; } for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } return items ; } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // DirectoryWatcher \u3067\u306e\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u30d5\u30eb\u30d1\u30b9\u304c\u5fc5\u8981 const FilePath tomlPath = FileSystem :: FullPath ( U \"example/config/config.toml\" ); // `config.toml` \u304c\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u306e\u76e3\u8996 DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u30ed\u30fc\u30c9 Array < Item > items = LoadItems ( tomlPath ); // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u30c1\u30a7\u30c3\u30af for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) // TOML \u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 { Print << U \"reload\" ; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u518d\u8aad\u307f\u8fbc\u307f items = LoadItems ( tomlPath ); } } // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.6 \u30d5\u30a1\u30a4\u30eb\u306e\u66f4\u65b0\u3092\u691c\u77e5\u3057\u3066\u30ea\u30ed\u30fc\u30c9\u3059\u308b"},{"location":"ja-jp/tutorial/data-structures/","text":"6. \u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002 6.1 \u52d5\u7684\u914d\u5217 \u00b6 Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8981\u7d20\u306e\u8ffd\u52a0 \u00b6 Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 \u00b6 [] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } } \u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b \u00b6 \u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } } \u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } } \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664 \u00b6 .erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } } 6.2 \u4e8c\u6b21\u5143\u914d\u5217 \u00b6 \u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Grid \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } } 6.3 \u6587\u5b57\u5217 \u00b6 Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 String \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db \u00b6 String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db \u00b6 std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } } 6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb \u00b6 \u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 HashTable \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } } 6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6. \u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/tutorial/data-structures/#6","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"6. \u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/tutorial/data-structures/#61","text":"Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.1 \u52d5\u7684\u914d\u5217"},{"location":"ja-jp/tutorial/data-structures/#_1","text":"Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u8ffd\u52a0"},{"location":"ja-jp/tutorial/data-structures/#_2","text":"[] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9"},{"location":"ja-jp/tutorial/data-structures/#_3","text":"\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_4","text":"\u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } }","title":"\u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/tutorial/data-structures/#_5","text":"\u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_6","text":"\u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_7","text":".erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } }","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_8","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"ja-jp/tutorial/data-structures/#62","text":"\u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.2 \u4e8c\u6b21\u5143\u914d\u5217"},{"location":"ja-jp/tutorial/data-structures/#grid","text":"# include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } }","title":"Grid \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/data-structures/#_9","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"ja-jp/tutorial/data-structures/#63","text":"Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"6.3 \u6587\u5b57\u5217"},{"location":"ja-jp/tutorial/data-structures/#string","text":"# include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } }","title":"String \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/data-structures/#_10","text":"String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/data-structures/#_11","text":"std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/data-structures/#64","text":"\u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002","title":"6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"ja-jp/tutorial/data-structures/#hashtable","text":"# include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } }","title":"HashTable \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/data-structures/#65","text":"Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/tutorial/effect/","text":"16. \u30a8\u30d5\u30a7\u30af\u30c8 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6f14\u51fa\u306b\u4fbf\u5229\u306a Effect \u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002 16.1 Effect \u306e\u57fa\u672c \u00b6 \u30a8\u30d5\u30a7\u30af\u30c8\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u7ba1\u7406\u3059\u308b Effect \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001 Effect :: add < EffectType > () \u3067\u500b\u3005\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\u3053\u3053\u3067\u3044\u3046 EffectType \u306f\u3001 IEffect \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\u306f bool update ( double t ) override \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 t \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u63cf\u753b\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u3082\u7d99\u7d9a\u3055\u305b\u308b\u304b\u3092 bool \u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070 return t < 3 . 0 ; \u3068\u3059\u308c\u3070\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u306f 3 \u79d2\u9593\u7d99\u7d9a\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u3001\u6642\u9593\u3068\u3068\u3082\u306b\u5927\u304d\u304f\u306a\u308b\u8f2a\u3092\u767a\u751f\u3055\u305b\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; // \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u304c\u3001Effect::add<RingEffect>() \u306e\u5f15\u6570\u306b\u306a\u308b RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( m_pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add < RingEffect > ( Cursor :: Pos ()); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } \u30e9\u30e0\u30c0\u5f0f\u3067\u306e\u5b9f\u88c5 \u00b6 IEffect \u7d99\u627f\u30af\u30e9\u30b9\u306e\u4ee3\u308f\u308a\u306b\u3001\u5f15\u6570\u304c double , \u623b\u308a\u5024\u304c bool \u578b\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u6570\u884c\u3067\u66f8\u3051\u308b\u5358\u7d14\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u3001\u308f\u3056\u308f\u3056\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306f\u3053\u306e\u65b9\u6cd5\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add ([ pos = Cursor :: Pos ()]( double t ) { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; }); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } 16.2 \u5c11\u3057\u3053\u3060\u308f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8 \u00b6 \u30a4\u30fc\u30b8\u30f3\u30b0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; ColorF m_color ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) , m_color ( RandomColor ()) {} bool update ( double t ) override { // \u30a4\u30fc\u30b8\u30f3\u30b0 const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 100 ). drawFrame ( 20.0 * ( 1.0 - e ), m_color ); return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { effect . add < RingEffect > ( Cursor :: Pos ()); } { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3092\u6709\u52b9\u306b const ScopedRenderStates2D additiveBlend ( BlendState :: Additive ); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } } 16.3 \u4e0a\u6607\u3059\u308b\u6587\u5b57 \u00b6 \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct NumberEffect : IEffect { Vec2 m_start ; int32 m_number ; Font m_font ; NumberEffect ( const Vec2 & start , int32 num , const Font & font ) : m_start ( start ) , m_number ( num ) , m_font ( font ) {} bool update ( double t ) override { const HSV color ( 180 - m_number * 1.8 , 1.0 - ( t * 2.0 )); m_font ( m_number ). drawAt ( m_start . movedBy ( 0 , t * - 120 ), color ); // 0.5 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3067\u6d88\u6ec5 return t < 0.5 ; } }; void Main () { const Font font ( 50 , Typeface :: Heavy ); Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < NumberEffect > ( Cursor :: Pos (), Random ( 0 , 100 ), font ); } effect . update (); } } 16.4 \u98db\u3073\u6563\u308b\u7834\u7247 \u00b6 \u4e00\u3064\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u8907\u6570\u306e\u56f3\u5f62\u3092\u63cf\u304f\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct Particle { Vec2 start ; Vec2 velocity ; }; struct Spark : IEffect { Array < Particle > m_particles ; Spark ( const Vec2 & start ) : m_particles ( 50 ) { for ( auto & particle : m_particles ) { particle . start = start + RandomVec2 ( 10.0 ); particle . velocity = RandomVec2 ( 1.0 ) * Random ( 80.0 ); } } bool update ( double t ) override { for ( const auto & particle : m_particles ) { const Vec2 pos = particle . start + particle . velocity * t + 0.5 * t * t * Vec2 ( 0 , 240 ); Triangle ( pos , 16.0 , pos . x * 5 _deg ). draw ( HSV ( pos . y - 40 ). toColorF ( 1.0 - t )); } return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < Spark > ( Cursor :: Pos ()); } effect . update (); } } 16.5 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4e00\u6642\u505c\u6b62\u3068\u6d88\u53bb \u00b6 Effect :: pause () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62\u3001 Effect :: resume () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b\u3001 Effect :: clear () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 80 ). drawFrame ( 20.0 * ( 1.0 - e )); return t < 1.0 ; } }; void Main () { Effect effect ; // \u30a8\u30d5\u30a7\u30af\u30c8\u767a\u751f\u3055\u305b\u308b\u9593\u9694 constexpr double effectSpawnTime = 0.15 ; double time = 0.0 ; while ( System :: Update ()) { if ( ! effect . isPaused ()) { time += Scene :: DeltaTime (); } ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); // effectSpawnTime \u304c\u7d4c\u904e\u3059\u308b\u305f\u3073\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f if ( time >= effectSpawnTime ) { time -= effectSpawnTime ; effect . add < RingEffect > ( Cursor :: Pos ()); } effect . update (); if ( effect . isPaused ()) { if ( SimpleGUI :: Button ( U \"Resume\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b effect . resume (); } } else { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62 effect . pause (); } } if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 600 , 60 ), 100 )) { // \u767a\u751f\u4e2d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb effect . clear (); } } } \u3053\u306e\u7ae0\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u304c\u3001\u3088\u308a\u5927\u91cf\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u52b9\u7387\u7684\u306b\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u306f\u3001 ParticleSystem2D \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"16. \u30a8\u30d5\u30a7\u30af\u30c8"},{"location":"ja-jp/tutorial/effect/#16","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6f14\u51fa\u306b\u4fbf\u5229\u306a Effect \u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"16. \u30a8\u30d5\u30a7\u30af\u30c8"},{"location":"ja-jp/tutorial/effect/#161-effect","text":"\u30a8\u30d5\u30a7\u30af\u30c8\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u7ba1\u7406\u3059\u308b Effect \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001 Effect :: add < EffectType > () \u3067\u500b\u3005\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\u3053\u3053\u3067\u3044\u3046 EffectType \u306f\u3001 IEffect \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\u306f bool update ( double t ) override \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 t \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u63cf\u753b\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u3082\u7d99\u7d9a\u3055\u305b\u308b\u304b\u3092 bool \u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070 return t < 3 . 0 ; \u3068\u3059\u308c\u3070\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u306f 3 \u79d2\u9593\u7d99\u7d9a\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u3001\u6642\u9593\u3068\u3068\u3082\u306b\u5927\u304d\u304f\u306a\u308b\u8f2a\u3092\u767a\u751f\u3055\u305b\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; // \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u304c\u3001Effect::add<RingEffect>() \u306e\u5f15\u6570\u306b\u306a\u308b RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( m_pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add < RingEffect > ( Cursor :: Pos ()); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } }","title":"16.1 Effect \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/effect/#_1","text":"IEffect \u7d99\u627f\u30af\u30e9\u30b9\u306e\u4ee3\u308f\u308a\u306b\u3001\u5f15\u6570\u304c double , \u623b\u308a\u5024\u304c bool \u578b\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u6570\u884c\u3067\u66f8\u3051\u308b\u5358\u7d14\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u3001\u308f\u3056\u308f\u3056\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306f\u3053\u306e\u65b9\u6cd5\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add ([ pos = Cursor :: Pos ()]( double t ) { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; }); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } }","title":"\u30e9\u30e0\u30c0\u5f0f\u3067\u306e\u5b9f\u88c5"},{"location":"ja-jp/tutorial/effect/#162","text":"\u30a4\u30fc\u30b8\u30f3\u30b0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; ColorF m_color ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) , m_color ( RandomColor ()) {} bool update ( double t ) override { // \u30a4\u30fc\u30b8\u30f3\u30b0 const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 100 ). drawFrame ( 20.0 * ( 1.0 - e ), m_color ); return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { effect . add < RingEffect > ( Cursor :: Pos ()); } { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3092\u6709\u52b9\u306b const ScopedRenderStates2D additiveBlend ( BlendState :: Additive ); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } }","title":"16.2 \u5c11\u3057\u3053\u3060\u308f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8"},{"location":"ja-jp/tutorial/effect/#163","text":"\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct NumberEffect : IEffect { Vec2 m_start ; int32 m_number ; Font m_font ; NumberEffect ( const Vec2 & start , int32 num , const Font & font ) : m_start ( start ) , m_number ( num ) , m_font ( font ) {} bool update ( double t ) override { const HSV color ( 180 - m_number * 1.8 , 1.0 - ( t * 2.0 )); m_font ( m_number ). drawAt ( m_start . movedBy ( 0 , t * - 120 ), color ); // 0.5 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3067\u6d88\u6ec5 return t < 0.5 ; } }; void Main () { const Font font ( 50 , Typeface :: Heavy ); Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < NumberEffect > ( Cursor :: Pos (), Random ( 0 , 100 ), font ); } effect . update (); } }","title":"16.3 \u4e0a\u6607\u3059\u308b\u6587\u5b57"},{"location":"ja-jp/tutorial/effect/#164","text":"\u4e00\u3064\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u8907\u6570\u306e\u56f3\u5f62\u3092\u63cf\u304f\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct Particle { Vec2 start ; Vec2 velocity ; }; struct Spark : IEffect { Array < Particle > m_particles ; Spark ( const Vec2 & start ) : m_particles ( 50 ) { for ( auto & particle : m_particles ) { particle . start = start + RandomVec2 ( 10.0 ); particle . velocity = RandomVec2 ( 1.0 ) * Random ( 80.0 ); } } bool update ( double t ) override { for ( const auto & particle : m_particles ) { const Vec2 pos = particle . start + particle . velocity * t + 0.5 * t * t * Vec2 ( 0 , 240 ); Triangle ( pos , 16.0 , pos . x * 5 _deg ). draw ( HSV ( pos . y - 40 ). toColorF ( 1.0 - t )); } return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < Spark > ( Cursor :: Pos ()); } effect . update (); } }","title":"16.4 \u98db\u3073\u6563\u308b\u7834\u7247"},{"location":"ja-jp/tutorial/effect/#165","text":"Effect :: pause () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62\u3001 Effect :: resume () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b\u3001 Effect :: clear () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 80 ). drawFrame ( 20.0 * ( 1.0 - e )); return t < 1.0 ; } }; void Main () { Effect effect ; // \u30a8\u30d5\u30a7\u30af\u30c8\u767a\u751f\u3055\u305b\u308b\u9593\u9694 constexpr double effectSpawnTime = 0.15 ; double time = 0.0 ; while ( System :: Update ()) { if ( ! effect . isPaused ()) { time += Scene :: DeltaTime (); } ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); // effectSpawnTime \u304c\u7d4c\u904e\u3059\u308b\u305f\u3073\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f if ( time >= effectSpawnTime ) { time -= effectSpawnTime ; effect . add < RingEffect > ( Cursor :: Pos ()); } effect . update (); if ( effect . isPaused ()) { if ( SimpleGUI :: Button ( U \"Resume\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b effect . resume (); } } else { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62 effect . pause (); } } if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 600 , 60 ), 100 )) { // \u767a\u751f\u4e2d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb effect . clear (); } } } \u3053\u306e\u7ae0\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u304c\u3001\u3088\u308a\u5927\u91cf\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u52b9\u7387\u7684\u306b\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u306f\u3001 ParticleSystem2D \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"16.5 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4e00\u6642\u505c\u6b62\u3068\u6d88\u53bb"},{"location":"ja-jp/tutorial/font/","text":"8. \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 8.1 Font \u00b6 \u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } } 8.2 \u6539\u884c\u3059\u308b \u00b6 \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } } 8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } } 8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e \u00b6 Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } } 8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046 \u00b6 PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } } 8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002 8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b \u00b6 Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } } 8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } } 8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b \u00b6 \u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } } 8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } } 8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b \u00b6 \u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } } 8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b \u00b6 font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } } 8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b \u00b6 Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } } 8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } } 8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b \u00b6 String :: substr ( 0 , N ) \u3067\u30010 \u6587\u5b57\u76ee\u304b\u3089 N \u6587\u5b57\u5206\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002N \u3092\u6642\u9593\u306b\u5fdc\u3058\u3066\u5897\u3084\u3059\u3053\u3068\u3067 1 \u6587\u5b57\u305a\u3064\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002N \u304c\u6587\u5b57\u5217\u306e\u9577\u3055\u3088\u308a\u3082\u5927\u304d\u304f\u306a\u3063\u3066\u3082\u3001\u305d\u306e\u5206\u306f\u5358\u306b\u7121\u8996\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } } 8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4 \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af \u00b6 if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30d5\u30a9\u30f3\u30c8 \u00b6 \u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"8. \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#8","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"8. \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#81-font","text":"\u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } }","title":"8.1 Font"},{"location":"ja-jp/tutorial/font/#82","text":"\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } }","title":"8.2 \u6539\u884c\u3059\u308b"},{"location":"ja-jp/tutorial/font/#83","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } }","title":"8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba"},{"location":"ja-jp/tutorial/font/#84","text":"Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } }","title":"8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"ja-jp/tutorial/font/#85","text":"PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } }","title":"8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#86-pc","text":"PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002","title":"8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#87","text":"Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } }","title":"8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/tutorial/font/#88","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } }","title":"8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/font/#89","text":"\u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } }","title":"8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b"},{"location":"ja-jp/tutorial/font/#810","text":"\u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } }","title":"8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"ja-jp/tutorial/font/#811","text":"\u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } }","title":"8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/tutorial/font/#812","text":"font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } }","title":"8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b"},{"location":"ja-jp/tutorial/font/#813","text":"Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } }","title":"8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/font/#814","text":"Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } }","title":"8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/font/#815-1","text":"String :: substr ( 0 , N ) \u3067\u30010 \u6587\u5b57\u76ee\u304b\u3089 N \u6587\u5b57\u5206\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002N \u3092\u6642\u9593\u306b\u5fdc\u3058\u3066\u5897\u3084\u3059\u3053\u3068\u3067 1 \u6587\u5b57\u305a\u3064\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002N \u304c\u6587\u5b57\u5217\u306e\u9577\u3055\u3088\u308a\u3082\u5927\u304d\u304f\u306a\u3063\u3066\u3082\u3001\u305d\u306e\u5206\u306f\u5358\u306b\u7121\u8996\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } }","title":"8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b"},{"location":"ja-jp/tutorial/font/#816","text":"","title":"8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/font/#_1","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4"},{"location":"ja-jp/tutorial/font/#_2","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba"},{"location":"ja-jp/tutorial/font/#_3","text":"if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af"},{"location":"ja-jp/tutorial/font/#_4","text":"\u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8"},{"location":"ja-jp/tutorial/formatting/","text":"7. \u6587\u5b57\u5217\u3068\u6570\u5024\u306e\u5909\u63db \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } } 7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002 \u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } } \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a \u00b6 { 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } } \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570 \u00b6 \u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } } \u30d1\u30c7\u30a3\u30f3\u30b0 \u00b6 N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } } \u57fa\u6570 \u00b6 { : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } } \u7b26\u53f7 \u00b6 { : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db \u00b6 Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Parse \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } } ParseError \u306e\u6355\u6349 \u00b6 \u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"7. \u6587\u5b57\u5217\u3068\u6570\u5024\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#7","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"7. \u6587\u5b57\u5217\u3068\u6570\u5024\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#71","text":"Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } }","title":"7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#72","text":"\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002","title":"7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#_1","text":"# include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } }","title":"\u57fa\u672c"},{"location":"ja-jp/tutorial/formatting/#_2","text":"{ 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } }","title":"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a"},{"location":"ja-jp/tutorial/formatting/#_3","text":"\u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } }","title":"\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570"},{"location":"ja-jp/tutorial/formatting/#_4","text":"N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } }","title":"\u30d1\u30c7\u30a3\u30f3\u30b0"},{"location":"ja-jp/tutorial/formatting/#_5","text":"{ : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } }","title":"\u57fa\u6570"},{"location":"ja-jp/tutorial/formatting/#_6","text":"{ : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7b26\u53f7"},{"location":"ja-jp/tutorial/formatting/#73","text":"Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#parse","text":"# include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } }","title":"Parse \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/formatting/#parseerror","text":"\u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"ParseError \u306e\u6355\u6349"},{"location":"ja-jp/tutorial/gui/","text":"9. GUI \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 9.1 \u30dc\u30bf\u30f3 \u00b6 \u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } } 9.2 \u30b9\u30e9\u30a4\u30c0\u30fc \u00b6 \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } } 9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } } 9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 \u00b6 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } } 9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9. GUI"},{"location":"ja-jp/tutorial/gui/#9-gui","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"9. GUI"},{"location":"ja-jp/tutorial/gui/#91","text":"\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } }","title":"9.1 \u30dc\u30bf\u30f3"},{"location":"ja-jp/tutorial/gui/#92","text":"\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } }","title":"9.2 \u30b9\u30e9\u30a4\u30c0\u30fc"},{"location":"ja-jp/tutorial/gui/#93","text":"\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } }","title":"9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/tutorial/gui/#94","text":"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } }","title":"9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3"},{"location":"ja-jp/tutorial/gui/#95","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/tutorial/keyboard/","text":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 11.1 \u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b \u00b6 \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u306b\u306f Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 A, B, C, ... \u306f KeyA , KeyB , KeyC , ... 1, 2, 3, ... \u306f Key1 , Key2 , Key3 , ... F1, F2, F3, ... \u306f KeyF1 , KeyF2 , KeyF3 , ... \u2191, \u2193, \u2190, \u2192 \u306f KeyUp , KeyDown , KeyLeft , KeyRight \u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeySpace \u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u306f KeyEnter \u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeyBackspace Tab \u30ad\u30fc\u306f KeyTab Esc \u30ad\u30fc\u306f KeyEscape PageUp, PageDown \u306f KeyPageUp , KeyPageDown Delete \u30ad\u30fc\u306f KeyDelete Numpad \u306e 0, 1, 2, ... \u306f KeyNum0 , KeyNum1 , KeyNum2 , ... \u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyShift \u5de6\u30b7\u30d5\u30c8\u30ad\u30fc\u3001\u53f3\u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyLShift , KeyRShift \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30ad\u30fc\u306f KeyControl (macOS) \u30b3\u30de\u30f3\u30c9\u30ad\u30fc\u306f KeyCommand \u300c,\u300d\u300c.\u300d\u300c/\u300d\u30ad\u30fc\u306f KeyComma , KeyPeriod , KeySlash \u4e0a\u8a18\u4ee5\u5916\u306e\u30ad\u30fc\u306f < Siv3D / Keyboard . hpp > \u3092\u53c2\u7167 \u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { const double delta = 200 * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } // [C] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u4e2d\u592e\u306b\u623b\u308b if ( KeyC . down ()) { pos = Scene :: Center (); } Circle ( pos , 50 ). draw (); } } 11.2 \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u6642\u9593 \u00b6 Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << KeyA . pressedDuration (); } } 11.3 \u30ad\u30fc\u306e\u540d\u524d \u00b6 Key :: name () \u306f\u3001\u305d\u306e\u30ad\u30fc\u306e\u540d\u524d\u3092 String \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << KeyA . name (); Print << KeySpace . name (); Print << KeyLeft . name (); Print << Key3 . name (); Print << KeyF11 . name (); while ( System :: Update ()) { } } 11.4 \u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b \u00b6 A \u307e\u305f\u306f B \u00b6 | \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u305d\u306e\u3044\u305a\u308c\u304b\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); if (( KeySpace | KeyEnter ). pressed ()) { Print << U \"KeySpace / KeyEnter\" ; } } } A \u3092\u62bc\u3057\u306a\u304c\u3089 B \u00b6 + \u3092\u4f7f\u3063\u3066 2 \u3064\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u5de6\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u306a\u304c\u3089\u3001\u53f3\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if (( KeyControl + KeyC ). down () || ( KeyCommand + KeyC ). down ()) { Print << U \"Ctrl + C / Command + C\" ; } } } 11.5 \u30c6\u30ad\u30b9\u30c8\u5165\u529b \u00b6 TextInput :: UpdateText () \u306b String \u578b\u306e\u5909\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 ); String text ; const Rect area ( 50 , 50 , 700 , 300 ); while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); area . draw ( ColorF ( 0.3 )); font ( text ). draw ( area . stretched ( - 20 )); } }","title":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b"},{"location":"ja-jp/tutorial/keyboard/#11","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b"},{"location":"ja-jp/tutorial/keyboard/#111","text":"\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u306b\u306f Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 A, B, C, ... \u306f KeyA , KeyB , KeyC , ... 1, 2, 3, ... \u306f Key1 , Key2 , Key3 , ... F1, F2, F3, ... \u306f KeyF1 , KeyF2 , KeyF3 , ... \u2191, \u2193, \u2190, \u2192 \u306f KeyUp , KeyDown , KeyLeft , KeyRight \u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeySpace \u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u306f KeyEnter \u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeyBackspace Tab \u30ad\u30fc\u306f KeyTab Esc \u30ad\u30fc\u306f KeyEscape PageUp, PageDown \u306f KeyPageUp , KeyPageDown Delete \u30ad\u30fc\u306f KeyDelete Numpad \u306e 0, 1, 2, ... \u306f KeyNum0 , KeyNum1 , KeyNum2 , ... \u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyShift \u5de6\u30b7\u30d5\u30c8\u30ad\u30fc\u3001\u53f3\u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyLShift , KeyRShift \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30ad\u30fc\u306f KeyControl (macOS) \u30b3\u30de\u30f3\u30c9\u30ad\u30fc\u306f KeyCommand \u300c,\u300d\u300c.\u300d\u300c/\u300d\u30ad\u30fc\u306f KeyComma , KeyPeriod , KeySlash \u4e0a\u8a18\u4ee5\u5916\u306e\u30ad\u30fc\u306f < Siv3D / Keyboard . hpp > \u3092\u53c2\u7167 \u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { const double delta = 200 * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } // [C] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u4e2d\u592e\u306b\u623b\u308b if ( KeyC . down ()) { pos = Scene :: Center (); } Circle ( pos , 50 ). draw (); } }","title":"11.1 \u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b"},{"location":"ja-jp/tutorial/keyboard/#112","text":"Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << KeyA . pressedDuration (); } }","title":"11.2 \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u6642\u9593"},{"location":"ja-jp/tutorial/keyboard/#113","text":"Key :: name () \u306f\u3001\u305d\u306e\u30ad\u30fc\u306e\u540d\u524d\u3092 String \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << KeyA . name (); Print << KeySpace . name (); Print << KeyLeft . name (); Print << Key3 . name (); Print << KeyF11 . name (); while ( System :: Update ()) { } }","title":"11.3 \u30ad\u30fc\u306e\u540d\u524d"},{"location":"ja-jp/tutorial/keyboard/#114","text":"","title":"11.4 \u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b"},{"location":"ja-jp/tutorial/keyboard/#a-b","text":"| \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u305d\u306e\u3044\u305a\u308c\u304b\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); if (( KeySpace | KeyEnter ). pressed ()) { Print << U \"KeySpace / KeyEnter\" ; } } }","title":"A \u307e\u305f\u306f B"},{"location":"ja-jp/tutorial/keyboard/#a-b_1","text":"+ \u3092\u4f7f\u3063\u3066 2 \u3064\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u5de6\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u306a\u304c\u3089\u3001\u53f3\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if (( KeyControl + KeyC ). down () || ( KeyCommand + KeyC ). down ()) { Print << U \"Ctrl + C / Command + C\" ; } } }","title":"A \u3092\u62bc\u3057\u306a\u304c\u3089 B"},{"location":"ja-jp/tutorial/keyboard/#115","text":"TextInput :: UpdateText () \u306b String \u578b\u306e\u5909\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 ); String text ; const Rect area ( 50 , 50 , 700 , 300 ); while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); area . draw ( ColorF ( 0.3 )); font ( text ). draw ( area . stretched ( - 20 )); } }","title":"11.5 \u30c6\u30ad\u30b9\u30c8\u5165\u529b"},{"location":"ja-jp/tutorial/mouse/","text":"12. \u30de\u30a6\u30b9\u5165\u529b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 12.1 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306f Cursor :: Pos () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: PosF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Info Cursor :: Pos () \u3067\u53d6\u5f97\u3067\u304d\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f\u3001\u76f4\u524d\u306e System :: Update () \u306e\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u306e\u5ea7\u6a19\u306e\u305f\u3081\u3001\u5b9f\u969b\u753b\u9762\u306b\u898b\u3048\u3066\u3044\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3088\u308a\u3082\u53e4\u3044\u5ea7\u6a19\u3092\u793a\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Skyblue ); } } 12.2 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf \u00b6 \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u306f Cursor :: Delta () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: DeltaF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u3092\u3064\u304b\u3093\u3067\u3044\u308b\u304b bool grab = false ; Circle circle ( Scene :: Center (), 50 ); while ( System :: Update ()) { if ( grab ) { // \u79fb\u52d5\u91cf\u5206\u3060\u3051\u5186\u3092\u79fb\u52d5 circle . moveBy ( Cursor :: Delta ()); } if ( circle . leftClicked ()) // \u5186\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 { grab = true ; } else if ( MouseL . up ()) // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u305f\u3089 { grab = false ; } if ( grab || circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } circle . draw ( Palette :: Skyblue ); } } Info \u56f3\u5f62\u306e .moveBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u307e\u3059\u3002\u4e00\u65b9\u3067\u4f3c\u305f\u3088\u3046\u306a\u540d\u524d\u306e .movedBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u305f\u65b0\u3057\u3044\u56f3\u5f62\u3092\u8fd4\u3057\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u306f\u5909\u66f4\u3057\u307e\u305b\u3093\u3002 12.3 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b \u00b6 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306b\u306f\u3001\u4ee5\u4e0b\u306e Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u5b9a\u6570 \u5bfe\u5fdc\u3059\u308b\u30dc\u30bf\u30f3 MouseL \u5de6\u30dc\u30bf\u30f3 MouseR \u53f3\u30dc\u30bf\u30f3 MouseM \u4e2d\u592e\u30dc\u30bf\u30f3 MouseX1 \u62e1\u5f35\u30dc\u30bf\u30f3 1 MouseX2 \u62e1\u5f35\u30dc\u30bf\u30f3 2 MouseX3 \u62e1\u5f35\u30dc\u30bf\u30f3 3 MouseX4 \u62e1\u5f35\u30dc\u30bf\u30f3 4 MouseX5 \u62e1\u5f35\u30dc\u30bf\u30f3 5 \u524d\u7ae0\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u3068\u540c\u69d8\u306b\u3001\u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressed (); Print << MouseM . pressed (); Print << MouseR . pressed (); } } 12.4 \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593 \u00b6 Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressedDuration (); } } 12.5 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf \u00b6 \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: Wheel () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: WheelH () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { pos . y -= Mouse :: Wheel () * 10 ; pos . x += Mouse :: WheelH () * 10 ; RectF ( Arg :: center = pos , 200 ). draw (); } }","title":"12. \u30de\u30a6\u30b9\u5165\u529b"},{"location":"ja-jp/tutorial/mouse/#12","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"12. \u30de\u30a6\u30b9\u5165\u529b"},{"location":"ja-jp/tutorial/mouse/#121","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306f Cursor :: Pos () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: PosF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Info Cursor :: Pos () \u3067\u53d6\u5f97\u3067\u304d\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f\u3001\u76f4\u524d\u306e System :: Update () \u306e\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u306e\u5ea7\u6a19\u306e\u305f\u3081\u3001\u5b9f\u969b\u753b\u9762\u306b\u898b\u3048\u3066\u3044\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3088\u308a\u3082\u53e4\u3044\u5ea7\u6a19\u3092\u793a\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Skyblue ); } }","title":"12.1 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19"},{"location":"ja-jp/tutorial/mouse/#122","text":"\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u306f Cursor :: Delta () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: DeltaF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u3092\u3064\u304b\u3093\u3067\u3044\u308b\u304b bool grab = false ; Circle circle ( Scene :: Center (), 50 ); while ( System :: Update ()) { if ( grab ) { // \u79fb\u52d5\u91cf\u5206\u3060\u3051\u5186\u3092\u79fb\u52d5 circle . moveBy ( Cursor :: Delta ()); } if ( circle . leftClicked ()) // \u5186\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 { grab = true ; } else if ( MouseL . up ()) // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u305f\u3089 { grab = false ; } if ( grab || circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } circle . draw ( Palette :: Skyblue ); } } Info \u56f3\u5f62\u306e .moveBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u307e\u3059\u3002\u4e00\u65b9\u3067\u4f3c\u305f\u3088\u3046\u306a\u540d\u524d\u306e .movedBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u305f\u65b0\u3057\u3044\u56f3\u5f62\u3092\u8fd4\u3057\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u306f\u5909\u66f4\u3057\u307e\u305b\u3093\u3002","title":"12.2 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf"},{"location":"ja-jp/tutorial/mouse/#123","text":"\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306b\u306f\u3001\u4ee5\u4e0b\u306e Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u5b9a\u6570 \u5bfe\u5fdc\u3059\u308b\u30dc\u30bf\u30f3 MouseL \u5de6\u30dc\u30bf\u30f3 MouseR \u53f3\u30dc\u30bf\u30f3 MouseM \u4e2d\u592e\u30dc\u30bf\u30f3 MouseX1 \u62e1\u5f35\u30dc\u30bf\u30f3 1 MouseX2 \u62e1\u5f35\u30dc\u30bf\u30f3 2 MouseX3 \u62e1\u5f35\u30dc\u30bf\u30f3 3 MouseX4 \u62e1\u5f35\u30dc\u30bf\u30f3 4 MouseX5 \u62e1\u5f35\u30dc\u30bf\u30f3 5 \u524d\u7ae0\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u3068\u540c\u69d8\u306b\u3001\u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressed (); Print << MouseM . pressed (); Print << MouseR . pressed (); } }","title":"12.3 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b"},{"location":"ja-jp/tutorial/mouse/#124","text":"Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressedDuration (); } }","title":"12.4 \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593"},{"location":"ja-jp/tutorial/mouse/#125","text":"\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: Wheel () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: WheelH () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { pos . y -= Mouse :: Wheel () * 10 ; pos . x += Mouse :: WheelH () * 10 ; RectF ( Arg :: center = pos , 200 ). draw (); } }","title":"12.5 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf"},{"location":"ja-jp/tutorial/random/","text":"14. \u30e9\u30f3\u30c0\u30e0 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u3084\u8272\u3001\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u308a\u3001\u914d\u5217\u304b\u3089\u7121\u4f5c\u70ba\u306b\u8981\u7d20\u3092\u9078\u629e\u3057\u305f\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 14.1 \u534a\u3005\u306e\u78ba\u7387 \u00b6 RandomBool () \u306f 50% \u306e\u78ba\u7387\u3067 true , 50% \u306e\u78ba\u7387\u3067 false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 50% \u306e\u78ba\u7387\u3067 true, 50% \u306e\u78ba\u7387\u3067 false Print << RandomBool (); } } } } 14.2 \u78ba\u7387\u3092\u6307\u5b9a \u00b6 RandomBool () \u306b\u306f 0.0 \uff5e 1.0 \u306e\u7bc4\u56f2\u3067 true \u306b\u306a\u308b\u78ba\u7387\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u300210% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 1 \u3092\u300125% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 25 \u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 30% \u306e\u78ba\u7387\u3067 true, 70% \u306e\u78ba\u7387\u3067 false Print << RandomBool ( 0.3 ); } } } } 14.3 \u30e9\u30f3\u30c0\u30e0\u306a\u6570 \u00b6 Random < Type > ( max ) \u306f 0 \u304b\u3089 max \u307e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u3001 Random < Type > ( min , max ) \u306f min \u304b\u3089\u3000max \u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"int32\" , Vec2 ( 200 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0\uff5e100 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570 Print << Random ( 100 ); } } if ( SimpleGUI :: Button ( U \"double\" , Vec2 ( 200 , 60 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // -100.0\uff5e100.0 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << Random ( - 100.0 , 100.0 ); } } if ( SimpleGUI :: Button ( U \"char32\" , Vec2 ( 200 , 100 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // A\uff5eZ \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57 Print << Random ( U 'A' , U 'Z' ); } } } } 14.4 \u30e9\u30f3\u30c0\u30e0\u306a\u8272 \u00b6 RandomColorF () \u306f\u30e9\u30f3\u30c0\u30e0\u306a\u8272\u3092 HSV ( Random ( 360 . 0 ) , 1 . 0 , 1 . 0 ) \u3068\u3044\u3046\u5f0f\u3067\u751f\u6210\u3057\u3066 ColorF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < ColorF > colors ; for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 colors << RandomColor (); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & color : colors ) { color = RandomColor (); } } for ( size_t i : step ( colors . size ())) { Circle ( 50 + i * 50.0 , 100 , 20 ). draw ( colors [ i ]); } } } 14.5 \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 \u00b6 RandomVec2(double) \u00b6 RandomVec2 ( double ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u3055\u3092\u6301\u3064\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Vec2 center = Scene :: Center (); // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb Vec2 dir = RandomVec2 ( 200 ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb dir = RandomVec2 ( 200 ); } Circle ( center , 20 ). draw (); Circle ( center , 200 ). drawFrame ( 1 , 1 , Palette :: Gray ); Circle ( center + dir , 10 ). draw (); } } RandomVec2(RectF) \u00b6 RandomVec2 ( RectF ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr RectF rect ( 100 , 100 , 400 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( rect ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( rect ); } } rect . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } } RandomVec2(Circle) \u00b6 RandomVec2 ( Circle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u5186\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 300 , 200 , 150 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( circle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( circle ); } } circle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } } RandomVec2(Triangle) \u00b6 RandomVec2 ( Triangle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u4e09\u89d2\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Triangle triangle ( 100 , 100 , 500 , 300 , 200 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( triangle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( triangle ); } } triangle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } } 14.6 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20 \u00b6 Array :: choice () \u306f\u3001\u914d\u5217\u306e\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3059 Print << options . choice (); } } } 14.7 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8907\u6570\u306e\u8981\u7d20 \u00b6 Array :: choice () \u306b\u500b\u6570\u3092\u6e21\u3059\u3068\u3001\u914d\u5217\u306e\u4e2d\u304b\u3089\u3001\u91cd\u8907\u306a\u304f\u305d\u306e\u500b\u6570\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u9078\u629e\u3057\u3001\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\u8981\u7d20\u306e\u9806\u756a\u306f\u914d\u5217\u5185\u3067\u306e\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092 3 \u3064\u8fd4\u3059 Print << options . choice ( 3 ); } } } 14.8 \u914d\u5217\u306e\u30b7\u30e3\u30c3\u30d5\u30eb \u00b6 Array :: shuffle () \u306f\u914d\u5217\u306e\u8981\u7d20\u306e\u9806\u756a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u307e\u3059\u3002 Array :: shuffled () \u3092\u4f7f\u3046\u3068\u3001\u81ea\u8eab\u306f\u5909\u66f4\u305b\u305a\u306b\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u305f\u65b0\u3057\u3044\u914d\u5217\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Shuffle\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u8981\u7d20\u306e\u9806\u756a\u3092\u30b7\u30e3\u30c3\u30d5\u30eb options . shuffle (); Print << options ; } } } 14.9 \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e \u00b6 Sample () \u3092\u4f7f\u3046\u3068\u3001 {} \u3067\u6e21\u3057\u305f\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u8981\u7d20\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << Sample ({ 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } } \u7b2c 1 \u5f15\u6570\u306b\u500b\u6570\u3001\u7b2c 2 \u5f15\u6570\u306b\u9078\u629e\u80a2\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 Arrai :: choice () \u306e\u6642\u3068\u540c\u69d8\u306b\u3001\u8981\u7d20\u306e\u9806\u756a\u306f\u6700\u521d\u306b\u6e21\u3055\u308c\u305f\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b 3 \u500b\u9078\u629e Print << Sample ( 3 , { 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } } 14.10 \u51fa\u73fe\u78ba\u7387 \u00b6 \u78ba\u7387\u306b\u30d0\u30a4\u30a2\u30b9\u304c\u3042\u308b\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u7d50\u679c\u3092\u9078\u629e\u3059\u308b\u3068\u304d\u306f DiscreteSample \u3092\u4f7f\u3044\u307e\u3059\u3002\u9078\u629e\u80a2\u3092\u914d\u5217\u3067\u3001\u9078\u629e\u80a2\u306e\u78ba\u7387\u5206\u5e03\u3092 DiscreteDistribution \u3067\u6e96\u5099\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u78ba\u7387\u5206\u5e03\u306f double \u578b\u306e\u5024\u3067\u6307\u5b9a\u3057\u3001\u5408\u8a08\u304c\u7279\u5b9a\u306e\u6570\u306b\u306a\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002{1, 6, 3} \u306a\u3089 10%, 60%, 30% \u3068\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9078\u629e\u80a2 const Array < String > options = { U \"$0\" , U \"$1\" , U \"$5\" , U \"$20\" , U \"$100\" , U \"$500\" , U \"$2000\" , }; // \u9078\u629e\u80a2\u306b\u5bfe\u5fdc\u3059\u308b\u78ba\u7387\u5206\u5e03 // \uff08$0 \u306f $2000 \u3088\u308a\u3082 1000 \u500d\u51fa\u3084\u3059\u3044\uff09 DiscreteDistribution distribution ( { 1000 , 200 , 50 , 10 , 5 , 2 , 1 , }); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u78ba\u7387\u5206\u5e03\u306b\u57fa\u3065\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << DiscreteSample ( options , distribution ); } } } }","title":"14. \u30e9\u30f3\u30c0\u30e0"},{"location":"ja-jp/tutorial/random/#14","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u3084\u8272\u3001\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u308a\u3001\u914d\u5217\u304b\u3089\u7121\u4f5c\u70ba\u306b\u8981\u7d20\u3092\u9078\u629e\u3057\u305f\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"14. \u30e9\u30f3\u30c0\u30e0"},{"location":"ja-jp/tutorial/random/#141","text":"RandomBool () \u306f 50% \u306e\u78ba\u7387\u3067 true , 50% \u306e\u78ba\u7387\u3067 false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 50% \u306e\u78ba\u7387\u3067 true, 50% \u306e\u78ba\u7387\u3067 false Print << RandomBool (); } } } }","title":"14.1 \u534a\u3005\u306e\u78ba\u7387"},{"location":"ja-jp/tutorial/random/#142","text":"RandomBool () \u306b\u306f 0.0 \uff5e 1.0 \u306e\u7bc4\u56f2\u3067 true \u306b\u306a\u308b\u78ba\u7387\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u300210% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 1 \u3092\u300125% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 25 \u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 30% \u306e\u78ba\u7387\u3067 true, 70% \u306e\u78ba\u7387\u3067 false Print << RandomBool ( 0.3 ); } } } }","title":"14.2 \u78ba\u7387\u3092\u6307\u5b9a"},{"location":"ja-jp/tutorial/random/#143","text":"Random < Type > ( max ) \u306f 0 \u304b\u3089 max \u307e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u3001 Random < Type > ( min , max ) \u306f min \u304b\u3089\u3000max \u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"int32\" , Vec2 ( 200 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0\uff5e100 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570 Print << Random ( 100 ); } } if ( SimpleGUI :: Button ( U \"double\" , Vec2 ( 200 , 60 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // -100.0\uff5e100.0 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << Random ( - 100.0 , 100.0 ); } } if ( SimpleGUI :: Button ( U \"char32\" , Vec2 ( 200 , 100 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // A\uff5eZ \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57 Print << Random ( U 'A' , U 'Z' ); } } } }","title":"14.3 \u30e9\u30f3\u30c0\u30e0\u306a\u6570"},{"location":"ja-jp/tutorial/random/#144","text":"RandomColorF () \u306f\u30e9\u30f3\u30c0\u30e0\u306a\u8272\u3092 HSV ( Random ( 360 . 0 ) , 1 . 0 , 1 . 0 ) \u3068\u3044\u3046\u5f0f\u3067\u751f\u6210\u3057\u3066 ColorF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < ColorF > colors ; for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 colors << RandomColor (); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & color : colors ) { color = RandomColor (); } } for ( size_t i : step ( colors . size ())) { Circle ( 50 + i * 50.0 , 100 , 20 ). draw ( colors [ i ]); } } }","title":"14.4 \u30e9\u30f3\u30c0\u30e0\u306a\u8272"},{"location":"ja-jp/tutorial/random/#145","text":"","title":"14.5 \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19"},{"location":"ja-jp/tutorial/random/#randomvec2double","text":"RandomVec2 ( double ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u3055\u3092\u6301\u3064\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Vec2 center = Scene :: Center (); // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb Vec2 dir = RandomVec2 ( 200 ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb dir = RandomVec2 ( 200 ); } Circle ( center , 20 ). draw (); Circle ( center , 200 ). drawFrame ( 1 , 1 , Palette :: Gray ); Circle ( center + dir , 10 ). draw (); } }","title":"RandomVec2(double)"},{"location":"ja-jp/tutorial/random/#randomvec2rectf","text":"RandomVec2 ( RectF ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr RectF rect ( 100 , 100 , 400 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( rect ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( rect ); } } rect . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } }","title":"RandomVec2(RectF)"},{"location":"ja-jp/tutorial/random/#randomvec2circle","text":"RandomVec2 ( Circle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u5186\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 300 , 200 , 150 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( circle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( circle ); } } circle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } }","title":"RandomVec2(Circle)"},{"location":"ja-jp/tutorial/random/#randomvec2triangle","text":"RandomVec2 ( Triangle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u4e09\u89d2\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Triangle triangle ( 100 , 100 , 500 , 300 , 200 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( triangle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( triangle ); } } triangle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } }","title":"RandomVec2(Triangle)"},{"location":"ja-jp/tutorial/random/#146","text":"Array :: choice () \u306f\u3001\u914d\u5217\u306e\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3059 Print << options . choice (); } } }","title":"14.6 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20"},{"location":"ja-jp/tutorial/random/#147","text":"Array :: choice () \u306b\u500b\u6570\u3092\u6e21\u3059\u3068\u3001\u914d\u5217\u306e\u4e2d\u304b\u3089\u3001\u91cd\u8907\u306a\u304f\u305d\u306e\u500b\u6570\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u9078\u629e\u3057\u3001\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\u8981\u7d20\u306e\u9806\u756a\u306f\u914d\u5217\u5185\u3067\u306e\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092 3 \u3064\u8fd4\u3059 Print << options . choice ( 3 ); } } }","title":"14.7 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8907\u6570\u306e\u8981\u7d20"},{"location":"ja-jp/tutorial/random/#148","text":"Array :: shuffle () \u306f\u914d\u5217\u306e\u8981\u7d20\u306e\u9806\u756a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u307e\u3059\u3002 Array :: shuffled () \u3092\u4f7f\u3046\u3068\u3001\u81ea\u8eab\u306f\u5909\u66f4\u305b\u305a\u306b\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u305f\u65b0\u3057\u3044\u914d\u5217\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Shuffle\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u8981\u7d20\u306e\u9806\u756a\u3092\u30b7\u30e3\u30c3\u30d5\u30eb options . shuffle (); Print << options ; } } }","title":"14.8 \u914d\u5217\u306e\u30b7\u30e3\u30c3\u30d5\u30eb"},{"location":"ja-jp/tutorial/random/#149","text":"Sample () \u3092\u4f7f\u3046\u3068\u3001 {} \u3067\u6e21\u3057\u305f\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u8981\u7d20\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << Sample ({ 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } } \u7b2c 1 \u5f15\u6570\u306b\u500b\u6570\u3001\u7b2c 2 \u5f15\u6570\u306b\u9078\u629e\u80a2\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 Arrai :: choice () \u306e\u6642\u3068\u540c\u69d8\u306b\u3001\u8981\u7d20\u306e\u9806\u756a\u306f\u6700\u521d\u306b\u6e21\u3055\u308c\u305f\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b 3 \u500b\u9078\u629e Print << Sample ( 3 , { 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } }","title":"14.9 \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e"},{"location":"ja-jp/tutorial/random/#1410","text":"\u78ba\u7387\u306b\u30d0\u30a4\u30a2\u30b9\u304c\u3042\u308b\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u7d50\u679c\u3092\u9078\u629e\u3059\u308b\u3068\u304d\u306f DiscreteSample \u3092\u4f7f\u3044\u307e\u3059\u3002\u9078\u629e\u80a2\u3092\u914d\u5217\u3067\u3001\u9078\u629e\u80a2\u306e\u78ba\u7387\u5206\u5e03\u3092 DiscreteDistribution \u3067\u6e96\u5099\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u78ba\u7387\u5206\u5e03\u306f double \u578b\u306e\u5024\u3067\u6307\u5b9a\u3057\u3001\u5408\u8a08\u304c\u7279\u5b9a\u306e\u6570\u306b\u306a\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002{1, 6, 3} \u306a\u3089 10%, 60%, 30% \u3068\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9078\u629e\u80a2 const Array < String > options = { U \"$0\" , U \"$1\" , U \"$5\" , U \"$20\" , U \"$100\" , U \"$500\" , U \"$2000\" , }; // \u9078\u629e\u80a2\u306b\u5bfe\u5fdc\u3059\u308b\u78ba\u7387\u5206\u5e03 // \uff08$0 \u306f $2000 \u3088\u308a\u3082 1000 \u500d\u51fa\u3084\u3059\u3044\uff09 DiscreteDistribution distribution ( { 1000 , 200 , 50 , 10 , 5 , 2 , 1 , }); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u78ba\u7387\u5206\u5e03\u306b\u57fa\u3065\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << DiscreteSample ( options , distribution ); } } } }","title":"14.10 \u51fa\u73fe\u78ba\u7387"},{"location":"ja-jp/tutorial/release/","text":"99. \u30a2\u30d7\u30ea\u306e\u30ea\u30ea\u30fc\u30b9 \u00b6 99.1 \u00b6","title":"99. \u30a2\u30d7\u30ea\u306e\u30ea\u30ea\u30fc\u30b9"},{"location":"ja-jp/tutorial/release/#99","text":"","title":"99. \u30a2\u30d7\u30ea\u306e\u30ea\u30ea\u30fc\u30b9"},{"location":"ja-jp/tutorial/release/#991","text":"","title":"99.1"},{"location":"ja-jp/tutorial/resource/","text":"20. \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3001\u305d\u308c\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 20.1 \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306e\u57fa\u672c \u00b6 Siv3D \u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3046\u753b\u50cf\u3084\u97f3\u58f0\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092 .exe \u3084 .app \u306b\u57cb\u3081\u8fbc\u307f\u3001\u30e6\u30fc\u30b6\u304b\u3089\u898b\u3066\u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3088\u3046\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u3080\u3068\u3001\u914d\u5e03\u304c\u7c21\u5358\u306b\u306a\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u524a\u9664\u3055\u308c\u305f\u308a\u3001\u5909\u66f4\u3055\u308c\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u983b\u7e41\u306b\u66f4\u65b0\u3059\u308b\u958b\u767a\u4e2d\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306f\u305b\u305a\u3001\u30ea\u30ea\u30fc\u30b9\u304c\u8fd1\u304f\u306a\u3063\u3066\u304b\u3089\u57cb\u3081\u8fbc\u307f\u306b\u5909\u66f4\u3059\u308b\u3068\u52b9\u7387\u304c\u826f\u3044\u3067\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3080\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 Windows \u306e\u5834\u5408 \u00b6 App / Resource . rc \u306b\u3001\u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 App / Resource . rc \u3092\u30e1\u30e2\u5e33\u306a\u3069\uff08Visual Studio \u306f\u4e0d\u53ef\uff09\u306e\u5916\u90e8\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304d\u3001 Resource ( example / windmill . png ) \u306e\u3088\u3046\u306b\u3001\u57cb\u3081\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u3001\u57cb\u3081\u8fbc\u3080\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u8ffd\u8a18\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u306e\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u3068 .exe \u306b\u30d5\u30a1\u30a4\u30eb\u304c\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002 macOS \u306e\u5834\u5408 \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u300cCreate folder references\u300d\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u4e0a\u3067\u9752\u3044\u30d5\u30a9\u30eb\u30c0\u30a2\u30a4\u30b3\u30f3\u306b\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3059\u3079\u3066 .app \u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c\u9752\u3044\u30a2\u30a4\u30b3\u30f3\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Linux \u306e\u5834\u5408 \u00b6 Linux \u7248\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u57cb\u3081\u8fbc\u307f\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001 resources / \u30d5\u30a9\u30eb\u30c0\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u540c\u68b1\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c resources / \u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 20.2 \u57cb\u3081\u8fbc\u307e\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 \u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u3053\u308c\u307e\u3067 U \"example/windmill.png\" \u3068\u6307\u5b9a\u3057\u3066\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092 Resource () \u3067\u56f2\u3093\u3067 Resource ( U \"example/windmill.png\" ) \u306b\u5909\u66f4\u3057\u307e\u3059\uff08Windows, macOS, Linux \u5171\u901a\uff09\u3002 \u30d3\u30eb\u30c9\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u7570\u306a\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3055\u305b\u3066\u304b\u3089\u5b9f\u884c\u3057\u3001\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u306e\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u3001\u57cb\u3081\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u3053\u3068\u306e\u78ba\u8a8d\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureFile ( U \"example/windmill.png\" ); // \u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureResource ( Resource ( U \"example/windmill.png\" )); while ( System :: Update ()) { textureFile . draw ( 0 , 0 ); textureResource . draw ( 0 , 320 ); } }","title":"20. \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f"},{"location":"ja-jp/tutorial/resource/#20","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3001\u305d\u308c\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"20. \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f"},{"location":"ja-jp/tutorial/resource/#201","text":"Siv3D \u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3046\u753b\u50cf\u3084\u97f3\u58f0\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092 .exe \u3084 .app \u306b\u57cb\u3081\u8fbc\u307f\u3001\u30e6\u30fc\u30b6\u304b\u3089\u898b\u3066\u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3088\u3046\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u3080\u3068\u3001\u914d\u5e03\u304c\u7c21\u5358\u306b\u306a\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u524a\u9664\u3055\u308c\u305f\u308a\u3001\u5909\u66f4\u3055\u308c\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u983b\u7e41\u306b\u66f4\u65b0\u3059\u308b\u958b\u767a\u4e2d\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306f\u305b\u305a\u3001\u30ea\u30ea\u30fc\u30b9\u304c\u8fd1\u304f\u306a\u3063\u3066\u304b\u3089\u57cb\u3081\u8fbc\u307f\u306b\u5909\u66f4\u3059\u308b\u3068\u52b9\u7387\u304c\u826f\u3044\u3067\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3080\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002","title":"20.1 \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/resource/#windows","text":"App / Resource . rc \u306b\u3001\u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 App / Resource . rc \u3092\u30e1\u30e2\u5e33\u306a\u3069\uff08Visual Studio \u306f\u4e0d\u53ef\uff09\u306e\u5916\u90e8\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304d\u3001 Resource ( example / windmill . png ) \u306e\u3088\u3046\u306b\u3001\u57cb\u3081\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u3001\u57cb\u3081\u8fbc\u3080\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u8ffd\u8a18\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u306e\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u3068 .exe \u306b\u30d5\u30a1\u30a4\u30eb\u304c\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002","title":"Windows \u306e\u5834\u5408"},{"location":"ja-jp/tutorial/resource/#macos","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u300cCreate folder references\u300d\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u4e0a\u3067\u9752\u3044\u30d5\u30a9\u30eb\u30c0\u30a2\u30a4\u30b3\u30f3\u306b\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3059\u3079\u3066 .app \u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c\u9752\u3044\u30a2\u30a4\u30b3\u30f3\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"macOS \u306e\u5834\u5408"},{"location":"ja-jp/tutorial/resource/#linux","text":"Linux \u7248\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u57cb\u3081\u8fbc\u307f\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001 resources / \u30d5\u30a9\u30eb\u30c0\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u540c\u68b1\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c resources / \u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"Linux \u306e\u5834\u5408"},{"location":"ja-jp/tutorial/resource/#202","text":"\u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u3053\u308c\u307e\u3067 U \"example/windmill.png\" \u3068\u6307\u5b9a\u3057\u3066\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092 Resource () \u3067\u56f2\u3093\u3067 Resource ( U \"example/windmill.png\" ) \u306b\u5909\u66f4\u3057\u307e\u3059\uff08Windows, macOS, Linux \u5171\u901a\uff09\u3002 \u30d3\u30eb\u30c9\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u7570\u306a\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3055\u305b\u3066\u304b\u3089\u5b9f\u884c\u3057\u3001\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u306e\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u3001\u57cb\u3081\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u3053\u3068\u306e\u78ba\u8a8d\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureFile ( U \"example/windmill.png\" ); // \u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureResource ( Resource ( U \"example/windmill.png\" )); while ( System :: Update ()) { textureFile . draw ( 0 , 0 ); textureResource . draw ( 0 , 320 ); } }","title":"20.2 \u57cb\u3081\u8fbc\u307e\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/scene-manager/","text":"22. \u30b7\u30fc\u30f3\u7ba1\u7406 \u00b6 \u30b7\u30fc\u30f3\u7ba1\u7406\uff08\u307e\u305f\u306f \u30b7\u30fc\u30f3\u9077\u79fb \uff09\u3092\u4f7f\u3046\u3068\u3001\u8907\u96d1\u306a\u30a2\u30d7\u30ea\uff08\u3068\u304f\u306b\u30b2\u30fc\u30e0\uff09\u3092\u52b9\u7387\u3088\u304f\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u306f\u3001\u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u3001\u30ea\u30b6\u30eb\u30c8\u306a\u3069\u3001\u500b\u3005\u306e\u5834\u9762\uff08\u30b7\u30fc\u30f3\uff09\u3092\u500b\u5225\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u3001\u305d\u308c\u3089\u3092\u884c\u304d\u6765\u3059\u308b\u3053\u3068\u3067\u5168\u4f53\u306e\u6d41\u308c\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002Siv3D \u306e SceneManager \u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u3042\u308b\u5834\u9762\u306e\u30af\u30e9\u30b9\u304b\u3089\u5225\u306e\u5834\u9762\u306e\u30af\u30e9\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u5f15\u304d\u7d99\u3044\u3060\u308a\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3067\u6ed1\u3089\u304b\u306b\u753b\u9762\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3059\u308b\u51e6\u7406\u304c\u81ea\u52d5\u7684\u306b\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 Note \u30b7\u30fc\u30f3\u7ba1\u7406\u306b\u304a\u3051\u308b\u300c\u30b7\u30fc\u30f3\u300d\u3068\u306f\u3001\u500b\u3005\u306e\u5834\u9762\u3084\u3001\u305d\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u6307\u3057\u307e\u3059\u300210 \u7ae0\u3067\u8aac\u660e\u3057\u305f\u30b7\u30fc\u30f3\u3084 Scene :: \u540d\u524d\u7a7a\u9593\u306e\u6a5f\u80fd\u3068\u306f\u5225\u306e\u6982\u5ff5\u3067\u3059\u3002 22.1 \u30b7\u30fc\u30f3\u306e\u57fa\u672c \u00b6 \u500b\u3005\u306e\u30b7\u30fc\u30f3\u3092\u533a\u5225\u3059\u308b\u5024\uff08\u30b9\u30c6\u30fc\u30c8\uff09\u306e\u578b\u3092\u6c7a\u3081\u307e\u3059\u3002\u4f8b\u3048\u3070 String \u578b\u3092\u4f7f\u3046\u3068\u3001\u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306f U \"Title\" , \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306f U \"Game\" \u3068\u3044\u3063\u305f\u540d\u524d\u3092\u4ed8\u3051\u3066\u533a\u5225\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30af\u30e9\u30b9\u540d\u3068\u540d\u524d\u3092\u4e00\u81f4\u3055\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u5fc5\u305a\u3057\u3082\u5f93\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u3001\u30b9\u30c6\u30fc\u30c8\u306e\u578b\u3092\u4f7f\u3044 using App = SceneManager < String > ; \u306e\u3088\u3046\u306b\u3057\u3066\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u30af\u30e9\u30b9\u306e\u578b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u30b7\u30fc\u30f3\u3092 App :: Scene \u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\u901a\u5e38\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001 update () , draw () \u306e 3 \u3064\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002 Main () \u95a2\u6570\u306b\u306f App \u578b\u306e\u5909\u6570\u3092\u4f5c\u308a\u3001\u7528\u610f\u3057\u305f\u30b7\u30fc\u30f3\u30af\u30e9\u30b9\u3092 .add () \u3067\u767b\u9332\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067 App :: update () \u3092\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u305b\u3070\u3001\u6700\u521d\u306b\u767b\u9332\u3057\u305f\u30b7\u30fc\u30f3\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3067\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 update () \u95a2\u6570\u304c\u5148\u306b\u547c\u3070\u308c\u3001\u305d\u306e\u6b21\u306b draw () \u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.2 \u30b7\u30fc\u30f3\u9077\u79fb \u00b6 \u5148\u307b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3042\u308b\u30b7\u30fc\u30f3\u306e\u5b9f\u884c\u4e2d\u306b\u3001\u5225\u306e\u30b7\u30fc\u30f3\u306b\u9077\u79fb\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30b7\u30fc\u30f3\u306e update () \u95a2\u6570\u5185\u3067 changeScene () \u3092\u547c\u3073\u3001\u884c\u304d\u305f\u3044\u5148\u306e\u30b7\u30fc\u30f3\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306f\u3001\u30b7\u30fc\u30f3\u3092\u9077\u79fb\u3059\u308b\u305f\u3073\u3001\u53e4\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u306f\u7834\u68c4\u3055\u308c\u3001\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.3 \u30b7\u30fc\u30f3\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709 \u00b6 \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u306e\u60c5\u5831\u306a\u3069\u3001\u30b7\u30fc\u30f3\u3092\u307e\u305f\u3044\u3067\u5171\u6709\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30c7\u30fc\u30bf\u578b\u3092 SceneManager <> \u306e 2 \u3064\u76ee\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30b7\u30fc\u30f3\u306e\u95a2\u6570\u304b\u3089 geteData () \u3092\u901a\u3057\u3066\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u4f5c\u6210\u6642\u306b 1 \u5ea6\u3060\u3051\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 // \u3053\u3053\u3067 GameData \u3082\u521d\u671f\u5316\u3055\u308c\u308b App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.4 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f SceneManager :: setFadeColor () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u5207\u308a\u66ff\u3048\u306e\u6642\u9593\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u306b\u306f\u3001 changeScene () \u306e\u7b2c 2 \u5f15\u6570\u306b\u6642\u9593\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1 \u79d2\uff09\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b 0.3 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Game\" , 0.3 s ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b 2 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Title\" , 2.0 s ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); // \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272 manager . setFadeColor ( Palette :: Skyblue ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.5 \u3055\u3089\u306b\u30b7\u30fc\u30f3\u7ba1\u7406\u3092\u5b66\u3076 \u00b6 \u3088\u308a\u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u3092\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f Siv3D\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8/\u30b7\u30fc\u30f3\u9077\u79fb\uff081 \u30d5\u30a1\u30a4\u30eb\u7248\uff09 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u30b7\u30fc\u30f3\u3054\u3068\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5206\u5272\u3092\u3059\u308b\u5834\u5408\u306f \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u306e\u69cb\u9020\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 update () \u3084 draw () \u306e\u307b\u304b\u306b\u3001 updateFadeIn () , updateFadeOut () , drawFadeIn () , drawFadeOut () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u306e\u6700\u4e2d\u306e\u6319\u52d5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003: \u30b7\u30fc\u30f3\u5207\u308a\u66ff\u3048\u6642\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b","title":"22. \u30b7\u30fc\u30f3\u7ba1\u7406"},{"location":"ja-jp/tutorial/scene-manager/#22","text":"\u30b7\u30fc\u30f3\u7ba1\u7406\uff08\u307e\u305f\u306f \u30b7\u30fc\u30f3\u9077\u79fb \uff09\u3092\u4f7f\u3046\u3068\u3001\u8907\u96d1\u306a\u30a2\u30d7\u30ea\uff08\u3068\u304f\u306b\u30b2\u30fc\u30e0\uff09\u3092\u52b9\u7387\u3088\u304f\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u306f\u3001\u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u3001\u30ea\u30b6\u30eb\u30c8\u306a\u3069\u3001\u500b\u3005\u306e\u5834\u9762\uff08\u30b7\u30fc\u30f3\uff09\u3092\u500b\u5225\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u3001\u305d\u308c\u3089\u3092\u884c\u304d\u6765\u3059\u308b\u3053\u3068\u3067\u5168\u4f53\u306e\u6d41\u308c\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002Siv3D \u306e SceneManager \u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u3042\u308b\u5834\u9762\u306e\u30af\u30e9\u30b9\u304b\u3089\u5225\u306e\u5834\u9762\u306e\u30af\u30e9\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u5f15\u304d\u7d99\u3044\u3060\u308a\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3067\u6ed1\u3089\u304b\u306b\u753b\u9762\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3059\u308b\u51e6\u7406\u304c\u81ea\u52d5\u7684\u306b\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 Note \u30b7\u30fc\u30f3\u7ba1\u7406\u306b\u304a\u3051\u308b\u300c\u30b7\u30fc\u30f3\u300d\u3068\u306f\u3001\u500b\u3005\u306e\u5834\u9762\u3084\u3001\u305d\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u6307\u3057\u307e\u3059\u300210 \u7ae0\u3067\u8aac\u660e\u3057\u305f\u30b7\u30fc\u30f3\u3084 Scene :: \u540d\u524d\u7a7a\u9593\u306e\u6a5f\u80fd\u3068\u306f\u5225\u306e\u6982\u5ff5\u3067\u3059\u3002","title":"22. \u30b7\u30fc\u30f3\u7ba1\u7406"},{"location":"ja-jp/tutorial/scene-manager/#221","text":"\u500b\u3005\u306e\u30b7\u30fc\u30f3\u3092\u533a\u5225\u3059\u308b\u5024\uff08\u30b9\u30c6\u30fc\u30c8\uff09\u306e\u578b\u3092\u6c7a\u3081\u307e\u3059\u3002\u4f8b\u3048\u3070 String \u578b\u3092\u4f7f\u3046\u3068\u3001\u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306f U \"Title\" , \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306f U \"Game\" \u3068\u3044\u3063\u305f\u540d\u524d\u3092\u4ed8\u3051\u3066\u533a\u5225\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30af\u30e9\u30b9\u540d\u3068\u540d\u524d\u3092\u4e00\u81f4\u3055\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u5fc5\u305a\u3057\u3082\u5f93\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u3001\u30b9\u30c6\u30fc\u30c8\u306e\u578b\u3092\u4f7f\u3044 using App = SceneManager < String > ; \u306e\u3088\u3046\u306b\u3057\u3066\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u30af\u30e9\u30b9\u306e\u578b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u30b7\u30fc\u30f3\u3092 App :: Scene \u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\u901a\u5e38\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001 update () , draw () \u306e 3 \u3064\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002 Main () \u95a2\u6570\u306b\u306f App \u578b\u306e\u5909\u6570\u3092\u4f5c\u308a\u3001\u7528\u610f\u3057\u305f\u30b7\u30fc\u30f3\u30af\u30e9\u30b9\u3092 .add () \u3067\u767b\u9332\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067 App :: update () \u3092\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u305b\u3070\u3001\u6700\u521d\u306b\u767b\u9332\u3057\u305f\u30b7\u30fc\u30f3\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3067\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 update () \u95a2\u6570\u304c\u5148\u306b\u547c\u3070\u308c\u3001\u305d\u306e\u6b21\u306b draw () \u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.1 \u30b7\u30fc\u30f3\u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/scene-manager/#222","text":"\u5148\u307b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3042\u308b\u30b7\u30fc\u30f3\u306e\u5b9f\u884c\u4e2d\u306b\u3001\u5225\u306e\u30b7\u30fc\u30f3\u306b\u9077\u79fb\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30b7\u30fc\u30f3\u306e update () \u95a2\u6570\u5185\u3067 changeScene () \u3092\u547c\u3073\u3001\u884c\u304d\u305f\u3044\u5148\u306e\u30b7\u30fc\u30f3\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306f\u3001\u30b7\u30fc\u30f3\u3092\u9077\u79fb\u3059\u308b\u305f\u3073\u3001\u53e4\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u306f\u7834\u68c4\u3055\u308c\u3001\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.2 \u30b7\u30fc\u30f3\u9077\u79fb"},{"location":"ja-jp/tutorial/scene-manager/#223","text":"\u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u306e\u60c5\u5831\u306a\u3069\u3001\u30b7\u30fc\u30f3\u3092\u307e\u305f\u3044\u3067\u5171\u6709\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30c7\u30fc\u30bf\u578b\u3092 SceneManager <> \u306e 2 \u3064\u76ee\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30b7\u30fc\u30f3\u306e\u95a2\u6570\u304b\u3089 geteData () \u3092\u901a\u3057\u3066\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u4f5c\u6210\u6642\u306b 1 \u5ea6\u3060\u3051\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 // \u3053\u3053\u3067 GameData \u3082\u521d\u671f\u5316\u3055\u308c\u308b App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.3 \u30b7\u30fc\u30f3\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709"},{"location":"ja-jp/tutorial/scene-manager/#224","text":"\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f SceneManager :: setFadeColor () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u5207\u308a\u66ff\u3048\u306e\u6642\u9593\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u306b\u306f\u3001 changeScene () \u306e\u7b2c 2 \u5f15\u6570\u306b\u6642\u9593\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1 \u79d2\uff09\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b 0.3 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Game\" , 0.3 s ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b 2 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Title\" , 2.0 s ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); // \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272 manager . setFadeColor ( Palette :: Skyblue ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.4 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"ja-jp/tutorial/scene-manager/#225","text":"\u3088\u308a\u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u3092\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f Siv3D\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8/\u30b7\u30fc\u30f3\u9077\u79fb\uff081 \u30d5\u30a1\u30a4\u30eb\u7248\uff09 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u30b7\u30fc\u30f3\u3054\u3068\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5206\u5272\u3092\u3059\u308b\u5834\u5408\u306f \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u306e\u69cb\u9020\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 update () \u3084 draw () \u306e\u307b\u304b\u306b\u3001 updateFadeIn () , updateFadeOut () , drawFadeIn () , drawFadeOut () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u306e\u6700\u4e2d\u306e\u6319\u52d5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003: \u30b7\u30fc\u30f3\u5207\u308a\u66ff\u3048\u6642\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b","title":"22.5 \u3055\u3089\u306b\u30b7\u30fc\u30f3\u7ba1\u7406\u3092\u5b66\u3076"},{"location":"ja-jp/tutorial/shape/","text":"2. \u56f3\u5f62\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002 2.1 \u5186\u3092\u63cf\u304f \u00b6 \u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update () \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } } 2.2 \u8272\u3092\u4ed8\u3051\u308b \u00b6 \u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } } 2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b \u00b6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update () \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time () \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } } 2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002 2.5 \u67a0\u3092\u63cf\u304f \u00b6 \u56f3\u5f62\u306f\u3001 .draw () \u306e\u4ee3\u308f\u308a\u306b .drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 .drawFrame () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw () \u3084 .drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 2.6 \u7dda\u5206\u3092\u63cf\u304f \u00b6 \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } } 2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } } 2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } } 2.9 \u6955\u5186\u3092\u63cf\u304f \u00b6 \u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } } 2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } } 2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } } 2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f \u00b6 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } } 2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f \u00b6 LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } } 2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f \u00b6 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } } 2.16 \u77e2\u5370\u3092\u63cf\u304f \u00b6 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } } 2.17 \u6247\u5f62\u3092\u63cf\u304f \u00b6 \u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } } 2.18 \u5186\u5f27\u3092\u63cf\u304f \u00b6 \u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } } 2.19 \u56f3\u5f62\u306e\u64cd\u4f5c \u00b6 \u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } } 2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 \u00b6 Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#2","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002","title":"2. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#21","text":"\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update () \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"2.1 \u5186\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#22","text":"\u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } }","title":"2.2 \u8272\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/tutorial/shape/#23","text":"\u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update () \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time () \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } }","title":"2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/shape/#24","text":"\u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#25","text":"\u56f3\u5f62\u306f\u3001 .draw () \u306e\u4ee3\u308f\u308a\u306b .drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 .drawFrame () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw () \u3084 .drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002","title":"2.5 \u67a0\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#26","text":"\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } }","title":"2.6 \u7dda\u5206\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#27","text":"\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } }","title":"2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#28","text":"Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } }","title":"2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#29","text":"\u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } }","title":"2.9 \u6955\u5186\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#210","text":"\u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } }","title":"2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#211","text":"\u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } }","title":"2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#212","text":"Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#213","text":"\u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } }","title":"2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#214-catmull-rom","text":"LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } }","title":"2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#215","text":"2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } }","title":"2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#216","text":"# include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } }","title":"2.16 \u77e2\u5370\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#217","text":"\u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } }","title":"2.17 \u6247\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#218","text":"\u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } }","title":"2.18 \u5186\u5f27\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#219","text":"\u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } }","title":"2.19 \u56f3\u5f62\u306e\u64cd\u4f5c"},{"location":"ja-jp/tutorial/shape/#220","text":"Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002","title":"2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71"},{"location":"ja-jp/tutorial/shape/#221","text":"Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/text-file/","text":"18. \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u6587\u5b57\u3092\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 18.1 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TextReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 TextReader :: readLine () \u306b String \u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u6b21\u306b\u898b\u3064\u304b\u3063\u305f\u6539\u884c\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u306e 1 \u884c\u5206\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u305d\u306e\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u3053\u307e\u3067\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b while \u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b TextReader reader ( U \"example/test.txt\" ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader ) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // \u7d42\u7aef\u306b\u9054\u3059\u308b\u307e\u3067 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 18.2 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b \u00b6 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 TextReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f TextReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f TextReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextReader reader ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader . open ( U \"example/test.txt\" )) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } } 18.3 \u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080 \u00b6 \u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f TextWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u65b9\u6cd5\u306f Print \u3068\u4f3c\u3066\u3044\u3066\u3001\u30aa\u30fc\u30d7\u30f3\u6e08\u307f\u306e TextWriter \u306e\u5909\u6570\u306b\u5411\u304b\u3063\u3066 << \u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044 1 \u884c\u5206\u306e\u6587\u5b57\u5217\u3084\u5024\u3092\u9001\u308a\u307e\u3059\u3002\u66f8\u304d\u8fbc\u307f\u306e\u6700\u5f8c\u306b\u306f\u6539\u884c\u304c\u81ea\u52d5\u3067\u633f\u5165\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306f\u30e1\u30f3\u30d0\u95a2\u6570 .write () \u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5185\u5bb9\u3092\u9001\u308a\u307e\u3059\u3002 .writeln () \u306f\u6539\u884c\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b // \uff08\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\uff09 TextWriter writer ( U \" tutorial.txt \" ) ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \" Failed to open `tutorial.txt` \" ) ; } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \" Hello, Siv3D! \" ; // \u5024\u3084\u6587\u5b57\u3092\u3000 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ' , ' << 456 << Point ( 10 , 20 ) ; // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U ' A ' ) ; writer . write ( U ' B ' ) ; // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U ' C ' ) ; // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ) ; writer . write ( U ' , ' ) ; writer . write ( 888 ) ; while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } \u51fa\u529b\u7d50\u679c (tutorial.txt) Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888 \u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1 \u00b6 TextWriter \u306f TextReader \u3068\u540c\u3058\u3088\u3046\u306b\u3001 .open () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3, .close () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30ed\u30fc\u30ba\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextWriter writer ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer . open ( U \"tutorial.txt\" )) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \"Hello, Siv3D!\" ; // \u5024\u3084\u6587\u5b57\u3092\u30001 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ',' << 456 << Point ( 10 , 20 ); // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U 'A' ); writer . write ( U 'B' ); // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U 'C' ); // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ); writer . write ( U ',' ); writer . write ( 888 ); // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba writer . close (); while ( System :: Update ()) { } } 18.4 \u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\u3067\u66f8\u304d\u3053\u3080 \u00b6 \u30c6\u30ad\u30b9\u30c8\u3092\u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f\u3001 TextWriter \u3067\u306e\u30aa\u30fc\u30d7\u30f3\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3068\u3057\u3066 OpenMode :: Append (\u8ffd\u52a0\u30e2\u30fc\u30c9) \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u540c\u540d\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u6642\u306f\u3001\u901a\u5e38\u3069\u304a\u308a\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u8ffd\u52a0\u30e2\u30fc\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 TextWriter writer ( U \"tutorial.txt\" , OpenMode :: Append ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092\u8ffd\u52a0\u3059\u308b writer . write ( U \" \\n ------\" ); while ( System :: Update ()) { } } 18.3 \u3067\u4f5c\u3063\u305f tutorial.txt \u306b\u8ffd\u52a0\u3057\u305f\u7d50\u679c Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888 ------ 18.5 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30b9\u30b3\u30fc\u30d7\u306b\u3088\u308b\u5236\u5fa1 \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1\u306f\u3001 { } \u3067\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u306e\u7d42\u4e86\u6642\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u3082\u826f\u3044\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { { TextWriter writer ( U \"tutorial.txt\" ); // 1 \u884c\u66f8\u304d\u8fbc\u3080 writer . write ( U \"Hello, Siv3D!\" ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } String text ; { // TextWriter \u3067\u30aa\u30fc\u30d7\u30f3\u3057\u305f\u307e\u307e\u3060\u3068\u3001\u3053\u3053\u3067\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3059\u308b TextReader reader ( U \"tutorial.txt\" ); // 1 \u884c\u8aad\u307f\u8fbc\u3080 reader . readLine ( text ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } Print << text ; while ( System :: Update ()) { } }","title":"18. \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/tutorial/text-file/#18","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u6587\u5b57\u3092\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"18. \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/tutorial/text-file/#181-1","text":"\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TextReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 TextReader :: readLine () \u306b String \u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u6b21\u306b\u898b\u3064\u304b\u3063\u305f\u6539\u884c\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u306e 1 \u884c\u5206\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u305d\u306e\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u3053\u307e\u3067\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b while \u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b TextReader reader ( U \"example/test.txt\" ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader ) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // \u7d42\u7aef\u306b\u9054\u3059\u308b\u307e\u3067 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"18.1 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/tutorial/text-file/#182","text":"TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 TextReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f TextReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f TextReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextReader reader ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader . open ( U \"example/test.txt\" )) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } }","title":"18.2 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b"},{"location":"ja-jp/tutorial/text-file/#183","text":"\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f TextWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u65b9\u6cd5\u306f Print \u3068\u4f3c\u3066\u3044\u3066\u3001\u30aa\u30fc\u30d7\u30f3\u6e08\u307f\u306e TextWriter \u306e\u5909\u6570\u306b\u5411\u304b\u3063\u3066 << \u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044 1 \u884c\u5206\u306e\u6587\u5b57\u5217\u3084\u5024\u3092\u9001\u308a\u307e\u3059\u3002\u66f8\u304d\u8fbc\u307f\u306e\u6700\u5f8c\u306b\u306f\u6539\u884c\u304c\u81ea\u52d5\u3067\u633f\u5165\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306f\u30e1\u30f3\u30d0\u95a2\u6570 .write () \u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5185\u5bb9\u3092\u9001\u308a\u307e\u3059\u3002 .writeln () \u306f\u6539\u884c\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b // \uff08\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\uff09 TextWriter writer ( U \" tutorial.txt \" ) ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \" Failed to open `tutorial.txt` \" ) ; } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \" Hello, Siv3D! \" ; // \u5024\u3084\u6587\u5b57\u3092\u3000 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ' , ' << 456 << Point ( 10 , 20 ) ; // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U ' A ' ) ; writer . write ( U ' B ' ) ; // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U ' C ' ) ; // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ) ; writer . write ( U ' , ' ) ; writer . write ( 888 ) ; while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } \u51fa\u529b\u7d50\u679c (tutorial.txt) Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888","title":"18.3 \u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080"},{"location":"ja-jp/tutorial/text-file/#_1","text":"TextWriter \u306f TextReader \u3068\u540c\u3058\u3088\u3046\u306b\u3001 .open () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3, .close () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30ed\u30fc\u30ba\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextWriter writer ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer . open ( U \"tutorial.txt\" )) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \"Hello, Siv3D!\" ; // \u5024\u3084\u6587\u5b57\u3092\u30001 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ',' << 456 << Point ( 10 , 20 ); // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U 'A' ); writer . write ( U 'B' ); // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U 'C' ); // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ); writer . write ( U ',' ); writer . write ( 888 ); // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba writer . close (); while ( System :: Update ()) { } }","title":"\u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1"},{"location":"ja-jp/tutorial/text-file/#184","text":"\u30c6\u30ad\u30b9\u30c8\u3092\u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f\u3001 TextWriter \u3067\u306e\u30aa\u30fc\u30d7\u30f3\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3068\u3057\u3066 OpenMode :: Append (\u8ffd\u52a0\u30e2\u30fc\u30c9) \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u540c\u540d\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u6642\u306f\u3001\u901a\u5e38\u3069\u304a\u308a\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u8ffd\u52a0\u30e2\u30fc\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 TextWriter writer ( U \"tutorial.txt\" , OpenMode :: Append ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092\u8ffd\u52a0\u3059\u308b writer . write ( U \" \\n ------\" ); while ( System :: Update ()) { } } 18.3 \u3067\u4f5c\u3063\u305f tutorial.txt \u306b\u8ffd\u52a0\u3057\u305f\u7d50\u679c Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888 ------","title":"18.4 \u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\u3067\u66f8\u304d\u3053\u3080"},{"location":"ja-jp/tutorial/text-file/#185","text":"","title":"18.5 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/text-file/#_2","text":"\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1\u306f\u3001 { } \u3067\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u306e\u7d42\u4e86\u6642\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u3082\u826f\u3044\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { { TextWriter writer ( U \"tutorial.txt\" ); // 1 \u884c\u66f8\u304d\u8fbc\u3080 writer . write ( U \"Hello, Siv3D!\" ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } String text ; { // TextWriter \u3067\u30aa\u30fc\u30d7\u30f3\u3057\u305f\u307e\u307e\u3060\u3068\u3001\u3053\u3053\u3067\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3059\u308b TextReader reader ( U \"tutorial.txt\" ); // 1 \u884c\u8aad\u307f\u8fbc\u3080 reader . readLine ( text ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } Print << text ; while ( System :: Update ()) { } }","title":"\u30b9\u30b3\u30fc\u30d7\u306b\u3088\u308b\u5236\u5fa1"},{"location":"ja-jp/tutorial/texture/","text":"5. \u753b\u50cf\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b \u00b6 \u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002 Texture::drawAt() \u00b6 .drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } } Texture::draw() \u00b6 .draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } } Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7 \u00b6 OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::scaled() \u00b6 Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } } Texture::resized() \u00b6 Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } } 5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002 Texture::rotated() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } } Texture::roatedAt() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } } 5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } } 5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } } 5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002 \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Triangle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } } 5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } } 5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } } 5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af \u00b6 if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165 \u00b6 Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"5. \u753b\u50cf\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/texture/#5","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"5. \u753b\u50cf\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/texture/#51","text":"\u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002","title":"5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#texturedrawat","text":".drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } }","title":"Texture::drawAt()"},{"location":"ja-jp/tutorial/texture/#texturedraw","text":".draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } }","title":"Texture::draw()"},{"location":"ja-jp/tutorial/texture/#siv3d","text":"OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002","title":"Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7"},{"location":"ja-jp/tutorial/texture/#52","text":"","title":"5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#texturescaled","text":"Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } }","title":"Texture::scaled()"},{"location":"ja-jp/tutorial/texture/#textureresized","text":"Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } }","title":"Texture::resized()"},{"location":"ja-jp/tutorial/texture/#53","text":"Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002","title":"5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#texturerotated","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } }","title":"Texture::rotated()"},{"location":"ja-jp/tutorial/texture/#textureroatedat","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } }","title":"Texture::roatedAt()"},{"location":"ja-jp/tutorial/texture/#54","text":"Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } }","title":"5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#55","text":"\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } }","title":"5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#56","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002","title":"5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#_1","text":"OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"ja-jp/tutorial/texture/#57","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Triangle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } }","title":"5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210"},{"location":"ja-jp/tutorial/texture/#58","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#59","text":"Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } }","title":"5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/texture/#510","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } }","title":"5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b"},{"location":"ja-jp/tutorial/texture/#511","text":"","title":"5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/texture/#_2","text":"if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af"},{"location":"ja-jp/tutorial/texture/#_3","text":"\u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } }","title":"\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"ja-jp/tutorial/texture/#_4","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba"},{"location":"ja-jp/tutorial/texture/#_5","text":"Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165"},{"location":"ja-jp/tutorial/window/","text":"10. \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: ClientHeight () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } } 10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } } 10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } } 10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10. \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/window/#10","text":"Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"10. \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/window/#101","text":"\u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: ClientHeight () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#102","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#103","text":"\u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#104","text":"Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } }","title":"10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#105","text":"Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"ja-jp/tutorial/window/#106","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } }","title":"10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#107","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } }","title":"10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b"},{"location":"ja-jp/tutorial/window/#108","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b"},{"location":"logo/logo/","text":"\u30ed\u30b4\u753b\u50cf \u00b6 \u30a2\u30a4\u30b3\u30f3\u753b\u50cf \u00b6","title":"Logo"},{"location":"logo/logo/#_1","text":"","title":"\u30ed\u30b4\u753b\u50cf"},{"location":"logo/logo/#_2","text":"","title":"\u30a2\u30a4\u30b3\u30f3\u753b\u50cf"},{"location":"mascot/mascot/","text":"Siv3D \u304f\u3093 \u00b6 Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u300cSiv3D \u304f\u3093\u300d 2015 \u5e74\u306b\u516c\u52df\u3092\u5b9f\u65bd\u3057\u30019 \u4ef6\u306e\u5fdc\u52df\u304b\u3089 \u7070\u8272 \u3055\u3093\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u9078\u3070\u308c\u307e\u3057\u305f\u3002 \u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u7279\u5fb4 \u00b6 144\u30bb\u30f3\u30c1 / 36\u30ad\u30ed / 12\u6b73 \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b\u5bfe\u6bd4\u304c\u30c4\u30dc \uff08\u5236\u4f5c\u8005\u30b3\u30e1\u30f3\u30c8\u3088\u308a\uff09 \u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u5229\u7528\u306e Q & A \u00b6 Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u4f7f\u7528\u306f CC BY-NC 4.0 \u30e9\u30a4\u30bb\u30f3\u30b9 (\u65e5\u672c\u8a9e) \u3067\u3059\u3002 \u3053\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u8a31\u8afe\u3055\u308c\u308b\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u5229\u7528\uff08\u5546\u7528\u4f5c\u54c1\u3067\u306e\u5229\u7528\u7b49\uff09\u306b\u3064\u3044\u3066\u306f\u30e1\u30fc\u30eb\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002 \u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\u4f8b \u00b6 Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u753b\u50cf\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u5834\u5408 Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 / Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3092\u5229\u7528\u3057\u305f\u4e8c\u6b21\u5275\u4f5c\u7269\u3092\u516c\u958b\u3059\u308b\u5834\u5408 This work features an adaptation of Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 / \u8a2d\u5b9a\u8cc7\u6599 \u00b6","title":"Mascot"},{"location":"mascot/mascot/#siv3d","text":"Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u300cSiv3D \u304f\u3093\u300d 2015 \u5e74\u306b\u516c\u52df\u3092\u5b9f\u65bd\u3057\u30019 \u4ef6\u306e\u5fdc\u52df\u304b\u3089 \u7070\u8272 \u3055\u3093\u306e\u30c7\u30b6\u30a4\u30f3\u304c\u9078\u3070\u308c\u307e\u3057\u305f\u3002","title":"Siv3D \u304f\u3093"},{"location":"mascot/mascot/#_1","text":"144\u30bb\u30f3\u30c1 / 36\u30ad\u30ed / 12\u6b73 \u30b9\u30d4\u30fc\u30c9\u30bf\u30a4\u30d7\u306e\u8133\u7b4b\u30d5\u30a1\u30a4\u30bf\u30fc \u3057\u3063\u307d\u306f\u81ea\u5206\u3067\u52d5\u304b\u305b\u308b \u9577\u3044\u8155\u304c\u30ba\u30dc\u30f3\u306e\u88fe\u3088\u308a\u4e0b\u307e\u3067\u4f38\u3073\u308b\u5bfe\u6bd4\u304c\u30c4\u30dc \uff08\u5236\u4f5c\u8005\u30b3\u30e1\u30f3\u30c8\u3088\u308a\uff09","title":"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u7279\u5fb4"},{"location":"mascot/mascot/#q-a","text":"Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u306e\u4f7f\u7528\u306f CC BY-NC 4.0 \u30e9\u30a4\u30bb\u30f3\u30b9 (\u65e5\u672c\u8a9e) \u3067\u3059\u3002 \u3053\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u8a31\u8afe\u3055\u308c\u308b\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u5229\u7528\uff08\u5546\u7528\u4f5c\u54c1\u3067\u306e\u5229\u7528\u7b49\uff09\u306b\u3064\u3044\u3066\u306f\u30e1\u30fc\u30eb\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\u3002","title":"\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u5229\u7528\u306e Q &amp; A"},{"location":"mascot/mascot/#_2","text":"Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u753b\u50cf\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u5834\u5408 Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 / Siv3D \u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3092\u5229\u7528\u3057\u305f\u4e8c\u6b21\u5275\u4f5c\u7269\u3092\u516c\u958b\u3059\u308b\u5834\u5408 This work features an adaptation of Siv3D - kun , \u00a9 2015 Siv3D , licensed under a CC BY - NC : http : // creativecommons . org / licenses / by - nc / 4 . 0 /","title":"\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\u4f8b"},{"location":"mascot/mascot/#_3","text":"","title":"\u8a2d\u5b9a\u8cc7\u6599"},{"location":"news/v041/","text":"1. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u3053\u308c\u307e\u3067\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b7\u30fc\u30f3\u306b\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7528\u610f\u3057\u305f\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 RenderTexture \u3092\u4f5c\u6210\u3057\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3068\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\uff08\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5909\u66f4\uff09\u3002\u63cf\u753b\u3055\u308c\u305f\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u89e3\u9664\u3055\u308c\u305f\u3042\u3068\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u63cf\u753b\u306b\u8ee2\u7528\u3067\u304d\u307e\u3059\u3002 Warning \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u6700\u4e2d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u7d75\u6587\u5b57 const Texture emoji ( Emoji ( U \"\ud83d\ude07\" )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 600 , 600 , Palette :: White ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . drawAt ( Cursor :: Pos ()); } rt . draw (); emoji . drawAt ( Cursor :: Pos ()); // Clear \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 650 , 20 ))) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u767d\u3067\u30af\u30ea\u30a2 rt . clear ( Palette :: White ); } } } 2. \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u901a\u5e38\u306e RenderTexture \u3078\u306e\u63cf\u753b\u3067\u306f\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u304c\u6709\u52b9\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u56f3\u5f62\u3092\u63cf\u753b\u3057\u305f\u969b\u306b\u30b8\u30e3\u30ae\u30fc\u304c\u751f\u3058\u307e\u3059\u3002 MSRenderTexture \u3092\u4f7f\u3046\u3068\u3001\u901a\u5e38\u306e\u30b7\u30fc\u30f3\u3078\u306e\u63cf\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 MSRenderTexture \u306b\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u3001\u5225\u306e\u63cf\u753b\u3067\u4f7f\u3046\u969b\u306b\u306f\u3001 Graphics2D :: Flush () \u306b\u3088\u3063\u3066\u305d\u306e\u6642\u70b9\u307e\u3067\u306e\u63cf\u753b\u51e6\u7406\u3092\u3059\u3079\u3066\u5b9f\u884c\uff08\u30d5\u30e9\u30c3\u30b7\u30e5\uff09\u3057\u3066 MSRenderTexture \u306b\u78ba\u5b9f\u306b\u63cf\u753b\u3057\u305f\u3042\u3068\u306b\u3001 MSRenderTexture :: resolve () \u3092\u884c\u3044\u3001 MSRenderTexture \u5185\u306e\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 200 , 200 ); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture msrt ( 200 , 200 ); while ( System :: Update ()) { rt . clear ( ColorF ( 0.0 , 1.0 )); { ScopedRenderTarget2D target ( rt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } msrt . clear ( ColorF ( 0.0 , 1.0 )); { { ScopedRenderTarget2D target ( msrt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } // 2D \u63cf\u753b\u3092\u30d5\u30e9\u30c3\u30b7\u30e5 Graphics2D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db msrt . resolve (); } rt . draw ( 100 , 0 ); msrt . draw ( 400 , 0 ); } } 3. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u30b7\u30a7\u30fc\u30c0\u51e6\u7406 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u69d8\u3005\u306a\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570 1 \u3064\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u5909\u66f4\u3082\u4e0d\u8981\u3067\u3059\u3002\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 void Copy ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void Downsample ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u7e2e\u5c0f\u3057\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurH ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlurV ( const TextureRegion & from , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u7e26\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur ( const TextureRegion & from , RenderTexture & to , const Vec2 & direction ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 direction: \u30d6\u30e9\u30fc\u306e\u65b9\u5411 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6307\u5b9a\u3057\u305f\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 void GaussianBlur ( const TextureRegion & from , RenderTexture & internalBuffer , RenderTexture & to ); \u00b6 from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 internalBuffer: \u4e2d\u9593\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u306b\u7e26\u65b9\u5411\u3068\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from , internalBuffer , to \u306f\u3044\u305a\u308c\u3082\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u96a3\u308a\u5408\u3046\u3082\u306e\u540c\u58eb\u306f\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 GaussianBlurH ( from , internalBuffer ); GaussianBlurV ( internalBuffer , to ); \u3068\u7b49\u4fa1\u3067\u3059\u3002 \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 \u00b6 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // \u7e26\u3001\u6a2a\u304c 4 \u5206\u306e 1 \u30b5\u30a4\u30ba\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( texture . size () / 4 ); // \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 Shader :: Downsample ( texture , rt ); while ( System :: Update ()) { rt . draw (); } } \u30ac\u30a6\u30b9\u307c\u304b\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // bay.jpg \u306f 2560x1440 \u306a\u306e\u3067\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3057\u3066\u30ed\u30fc\u30c9 const Texture texture ( Image ( U \"example/bay.jpg\" ). scale ( 1280 , 720 )); // \u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba constexpr Size blurAreaSize ( 480 , 320 ); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f RenderTexture rtA ( blurAreaSize ), rtB ( blurAreaSize ); RenderTexture rtA4 ( blurAreaSize / 4 ), rtB4 ( blurAreaSize / 4 ); RenderTexture rtA8 ( blurAreaSize / 8 ), rtB8 ( blurAreaSize / 8 ); while ( System :: Update ()) { const Point cursorPos = Cursor :: Pos (); // \u80cc\u666f\u753b\u50cf\u306e\u3046\u3061\u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df const Rect blurArea ( cursorPos , blurAreaSize ); // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/8\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( texture ( blurArea ), rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); // \u80cc\u666f\u3092\u63cf\u753b texture . draw (); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u5f8c\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 RoundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b RoundRect ( cursorPos , blurAreaSize , 40 )( rtA8 . resized ( blurAreaSize )). draw (); } } 4. \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 \u00b6 2D \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u56f3\u5f62\u304c\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u63cf\u304b\u308c\u308b\u3068\u304d\u3001\u3069\u306e\u3088\u3046\u306a\u8272\u3092\u51fa\u529b\u3059\u308b\u304b\u306f\u3001\u300c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u2015\u30c0\u300d\u3068\u547c\u3070\u308c\u308b\u3001\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b GPU \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u901a\u3057\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Windows (Direct3D) \u3067\u306f\u300cHLSL\u300d\u3001macOS/Linux (OpenGL) \u3067\u306f\u300cGLSL\u300d\u3068\u3044\u3046\u8a00\u8a9e\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\u30ab\u30b9\u30bf\u30e0\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u524d\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3069\u306e\u3088\u3046\u306a\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u63cf\u304b\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0 \u00b6 HLSL \u00b6 PS () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b PSInput \u578b\u306e\u5024 input \u306e .position , .color , .uv \u30e1\u30f3\u30d0\u5909\u6570\u306e\u3046\u3061 .color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 input . color \u304c float4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f flaot4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b return float4 ( 1 , 0 , 0 , 1 ) \u3092\u8fd4\u305b\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { return input . color + g_colorAdd ; } GLSL \u00b6 main () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b vec4 \u578b\u306e\u5024 Color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3001 FragColor \u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 Color \u304c vec4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f vec4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b FragColor = vec4 ( 1 , 0 , 0 , 1 ) \u3068\u3059\u308c\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.frag #version 410 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { FragColor = Color + g_colorAdd ; } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0 \u00b6 HLSL \u00b6 \u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3 g_texture0 \u3068\u30b5\u30f3\u30d7\u30e9\u30fc g_sampler0 \u3092\u4f7f\u3063\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b input . uv \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float4 texColor = g_texture0 . Sample ( g_sampler0 , input . uv ); return ( texColor * input . color ) + g_colorAdd ; } GLSL \u00b6 \u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30e9\u30fc Texture0 \u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b\u5024 UV \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.frag #version 410 uniform sampler2D Texture0 ; layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { vec4 texColor = texture ( Texture0 , UV ); FragColor = ( texColor * Color ) + g_colorAdd ; } \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528 \u00b6 \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f PixelShader \u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u958b\u767a\u3067\u306f\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u4f7f\u3044\u5206\u3051\u308b\u305f\u3081\u306b SIV3D_SELECT_SHADER \u30de\u30af\u30ed\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u4ed8\u3051\u306e\u305f\u3081\u306b { { U \"PSConstants2D\" , 0 } } \u3092\u8a18\u8ff0\u3057\u307e\u3059\u30022D \u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u304a\u3044\u3066\u306f\u3001Siv3D \u5185\u90e8\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\u3001 U \"PSConstants2D\" \u3068\u3044\u3046\u540d\u524d\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u5e38\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if (!ps) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 ScopedCustomShader2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u3088\u3063\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e R \u6210\u5206\u3068 B \u6210\u5206\u3092\u5165\u308c\u66ff\u3048\u3066\u63cf\u753b\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528 (Windows \u306e\u307f) \u00b6 Platform :: Windows :: Shader :: CompileHLSLToFile () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001HLSL \u30d5\u30a1\u30a4\u30eb\u3092\u3042\u3089\u304b\u3058\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u5b9f\u884c\u6642\u306e\u51e6\u7406\u3092\u524a\u6e1b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306e\u30b7\u30a7\u30fc\u30c0\u306f PixelShader \u3067\u305d\u306e\u307e\u307e\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u5168\u3066\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); # if SIV3D_PLATFORM(WINDOWS) // \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u3092\u4f5c\u3063\u3066\u4fdd\u5b58\u3059\u308b\uff081 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308c\u3070 OK\uff09 //Platform::Windows::Shader::CompileHLSLToFile( // U\"example/shader/2d/rgb_to_bgr.hlsl\", // U\"example/shader/2d/rgb_to_bgr.ps\", // ShaderStage::Pixel, U\"PS\"); # endif // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f ps, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".ps\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 RGB \u30b7\u30d5\u30c8 \u00b6 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_shift\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316 \u00b6 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba \u00b6 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/posterize\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } Poisson-Disk Sampling \u00b6 \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u3068\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5024\u3092\u6e21\u305b\u307e\u3059\u3002\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306f 16 \u306e\u500d\u6570\u306e\u30b5\u30a4\u30ba\u3067\u7528\u610f\u3057\u307e\u3059\u30021 \u3064\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f 64KB \u3067\u3059\u3002 \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u65b0\u3057\u3044\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u306b\u306f\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8ffd\u52a0\u3057\u3001 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b58\u5728\u3059\u308b PSConstants2D \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 ConstantBuffer <> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u308a\u3001\u3053\u306e\u30af\u30e9\u30b9\u7d4c\u7531\u3067\u5024\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002\u63cf\u753b\u524d\u306b\u3001 Graphics2D :: SetConstantBuffer () \u306b\u3088\u3063\u3066\u3001\u9069\u5207\u306a\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PoissonDisk { // 1 \u30d4\u30af\u30bb\u30eb\u3042\u305f\u308a\u306e UV \u30b5\u30a4\u30ba Float2 pixelSize ; // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 float diskRadius ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 float _unused = 0.0f ; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // Poisson-Disk Sampling \u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/poisson_disk\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PoissonDisk\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PoissonDisk > cb ; cb -> pixelSize = Float2 ( 1.0 , 1.0 ) / windmill . size (); // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 double diskRadius = 0.0 ; while ( System :: Update ()) { // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84\u3092\u30b9\u30e9\u30a4\u30c0\u30fc\u3067\u5909\u66f4 SimpleGUI :: Slider ( U \"diskRadius\" , diskRadius , 0.0 , 8.0 , Vec2 ( 10 , 340 ), 120 , 200 ); cb -> diskRadius = static_cast < float > ( diskRadius ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u3001\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 1 \u306b\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // Poisson-Disk Sampling \u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u6e26\u5dfb\u304d\u52b9\u679c \u00b6 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; while ( System :: Update ()) { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 720 _deg ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d6\u30ec\u30f3\u30c9 \u00b6 \u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u63cf\u753b\u3067\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Graphics2D :: SetTexture () \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8907\u6570\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Graphics2D :: SetTexture () \u306b none \u3092\u6e21\u3059\u3053\u3068\u3067\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture emojiCat ( Emoji ( U \"\ud83d\udc08\" )); const Texture windmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_blend\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { // windmill \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , windmill ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); emojiCat . scaled ( 2 ). drawAt ( Scene :: Center ()); } } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30de\u30b9\u30af \u00b6 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 960x600 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 960 , 600 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_mask\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u7d75\u6587\u5b57\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u753b\u50cf const Texture emoji ( Emoji :: CreateSilhouetteImage ( U \"\ud83c\udf4e\" ), TextureDesc :: Mipped ); // \u98a8\u8eca\u306e\u5199\u771f const Texture windmill ( U \"example/windmill.png\" ); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 RenderTexture rt ( 480 , 320 ); while ( System :: Update ()) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( ColorF ( 0.0 , 1.0 )); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . scaled ( 2 ). rotated ( Scene :: Time () * 60 _deg ). drawAt ( rt . size () / 2 ); } // \u63cf\u753b\u3055\u308c\u305f rt \u3092\u8868\u793a rt . draw ( 0 , 140 ); // rt \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , rt ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 480 , 140 ); } } } GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 \u00b6 \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30bb\u30eb\u306e\u6570 (1280x720) constexpr Size FieldSize ( 1280 , 720 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); while ( System :: Update ()) { { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } } GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff082D \u30ab\u30e1\u30e9\u64cd\u4f5c\u5bfe\u5fdc\u7248\uff09 \u00b6 \u30de\u30a6\u30b9\u3084\u30ad\u30fc\u3092\u4f7f\u3063\u305f 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u3067\u62e1\u5927\u7e2e\u5c0f\u3084\u79fb\u52d5\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u30b0\u30ec\u30fc\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.5 )); // \u30bb\u30eb\u306e\u6570 (2048x2048), \u6700\u5927 (8192x8192) constexpr Size FieldSize ( 2048 , 2048 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 4 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); // 2D \u30ab\u30e1\u30e9\u306e UI \u3092\u63cf\u753b camera . draw ( Palette :: Orange ); } { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } } \u30b2\u30fc\u30e0\u753b\u9762\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528 \u00b6 \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u30b2\u30fc\u30e0\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u63cf\u753b\u3057\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30fc\u30f3\u306b\u63cf\u753b\u3059\u308b\u969b\u306b\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30b2\u30fc\u30e0\u753b\u9762\u5168\u4f53\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { // \u30b2\u30fc\u30e0\u306e\u63cf\u753b\u7528\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture rt ( Scene :: Size ()); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psGrayscale ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! psGrayscale ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psSwirl ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! psSwirl ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rtA ( rt . size ()), rtB ( rt . size ()); RenderTexture rtA4 ( rt . size () / 4 ), rtB4 ( rt . size () / 4 ); RenderTexture rtA8 ( rt . size () / 8 ), rtB8 ( rt . size () / 8 ); // \u30b2\u30fc\u30e0\u753b\u9762\u306b\u9069\u7528\u3059\u308b\u30a8\u30d5\u30a7\u30af\u30c8 size_t effectIndex = 0 ; // \u80cc\u666f\u8272 constexpr ColorF backgroundColor ( 0.3 , 0.4 , 0.5 ); // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u81ea\u52d5\u30d7\u30ec\u30a4\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf double paddleCenter = 400 ; double randomOffset = 0.0 ; while ( System :: Update ()) { // \u81ea\u52d5\u30d7\u30ec\u30a4 paddleCenter = Math :: Damp ( paddleCenter , ball . x + ballVelocity . x * 1.2 + randomOffset , 0.9 , Scene :: DeltaTime ()); // \u30d1\u30c9\u30eb const RectF paddle ( Arg :: center ( paddleCenter , 500 ), 120 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); randomOffset = Random ( - 40 , 40 ); } // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( backgroundColor ); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); for ( auto y : Range ( 1 , 5 )) { Line ( 0 , y * 100 , 800 , y * 100 ). draw ( 1 , Palette :: Gray ); } for ( auto x : Range ( 1 , 7 )) { Line ( x * 100 , 0 , x * 100 , 600 ). draw ( 1 , Palette :: Gray ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } // resolve \u306e\u305f\u3081\u306b\u63cf\u753b\u3092\u5b8c\u4e86\u3055\u305b\u308b Graphics2D :: Flush (); // multi-sample \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 resolve \u3057\u3066 // multi-sample \u3067\u306f\u306a\u3044\u3001\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5f97\u308b rt . resolve (); if ( effectIndex == 0 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u305d\u306e\u307e\u307e\u63cf\u753b { rt . draw (); } else if ( effectIndex == 1 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3057\u3066\u63cf\u753b { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psGrayscale ); rt . draw (); } else if ( effectIndex == 2 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u6e26\u5dfb\u304d\u52b9\u679c\u3067\u63cf\u753b { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 240 _deg ); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psSwirl ); rt . draw (); } else if ( effectIndex == 3 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3067\u63cf\u753b { // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( rt , rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); rtA8 . scaled ( 8 ). draw (); } // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u7a2e\u985e\u306e\u9078\u629e SimpleGUI :: RadioButtons ( effectIndex , { U \"Default\" , U \"Grayscale\" , U \"Swirl\" , U \"GaussianBlur\" }, Vec2 ( 10 , 10 )); } } 5. \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210 \u00b6 \u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u300c\u5b50\u30d7\u30ed\u30bb\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\u3001\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u305f\u308a\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u969b\u306b\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"C:/Windows/System32/notepad.exe\" ; # elif SIV3D_PLATFORM(MACOS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210 ChildProcess child = Process :: Spawn ( path ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } while ( System :: Update ()) { ClearPrint (); // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u304b\u3092\u53d6\u5f97 Print << child . isRunning (); // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u30b3\u30fc\u30c9 Print << child . getExitCode (); if ( child . isRunning ()) { if ( SimpleGUI :: Button ( U \"Terminate\" , Vec2 ( 100 , 20 ))) { // \u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86 child . terminate (); } } } } \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406 \u00b6 \u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u4e00\u65b9\u306e\u6a19\u6e96\u51fa\u529b\u3092\u4ed6\u65b9\u306e\u6a19\u6e96\u5165\u529b\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\"Console\" \u306f\u901a\u5e38\u306e C++ \u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 Console # include <iostream> int main () { int a , b ; std :: cin >> a >> b ; std :: cout << ( a + b ) << std :: endl ; } Siv3D # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console.exe\" ; # else // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff09 ChildProcess child = Process :: Spawn ( path , Pipe :: StdInOut ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } child . ostream () << 10 << std :: endl ; child . ostream () << 20 << std :: endl ; int32 result ; child . istream () >> result ; Print << U \"result: \" << result ; while ( System :: Update ()) { } } 6. \u5b9f\u9a13\u7684\u306a 3D \u63cf\u753b\u5bfe\u5fdc \u00b6 \u5b9f\u9a13\u7684\u306a 3D \u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); experimental :: Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { experimental :: Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); experimental :: Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } experimental :: AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); experimental :: AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); experimental :: AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); experimental :: AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); experimental :: AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 \u30de\u30a6\u30b9\u30af\u30ea\u30c3\u30af\u3067\u3001\u5de6\u4e0a\u306e\u9ad8\u3055\u30de\u30c3\u30d7\u306b\u5c71\u3092\u63cf\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } }","title":"What's new in v0.4.1"},{"location":"news/v041/#1","text":"\u3053\u308c\u307e\u3067\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u30b7\u30fc\u30f3\u306b\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7528\u610f\u3057\u305f\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 RenderTexture \u3092\u4f5c\u6210\u3057\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3068\u3001 ScopedRenderTarget2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\uff08\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5909\u66f4\uff09\u3002\u63cf\u753b\u3055\u308c\u305f\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u89e3\u9664\u3055\u308c\u305f\u3042\u3068\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u3066\u63cf\u753b\u306b\u8ee2\u7528\u3067\u304d\u307e\u3059\u3002 Warning \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u6700\u4e2d\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u7d75\u6587\u5b57 const Texture emoji ( Emoji ( U \"\ud83d\ude07\" )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 600 , 600 , Palette :: White ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089 if ( MouseL . pressed ()) { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . drawAt ( Cursor :: Pos ()); } rt . draw (); emoji . drawAt ( Cursor :: Pos ()); // Clear \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 650 , 20 ))) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u767d\u3067\u30af\u30ea\u30a2 rt . clear ( Palette :: White ); } } }","title":"1. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"news/v041/#2","text":"\u901a\u5e38\u306e RenderTexture \u3078\u306e\u63cf\u753b\u3067\u306f\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u304c\u6709\u52b9\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u56f3\u5f62\u3092\u63cf\u753b\u3057\u305f\u969b\u306b\u30b8\u30e3\u30ae\u30fc\u304c\u751f\u3058\u307e\u3059\u3002 MSRenderTexture \u3092\u4f7f\u3046\u3068\u3001\u901a\u5e38\u306e\u30b7\u30fc\u30f3\u3078\u306e\u63cf\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 MSRenderTexture \u306b\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u3001\u5225\u306e\u63cf\u753b\u3067\u4f7f\u3046\u969b\u306b\u306f\u3001 Graphics2D :: Flush () \u306b\u3088\u3063\u3066\u305d\u306e\u6642\u70b9\u307e\u3067\u306e\u63cf\u753b\u51e6\u7406\u3092\u3059\u3079\u3066\u5b9f\u884c\uff08\u30d5\u30e9\u30c3\u30b7\u30e5\uff09\u3057\u3066 MSRenderTexture \u306b\u78ba\u5b9f\u306b\u63cf\u753b\u3057\u305f\u3042\u3068\u306b\u3001 MSRenderTexture :: resolve () \u3092\u884c\u3044\u3001 MSRenderTexture \u5185\u306e\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u3001\u63cf\u753b\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( 200 , 200 ); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture msrt ( 200 , 200 ); while ( System :: Update ()) { rt . clear ( ColorF ( 0.0 , 1.0 )); { ScopedRenderTarget2D target ( rt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } msrt . clear ( ColorF ( 0.0 , 1.0 )); { { ScopedRenderTarget2D target ( msrt ); Rect ( Arg :: center ( 100 , 100 ), 80 ) . rotated ( Scene :: Time () * 30 _deg ). draw (); } // 2D \u63cf\u753b\u3092\u30d5\u30e9\u30c3\u30b7\u30e5 Graphics2D :: Flush (); // \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u5909\u63db msrt . resolve (); } rt . draw ( 100 , 0 ); msrt . draw ( 400 , 0 ); } }","title":"2. \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"news/v041/#3","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u5225\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u69d8\u3005\u306a\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570 1 \u3064\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u5909\u66f4\u3082\u4e0d\u8981\u3067\u3059\u3002\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002","title":"3. \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3078\u306e\u30b7\u30a7\u30fc\u30c0\u51e6\u7406"},{"location":"news/v041/#void-copyconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void Copy(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"news/v041/#void-downsampleconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u7e2e\u5c0f\u3057\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void Downsample(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"news/v041/#void-gaussianblurhconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void GaussianBlurH(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"news/v041/#void-gaussianblurvconst-textureregion-from-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u7e26\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void GaussianBlurV(const TextureRegion&amp; from, RenderTexture&amp; to);"},{"location":"news/v041/#void-gaussianblurconst-textureregion-from-rendertexture-to-const-vec2-direction","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 direction: \u30d6\u30e9\u30fc\u306e\u65b9\u5411 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u306b\u6307\u5b9a\u3057\u305f\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from \u3068 to \u306f\u3068\u3082\u306b\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u4e92\u3044\u306b\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002","title":"void GaussianBlur(const TextureRegion&amp; from, RenderTexture&amp; to, const Vec2&amp; direction);"},{"location":"news/v041/#void-gaussianblurconst-textureregion-from-rendertexture-internalbuffer-rendertexture-to","text":"from: \u5165\u529b\u30c6\u30af\u30b9\u30c1\u30e3 internalBuffer: \u4e2d\u9593\u30c6\u30af\u30b9\u30c1\u30e3 to: \u51fa\u529b\u30c6\u30af\u30b9\u30c1\u30e3 from \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u3092\u306b\u7e26\u65b9\u5411\u3068\u6a2a\u65b9\u5411\u306e\u30ac\u30a6\u30b9\u30d6\u30e9\u30fc\u3092\u304b\u3051\u3066 to \u306b\u63cf\u753b\u3057\u307e\u3059\u3002 from , internalBuffer , to \u306f\u3044\u305a\u308c\u3082\u6709\u52b9\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3001\u96a3\u308a\u5408\u3046\u3082\u306e\u540c\u58eb\u306f\u7570\u306a\u308a\u3001\u9818\u57df\u306e\u30b5\u30a4\u30ba\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 GaussianBlurH ( from , internalBuffer ); GaussianBlurV ( internalBuffer , to ); \u3068\u7b49\u4fa1\u3067\u3059\u3002","title":"void GaussianBlur(const TextureRegion&amp; from, RenderTexture&amp; internalBuffer, RenderTexture&amp; to);"},{"location":"news/v041/#_1","text":"# include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); // \u7e26\u3001\u6a2a\u304c 4 \u5206\u306e 1 \u30b5\u30a4\u30ba\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rt ( texture . size () / 4 ); // \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 Shader :: Downsample ( texture , rt ); while ( System :: Update ()) { rt . draw (); } }","title":"\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0"},{"location":"news/v041/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // bay.jpg \u306f 2560x1440 \u306a\u306e\u3067\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3057\u3066\u30ed\u30fc\u30c9 const Texture texture ( Image ( U \"example/bay.jpg\" ). scale ( 1280 , 720 )); // \u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba constexpr Size blurAreaSize ( 480 , 320 ); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f RenderTexture rtA ( blurAreaSize ), rtB ( blurAreaSize ); RenderTexture rtA4 ( blurAreaSize / 4 ), rtB4 ( blurAreaSize / 4 ); RenderTexture rtA8 ( blurAreaSize / 8 ), rtB8 ( blurAreaSize / 8 ); while ( System :: Update ()) { const Point cursorPos = Cursor :: Pos (); // \u80cc\u666f\u753b\u50cf\u306e\u3046\u3061\u307c\u304b\u3057\u3092\u9069\u7528\u3059\u308b\u9818\u57df const Rect blurArea ( cursorPos , blurAreaSize ); // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/8\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( texture ( blurArea ), rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); // \u80cc\u666f\u3092\u63cf\u753b texture . draw (); // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u5f8c\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 RoundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b RoundRect ( cursorPos , blurAreaSize , 40 )( rtA8 . resized ( blurAreaSize )). draw (); } }","title":"\u30ac\u30a6\u30b9\u307c\u304b\u3057"},{"location":"news/v041/#4","text":"2D \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u56f3\u5f62\u304c\u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u63cf\u304b\u308c\u308b\u3068\u304d\u3001\u3069\u306e\u3088\u3046\u306a\u8272\u3092\u51fa\u529b\u3059\u308b\u304b\u306f\u3001\u300c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u2015\u30c0\u300d\u3068\u547c\u3070\u308c\u308b\u3001\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b GPU \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u901a\u3057\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Windows (Direct3D) \u3067\u306f\u300cHLSL\u300d\u3001macOS/Linux (OpenGL) \u3067\u306f\u300cGLSL\u300d\u3068\u3044\u3046\u8a00\u8a9e\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\u30ab\u30b9\u30bf\u30e0\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u524d\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3069\u306e\u3088\u3046\u306a\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u63cf\u304b\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"4. \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0"},{"location":"news/v041/#_3","text":"","title":"\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0"},{"location":"news/v041/#hlsl","text":"PS () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b PSInput \u578b\u306e\u5024 input \u306e .position , .color , .uv \u30e1\u30f3\u30d0\u5909\u6570\u306e\u3046\u3061 .color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 input . color \u304c float4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f flaot4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b return float4 ( 1 , 0 , 0 , 1 ) \u3092\u8fd4\u305b\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { return input . color + g_colorAdd ; }","title":"HLSL"},{"location":"news/v041/#glsl","text":"main () \u95a2\u6570\u304c\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u51fa\u529b\u3067\u3042\u308b vec4 \u578b\u306e\u5024 Color \u3068\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 g_colorAdd \u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u51fa\u529b\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e RGBA \u8272 (float4 \u578b) \u3092\u8a08\u7b97\u3057\u3001 FragColor \u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002 Rect ( 100 ). draw ( ColorF ( 0 . 3 , 0 . 5 , 0 . 7 )) \u306e\u3088\u3046\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u3001 Color \u304c vec4 ( 0 . 3 , 0 . 5 , 0 . 7 , 1 . 0 ) \u3067\u3059\u3002\u306a\u304a\u3001 ScopedColorMul2D \u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u5024\u304c\u4e57\u7b97\u6e08\u307f\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 g_colorAdd \u306f ScopedAdd2D \u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u3066\u3001\u57fa\u672c\u7684\u306b\u306f vec4 ( 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ) \u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u306e\u57fa\u672c\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u3046\u3068\u3001 .draw () \u3067\u6307\u5b9a\u3057\u305f\u8272 \u00d7 ColorMul2D + ColorAdd2D \u306e\u8272\u3067\u56f3\u5f62\u304c\u753b\u9762\u306b\u63cf\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u8a08\u7b97\u3092\u305b\u305a\u306b FragColor = vec4 ( 1 , 0 , 0 , 1 ) \u3068\u3059\u308c\u3070\u3001\u56f3\u5f62\u306f\u8d64\u304f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 engine/shader/2d/default_shape.frag #version 410 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { FragColor = Color + g_colorAdd ; }","title":"GLSL"},{"location":"news/v041/#_4","text":"","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u57fa\u672c\u30b7\u30a7\u30fc\u30c0"},{"location":"news/v041/#hlsl_1","text":"\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3 g_texture0 \u3068\u30b5\u30f3\u30d7\u30e9\u30fc g_sampler0 \u3092\u4f7f\u3063\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b input . uv \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.hlsl Texture2D g_texture0 : register ( t0 ); SamplerState g_sampler0 : register ( s0 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float4 texColor = g_texture0 . Sample ( g_sampler0 , input . uv ); return ( texColor * input . color ) + g_colorAdd ; }","title":"HLSL"},{"location":"news/v041/#glsl_1","text":"\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u56f3\u5f62\u306e\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u8ffd\u52a0\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30e9\u30fc Texture0 \u304b\u3089\u8272\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002UV \u5ea7\u6a19\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u6e21\u3055\u308c\u308b\u5024 UV \u3092\u4f7f\u3044\u307e\u3059\u3002 engine/shader/2d/default_texture.frag #version 410 uniform sampler2D Texture0 ; layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { vec4 texColor = texture ( Texture0 , UV ); FragColor = ( texColor * Color ) + g_colorAdd ; }","title":"GLSL"},{"location":"news/v041/#_5","text":"\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f PixelShader \u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u958b\u767a\u3067\u306f\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u4f7f\u3044\u5206\u3051\u308b\u305f\u3081\u306b SIV3D_SELECT_SHADER \u30de\u30af\u30ed\u3092\u4f7f\u3044\u307e\u3059\u3002 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u4ed8\u3051\u306e\u305f\u3081\u306b { { U \"PSConstants2D\" , 0 } } \u3092\u8a18\u8ff0\u3057\u307e\u3059\u30022D \u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u304a\u3044\u3066\u306f\u3001Siv3D \u5185\u90e8\u306e\u51e6\u7406\u306e\u305f\u3081\u306b\u3001 U \"PSConstants2D\" \u3068\u3044\u3046\u540d\u524d\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u5e38\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if (!ps) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 ScopedCustomShader2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u305d\u306e\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306b\u3088\u3063\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e R \u6210\u5206\u3068 B \u6210\u5206\u3092\u5165\u308c\u66ff\u3048\u3066\u63cf\u753b\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528"},{"location":"news/v041/#windows","text":"Platform :: Windows :: Shader :: CompileHLSLToFile () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001HLSL \u30d5\u30a1\u30a4\u30eb\u3092\u3042\u3089\u304b\u3058\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u5b9f\u884c\u6642\u306e\u51e6\u7406\u3092\u524a\u6e1b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306e\u30b7\u30a7\u30fc\u30c0\u306f PixelShader \u3067\u305d\u306e\u307e\u307e\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30ea\u30ea\u30fc\u30b9\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u5168\u3066\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); # if SIV3D_PLATFORM(WINDOWS) // \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u3092\u4f5c\u3063\u3066\u4fdd\u5b58\u3059\u308b\uff081 \u5ea6\u3060\u3051\u4f5c\u6210\u3059\u308c\u3070 OK\uff09 //Platform::Windows::Shader::CompileHLSLToFile( // U\"example/shader/2d/rgb_to_bgr.hlsl\", // U\"example/shader/2d/rgb_to_bgr.ps\", // ShaderStage::Pixel, U\"PS\"); # endif // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f ps, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_to_bgr\" SIV3D_SELECT_SHADER ( U \".ps\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // R \u3068 B \u3092\u5165\u308c\u66ff\u3048\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b7\u30a7\u30fc\u30c0\u306e\u4f7f\u7528 (Windows \u306e\u307f)"},{"location":"news/v041/#_6","text":"","title":"\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"news/v041/#rgb","text":"# include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/rgb_shift\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // RGB \u30b7\u30d5\u30c8\u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"RGB \u30b7\u30d5\u30c8"},{"location":"news/v041/#_7","text":"# include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316"},{"location":"news/v041/#_8","text":"# include <Siv3D.hpp> void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/posterize\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { { // \u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u30dd\u30b9\u30bf\u30e9\u30a4\u30ba"},{"location":"news/v041/#poisson-disk-sampling","text":"\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u3068\u3001C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5024\u3092\u6e21\u305b\u307e\u3059\u3002\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306f 16 \u306e\u500d\u6570\u306e\u30b5\u30a4\u30ba\u3067\u7528\u610f\u3057\u307e\u3059\u30021 \u3064\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f 64KB \u3067\u3059\u3002 \u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u65b0\u3057\u3044\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3046\u306b\u306f\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8ffd\u52a0\u3057\u3001 PixelShader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u5bfe\u5fdc\u3059\u308b\u8ffd\u52a0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b58\u5728\u3059\u308b PSConstants2D \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001 ConstantBuffer <> \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306b\u3059\u308b\u69cb\u9020\u4f53\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u308a\u3001\u3053\u306e\u30af\u30e9\u30b9\u7d4c\u7531\u3067\u5024\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002\u63cf\u753b\u524d\u306b\u3001 Graphics2D :: SetConstantBuffer () \u306b\u3088\u3063\u3066\u3001\u9069\u5207\u306a\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PoissonDisk { // 1 \u30d4\u30af\u30bb\u30eb\u3042\u305f\u308a\u306e UV \u30b5\u30a4\u30ba Float2 pixelSize ; // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 float diskRadius ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 float _unused = 0.0f ; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // Poisson-Disk Sampling \u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/poisson_disk\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PoissonDisk\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PoissonDisk > cb ; cb -> pixelSize = Float2 ( 1.0 , 1.0 ) / windmill . size (); // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84 double diskRadius = 0.0 ; while ( System :: Update ()) { // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u534a\u5f84\u3092\u30b9\u30e9\u30a4\u30c0\u30fc\u3067\u5909\u66f4 SimpleGUI :: Slider ( U \"diskRadius\" , diskRadius , 0.0 , 8.0 , Vec2 ( 10 , 340 ), 120 , 200 ); cb -> diskRadius = static_cast < float > ( diskRadius ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u3001\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 1 \u306b\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // Poisson-Disk Sampling \u7528\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"Poisson-Disk Sampling"},{"location":"news/v041/#_9","text":"# include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { const Texture windmill ( U \"example/windmill.png\" ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; while ( System :: Update ()) { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 720 _deg ); { // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 10 , 10 ); } } }","title":"\u6e26\u5dfb\u304d\u52b9\u679c"},{"location":"news/v041/#_10","text":"\u901a\u5e38\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u63cf\u753b\u3067\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Graphics2D :: SetTexture () \u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b9\u30ed\u30c3\u30c8\u306b\u8ffd\u52a0\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3001\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8907\u6570\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Graphics2D :: SetTexture () \u306b none \u3092\u6e21\u3059\u3053\u3068\u3067\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture emojiCat ( Emoji ( U \"\ud83d\udc08\" )); const Texture windmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_blend\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } while ( System :: Update ()) { // windmill \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , windmill ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30d6\u30ec\u30f3\u30c9\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); emojiCat . scaled ( 2 ). drawAt ( Scene :: Center ()); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d6\u30ec\u30f3\u30c9"},{"location":"news/v041/#_11","text":"# include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 960x600 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 960 , 600 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u6de1\u3044\u6c34\u8272\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/multi_texture_mask\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u7d75\u6587\u5b57\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u753b\u50cf const Texture emoji ( Emoji :: CreateSilhouetteImage ( U \"\ud83c\udf4e\" ), TextureDesc :: Mipped ); // \u98a8\u8eca\u306e\u5199\u771f const Texture windmill ( U \"example/windmill.png\" ); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 RenderTexture rt ( 480 , 320 ); while ( System :: Update ()) { // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( ColorF ( 0.0 , 1.0 )); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); emoji . scaled ( 2 ). rotated ( Scene :: Time () * 60 _deg ). drawAt ( rt . size () / 2 ); } // \u63cf\u753b\u3055\u308c\u305f rt \u3092\u8868\u793a rt . draw ( 0 , 140 ); // rt \u3092 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , rt ); { // \u30de\u30eb\u30c1\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u308b\u30de\u30b9\u30af\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( ps ); windmill . draw ( 480 , 140 ); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30de\u30b9\u30af"},{"location":"news/v041/#gpu","text":"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3067\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30bb\u30eb\u306e\u6570 (1280x720) constexpr Size FieldSize ( 1280 , 720 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); while ( System :: Update ()) { { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } }","title":"GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3"},{"location":"news/v041/#gpu-2d","text":"\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u3092\u4f7f\u3063\u305f 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u3067\u62e1\u5927\u7e2e\u5c0f\u3084\u79fb\u52d5\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct GameOfLife { Float2 pixelSize ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float2 _unused = {}; }; void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092 1280x720 \u306b\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 1280 , 720 ); // \u30b7\u30fc\u30f3\u306e\u80cc\u666f\u8272\u3092\u30b0\u30ec\u30fc\u306b\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.5 )); // \u30bb\u30eb\u306e\u6570 (2048x2048), \u6700\u5927 (8192x8192) constexpr Size FieldSize ( 2048 , 2048 ); // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"example/shader/2d/game_of_life\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"GameOfLife\" , 1 } }); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 const ConstantBuffer < GameOfLife > cb ({ Float2 ( 1.0f , 1.0f ) / FieldSize }); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 0 RenderTexture rt0 ( Image ( FieldSize , Arg :: generator = []() { return Color ( RandomBool () * 255 ); })); // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 1 RenderTexture rt1 ( FieldSize , ColorF ( 0.0 )); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 4 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // \u30c6\u30af\u30b9\u30c1\u30e3\u30d5\u30a3\u30eb\u30bf\u306a\u3057 ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); // \u73fe\u5728\u306e\u72b6\u614b\u3092\u753b\u9762\u306b\u63cf\u304f rt0 . draw ( ColorF ( 0.0 , 1.0 , 0.0 )); // 2D \u30ab\u30e1\u30e9\u306e UI \u3092\u63cf\u753b camera . draw ( Palette :: Orange ); } { // \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u7528\u306e\u30b7\u30a7\u30fc\u30c0 Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); // \u66f4\u65b0\u5f8c\u306e\u72b6\u614b\u3092\u63cf\u304f rt1 \u306b\u63cf\u304f ScopedRenderTarget2D target ( rt1 ); rt0 . draw (); } } // rt0 \u3068 rt1 \u3092\u5165\u308c\u66ff\u3048\u308b std :: swap ( rt0 , rt1 ); } }","title":"GPU \u4e0a\u3067\u306e\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff082D \u30ab\u30e1\u30e9\u64cd\u4f5c\u5bfe\u5fdc\u7248\uff09"},{"location":"news/v041/#_12","text":"\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u30b2\u30fc\u30e0\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u63cf\u753b\u3057\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30fc\u30f3\u306b\u63cf\u753b\u3059\u308b\u969b\u306b\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30b2\u30fc\u30e0\u753b\u9762\u5168\u4f53\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct Swirl { // \u56de\u8ee2 float angle ; // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u3092 // 16 \u306e\u500d\u6570\u306b\u3059\u308b\u305f\u3081\u306e\u30d1\u30c7\u30a3\u30f3\u30b0 Float3 unused = {}; }; void Main () { // \u30b2\u30fc\u30e0\u306e\u63cf\u753b\u7528\u306e\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture rt ( Scene :: Size ()); // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psGrayscale ( U \"example/shader/2d/grayscale\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 } }); if ( ! psGrayscale ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader psSwirl ( U \"example/shader/2d/swirl\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"Swirl\" , 1 } }); if ( ! psSwirl ) { throw Error ( U \"Failed to load a shader file\" ); } // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u7528\u306e\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < Swirl > cb ; // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u306e\u4e2d\u9593\u3067\u4f7f\u3046\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture rtA ( rt . size ()), rtB ( rt . size ()); RenderTexture rtA4 ( rt . size () / 4 ), rtB4 ( rt . size () / 4 ); RenderTexture rtA8 ( rt . size () / 8 ), rtB8 ( rt . size () / 8 ); // \u30b2\u30fc\u30e0\u753b\u9762\u306b\u9069\u7528\u3059\u308b\u30a8\u30d5\u30a7\u30af\u30c8 size_t effectIndex = 0 ; // \u80cc\u666f\u8272 constexpr ColorF backgroundColor ( 0.3 , 0.4 , 0.5 ); // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u81ea\u52d5\u30d7\u30ec\u30a4\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf double paddleCenter = 400 ; double randomOffset = 0.0 ; while ( System :: Update ()) { // \u81ea\u52d5\u30d7\u30ec\u30a4 paddleCenter = Math :: Damp ( paddleCenter , ball . x + ballVelocity . x * 1.2 + randomOffset , 0.9 , Scene :: DeltaTime ()); // \u30d1\u30c9\u30eb const RectF paddle ( Arg :: center ( paddleCenter , 500 ), 120 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); randomOffset = Random ( - 40 , 40 ); } // \u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30af\u30ea\u30a2 rt . clear ( backgroundColor ); { // \u30ec\u30f3\u30c0\u30fc\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 rt \u306b\u8a2d\u5b9a ScopedRenderTarget2D target ( rt ); for ( auto y : Range ( 1 , 5 )) { Line ( 0 , y * 100 , 800 , y * 100 ). draw ( 1 , Palette :: Gray ); } for ( auto x : Range ( 1 , 7 )) { Line ( x * 100 , 0 , x * 100 , 600 ). draw ( 1 , Palette :: Gray ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } // resolve \u306e\u305f\u3081\u306b\u63cf\u753b\u3092\u5b8c\u4e86\u3055\u305b\u308b Graphics2D :: Flush (); // multi-sample \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092 resolve \u3057\u3066 // multi-sample \u3067\u306f\u306a\u3044\u3001\u63cf\u753b\u53ef\u80fd\u306a\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5f97\u308b rt . resolve (); if ( effectIndex == 0 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u305d\u306e\u307e\u307e\u63cf\u753b { rt . draw (); } else if ( effectIndex == 1 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3057\u3066\u63cf\u753b { // \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psGrayscale ); rt . draw (); } else if ( effectIndex == 2 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u6e26\u5dfb\u304d\u52b9\u679c\u3067\u63cf\u753b { cb -> angle = static_cast < float > ( Math :: Sin ( Scene :: Time ()) * 240 _deg ); // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3092\u8a2d\u5b9a Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); // \u6e26\u5dfb\u304d\u52b9\u679c\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u958b\u59cb ScopedCustomShader2D shader ( psSwirl ); rt . draw (); } else if ( effectIndex == 3 ) // \u30b2\u30fc\u30e0\u753b\u9762\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3067\u63cf\u753b { // [\u30aa\u30ea\u30b8\u30ca\u30eb]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057]->[1/4\u30b5\u30a4\u30ba]->[\u30ac\u30a6\u30b9\u307c\u304b\u3057] Shader :: GaussianBlur ( rt , rtB , rtA ); Shader :: Downsample ( rtA , rtA4 ); Shader :: GaussianBlur ( rtA4 , rtB4 , rtA4 ); Shader :: Downsample ( rtA4 , rtA8 ); Shader :: GaussianBlur ( rtA8 , rtB8 , rtA8 ); rtA8 . scaled ( 8 ). draw (); } // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u7a2e\u985e\u306e\u9078\u629e SimpleGUI :: RadioButtons ( effectIndex , { U \"Default\" , U \"Grayscale\" , U \"Swirl\" , U \"GaussianBlur\" }, Vec2 ( 10 , 10 )); } }","title":"\u30b2\u30fc\u30e0\u753b\u9762\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u30b7\u30a7\u30fc\u30c0\u3092\u9069\u7528"},{"location":"news/v041/#5","text":"\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u300c\u5b50\u30d7\u30ed\u30bb\u30b9\u300d\u3068\u3057\u3066\u8d77\u52d5\u3001\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5225\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u305f\u308a\u3001\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u969b\u306b\u4f7f\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"C:/Windows/System32/notepad.exe\" ; # elif SIV3D_PLATFORM(MACOS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210 ChildProcess child = Process :: Spawn ( path ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } while ( System :: Update ()) { ClearPrint (); // \u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u4e2d\u304b\u3092\u53d6\u5f97 Print << child . isRunning (); // \u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u30b3\u30fc\u30c9 Print << child . getExitCode (); if ( child . isRunning ()) { if ( SimpleGUI :: Button ( U \"Terminate\" , Vec2 ( 100 , 20 ))) { // \u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86 child . terminate (); } } } }","title":"5. \u5b50\u30d7\u30ed\u30bb\u30b9\u306e\u4f5c\u6210"},{"location":"news/v041/#_13","text":"\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u4e00\u65b9\u306e\u6a19\u6e96\u51fa\u529b\u3092\u4ed6\u65b9\u306e\u6a19\u6e96\u5165\u529b\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\"Console\" \u306f\u901a\u5e38\u306e C++ \u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 Console # include <iostream> int main () { int a , b ; std :: cin >> a >> b ; std :: cout << ( a + b ) << std :: endl ; } Siv3D # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console.exe\" ; # else // \u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u5b9f\u884c\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 const FilePath path = U \"Console\" ; # endif // \u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\uff08\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\uff09 ChildProcess child = Process :: Spawn ( path , Pipe :: StdInOut ); if ( ! child ) { throw Error ( U \"Failed to create a process\" ); } child . ostream () << 10 << std :: endl ; child . ostream () << 20 << std :: endl ; int32 result ; child . istream () >> result ; Print << U \"result: \" << result ; while ( System :: Update ()) { } }","title":"\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406"},{"location":"news/v041/#6-3d","text":"\u5b9f\u9a13\u7684\u306a 3D \u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044","title":"6. \u5b9f\u9a13\u7684\u306a 3D \u63cf\u753b\u5bfe\u5fdc"},{"location":"news/v041/#3d-triangles","text":"# include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); experimental :: Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } }","title":"3D Triangles"},{"location":"news/v041/#3d-aabb","text":"# include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { experimental :: Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); experimental :: Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } experimental :: AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); experimental :: AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); experimental :: AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); experimental :: AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); experimental :: AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } }","title":"3D AABB"},{"location":"news/v041/#3d-terrain","text":"\u30de\u30a6\u30b9\u30af\u30ea\u30c3\u30af\u3067\u3001\u5de6\u4e0a\u306e\u9ad8\u3055\u30de\u30c3\u30d7\u306b\u5c71\u3092\u63cf\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); experimental :: Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } }","title":"3D Terrain"},{"location":"news/v042/","text":"1. SDFFont \u00b6 SDFFont \u306f\u3001\u30b0\u30ea\u30d5\u306e\u753b\u50cf\u3092 Distance field \u5f62\u5f0f\u3067\u6301\u3064 Font \u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u56fa\u5b9a\u30b5\u30a4\u30ba\u3067\u30b0\u30ea\u30d5\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u62e1\u5927\u63cf\u753b\u6642\u306b\u307c\u3084\u3051\u308b\u306a\u3069\u3001\u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u5f31\u304f\u3001\u7e01\u53d6\u308a\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 SDFFont \u30af\u30e9\u30b9\u306f\u3001\u30b0\u30ea\u30d5\u3054\u3068\u306e Distance Field \u3092\u751f\u6210\u3057\u3001\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002 draw () \u3054\u3068\u306b\u7b2c\u4e00\u5f15\u6570\u3067\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u7d50\u679c\u304c\u307c\u3084\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001 Garphics2D :: SetSDFParameters () \u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6587\u5b57\u3092\u592a\u3089\u305b\u3089\u308c\u307e\u3059\u3002\u592a\u3055\u3068\u8272\u3092\u5909\u3048\u3066 2 \u56de\u4ee5\u4e0a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u7e01\u53d6\u308a\u306e\u8868\u73fe\u3082\u53ef\u80fd\u3067\u3059\u3002 \u305f\u3060\u3057\u3001 SDFFont \u306e\u751f\u6210\u3084\u63cf\u753b\u306e\u30b3\u30b9\u30c8\u306f Font \u306b\u6bd4\u3079\u3066\u5927\u304d\u3044\u305f\u3081\u3001 Font \u3067\u5341\u5206\u306a\u30b1\u30fc\u30b9\u3067\u306f\u5f93\u6765\u901a\u308a Font \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002 SDFFont \u306e\u54c1\u8cea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30d5\u306e Distance Field \u306e\u30b5\u30a4\u30ba\u3068\u3001\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e Distance Field \u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u6587\u5b57\u306e\u592a\u3089\u305b\u306b\u3064\u3044\u3066\u3082\u3001\u5927\u304d\u3044\u5024\u3067\u306f\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 SDFFont \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a Distance Field \u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 SDFFont \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; // SDFFont const SDFFont sdfFont ( distanceFieldSize , Typeface :: Bold ); const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 40 , Vec2 ( 20 , 20 )); sdfFont ( text ). draw ( 80 , Vec2 ( 20 , 80 )); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 180 )); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.2 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.2 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 ), Palette :: Black ); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.0 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.0 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 )); } } SDFFont \u306e\u4e8b\u524d\u751f\u6210 \u00b6 SDFFont \u306e\u5404\u30b0\u30ea\u30d5\u306e Distance field \u306f\u3001\u751f\u6210\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u30b0\u30ea\u30d5\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u901f\u5ea6\u4f4e\u4e0b\u304c\u9632\u3052\u307e\u3059\u3002 SDFFont :: preload ( s ) \u3067\u3001\u6587\u5b57\u5217 s \u542b\u307e\u308c\u308b\u30b0\u30ea\u30d5\u306e Distance field \u3092\u751f\u6210\u3001 SDFFont :: preload ( imagePath , jsonPath ) \u3067 2 \u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3001 SDFFont \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u4e8b\u524d\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u30b0\u30ea\u30d5\u306f\u5b9f\u884c\u6642\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( distanceFieldSize , Typeface :: Bold ) . preload ( s ) . saveGlyphs ( U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 // \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3084 Distance field \u304c\u4e00\u81f4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044 const SDFFont sdfFont ({ U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" }, distanceFieldSize , Typeface :: Bold ); if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 20 )); } } \u6bd4\u8f03\u7528\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); constexpr Vec2 pos ( 0 , 0 ); const String text = U \"OpenSiv3D \\n \u3042\u3044\u3046\u3048\u304a\" ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } s += text ; // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3068 text \u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( 60 , Typeface :: Light ). preload ( s ). saveGlyphs ( U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" ); SDFFont ( 60 , Typeface :: Heavy ). preload ( s ). saveGlyphs ( U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" ); SDFFont ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ). preload ( s ). saveGlyphs ( U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 const Array < SDFFont > sdfFonts = { SDFFont ({ U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" }, 60 , Typeface :: Light ), SDFFont ({ U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" }, 60 , Typeface :: Heavy ), SDFFont ({ U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" }, 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; for ( const auto & sdfFont : sdfFonts ) { if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } } // \u6bd4\u8f03\u7528\u306e\u901a\u5e38 Font const Array < Font > fonts = { Font ( 60 , Typeface :: Light ), Font ( 60 , Typeface :: Heavy ), Font ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; size_t fontIndex = 0 , method = 0 ; double fontSize = 80 , outline1 = 0.0 , outline2 = 0.0 ; HSV innerColor = Palette :: Black , outlineColor = Palette :: White ; while ( System :: Update ()) { const auto & sdfFont = sdfFonts [ fontIndex ]; const auto & font = fonts [ fontIndex ]; if ( method == 0 ) { Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline2 ); sdfFont ( text ). draw ( fontSize , pos , innerColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline1 ); sdfFont ( text ). draw ( fontSize , pos , outlineColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( fontSize , pos , innerColor ); } else if ( method == 1 ) { Transformer2D tr ( Mat3x2 :: Scale ( fontSize / font . fontSize ())); font ( text ). draw ( pos , innerColor ); } SimpleGUI :: RadioButtons ( fontIndex , { U \"Light 60\" , U \"Heavy 60\" , U \"Logo 50\" }, Vec2 ( 20 , 360 ), 150 ); SimpleGUI :: RadioButtons ( method , { U \"SDFFont\" , U \"Font\" }, Vec2 ( 20 , 480 ), 150 ); SimpleGUI :: Slider ( U \"size: {:.0f}\" _fmt ( fontSize ), fontSize , 15 , 550 , Vec2 ( 20 , 560 ), 150 , 200 ); SimpleGUI :: Slider ( U \"outline1: {:.2f}\" _fmt ( outline1 ), outline1 , 0.0 , 0.49 , Vec2 ( 20 , 600 ), 150 , 200 , ( method == 0 )); SimpleGUI :: Slider ( U \"outline2: {:.2f}\" _fmt ( outline2 ), outline2 , 0.0 , 0.49 , Vec2 ( 20 , 640 ), 150 , 200 , ( method == 0 )); SimpleGUI :: ColorPicker ( innerColor , Vec2 ( 400 , 560 )); SimpleGUI :: ColorPicker ( outlineColor , Vec2 ( 580 , 560 )); } } 2. \u96c6\u4e2d\u7dda\u63cf\u753b \u00b6 \u5b9f\u9a13\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4 HamFramework \u306b\u8ffd\u52a0\u3055\u308c\u305f SaturatedLinework \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u3001\u30b3\u30df\u30ab\u30eb\u306a\u52b9\u679c\u3084\u75be\u8d70\u611f\u3092\u6f14\u51fa\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7dda\u3092\u7c21\u5358\u306b\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62\u3001\u5916\u5468\u306e\u9577\u65b9\u5f62\u3001\u7dda\u306e\u672c\u6570\u3001\u7dda\u306e\u592a\u3055\u3001\u9577\u3055\u306e\u3070\u3089\u3064\u304d\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u306a\u3069\u304c\u3042\u308a\u3001 .draw () \u306e\u5f15\u6570\u3067\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u591a\u6570\u306e\u4e09\u89d2\u5f62\u3092\u751f\u6210\u3057\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3001\u751f\u6210\u3057\u305f\u4e09\u89d2\u5f62\u306f\u518d\u5229\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> # include <HamFramework.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.98 , 0.96 , 0.94 )); // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62 Ellipse target ( 400 , 300 , 180 , 120 ); // \u5916\u5468\u306e\u9577\u65b9\u5f62 Rect outer = Scene :: Rect (); // \u7dda\u306e\u592a\u3055 double minThickness = 3.0 , maxThickness = 10.0 ; // \u7dda\u306e\u672c\u6570 double lineCount = 150 ; // \u7dda\u306e\u9577\u3055\u306e\u3070\u3089\u3064\u304d double offsetRange = 60.0 ; // \u4e71\u6570\u30b7\u30fc\u30c9 uint64 seed = 12345 ; SaturatedLinework < Ellipse > linework ( target , outer ); linework . setThickness ( minThickness , maxThickness ) . setLineCount ( static_cast < size_t > ( lineCount )) . setOffsetRange ( offsetRange ); const Texture texture ( Emoji ( U \"\ud83e\udd80\" )); while ( System :: Update ()) { if ( MouseR . down ()) { target . setCenter ( Cursor :: Pos ()); linework . setTargetShape ( target ); } texture . scaled ( 1.6 ). drawAt ( target . center ); // \u96c6\u4e2d\u7dda\u3092\u63cf\u753b linework . draw ( ColorF ( 0.1 )); if ( SimpleGUI :: Slider ( U \"lineCount\" , lineCount , 0.0 , 400.0 , Vec2 ( 20 , 20 ), 150 )) { linework . setLineCount ( static_cast < size_t > ( lineCount )); } if ( SimpleGUI :: Slider ( U \"offsetRange\" , offsetRange , 0.0 , 100.0 , Vec2 ( 20 , 60 ), 150 )) { linework . setOffsetRange ( offsetRange ); } if ( SimpleGUI :: Button ( U \"Change seed\" , Vec2 ( 20 , 100 ))) { seed = RandomUint64 (); linework . setSeed ( seed ); } } } 3. \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1 \u00b6 \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u4f7f\u3063\u3066\u3001\u5916\u90e8\u30c7\u30d0\u30a4\u30b9\u3068\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3067\u306f Arduino UNO \u3067 LED \u306e\u70b9\u706f/\u6d88\u706f\u3092 PC \u304b\u3089\u5236\u5fa1\u3057\u3001\u5408\u308f\u305b\u3066 1 \u30d0\u30a4\u30c8\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002 Arduino \u306e\u30b3\u30fc\u30c9 \u00b6 void setup () { pinMode ( 13 , OUTPUT ); // 13 \u30d4\u30f3 - LED - \u62b5\u6297 - GND // 9600bps \u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u958b\u304f Serial . begin ( 9600 ); } unsigned char i = 0 ; // \u30c6\u30b9\u30c8\u7528\u306b PC \u5074\u306b\u9001\u308b\u5024 void loop () { // 250 \u30df\u30ea\u79d2\u6b62\u3081\u308b delay ( 250 ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b 1 \u30d0\u30a4\u30c8\u51fa\u529b Serial . write ( i ); ++ i ; // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const int val = Serial . read (); if ( val == - 1 ) // \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u304c\u7121\u3044 { return ; } if ( val == 0 ) { digitalWrite ( 13 , LOW ); // LOW \u3092\u51fa\u529b } else if ( val == 1 ) { digitalWrite ( 13 , HIGH ); // HIGH \u3092\u51fa\u529b } else if ( val == 2 ) { i = 0 ; } } PC \u5074\u306e\u30b3\u30fc\u30c9 \u00b6 # include <Siv3D.hpp> void Main () { // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const Array < SerialPortInfo > infos = System :: EnumerateSerialPorts (); const Array < String > options = infos . map ([]( const SerialPortInfo & info ) { return U \"{} ({})\" _fmt ( info . port , info . description ); }) << U \"none\" ; Serial serial ; size_t index = ( options . size () - 1 ); while ( System :: Update ()) { const bool isOpened = serial . isOpened (); if ( SimpleGUI :: Button ( U \"Write 0\" , Vec2 ( 200 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (0) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 0 ); } if ( SimpleGUI :: Button ( U \"Write 1\" , Vec2 ( 340 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (1) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 1 ); } if ( SimpleGUI :: Button ( U \"Write 2\" , Vec2 ( 480 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (2) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 2 ); } if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 200 , 60 ))) { ClearPrint (); if ( index == ( options . size () - 1 )) { serial = Serial (); } else { Print << U \"Open {}\" _fmt ( infos [ index ]. port ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 if ( serial . open ( infos [ index ]. port )) { Print << U \"Succeeded\" ; } else { Print << U \"Failed\" ; } } } if ( const size_t available = serial . available ()) { // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a Print << U \"READ: \" << serial . readBytes (); } } } 4. PoissonDisk2D \u00b6 \u307b\u3069\u3088\u3044\u8ddd\u96e2\u3067\u91cd\u306a\u3089\u306a\u3044\u70b9\u7fa4\u3092\u751f\u6210\u3059\u308b PoissonDisk2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); const Rect rect ( 100 , 100 , 600 , 400 ); double r = 15.0 ; // \u70b9\u7fa4\u3092\u751f\u6210 PoissonDisk2D pd ( rect . size , r ); while ( System :: Update ()) { rect . drawFrame ( 1 , 1 , ColorF ( 0.2 )); for ( const auto & point : pd . getPoints ()) { Circle ( point , r / 4 ). movedBy ( rect . pos ). draw (); } if ( SimpleGUI :: Slider ( r , 5.0 , 40.0 , Vec2 ( 10 , 10 ))) { pd = PoissonDisk2D ( rect . size , r ); } } } 5. JSONWriter \u00b6 \u6210\u5f62\u3055\u308c\u305f JSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u9806\u6b21\u51fa\u529b\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u4fdd\u5b58\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { JSONWriter json ; json . startObject (); { json . key ( U \"Window\" ). startObject (); { json . key ( U \"title\" ). write ( U \"My application\" ); json . key ( U \"width\" ). write ( 800 ); json . key ( U \"height\" ). write ( 600 ); json . key ( U \"sizable\" ). write ( false ); } json . endObject (); json . key ( U \"Scene\" ). startObject (); { json . key ( U \"background\" ). write ( ColorF ( 0.8 , 0.9 , 1.0 )); } json . endObject (); json . key ( U \"Array\" ). startObject (); { json . key ( U \"values\" ). writeArray ({ 11 , 22 , 33 , 44 , 55 }); } json . endObject (); json . key ( U \"Items\" ). startArray (); { json . startObject (); { json . key ( U \"label\" ). write ( U \"Forest\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 100 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Ocean\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 300 ); json . key ( U \"y\" ). write ( 200 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Mountain\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 500 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); } json . endArray (); } json . endObject (); // \u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u4fdd\u5b58 json . save ( U \"test.json\" ); while ( System :: Update ()) { } } \u51fa\u529b\u3055\u308c\u308b JSON \u30d5\u30a1\u30a4\u30eb { \"Window\" : { \"title\" : \"My application\" , \"width\" : 800 , \"height\" : 600 , \"sizable\" : \"false\" }, \"Scene\" : { \"background\" : \"(0.8, 0.9, 1, 1)\" }, \"Array\" : { \"values\" : [ 11 , 22 , 33 , 44 , 55 ] }, \"Items\" : [ { \"label\" : \"Forest\" , \"pos\" : { \"x\" : 100 , \"y\" : 100 } }, { \"label\" : \"Ocean\" , \"pos\" : { \"x\" : 300 , \"y\" : 200 } }, { \"label\" : \"Mountain\" , \"pos\" : { \"x\" : 500 , \"y\" : 100 } } ] } 6. Geometry2D::IsClockwise() \u00b6 \u9802\u70b9\u306e\u914d\u5217\u304c\u6642\u8a08\u56de\u308a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.96 , 0.98 , 1.0 )); Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); } if ( MouseR . down ()) { points . clear (); } const bool isClockwise = Geometry2D :: IsClockwise ( points ); ClearPrint (); Print << isClockwise ; for ( const auto & point : points ) { Circle ( point , 10 ). draw ( Palette :: Orange ); } if ( points . size () > 2 ) { // \u6642\u8a08\u56de\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u77e2\u5370\u3067\u3064\u306a\u3050 if ( isClockwise ) { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } else { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . reversed () . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } } } } 7. Circle::draw(innerColor, outerColor) \u00b6 Circle \u3084 Ellipse \u3067\u4e2d\u5fc3\u306e\u8272\u3068\u5916\u5468\u306e\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u304c\u9ec4\u8272\u3001\u5916\u5468\u304c\u9ed2 Circle ( Scene :: Center (), 400 ). draw ( Palette :: Yellow , Palette :: Black ); } } 8. SimpleGUI::Headline / ColorPicker \u00b6 SimpleGUI \u306b\u3001\u898b\u51fa\u3057\u3092\u4ed8\u3051\u308b\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3068\u3001\u8272\u3092\u9078\u629e\u3059\u308b\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { double p0 = 1.0 , p1 = 0.4 , p2 = 0.5 ; HSV hsv = Palette :: Gray ; size_t index = 0 ; while ( System :: Update ()) { Scene :: SetBackground ( hsv ); // Headline SimpleGUI :: Headline ( U \"Config\" , Vec2 ( 20 , 20 )); { SimpleGUI :: Slider ( U \"Param1\" , p0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"Param2\" , p1 , Vec2 ( 20 , 100 )); SimpleGUI :: Slider ( U \"Param3\" , p2 , Vec2 ( 20 , 140 )); } SimpleGUI :: Headline ( U \"Background\" , Vec2 ( 240 , 20 )); { // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc SimpleGUI :: ColorPicker ( hsv , Vec2 ( 240 , 60 )); } SimpleGUI :: Headline ( U \"Terrain\" , Vec2 ( 420 , 20 )); { SimpleGUI :: RadioButtons ( index , { U \"Plain\" , U \"Hill\" , U \"Mountain\" }, Vec2 ( 420 , 60 ), 150 ); } } } 9. ToastNotification \u00b6 Windows \u3067\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 , 0.6 , 0.3 )); // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID NotificationID latest = - 1 ; // \u753b\u50cf\u3092\u4f5c\u6210\u30fb\u4fdd\u5b58 Emoji :: CreateImage ( U \"\ud83c\udf55\" ). save ( U \"pizza.png\" ); while ( System :: Update ()) { ClearPrint (); // \u901a\u77e5\u306e\u72b6\u614b Print << ( int32 ) Platform :: Windows :: ToastNotification :: GetState ( latest ); // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\u306e\u7d50\u679c Print << U \"Action: \" << Platform :: Windows :: ToastNotification :: GetAction ( latest ); if ( SimpleGUI :: Button ( U \"Send a notification\" , Vec2 ( 10 , 70 ))) { ToastNotificationProperty toast { . title = U \"Title\" , // \u901a\u77e5\u306e\u30bf\u30a4\u30c8\u30eb . message = U \"Message\" , // \u901a\u77e5\u306e\u672c\u6587 . imagePath = U \"pizza.png\" , // \u5927\u304d\u3044\u753b\u50cf\u3060\u3068\u4f7f\u308f\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b . actions = { U \"Yes\" , U \"No\" } // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\uff08\u4e0d\u8981\u306a\u5834\u5408\u306f\u8a2d\u5b9a\u3057\u306a\u3044\uff09 }; // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID \u3092\u53d6\u5f97 latest = Platform :: Windows :: ToastNotification :: Show ( toast ); } } } 10. SimpleGUIManager \u00b6 TOML \u30d5\u30a1\u30a4\u30eb\u306b SimpleGUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u8a18\u8ff0\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u884c\u4e2d\u306b\u64cd\u4f5c\u3057\u305f\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // SimpleGUI \u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb const FilePath tomlPath = FileSystem :: FullPath ( U \"example/gui/gui.toml\" ); // \u66f4\u65b0\u3092\u691c\u77e5 const DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // GUI \u3092\u30ed\u30fc\u30c9 SimpleGUIManager gui ( tomlPath ); while ( System :: Update ()) { // TOML \u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 GUI \u3092\u518d\u30ed\u30fc\u30c9 for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) { ClearPrint (); gui . load ( tomlPath ); } } // GUI \u3092\u66f4\u65b0\u30fb\u63cf\u753b gui . draw (); if ( gui . button ( U \"bt-OK\" )) // \"bt-OK\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"OK\" ; } else if ( gui . button ( U \"bt-Cancel\" )) // \"bt-Cancel\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"Cancel\" ; } Scene :: SetBackground ( gui . colorPicker ( U \"cp-Color\" )); // \"cp-Color \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5024 } // \u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3068\u5024\u3092 save.toml \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3059\u308b // \u3053\u308c\u3092 SimpleGUIManager \u3067\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b //gui.save(U\"save.toml\"); } 11. Print \u306e\u6392\u4ed6\u5236\u5fa1 \u00b6 \u30c7\u30d0\u30c3\u30b0\u306a\u3069\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001 Print \u3092\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 // Siv3D \u306e\u4e26\u5217\u51e6\u7406\u95a2\u6570\u3092\u6709\u52b9\u5316\u3059\u308b\u30de\u30af\u30ed // \u30d8\u30c3\u30c0\u304c\u5897\u3048\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u5c11\u3057\u9577\u304f\u306a\u308b # define SIV3D_CONCURRENT # include <Siv3D.hpp> void Main () { // 0\uff5e15 \u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406 Range ( 0 , 15 ). parallel_each ([]( int32 i ) { // \u30b9\u30ec\u30c3\u30c9\u8b58\u5225\u5b50\u3092\u5408\u308f\u305b\u3066\u8868\u793a Print << U \"{}: {}\" _fmt ( std :: this_thread :: get_id (), i ); }); while ( System :: Update ()) { } } 12. 3D \u5f62\u72b6 \u00b6 Quaternion , OBB \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Ray \u3068\u5404\u7a2e 3D \u5f62\u72b6\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3082\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u305f\u3060\u3057 v0.4.1 \u3068\u540c\u69d8\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); Array < OBB > objects ; for ( auto x : Range ( - 2 , 2 )) { for ( auto z : Range ( 2 , - 2 , - 1 )) { objects << OBB ( Vec3 ( x * 4 , 1 , z * 4 ), Vec3 ( 3 , 2 , 0.5 ), Quaternion :: RollPitchYaw ( 0 , x * 30 _deg , 0 )); objects << OBB ( Vec3 ( x * 4 , 5 , z * 4 ), Vec3 ( 2 , 1 , 2 ), Quaternion :: RollPitchYaw ( x * 30 _deg , 0 , 0 )); } } while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } const Vec3 eyePos = camera . getEyePosition (); const Vec3 rayEnd = camera . screenToWorldPoint ( Cursor :: Pos (), 0.5f ); const Ray cursorRay ( eyePos , ( rayEnd - eyePos ). normalized ()); objects . sort_by ([ & ]( const OBB & a , const OBB & b ) { return ( eyePos . distanceFromSq ( a . center )) > ( eyePos . distanceFromSq ( b . center )); }); Optional < size_t > intersectionIndex ; for ( auto [ i , object ] : IndexedReversed ( objects )) { if ( cursorRay . intersects ( object )) { intersectionIndex = i ; Cursor :: RequestStyle ( CursorStyle :: Hand ); break ; } } for ( auto [ i , object ] : Indexed ( objects )) { const HSV color (( object . center . x * 50 + object . center . z * 10 ), 1.0 , ( i == intersectionIndex ) ? 1.0 : 0.3 ); object . draw ( mat , color ); } } } } v0.4.1 \u30b5\u30f3\u30d7\u30eb\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \u00b6 AABB , Triangle3D , Line3D \u306a\u3069\u304c\u3001 s3d :: experimental \u540d\u524d\u7a7a\u9593\u304b\u3089 s3d \u540d\u524d\u7a7a\u9593\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002 3D Triangles \u00b6 # include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } } 3D AABB \u00b6 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } } 3D Terrain \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } } 13. Microphone \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 macOS \u306a\u3069\u4e00\u90e8\u306e\u74b0\u5883\u3067\u30de\u30a4\u30af\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); // unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u65e2\u5b9a\u306e\u97f3\u58f0\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); LineString points ( 800 ); FFTResult fft ; while ( System :: Update ()) { // \u6ce2\u5f62\u3092\u53ef\u8996\u5316 { const size_t pos = mic . posSample (); const Array < WaveSampleS16 >& buffer = mic . getBuffer (); const size_t bufferLength = buffer . size (); for ( size_t i = 0 ; i < points . size (); ++ i ) { const size_t bufferPos = ( pos + bufferLength - ( 800 - i )) % bufferLength ; const double value = buffer [ bufferPos ]. left / 32768.0 ; points [ i ]. set ( i , 300 - value * 300 ); } points . draw ( 2 ); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u53d6\u5f97 mic . fft ( fft ); // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u4e0a\u306b\u5468\u6ce2\u6570\u3092\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } 14. QRDecoder \u4e0d\u5177\u5408\u4fee\u6b63 \u00b6 \u8907\u6570\u306e QR \u30b3\u30fc\u30c9\u306e\u691c\u51fa\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // Web \u30ab\u30e1\u30e9\u3092\u8d77\u52d5 Webcam webcam ( 0 ); webcam . setResolution ( 1280 , 720 ); if ( ! webcam . start ()) { throw Error ( U \"\" ); } Image image ; DynamicTexture texture ; QRDecoder qrDecoder ; Array < std :: pair < Quad , bool >> quads ; while ( System :: Update ()) { // \u65b0\u3057\u3044\u64ae\u5f71\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u5f97 if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); Array < QRContent > qrs ; // QR \u30b3\u30fc\u30c9\u3092\u691c\u51fa qrDecoder . decode ( image , qrs ); quads . clear (); for ( const auto & qr : qrs ) { quads . emplace_back ( qr . quad , qr . isValid ()); // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a if ( qr . isValid ()) { Print << qr . text ; } } texture . fill ( image ); } texture . draw (); // QR \u30b3\u30fc\u30c9\u306e\u9818\u57df\u3092\u8868\u793a // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u8d64\u8272 for ( const auto & quad : quads ) { quad . first . drawFrame ( 6 , quad . second ? Palette :: Red : Palette :: Gray ); } } } 15. RenderTexture, MSRenderTexture \u6539\u5584 \u00b6 RenderTexture \u3084 MSRenderTexture \u306e .clear () , .read () , .resolve () \u304c const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u4fee\u6b63\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \uff08\u30b5\u30f3\u30d7\u30eb\u7701\u7565\uff09","title":"What's new in v0.4.2"},{"location":"news/v042/#1-sdffont","text":"SDFFont \u306f\u3001\u30b0\u30ea\u30d5\u306e\u753b\u50cf\u3092 Distance field \u5f62\u5f0f\u3067\u6301\u3064 Font \u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u308c\u307e\u3067\u306e Font \u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u305f\u56fa\u5b9a\u30b5\u30a4\u30ba\u3067\u30b0\u30ea\u30d5\u3054\u3068\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u753b\u50cf\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u62e1\u5927\u63cf\u753b\u6642\u306b\u307c\u3084\u3051\u308b\u306a\u3069\u3001\u30b5\u30a4\u30ba\u306e\u5909\u66f4\u306b\u5f31\u304f\u3001\u7e01\u53d6\u308a\u306e\u3088\u3046\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u56f0\u96e3\u3067\u3057\u305f\u3002 SDFFont \u30af\u30e9\u30b9\u306f\u3001\u30b0\u30ea\u30d5\u3054\u3068\u306e Distance Field \u3092\u751f\u6210\u3057\u3001\u62e1\u5927\u3057\u3066\u3082\u307c\u3084\u3051\u306a\u3044\u624b\u6cd5\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002 draw () \u3054\u3068\u306b\u7b2c\u4e00\u5f15\u6570\u3067\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3067\u304d\u3001\u5927\u304d\u306a\u5024\u3092\u5165\u308c\u3066\u3082\u7d50\u679c\u304c\u307c\u3084\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001 Garphics2D :: SetSDFParameters () \u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u6642\u306b\u6587\u5b57\u3092\u592a\u3089\u305b\u3089\u308c\u307e\u3059\u3002\u592a\u3055\u3068\u8272\u3092\u5909\u3048\u3066 2 \u56de\u4ee5\u4e0a\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u7e01\u53d6\u308a\u306e\u8868\u73fe\u3082\u53ef\u80fd\u3067\u3059\u3002 \u305f\u3060\u3057\u3001 SDFFont \u306e\u751f\u6210\u3084\u63cf\u753b\u306e\u30b3\u30b9\u30c8\u306f Font \u306b\u6bd4\u3079\u3066\u5927\u304d\u3044\u305f\u3081\u3001 Font \u3067\u5341\u5206\u306a\u30b1\u30fc\u30b9\u3067\u306f\u5f93\u6765\u901a\u308a Font \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002 SDFFont \u306e\u54c1\u8cea\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30d5\u306e Distance Field \u306e\u30b5\u30a4\u30ba\u3068\u3001\u63cf\u753b\u3059\u308b\u5b57\u5f62\u306e\u8907\u96d1\u3055\u306b\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002\u753b\u6570\u306e\u5c11\u306a\u3044\u6570\u5b57\u3084\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u66f2\u7dda\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u5b57\u5f62\u3067\u3042\u308c\u3070\u300140 \u30d4\u30af\u30bb\u30eb\u4ee5\u4e0b\u306e Distance Field \u3067\u3082\u304d\u308c\u3044\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u304c\u3001\u8907\u96d1\u306a\u5b57\u5f62\u306b\u306a\u308b\u307b\u3069\u3001\u5c0f\u3055\u306a Distance Field \u3067\u306f\u63cf\u753b\u7d50\u679c\u304c\u4e71\u308c\u305f\u308a\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u6587\u5b57\u306e\u592a\u3089\u305b\u306b\u3064\u3044\u3066\u3082\u3001\u5927\u304d\u3044\u5024\u3067\u306f\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 SDFFont \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u9069\u5207\u306a Distance Field \u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002","title":"1. SDFFont"},{"location":"news/v042/#sdffont","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; // SDFFont const SDFFont sdfFont ( distanceFieldSize , Typeface :: Bold ); const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 40 , Vec2 ( 20 , 20 )); sdfFont ( text ). draw ( 80 , Vec2 ( 20 , 80 )); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 180 )); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.2 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.2 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 ), Palette :: Black ); // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3001\u592a\u3089\u305b\u3092 0.0 \u306b Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), 0.0 ); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 320 )); } }","title":"SDFFont \u306e\u57fa\u672c"},{"location":"news/v042/#sdffont_1","text":"SDFFont \u306e\u5404\u30b0\u30ea\u30d5\u306e Distance field \u306f\u3001\u751f\u6210\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u30b0\u30ea\u30d5\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u901f\u5ea6\u4f4e\u4e0b\u304c\u9632\u3052\u307e\u3059\u3002 SDFFont :: preload ( s ) \u3067\u3001\u6587\u5b57\u5217 s \u542b\u307e\u308c\u308b\u30b0\u30ea\u30d5\u306e Distance field \u3092\u751f\u6210\u3001 SDFFont :: preload ( imagePath , jsonPath ) \u3067 2 \u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3001 SDFFont \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u4e8b\u524d\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u30b0\u30ea\u30d5\u306f\u5b9f\u884c\u6642\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); // \u30b0\u30ea\u30d5\u3054\u3068\u306e Distance field \u306e\u30b5\u30a4\u30ba const int32 distanceFieldSize = 60 ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( distanceFieldSize , Typeface :: Bold ) . preload ( s ) . saveGlyphs ( U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 // \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e\u3084 Distance field \u304c\u4e00\u81f4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044 const SDFFont sdfFont ({ U \"sdf-font/bold_60.png\" , U \"sdf-font/bold_60.json\" }, distanceFieldSize , Typeface :: Bold ); if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } const String text = U \"OpenSiv3D\" ; while ( System :: Update ()) { // SDF \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( 120 , Vec2 ( 20 , 20 )); } }","title":"SDFFont \u306e\u4e8b\u524d\u751f\u6210"},{"location":"news/v042/#_1","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.5 , 0.6 )); constexpr Vec2 pos ( 0 , 0 ); const String text = U \"OpenSiv3D \\n \u3042\u3044\u3046\u3048\u304a\" ; ////////////////////////////////////////// // // SDFFont Distance field \u306e\u4e8b\u524d\u751f\u6210 // // \u203b \u4fdd\u5b58\u3067\u304d\u305f\u3089\u4e0d\u8981\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8 { String s ; for ( auto i : Range ( 32 , 126 )) { s << char32 ( i ); } s += text ; // SDF \u306e\u4f5c\u6210\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001 // ASCII \u6587\u5b57\u3068 text \u3092\u3042\u3089\u304b\u3058\u3081 SDF \u5316\u3057\u3066\u3001\u30d5\u30a9\u30f3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f SDFFont ( 60 , Typeface :: Light ). preload ( s ). saveGlyphs ( U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" ); SDFFont ( 60 , Typeface :: Heavy ). preload ( s ). saveGlyphs ( U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" ); SDFFont ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ). preload ( s ). saveGlyphs ( U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" ); } // ////////////////////////////////////////// // SDFFont \u3092\u4f5c\u6210\u3057\u3001\u4e8b\u524d\u751f\u6210\u3057\u305f Distance field \u3092\u30ed\u30fc\u30c9 const Array < SDFFont > sdfFonts = { SDFFont ({ U \"sdf-font/light_60.png\" , U \"sdf-font/light_60.json\" }, 60 , Typeface :: Light ), SDFFont ({ U \"sdf-font/heavy_60.png\" , U \"sdf-font/heavy_60.json\" }, 60 , Typeface :: Heavy ), SDFFont ({ U \"sdf-font/logo_50.png\" , U \"sdf-font/logo_50.json\" }, 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; for ( const auto & sdfFont : sdfFonts ) { if ( ! sdfFont ) // \u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load SDFFont\" ); } } // \u6bd4\u8f03\u7528\u306e\u901a\u5e38 Font const Array < Font > fonts = { Font ( 60 , Typeface :: Light ), Font ( 60 , Typeface :: Heavy ), Font ( 50 , U \"example/font/LogoTypeGothic/LogoTypeGothic.otf\" ), }; size_t fontIndex = 0 , method = 0 ; double fontSize = 80 , outline1 = 0.0 , outline2 = 0.0 ; HSV innerColor = Palette :: Black , outlineColor = Palette :: White ; while ( System :: Update ()) { const auto & sdfFont = sdfFonts [ fontIndex ]; const auto & font = fonts [ fontIndex ]; if ( method == 0 ) { Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline2 ); sdfFont ( text ). draw ( fontSize , pos , innerColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange (), outline1 ); sdfFont ( text ). draw ( fontSize , pos , outlineColor ); Graphics2D :: SetSDFParameters ( sdfFont . pixelRange ()); sdfFont ( text ). draw ( fontSize , pos , innerColor ); } else if ( method == 1 ) { Transformer2D tr ( Mat3x2 :: Scale ( fontSize / font . fontSize ())); font ( text ). draw ( pos , innerColor ); } SimpleGUI :: RadioButtons ( fontIndex , { U \"Light 60\" , U \"Heavy 60\" , U \"Logo 50\" }, Vec2 ( 20 , 360 ), 150 ); SimpleGUI :: RadioButtons ( method , { U \"SDFFont\" , U \"Font\" }, Vec2 ( 20 , 480 ), 150 ); SimpleGUI :: Slider ( U \"size: {:.0f}\" _fmt ( fontSize ), fontSize , 15 , 550 , Vec2 ( 20 , 560 ), 150 , 200 ); SimpleGUI :: Slider ( U \"outline1: {:.2f}\" _fmt ( outline1 ), outline1 , 0.0 , 0.49 , Vec2 ( 20 , 600 ), 150 , 200 , ( method == 0 )); SimpleGUI :: Slider ( U \"outline2: {:.2f}\" _fmt ( outline2 ), outline2 , 0.0 , 0.49 , Vec2 ( 20 , 640 ), 150 , 200 , ( method == 0 )); SimpleGUI :: ColorPicker ( innerColor , Vec2 ( 400 , 560 )); SimpleGUI :: ColorPicker ( outlineColor , Vec2 ( 580 , 560 )); } }","title":"\u6bd4\u8f03\u7528\u30b5\u30f3\u30d7\u30eb"},{"location":"news/v042/#2","text":"\u5b9f\u9a13\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4 HamFramework \u306b\u8ffd\u52a0\u3055\u308c\u305f SaturatedLinework \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u3001\u30b3\u30df\u30ab\u30eb\u306a\u52b9\u679c\u3084\u75be\u8d70\u611f\u3092\u6f14\u51fa\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7dda\u3092\u7c21\u5358\u306b\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62\u3001\u5916\u5468\u306e\u9577\u65b9\u5f62\u3001\u7dda\u306e\u672c\u6570\u3001\u7dda\u306e\u592a\u3055\u3001\u9577\u3055\u306e\u3070\u3089\u3064\u304d\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u306a\u3069\u304c\u3042\u308a\u3001 .draw () \u306e\u5f15\u6570\u3067\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u591a\u6570\u306e\u4e09\u89d2\u5f62\u3092\u751f\u6210\u3057\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u3001\u751f\u6210\u3057\u305f\u4e09\u89d2\u5f62\u306f\u518d\u5229\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> # include <HamFramework.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.98 , 0.96 , 0.94 )); // \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u56f3\u5f62 Ellipse target ( 400 , 300 , 180 , 120 ); // \u5916\u5468\u306e\u9577\u65b9\u5f62 Rect outer = Scene :: Rect (); // \u7dda\u306e\u592a\u3055 double minThickness = 3.0 , maxThickness = 10.0 ; // \u7dda\u306e\u672c\u6570 double lineCount = 150 ; // \u7dda\u306e\u9577\u3055\u306e\u3070\u3089\u3064\u304d double offsetRange = 60.0 ; // \u4e71\u6570\u30b7\u30fc\u30c9 uint64 seed = 12345 ; SaturatedLinework < Ellipse > linework ( target , outer ); linework . setThickness ( minThickness , maxThickness ) . setLineCount ( static_cast < size_t > ( lineCount )) . setOffsetRange ( offsetRange ); const Texture texture ( Emoji ( U \"\ud83e\udd80\" )); while ( System :: Update ()) { if ( MouseR . down ()) { target . setCenter ( Cursor :: Pos ()); linework . setTargetShape ( target ); } texture . scaled ( 1.6 ). drawAt ( target . center ); // \u96c6\u4e2d\u7dda\u3092\u63cf\u753b linework . draw ( ColorF ( 0.1 )); if ( SimpleGUI :: Slider ( U \"lineCount\" , lineCount , 0.0 , 400.0 , Vec2 ( 20 , 20 ), 150 )) { linework . setLineCount ( static_cast < size_t > ( lineCount )); } if ( SimpleGUI :: Slider ( U \"offsetRange\" , offsetRange , 0.0 , 100.0 , Vec2 ( 20 , 60 ), 150 )) { linework . setOffsetRange ( offsetRange ); } if ( SimpleGUI :: Button ( U \"Change seed\" , Vec2 ( 20 , 100 ))) { seed = RandomUint64 (); linework . setSeed ( seed ); } } }","title":"2. \u96c6\u4e2d\u7dda\u63cf\u753b"},{"location":"news/v042/#3","text":"\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u4f7f\u3063\u3066\u3001\u5916\u90e8\u30c7\u30d0\u30a4\u30b9\u3068\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3067\u306f Arduino UNO \u3067 LED \u306e\u70b9\u706f/\u6d88\u706f\u3092 PC \u304b\u3089\u5236\u5fa1\u3057\u3001\u5408\u308f\u305b\u3066 1 \u30d0\u30a4\u30c8\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\u3002","title":"3. \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1"},{"location":"news/v042/#arduino","text":"void setup () { pinMode ( 13 , OUTPUT ); // 13 \u30d4\u30f3 - LED - \u62b5\u6297 - GND // 9600bps \u3067\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u958b\u304f Serial . begin ( 9600 ); } unsigned char i = 0 ; // \u30c6\u30b9\u30c8\u7528\u306b PC \u5074\u306b\u9001\u308b\u5024 void loop () { // 250 \u30df\u30ea\u79d2\u6b62\u3081\u308b delay ( 250 ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b 1 \u30d0\u30a4\u30c8\u51fa\u529b Serial . write ( i ); ++ i ; // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const int val = Serial . read (); if ( val == - 1 ) // \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u304c\u7121\u3044 { return ; } if ( val == 0 ) { digitalWrite ( 13 , LOW ); // LOW \u3092\u51fa\u529b } else if ( val == 1 ) { digitalWrite ( 13 , HIGH ); // HIGH \u3092\u51fa\u529b } else if ( val == 2 ) { i = 0 ; } }","title":"Arduino \u306e\u30b3\u30fc\u30c9"},{"location":"news/v042/#pc","text":"# include <Siv3D.hpp> void Main () { // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97 const Array < SerialPortInfo > infos = System :: EnumerateSerialPorts (); const Array < String > options = infos . map ([]( const SerialPortInfo & info ) { return U \"{} ({})\" _fmt ( info . port , info . description ); }) << U \"none\" ; Serial serial ; size_t index = ( options . size () - 1 ); while ( System :: Update ()) { const bool isOpened = serial . isOpened (); if ( SimpleGUI :: Button ( U \"Write 0\" , Vec2 ( 200 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (0) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 0 ); } if ( SimpleGUI :: Button ( U \"Write 1\" , Vec2 ( 340 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (1) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 1 ); } if ( SimpleGUI :: Button ( U \"Write 2\" , Vec2 ( 480 , 20 ), 120 , isOpened )) { // 1 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf (2) \u3092\u66f8\u304d\u8fbc\u3080 serial . writeByte ( 2 ); } if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 200 , 60 ))) { ClearPrint (); if ( index == ( options . size () - 1 )) { serial = Serial (); } else { Print << U \"Open {}\" _fmt ( infos [ index ]. port ); // \u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 if ( serial . open ( infos [ index ]. port )) { Print << U \"Succeeded\" ; } else { Print << U \"Failed\" ; } } } if ( const size_t available = serial . available ()) { // \u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a Print << U \"READ: \" << serial . readBytes (); } } }","title":"PC \u5074\u306e\u30b3\u30fc\u30c9"},{"location":"news/v042/#4-poissondisk2d","text":"\u307b\u3069\u3088\u3044\u8ddd\u96e2\u3067\u91cd\u306a\u3089\u306a\u3044\u70b9\u7fa4\u3092\u751f\u6210\u3059\u308b PoissonDisk2D \u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); const Rect rect ( 100 , 100 , 600 , 400 ); double r = 15.0 ; // \u70b9\u7fa4\u3092\u751f\u6210 PoissonDisk2D pd ( rect . size , r ); while ( System :: Update ()) { rect . drawFrame ( 1 , 1 , ColorF ( 0.2 )); for ( const auto & point : pd . getPoints ()) { Circle ( point , r / 4 ). movedBy ( rect . pos ). draw (); } if ( SimpleGUI :: Slider ( r , 5.0 , 40.0 , Vec2 ( 10 , 10 ))) { pd = PoissonDisk2D ( rect . size , r ); } } }","title":"4. PoissonDisk2D"},{"location":"news/v042/#5-jsonwriter","text":"\u6210\u5f62\u3055\u308c\u305f JSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u9806\u6b21\u51fa\u529b\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u4fdd\u5b58\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { JSONWriter json ; json . startObject (); { json . key ( U \"Window\" ). startObject (); { json . key ( U \"title\" ). write ( U \"My application\" ); json . key ( U \"width\" ). write ( 800 ); json . key ( U \"height\" ). write ( 600 ); json . key ( U \"sizable\" ). write ( false ); } json . endObject (); json . key ( U \"Scene\" ). startObject (); { json . key ( U \"background\" ). write ( ColorF ( 0.8 , 0.9 , 1.0 )); } json . endObject (); json . key ( U \"Array\" ). startObject (); { json . key ( U \"values\" ). writeArray ({ 11 , 22 , 33 , 44 , 55 }); } json . endObject (); json . key ( U \"Items\" ). startArray (); { json . startObject (); { json . key ( U \"label\" ). write ( U \"Forest\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 100 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Ocean\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 300 ); json . key ( U \"y\" ). write ( 200 ); } json . endObject (); } json . endObject (); json . startObject (); { json . key ( U \"label\" ). write ( U \"Mountain\" ); json . key ( U \"pos\" ). startObject (); { json . key ( U \"x\" ). write ( 500 ); json . key ( U \"y\" ). write ( 100 ); } json . endObject (); } json . endObject (); } json . endArray (); } json . endObject (); // \u3053\u3053\u307e\u3067\u306e\u5185\u5bb9\u3092\u4fdd\u5b58 json . save ( U \"test.json\" ); while ( System :: Update ()) { } } \u51fa\u529b\u3055\u308c\u308b JSON \u30d5\u30a1\u30a4\u30eb { \"Window\" : { \"title\" : \"My application\" , \"width\" : 800 , \"height\" : 600 , \"sizable\" : \"false\" }, \"Scene\" : { \"background\" : \"(0.8, 0.9, 1, 1)\" }, \"Array\" : { \"values\" : [ 11 , 22 , 33 , 44 , 55 ] }, \"Items\" : [ { \"label\" : \"Forest\" , \"pos\" : { \"x\" : 100 , \"y\" : 100 } }, { \"label\" : \"Ocean\" , \"pos\" : { \"x\" : 300 , \"y\" : 200 } }, { \"label\" : \"Mountain\" , \"pos\" : { \"x\" : 500 , \"y\" : 100 } } ] }","title":"5. JSONWriter"},{"location":"news/v042/#6-geometry2disclockwise","text":"\u9802\u70b9\u306e\u914d\u5217\u304c\u6642\u8a08\u56de\u308a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.96 , 0.98 , 1.0 )); Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { points << Cursor :: Pos (); } if ( MouseR . down ()) { points . clear (); } const bool isClockwise = Geometry2D :: IsClockwise ( points ); ClearPrint (); Print << isClockwise ; for ( const auto & point : points ) { Circle ( point , 10 ). draw ( Palette :: Orange ); } if ( points . size () > 2 ) { // \u6642\u8a08\u56de\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u77e2\u5370\u3067\u3064\u306a\u3050 if ( isClockwise ) { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } else { for ( size_t i = 0 ; i < points . size (); ++ i ) { Line ( points [ i ], points [( i + 1 ) % points . size ()]) . reversed () . stretched ( - 10 ) . drawArrow ( 3 , Vec2 :: All ( 20 ), ColorF ( 0.25 )); } } } } }","title":"6. Geometry2D::IsClockwise()"},{"location":"news/v042/#7-circledrawinnercolor-outercolor","text":"Circle \u3084 Ellipse \u3067\u4e2d\u5fc3\u306e\u8272\u3068\u5916\u5468\u306e\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u304c\u9ec4\u8272\u3001\u5916\u5468\u304c\u9ed2 Circle ( Scene :: Center (), 400 ). draw ( Palette :: Yellow , Palette :: Black ); } }","title":"7. Circle::draw(innerColor, outerColor)"},{"location":"news/v042/#8-simpleguiheadline-colorpicker","text":"SimpleGUI \u306b\u3001\u898b\u51fa\u3057\u3092\u4ed8\u3051\u308b\u30d8\u30c3\u30c9\u30e9\u30a4\u30f3\u3068\u3001\u8272\u3092\u9078\u629e\u3059\u308b\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { double p0 = 1.0 , p1 = 0.4 , p2 = 0.5 ; HSV hsv = Palette :: Gray ; size_t index = 0 ; while ( System :: Update ()) { Scene :: SetBackground ( hsv ); // Headline SimpleGUI :: Headline ( U \"Config\" , Vec2 ( 20 , 20 )); { SimpleGUI :: Slider ( U \"Param1\" , p0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"Param2\" , p1 , Vec2 ( 20 , 100 )); SimpleGUI :: Slider ( U \"Param3\" , p2 , Vec2 ( 20 , 140 )); } SimpleGUI :: Headline ( U \"Background\" , Vec2 ( 240 , 20 )); { // \u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc SimpleGUI :: ColorPicker ( hsv , Vec2 ( 240 , 60 )); } SimpleGUI :: Headline ( U \"Terrain\" , Vec2 ( 420 , 20 )); { SimpleGUI :: RadioButtons ( index , { U \"Plain\" , U \"Hill\" , U \"Mountain\" }, Vec2 ( 420 , 60 ), 150 ); } } }","title":"8. SimpleGUI::Headline / ColorPicker"},{"location":"news/v042/#9-toastnotification","text":"Windows \u3067\u30c8\u30fc\u30b9\u30c8\u901a\u77e5\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 , 0.6 , 0.3 )); // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID NotificationID latest = - 1 ; // \u753b\u50cf\u3092\u4f5c\u6210\u30fb\u4fdd\u5b58 Emoji :: CreateImage ( U \"\ud83c\udf55\" ). save ( U \"pizza.png\" ); while ( System :: Update ()) { ClearPrint (); // \u901a\u77e5\u306e\u72b6\u614b Print << ( int32 ) Platform :: Windows :: ToastNotification :: GetState ( latest ); // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\u306e\u7d50\u679c Print << U \"Action: \" << Platform :: Windows :: ToastNotification :: GetAction ( latest ); if ( SimpleGUI :: Button ( U \"Send a notification\" , Vec2 ( 10 , 70 ))) { ToastNotificationProperty toast { . title = U \"Title\" , // \u901a\u77e5\u306e\u30bf\u30a4\u30c8\u30eb . message = U \"Message\" , // \u901a\u77e5\u306e\u672c\u6587 . imagePath = U \"pizza.png\" , // \u5927\u304d\u3044\u753b\u50cf\u3060\u3068\u4f7f\u308f\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b . actions = { U \"Yes\" , U \"No\" } // \u30a2\u30af\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3\uff08\u4e0d\u8981\u306a\u5834\u5408\u306f\u8a2d\u5b9a\u3057\u306a\u3044\uff09 }; // \u901a\u77e5\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u308b ID \u3092\u53d6\u5f97 latest = Platform :: Windows :: ToastNotification :: Show ( toast ); } } }","title":"9. ToastNotification"},{"location":"news/v042/#10-simpleguimanager","text":"TOML \u30d5\u30a1\u30a4\u30eb\u306b SimpleGUI \u306e\u5404\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u8a18\u8ff0\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u884c\u4e2d\u306b\u64cd\u4f5c\u3057\u305f\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // SimpleGUI \u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb const FilePath tomlPath = FileSystem :: FullPath ( U \"example/gui/gui.toml\" ); // \u66f4\u65b0\u3092\u691c\u77e5 const DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // GUI \u3092\u30ed\u30fc\u30c9 SimpleGUIManager gui ( tomlPath ); while ( System :: Update ()) { // TOML \u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 GUI \u3092\u518d\u30ed\u30fc\u30c9 for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) { ClearPrint (); gui . load ( tomlPath ); } } // GUI \u3092\u66f4\u65b0\u30fb\u63cf\u753b gui . draw (); if ( gui . button ( U \"bt-OK\" )) // \"bt-OK\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"OK\" ; } else if ( gui . button ( U \"bt-Cancel\" )) // \"bt-Cancel\" \u3068\u3044\u3046\u540d\u524d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f { Print << U \"Cancel\" ; } Scene :: SetBackground ( gui . colorPicker ( U \"cp-Color\" )); // \"cp-Color \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30fc\u30d4\u30c3\u30ab\u30fc\u306e\u5024 } // \u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u60c5\u5831\u3068\u5024\u3092 save.toml \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3059\u308b // \u3053\u308c\u3092 SimpleGUIManager \u3067\u8aad\u307f\u8fbc\u307e\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u308b //gui.save(U\"save.toml\"); }","title":"10. SimpleGUIManager"},{"location":"news/v042/#11-print","text":"\u30c7\u30d0\u30c3\u30b0\u306a\u3069\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001 Print \u3092\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 // Siv3D \u306e\u4e26\u5217\u51e6\u7406\u95a2\u6570\u3092\u6709\u52b9\u5316\u3059\u308b\u30de\u30af\u30ed // \u30d8\u30c3\u30c0\u304c\u5897\u3048\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u5c11\u3057\u9577\u304f\u306a\u308b # define SIV3D_CONCURRENT # include <Siv3D.hpp> void Main () { // 0\uff5e15 \u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406 Range ( 0 , 15 ). parallel_each ([]( int32 i ) { // \u30b9\u30ec\u30c3\u30c9\u8b58\u5225\u5b50\u3092\u5408\u308f\u305b\u3066\u8868\u793a Print << U \"{}: {}\" _fmt ( std :: this_thread :: get_id (), i ); }); while ( System :: Update ()) { } }","title":"11. Print \u306e\u6392\u4ed6\u5236\u5fa1"},{"location":"news/v042/#12-3d","text":"Quaternion , OBB \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 Ray \u3068\u5404\u7a2e 3D \u5f62\u72b6\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3082\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u305f\u3060\u3057 v0.4.1 \u3068\u540c\u69d8\u30012D \u63cf\u753b\u3067 3D \u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u7c21\u6613\u7684\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u304c\u7121\u3044\u306e\u3067\u524d\u5f8c\u5224\u5b9a\u304c\u3067\u304d\u306a\u3044 \u9060\u8fd1\u30af\u30ea\u30c3\u30d7\u304c\u7121\u3044\u306e\u3067\u30ab\u30e1\u30e9\u306b\u8fd1\u3059\u304e\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u306a\u3044 # include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); Array < OBB > objects ; for ( auto x : Range ( - 2 , 2 )) { for ( auto z : Range ( 2 , - 2 , - 1 )) { objects << OBB ( Vec3 ( x * 4 , 1 , z * 4 ), Vec3 ( 3 , 2 , 0.5 ), Quaternion :: RollPitchYaw ( 0 , x * 30 _deg , 0 )); objects << OBB ( Vec3 ( x * 4 , 5 , z * 4 ), Vec3 ( 2 , 1 , 2 ), Quaternion :: RollPitchYaw ( x * 30 _deg , 0 , 0 )); } } while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } const Vec3 eyePos = camera . getEyePosition (); const Vec3 rayEnd = camera . screenToWorldPoint ( Cursor :: Pos (), 0.5f ); const Ray cursorRay ( eyePos , ( rayEnd - eyePos ). normalized ()); objects . sort_by ([ & ]( const OBB & a , const OBB & b ) { return ( eyePos . distanceFromSq ( a . center )) > ( eyePos . distanceFromSq ( b . center )); }); Optional < size_t > intersectionIndex ; for ( auto [ i , object ] : IndexedReversed ( objects )) { if ( cursorRay . intersects ( object )) { intersectionIndex = i ; Cursor :: RequestStyle ( CursorStyle :: Hand ); break ; } } for ( auto [ i , object ] : Indexed ( objects )) { const HSV color (( object . center . x * 50 + object . center . z * 10 ), 1.0 , ( i == intersectionIndex ) ? 1.0 : 0.3 ); object . draw ( mat , color ); } } } }","title":"12. 3D \u5f62\u72b6"},{"location":"news/v042/#v041","text":"AABB , Triangle3D , Line3D \u306a\u3069\u304c\u3001 s3d :: experimental \u540d\u524d\u7a7a\u9593\u304b\u3089 s3d \u540d\u524d\u7a7a\u9593\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002","title":"v0.4.1 \u30b5\u30f3\u30d7\u30eb\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8"},{"location":"news/v042/#3d-triangles","text":"# include <Siv3D.hpp> void Main () { constexpr std :: array < Vec3 , 8 > vertices = { Vec3 ( - 1 , 1 , - 1 ), Vec3 ( 1 , 1 , - 1 ), Vec3 ( - 1 , - 1 , - 1 ), Vec3 ( 1 , - 1 , - 1 ), Vec3 ( 1 , 1 , 1 ), Vec3 ( - 1 , 1 , 1 ), Vec3 ( 1 , - 1 , 1 ), Vec3 ( - 1 , - 1 , 1 ), }; constexpr std :: array < uint32 , 36 > indices = { 0 , 1 , 2 , 2 , 1 , 3 , 5 , 4 , 0 , 0 , 4 , 1 , 1 , 4 , 3 , 3 , 4 , 6 , 5 , 0 , 7 , 7 , 0 , 2 , 4 , 5 , 6 , 6 , 5 , 7 , 2 , 3 , 7 , 7 , 3 , 6 , }; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 4 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 8 , Scene :: Time () * 30 _deg , Math :: Sin ( Scene :: Time ()) * 4 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : step ( 12 )) { const Vec3 p0 ( vertices [ indices [ i * 3 + 0 ]]); const Vec3 p1 ( vertices [ indices [ i * 3 + 1 ]]); const Vec3 p2 ( vertices [ indices [ i * 3 + 2 ]]); Triangle3D ( p0 , p1 , p2 ). draw ( mat , HSV ( i * 30 )); } } } }","title":"3D Triangles"},{"location":"news/v042/#3d-aabb","text":"# include <Siv3D.hpp> void Main () { constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 0 , 0 , 0 ); Vec3 eyePosition ( 0 , 10 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( 20 , Scene :: Time () * 30 _deg , 8 + Periodic :: Sine0_1 ( 4 s ) * 8 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto i : Range ( - 10 , 10 )) { Line3D ( Vec3 ( - 10 , 0 , i ), Vec3 ( 10 , 0 , i )). draw ( mat , ColorF ( 0.5 )); Line3D ( Vec3 ( i , 0 , - 10 ), Vec3 ( i , 0 , 10 )). draw ( mat , ColorF ( 0.5 )); } AABB ( Vec3 ( 0 , 1 , 0 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , Palette :: White ); AABB ( Vec3 ( - 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 0 )); AABB ( Vec3 ( 8 , 1 , 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 90 )); AABB ( Vec3 ( 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 270 )); AABB ( Vec3 ( - 8 , 1 , - 8 ), Vec3 ( 2 , 2 , 2 )). draw ( mat , HSV ( 180 )); } } }","title":"3D AABB"},{"location":"news/v042/#3d-terrain","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.05 , 0.3 , 0.7 )); RenderTexture rt ( 100 , 100 , ColorF ( 0.0 ), TextureFormat :: R32_Float ); Grid < float > heightMap ; Grid < Float3 > positions ; constexpr double fov = 45 _deg ; constexpr Vec3 focusPosition ( 50 , 0 , - 50 ); Vec3 eyePosition ( 0 , 100 , 0 ); experimental :: BasicCamera3D camera ( Scene :: Size (), fov , eyePosition , focusPosition ); while ( System :: Update ()) { eyePosition = Cylindrical ( Arg :: r = 80 , Arg :: phi = Scene :: Time () * 30 _deg , Arg :: y = 50 ) + Vec3 ( 50 , 0 , - 50 ); camera . setView ( eyePosition , focusPosition ); const Mat4x4 mat = camera . getMat4x4 (); rt . read ( heightMap ); { positions . resize ( heightMap . size ()); for ( auto p : step ( heightMap . size ())) { positions [ p ] = Float3 ( p . x , heightMap [ p ], - p . y ); } } { ScopedRenderTarget2D target ( rt ); ScopedRenderStates2D blend ( BlendState :: Additive ); if ( MouseL . pressed ()) { Circle ( Cursor :: Pos (), 8 ). draw ( ColorF ( Scene :: DeltaTime () * 24.0 )); } } if ( positions ) { ScopedRenderStates2D culling ( RasterizerState :: SolidCullBack ); for ( auto x : step ( positions . width () - 1 )) { for ( auto y : step ( positions . height ())) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x + 1 , y }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } for ( auto x : step ( positions . width ())) { for ( auto y : step ( positions . height () - 1 )) { const Float3 begin = positions [{ x , y }]; const Float3 end = positions [{ x , y + 1 }]; const ColorF color = HSV ( 120 - ( begin . y + end . y ) * 3 , 0.75 , 0.7 ); Line3D ( begin , end ). draw ( mat , color ); } } } rt . draw ( ColorF ( 0.1 )); } }","title":"3D Terrain"},{"location":"news/v042/#13-microphone","text":"macOS \u306a\u3069\u4e00\u90e8\u306e\u74b0\u5883\u3067\u30de\u30a4\u30af\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); // unspecified \u3092\u6307\u5b9a\u3059\u308b\u3068\u65e2\u5b9a\u306e\u97f3\u58f0\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); LineString points ( 800 ); FFTResult fft ; while ( System :: Update ()) { // \u6ce2\u5f62\u3092\u53ef\u8996\u5316 { const size_t pos = mic . posSample (); const Array < WaveSampleS16 >& buffer = mic . getBuffer (); const size_t bufferLength = buffer . size (); for ( size_t i = 0 ; i < points . size (); ++ i ) { const size_t bufferPos = ( pos + bufferLength - ( 800 - i )) % bufferLength ; const double value = buffer [ bufferPos ]. left / 32768.0 ; points [ i ]. set ( i , 300 - value * 300 ); } points . draw ( 2 ); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u3092\u53d6\u5f97 mic . fft ( fft ); // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u30b9\u30da\u30af\u30c8\u30e9\u30e0\u4e0a\u306b\u5468\u6ce2\u6570\u3092\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"13. Microphone \u4e0d\u5177\u5408\u4fee\u6b63"},{"location":"news/v042/#14-qrdecoder","text":"\u8907\u6570\u306e QR \u30b3\u30fc\u30c9\u306e\u691c\u51fa\u306e\u4e0d\u5177\u5408\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); // Web \u30ab\u30e1\u30e9\u3092\u8d77\u52d5 Webcam webcam ( 0 ); webcam . setResolution ( 1280 , 720 ); if ( ! webcam . start ()) { throw Error ( U \"\" ); } Image image ; DynamicTexture texture ; QRDecoder qrDecoder ; Array < std :: pair < Quad , bool >> quads ; while ( System :: Update ()) { // \u65b0\u3057\u3044\u64ae\u5f71\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u5f97 if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); Array < QRContent > qrs ; // QR \u30b3\u30fc\u30c9\u3092\u691c\u51fa qrDecoder . decode ( image , qrs ); quads . clear (); for ( const auto & qr : qrs ) { quads . emplace_back ( qr . quad , qr . isValid ()); // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a if ( qr . isValid ()) { Print << qr . text ; } } texture . fill ( image ); } texture . draw (); // QR \u30b3\u30fc\u30c9\u306e\u9818\u57df\u3092\u8868\u793a // \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u8d64\u8272 for ( const auto & quad : quads ) { quad . first . drawFrame ( 6 , quad . second ? Palette :: Red : Palette :: Gray ); } } }","title":"14. QRDecoder \u4e0d\u5177\u5408\u4fee\u6b63"},{"location":"news/v042/#15-rendertexture-msrendertexture","text":"RenderTexture \u3084 MSRenderTexture \u306e .clear () , .read () , .resolve () \u304c const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u4fee\u6b63\u3055\u308c\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \uff08\u30b5\u30f3\u30d7\u30eb\u7701\u7565\uff09","title":"15. RenderTexture, MSRenderTexture \u6539\u5584"},{"location":"reference/2d-geometry/","text":"2D Geometry \u00b6 \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } } \u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u56f3\u5f62\u306e\u5f15\u304d\u7b97 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u70b9\u7fa4\u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } } Polygon \u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } } Polygon \u306e\u62e1\u5f35 \u00b6 # include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } } Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"2D geometry"},{"location":"reference/2d-geometry/#2d-geometry","text":"","title":"2D Geometry"},{"location":"reference/2d-geometry/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } }","title":"\u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2"},{"location":"reference/2d-geometry/#_2","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df"},{"location":"reference/2d-geometry/#_3","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u5f15\u304d\u7b97"},{"location":"reference/2d-geometry/#_4","text":"# include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } }","title":"\u70b9\u7fa4\u306e\u51f8\u5305"},{"location":"reference/2d-geometry/#polygon","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } }","title":"Polygon \u306e\u51f8\u5305"},{"location":"reference/2d-geometry/#polygon_1","text":"# include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } }","title":"Polygon \u306e\u62e1\u5f35"},{"location":"reference/2d-geometry/#polygon_2","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b"},{"location":"reference/2d-particle/","text":"2D particle system \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf \u00b6 # include <Siv3D.hpp> // Siv3D-kun \u306e\u5f62\u306e Polygon \u3092\u4f5c\u6210 Polygon CreatePolygon () { return Image ( U \"example/siv3d-kun.png\" ) . alphaToPolygonCentered (). simplified ( 1 ). scaled ( 1.3 ); } void Main () { Window :: Resize ( 1280 , 720 ); const Texture textureSiv3D ( U \"example/siv3d-kun.png\" ); const std :: array < BlendState , 4 > blends = { BlendState :: Default , BlendState :: Additive , BlendState :: Opaque , BlendState :: Subtractive }; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( U \"example/particle.png\" , TextureDesc :: Mipped ); // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b bool debugMode = false ; // \u80cc\u666f\u3092\u767d\u306b bool whiteBackground = false ; // Siv3D-kun \u3092\u8868\u793a bool drawTexture = false ; Vec2 position ( 300 , 340 ); Vec2 force ( 0.0 , 0.0 ); HSV startColor = ColorF ( 1.0 ); size_t blendIndex = 1 ; size_t emitterIndex = 1 ; CircleEmitter2D circleEmitter ; ArcEmitter2D arcEmitter ; RectEmitter2D rectEmitter ; PolygonEmitter2D polygonEmitter ( CreatePolygon ()); ParticleSystem2DParameters parameters ; ParticleSystem2D particleSystem ( position , force ); particleSystem . setEmitter ( arcEmitter ); particleSystem . setTexture ( texture ); particleSystem . setParameters ( parameters ); particleSystem . prewarm (); while ( System :: Update ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u500b\u6570\u3092\u8868\u793a ClearPrint (); Print << U \"{} particles\" _fmt ( particleSystem . num_particles ()); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . update (); if ( debugMode ) { // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . drawDebug (); } else { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } if ( emitterIndex == 3 && drawTexture ) { // Siv3D-kun \u3092\u8868\u793a textureSiv3D . scaled ( 1.3 ). drawAt ( position ); } if ( MouseR . pressed ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\u4f4d\u7f6e\u3092\u79fb\u52d5 particleSystem . setPosition ( position = Cursor :: Pos ()); } SimpleGUI :: CheckBox ( debugMode , U \"Debug\" , Vec2 ( 80 , 660 ), 140 ); SimpleGUI :: CheckBox ( whiteBackground , U \"White\" , Vec2 ( 240 , 660 ), 140 ); SimpleGUI :: CheckBox ( drawTexture , U \"Texture\" , Vec2 ( 400 , 660 ), 140 , ( emitterIndex == 3 )); Scene :: SetBackground ( whiteBackground ? Color ( 250 , 252 , 255 ) : Palette :: DefaultBackground ); const int32 x0 = 560 , x1 = 900 ; { SimpleGUI :: Slider ( U \"Rate\" , parameters . rate , 1.0 , 500.0 , Vec2 ( x0 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Max\" , parameters . maxParticles , 50.0 , 2500.0 , Vec2 ( x0 , 60 ), 120 , 200 ); SimpleGUI :: Slider ( U \"LifeTime\" , parameters . startLifeTime , 0.0 , 5.0 , Vec2 ( x0 , 100 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Speed\" , parameters . startSpeed , 0.0 , 320.0 , Vec2 ( x0 , 140 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color H\" , startColor . h , 0.0 , 360.0 , Vec2 ( x0 , 180 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color S\" , startColor . s , 0.0 , 1.0 , Vec2 ( x0 , 220 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color V\" , startColor . v , 0.0 , 1.0 , Vec2 ( x0 , 260 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color A\" , startColor . a , 0.0 , 1.0 , Vec2 ( x0 , 300 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Size\" , parameters . startSize , 0.0 , 150.0 , Vec2 ( x0 , 340 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Rotation\" , parameters . startRotationDeg , - 180 , 180 , Vec2 ( x0 , 380 ), 120 , 200 ); SimpleGUI :: Slider ( U \"AngularVel\" , parameters . startAngularVelocityDeg , - 720 , 720 , Vec2 ( x0 , 420 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force X\" , force . x , - 320.0 , 320.0 , Vec2 ( x0 , 460 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force Y\" , force . y , - 320 , 320.0 , Vec2 ( x0 , 500 ), 120 , 200 ); SimpleGUI :: RadioButtons ( blendIndex , { U \"Default\" , U \"Additive\" , U \"Opaque\" , U \"Subtractive\" }, Vec2 ( x0 , 540 ), 320 ); parameters . blendState = blends [ blendIndex ]; parameters . startColor = startColor ; particleSystem . setParameters ( parameters ); particleSystem . setForce ( force ); } { bool changed = false ; changed |= SimpleGUI :: RadioButtons ( emitterIndex , { U \"Circle\" , U \"Arc\" , U \"Rect\" , U \"Polygon\" }, Vec2 ( x1 , 20 ), 360 ); if ( emitterIndex == 0 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , circleEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , circleEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 260 ), 360 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 300 ), 300 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( circleEmitter ); } } else if ( emitterIndex == 1 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , arcEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , arcEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Direction\" , arcEmitter . direction , - 180 , 180 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Angle\" , arcEmitter . angle , 0.0 , 360 , Vec2 ( x1 , 300 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 340 ), 360 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 380 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( arcEmitter ); } } else if ( emitterIndex == 2 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , rectEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Width\" , rectEmitter . width , 0 , 720 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Height\" , rectEmitter . height , 0 , 720 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 300 ), 360 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 340 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( rectEmitter ); } } else if ( emitterIndex == 3 ) { if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( polygonEmitter ); } } } } } \u30b2\u30fc\u30e0\u3078\u306e\u7d44\u307f\u8fbc\u307f \u00b6 # include <Siv3D.hpp> // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 class BallParticleSystem { private : // 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2D m_system ; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 Texture m_texture ; public : BallParticleSystem ( const Vec2 & pos , const Vec2 & force ) : m_system ( pos , force ) , m_texture ( U \"example/particle.png\" , TextureDesc :: Mipped ) { m_system . setTexture ( m_texture ); // \u30d1\u30e9\u30e1\u30fc\u30bf ParticleSystem2DParameters parameters ; parameters . rate = 300.0 ; parameters . startSpeed = 50.0 ; parameters . startColor = HSV ( 10.0 , 0.8 , 0.25 ); parameters . startSize = 60.0 ; parameters . blendState = BlendState :: Additive ; m_system . setParameters ( parameters ); // \u30a8\u30df\u30c3\u30bf\u30fc CircleEmitter2D circleEmitter ; circleEmitter . r = 12.0 ; m_system . setEmitter ( circleEmitter ); m_system . prewarm (); } void setPos ( const Vec2 & pos ) { m_system . setPosition ( pos ); } void update () { m_system . update (); } void draw () const { m_system . draw (); } }; void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 BallParticleSystem particleSystem ( ball . center , Vec2 ( 0.0 , - 120 )); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . setPos ( ball . center ); particleSystem . update (); // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } }","title":"2D particle system"},{"location":"reference/2d-particle/#2d-particle-system","text":"","title":"2D particle system"},{"location":"reference/2d-particle/#_1","text":"# include <Siv3D.hpp> // Siv3D-kun \u306e\u5f62\u306e Polygon \u3092\u4f5c\u6210 Polygon CreatePolygon () { return Image ( U \"example/siv3d-kun.png\" ) . alphaToPolygonCentered (). simplified ( 1 ). scaled ( 1.3 ); } void Main () { Window :: Resize ( 1280 , 720 ); const Texture textureSiv3D ( U \"example/siv3d-kun.png\" ); const std :: array < BlendState , 4 > blends = { BlendState :: Default , BlendState :: Additive , BlendState :: Opaque , BlendState :: Subtractive }; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( U \"example/particle.png\" , TextureDesc :: Mipped ); // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b bool debugMode = false ; // \u80cc\u666f\u3092\u767d\u306b bool whiteBackground = false ; // Siv3D-kun \u3092\u8868\u793a bool drawTexture = false ; Vec2 position ( 300 , 340 ); Vec2 force ( 0.0 , 0.0 ); HSV startColor = ColorF ( 1.0 ); size_t blendIndex = 1 ; size_t emitterIndex = 1 ; CircleEmitter2D circleEmitter ; ArcEmitter2D arcEmitter ; RectEmitter2D rectEmitter ; PolygonEmitter2D polygonEmitter ( CreatePolygon ()); ParticleSystem2DParameters parameters ; ParticleSystem2D particleSystem ( position , force ); particleSystem . setEmitter ( arcEmitter ); particleSystem . setTexture ( texture ); particleSystem . setParameters ( parameters ); particleSystem . prewarm (); while ( System :: Update ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u500b\u6570\u3092\u8868\u793a ClearPrint (); Print << U \"{} particles\" _fmt ( particleSystem . num_particles ()); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . update (); if ( debugMode ) { // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . drawDebug (); } else { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } if ( emitterIndex == 3 && drawTexture ) { // Siv3D-kun \u3092\u8868\u793a textureSiv3D . scaled ( 1.3 ). drawAt ( position ); } if ( MouseR . pressed ()) { // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\u4f4d\u7f6e\u3092\u79fb\u52d5 particleSystem . setPosition ( position = Cursor :: Pos ()); } SimpleGUI :: CheckBox ( debugMode , U \"Debug\" , Vec2 ( 80 , 660 ), 140 ); SimpleGUI :: CheckBox ( whiteBackground , U \"White\" , Vec2 ( 240 , 660 ), 140 ); SimpleGUI :: CheckBox ( drawTexture , U \"Texture\" , Vec2 ( 400 , 660 ), 140 , ( emitterIndex == 3 )); Scene :: SetBackground ( whiteBackground ? Color ( 250 , 252 , 255 ) : Palette :: DefaultBackground ); const int32 x0 = 560 , x1 = 900 ; { SimpleGUI :: Slider ( U \"Rate\" , parameters . rate , 1.0 , 500.0 , Vec2 ( x0 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Max\" , parameters . maxParticles , 50.0 , 2500.0 , Vec2 ( x0 , 60 ), 120 , 200 ); SimpleGUI :: Slider ( U \"LifeTime\" , parameters . startLifeTime , 0.0 , 5.0 , Vec2 ( x0 , 100 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Speed\" , parameters . startSpeed , 0.0 , 320.0 , Vec2 ( x0 , 140 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color H\" , startColor . h , 0.0 , 360.0 , Vec2 ( x0 , 180 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color S\" , startColor . s , 0.0 , 1.0 , Vec2 ( x0 , 220 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color V\" , startColor . v , 0.0 , 1.0 , Vec2 ( x0 , 260 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Color A\" , startColor . a , 0.0 , 1.0 , Vec2 ( x0 , 300 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Size\" , parameters . startSize , 0.0 , 150.0 , Vec2 ( x0 , 340 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Rotation\" , parameters . startRotationDeg , - 180 , 180 , Vec2 ( x0 , 380 ), 120 , 200 ); SimpleGUI :: Slider ( U \"AngularVel\" , parameters . startAngularVelocityDeg , - 720 , 720 , Vec2 ( x0 , 420 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force X\" , force . x , - 320.0 , 320.0 , Vec2 ( x0 , 460 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Force Y\" , force . y , - 320 , 320.0 , Vec2 ( x0 , 500 ), 120 , 200 ); SimpleGUI :: RadioButtons ( blendIndex , { U \"Default\" , U \"Additive\" , U \"Opaque\" , U \"Subtractive\" }, Vec2 ( x0 , 540 ), 320 ); parameters . blendState = blends [ blendIndex ]; parameters . startColor = startColor ; particleSystem . setParameters ( parameters ); particleSystem . setForce ( force ); } { bool changed = false ; changed |= SimpleGUI :: RadioButtons ( emitterIndex , { U \"Circle\" , U \"Arc\" , U \"Rect\" , U \"Polygon\" }, Vec2 ( x1 , 20 ), 360 ); if ( emitterIndex == 0 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , circleEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , circleEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 260 ), 360 ); changed |= SimpleGUI :: CheckBox ( circleEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 300 ), 300 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( circleEmitter ); } } else if ( emitterIndex == 1 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , arcEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"R\" , arcEmitter . r , 0.0 , 320.0 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Direction\" , arcEmitter . direction , - 180 , 180 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Angle\" , arcEmitter . angle , 0.0 , 360 , Vec2 ( x1 , 300 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 340 ), 360 ); changed |= SimpleGUI :: CheckBox ( arcEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 380 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( arcEmitter ); } } else if ( emitterIndex == 2 ) { changed |= SimpleGUI :: Slider ( U \"Source Radius\" , rectEmitter . sourceRadius , 0.0 , 40.0 , Vec2 ( x1 , 180 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Width\" , rectEmitter . width , 0 , 720 , Vec2 ( x1 , 220 ), 160 , 200 ); changed |= SimpleGUI :: Slider ( U \"Height\" , rectEmitter . height , 0 , 720 , Vec2 ( x1 , 260 ), 160 , 200 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . randomDirection , U \"Random Direction\" , Vec2 ( x1 , 300 ), 360 ); changed |= SimpleGUI :: CheckBox ( rectEmitter . fromShell , U \"From Shell\" , Vec2 ( x1 , 340 ), 360 ); if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( rectEmitter ); } } else if ( emitterIndex == 3 ) { if ( changed ) // setEmitter \u306f\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5909\u66f4\u304c\u3042\u3063\u305f\u6642\u3060\u3051 { particleSystem . setEmitter ( polygonEmitter ); } } } } }","title":"\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"reference/2d-particle/#_2","text":"# include <Siv3D.hpp> // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 class BallParticleSystem { private : // 2D \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30b7\u30b9\u30c6\u30e0 ParticleSystem2D m_system ; // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3 Texture m_texture ; public : BallParticleSystem ( const Vec2 & pos , const Vec2 & force ) : m_system ( pos , force ) , m_texture ( U \"example/particle.png\" , TextureDesc :: Mipped ) { m_system . setTexture ( m_texture ); // \u30d1\u30e9\u30e1\u30fc\u30bf ParticleSystem2DParameters parameters ; parameters . rate = 300.0 ; parameters . startSpeed = 50.0 ; parameters . startColor = HSV ( 10.0 , 0.8 , 0.25 ); parameters . startSize = 60.0 ; parameters . blendState = BlendState :: Additive ; m_system . setParameters ( parameters ); // \u30a8\u30df\u30c3\u30bf\u30fc CircleEmitter2D circleEmitter ; circleEmitter . r = 12.0 ; m_system . setEmitter ( circleEmitter ); m_system . prewarm (); } void setPos ( const Vec2 & pos ) { m_system . setPosition ( pos ); } void update () { m_system . update (); } void draw () const { m_system . draw (); } }; void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); // \u30dc\u30fc\u30eb\u7528\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30af\u30e9\u30b9 BallParticleSystem particleSystem ( ball . center , Vec2 ( 0.0 , - 120 )); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u66f4\u65b0 particleSystem . setPos ( ball . center ); particleSystem . update (); // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u63cf\u753b particleSystem . draw (); } }","title":"\u30b2\u30fc\u30e0\u3078\u306e\u7d44\u307f\u8fbc\u307f"},{"location":"reference/2d-physics/","text":"2D physics \u00b6 \u30ef\u30fc\u30eb\u30c9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 1 \u00b6 \u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u3053\u308d\u306b\u30dc\u30fc\u30eb\u304c\u767a\u751f\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306b 60FPS \u306e\u5b9a\u6570\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408\u306f true, \u5b9f\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408 false constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4e0a\u9650\u3092 60 FPS \u306b Graphics :: SetTargetFrameRateHz ( 60 ); } // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20.0 ); // \u7269\u7406\u6f14\u7b97\u306e\u7cbe\u5ea6 constexpr int32 velocityIterations = 12 ; constexpr int32 positionIterations = 4 ; // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 9.8 ); // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); // \u7269\u4f53 Array < P2Body > bodies ; while ( System :: Update ()) { ClearPrint (); Print << U \"Balls: {}\" _fmt ( bodies . size ()); // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210\u30fb\u9069\u7528 const auto t = camera . createTransformer (); if ( MouseL . down ()) { // \u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u30dc\u30fc\u30eb\u3092\u4f5c\u6210 bodies << world . createCircle ( Cursor :: PosF (), 0.5 ); } // (y > 10) \u307e\u3067\u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 10 ; }); // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0 world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), velocityIterations , positionIterations ); // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Skyblue ); // \u7269\u4f53\u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 10 , 0.7 , 0.9 )); } } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } \u9244\u7403\u306b\u3088\u308b\u7834\u58ca \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.7 , 1.0 )); constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { Graphics :: SetTargetFrameRateHz ( 60 ); } P2World world ( 9.8 ); P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); Array < P2Body > bodies ; for ( auto y : Range ( 0 , 12 )) { for ( auto x : Range ( 0 , 20 )) { bodies << world . createDynamicRect ( Vec2 ( x * 0.5 , - 0.5 - y * 1 ), SizeF ( 0.5 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } } for ( auto x : Range ( 0 , 9 )) { bodies << world . createDynamicRect ( Vec2 ( 0.5 + x * 1.0 , - 13.5 ), SizeF ( 1 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } // \u632f\u308a\u5b50\u306e\u8ef8 constexpr Vec2 base ( 0 , - 24 ); // \u30c1\u30a7\u30fc\u30f3\u306e\u6570 constexpr int32 chainCount = 16 ; // \u9244\u7403\u306e\u534a\u5f84 constexpr double ballR = 2.0 ; // \u9244\u7403\u306e\u521d\u671f\u5ea7\u6a19 constexpr Vec2 ballCenter = base . movedBy ( - chainCount - ballR , 0 ); // \u9244\u7403 const P2Body ball = world . createDynamicCircle ( ballCenter , ballR ); // \u632f\u308a\u5b50\u306e\u8ef8 bodies << world . createStaticDummy ( base ); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 Array < P2PivotJoint > joints ; for ( auto i : step ( chainCount )) { const RectF rect ( Arg :: rightCenter = base . movedBy ( 0 - i , 0 ), 1.0 , 0.1 ); bodies << world . createDynamicRect ( rect . center (), rect . size ); joints << world . createPivotJoint ( bodies [ bodies . size () - 2 ], bodies . back (), rect . rightCenter ()); } joints << world . createPivotJoint ( bodies . back (), ball , base . movedBy ( - chainCount , 0 )); // \u30b9\u30c8\u30c3\u30d1\u30fc bool hasStopper = true ; bodies << world . createStaticLine ( ballCenter . movedBy ( 0 , 2 ), Line ( - 4 , 2 , 4 , 0 )); Camera2D camera ( Vec2 ( 0 , - 12 ), 24.0 ); while ( System :: Update ()) { // \u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 20 ; }); world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), 12 , 4 ); camera . update (); { const auto t = camera . createTransformer (); line . draw ( Palette :: Skyblue ); for ( const auto & body : bodies ) { body . draw ( ColorF ( 0.6 , 0.4 , 0.2 )); } ball . draw ( ColorF ( 0.25 )); } if ( SimpleGUI :: Button ( U \"Go\" , Vec2 ( 1100 , 20 )) && hasStopper ) { bodies . pop_back (); hasStopper = false ; } camera . draw ( Palette :: Orange ); } // \u30b8\u30e7\u30a4\u30f3\u30c8\uff08joints \u306f \u95a2\u9023\u3059\u308b Body \u3088\u308a\u5148\u306b\u7834\u68c4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff09 joints . clear (); }","title":"2D physics"},{"location":"reference/2d-physics/#2d-physics","text":"","title":"2D physics"},{"location":"reference/2d-physics/#1","text":"\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u3053\u308d\u306b\u30dc\u30fc\u30eb\u304c\u767a\u751f\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306b 60FPS \u306e\u5b9a\u6570\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408\u306f true, \u5b9f\u6642\u9593\u3092\u4f7f\u3046\u5834\u5408 false constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u4e0a\u9650\u3092 60 FPS \u306b Graphics :: SetTargetFrameRateHz ( 60 ); } // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20.0 ); // \u7269\u7406\u6f14\u7b97\u306e\u7cbe\u5ea6 constexpr int32 velocityIterations = 12 ; constexpr int32 positionIterations = 4 ; // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 9.8 ); // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); // \u7269\u4f53 Array < P2Body > bodies ; while ( System :: Update ()) { ClearPrint (); Print << U \"Balls: {}\" _fmt ( bodies . size ()); // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210\u30fb\u9069\u7528 const auto t = camera . createTransformer (); if ( MouseL . down ()) { // \u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u30dc\u30fc\u30eb\u3092\u4f5c\u6210 bodies << world . createCircle ( Cursor :: PosF (), 0.5 ); } // (y > 10) \u307e\u3067\u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 10 ; }); // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0 world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), velocityIterations , positionIterations ); // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Skyblue ); // \u7269\u4f53\u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 10 , 0.7 , 0.9 )); } } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"\u30ef\u30fc\u30eb\u30c9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 1"},{"location":"reference/2d-physics/#_1","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.4 , 0.7 , 1.0 )); constexpr bool useConstantDeltaTime = true ; if ( useConstantDeltaTime ) { Graphics :: SetTargetFrameRateHz ( 60 ); } P2World world ( 9.8 ); P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 )); Array < P2Body > bodies ; for ( auto y : Range ( 0 , 12 )) { for ( auto x : Range ( 0 , 20 )) { bodies << world . createDynamicRect ( Vec2 ( x * 0.5 , - 0.5 - y * 1 ), SizeF ( 0.5 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } } for ( auto x : Range ( 0 , 9 )) { bodies << world . createDynamicRect ( Vec2 ( 0.5 + x * 1.0 , - 13.5 ), SizeF ( 1 , 1 ), P2Material ( 0.02 , 0.0 , 1.0 )); } // \u632f\u308a\u5b50\u306e\u8ef8 constexpr Vec2 base ( 0 , - 24 ); // \u30c1\u30a7\u30fc\u30f3\u306e\u6570 constexpr int32 chainCount = 16 ; // \u9244\u7403\u306e\u534a\u5f84 constexpr double ballR = 2.0 ; // \u9244\u7403\u306e\u521d\u671f\u5ea7\u6a19 constexpr Vec2 ballCenter = base . movedBy ( - chainCount - ballR , 0 ); // \u9244\u7403 const P2Body ball = world . createDynamicCircle ( ballCenter , ballR ); // \u632f\u308a\u5b50\u306e\u8ef8 bodies << world . createStaticDummy ( base ); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 Array < P2PivotJoint > joints ; for ( auto i : step ( chainCount )) { const RectF rect ( Arg :: rightCenter = base . movedBy ( 0 - i , 0 ), 1.0 , 0.1 ); bodies << world . createDynamicRect ( rect . center (), rect . size ); joints << world . createPivotJoint ( bodies [ bodies . size () - 2 ], bodies . back (), rect . rightCenter ()); } joints << world . createPivotJoint ( bodies . back (), ball , base . movedBy ( - chainCount , 0 )); // \u30b9\u30c8\u30c3\u30d1\u30fc bool hasStopper = true ; bodies << world . createStaticLine ( ballCenter . movedBy ( 0 , 2 ), Line ( - 4 , 2 , 4 , 0 )); Camera2D camera ( Vec2 ( 0 , - 12 ), 24.0 ); while ( System :: Update ()) { // \u843d\u4e0b\u3057\u305f P2Body \u306f\u524a\u9664 bodies . remove_if ([]( const P2Body & body ) { return body . getPos (). y > 20 ; }); world . update ( useConstantDeltaTime ? ( 1.0 / 60.0 ) : Scene :: DeltaTime (), 12 , 4 ); camera . update (); { const auto t = camera . createTransformer (); line . draw ( Palette :: Skyblue ); for ( const auto & body : bodies ) { body . draw ( ColorF ( 0.6 , 0.4 , 0.2 )); } ball . draw ( ColorF ( 0.25 )); } if ( SimpleGUI :: Button ( U \"Go\" , Vec2 ( 1100 , 20 )) && hasStopper ) { bodies . pop_back (); hasStopper = false ; } camera . draw ( Palette :: Orange ); } // \u30b8\u30e7\u30a4\u30f3\u30c8\uff08joints \u306f \u95a2\u9023\u3059\u308b Body \u3088\u308a\u5148\u306b\u7834\u68c4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff09 joints . clear (); }","title":"\u9244\u7403\u306b\u3088\u308b\u7834\u58ca"},{"location":"reference/2d-shadow/","text":"2D shadow \u00b6 Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Baking shadows on texture \u00b6 \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"2D shadow"},{"location":"reference/2d-shadow/#2d-shadow","text":"Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"2D shadow"},{"location":"reference/2d-shadow/#baking-shadows-on-texture","text":"\u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"Baking shadows on texture"},{"location":"reference/fullscreen/","text":"Fullscreen \u00b6 Selecting a native fullscreen resolution \u00b6 Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"Fullscreen"},{"location":"reference/fullscreen/#fullscreen","text":"","title":"Fullscreen"},{"location":"reference/fullscreen/#selecting-a-native-fullscreen-resolution","text":"Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"Selecting a native fullscreen resolution"},{"location":"reference/gamepad/","text":"Gamepad \u00b6 XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9 \u00b6 PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u306f XInput \u3092\u901a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 640 , 480 ); constexpr ColorF background ( 0.6 , 0.8 , 0.7 ); Scene :: SetBackground ( background ); constexpr Ellipse buttonLB ( 160 , 140 , 50 , 24 ); constexpr Ellipse buttonRB ( 520 , 140 , 50 , 24 ); constexpr RectF leftTrigger ( 150 , 16 , 40 , 100 ); constexpr RectF rightTrigger ( 500 , 16 , 40 , 100 ); constexpr Circle buttonLThumb ( 170 , 250 , 35 ); constexpr Circle buttonRThumb ( 420 , 350 , 35 ); constexpr Circle buttonDPad ( 260 , 350 , 40 ); constexpr Circle buttonA ( 510 , 300 , 20 ); constexpr Circle buttonB ( 560 , 250 , 20 ); constexpr Circle buttonX ( 460 , 250 , 20 ); constexpr Circle buttonY ( 510 , 200 , 20 ); constexpr Circle buttonBack ( 270 , 250 , 15 ); constexpr Circle buttonStart ( 410 , 250 , 15 ); // \u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0 - 3) size_t userIndex = 0 ; // \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u6709\u52b9\u7121\u52b9 bool deadZone = false ; // \u632f\u52d5 (0.0 - 1.0) double leftV = 0.0 , rightV = 0.0 ; while ( System :: Update ()) { // \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u53d6\u5f97 auto controller = XInput ( userIndex ); if ( deadZone ) { controller . setLeftTriggerDeadZone (); controller . setRightTriggerDeadZone (); controller . setLeftThumbDeadZone (); controller . setRightThumbDeadZone (); } else { controller . setLeftTriggerDeadZone ( DeadZone :: Disabled ()); controller . setRightTriggerDeadZone ( DeadZone :: Disabled ()); controller . setLeftThumbDeadZone ( DeadZone :: Disabled ()); controller . setRightThumbDeadZone ( DeadZone :: Disabled ()); } // \u632f\u52d5 controller . setVibration ( leftV , rightV ); buttonLB . draw ( ColorF ( controller . buttonLB . pressed () ? 1.0 : 0.7 )); buttonRB . draw ( ColorF ( controller . buttonRB . pressed () ? 1.0 : 0.7 )); Ellipse ( 340 + 3.0 * Random ( leftV + rightV ), 480 , 300 , 440 ). draw ( ColorF ( 0.9 )); Ellipse ( 340 , 40 , 220 , 120 ). draw ( background ); Circle ( 340 , 660 , 240 ). draw ( background ); Circle ( 340 , 250 , 30 ). draw ( ColorF ( 0.6 )); // \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u63a5\u7d9a\u306e\u6709\u7121 if ( controller . isConnected ()) { Circle ( 340 , 250 , 32 ). drawPie ( - 0.5 _pi + 0.5 _pi * controller . userIndex , 0.5 _pi , ColorF ( 0.7 , 1.0 , 0.5 )); } Circle ( 340 , 250 , 25 ). draw ( ColorF ( 0.6 )); leftTrigger . draw ( AlphaF ( 0.25 )); leftTrigger . stretched (( controller . leftTrigger - 1.0 ) * leftTrigger . h , 0 , 0 , 0 ). draw (); rightTrigger . draw ( AlphaF ( 0.25 )); rightTrigger . stretched (( controller . rightTrigger - 1.0 ) * rightTrigger . h , 0 , 0 , 0 ). draw (); buttonLThumb . draw ( ColorF ( controller . buttonLThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonLThumb . center + Vec2 ( controller . leftThumbX , - controller . leftThumbY ) * 25 , 20 ). draw (); buttonRThumb . draw ( ColorF ( controller . buttonRThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonRThumb . center + Vec2 ( controller . rightThumbX , - controller . rightThumbY ) * 25 , 20 ). draw (); buttonDPad . draw ( ColorF ( 0.5 )); const Vec2 direction ( controller . buttonRight . pressed () - controller . buttonLeft . pressed (), controller . buttonDown . pressed () - controller . buttonUp . pressed ()); if ( ! direction . isZero ()) { Circle ( buttonDPad . center + direction . normalized () * 25 , 15 ). draw (); } buttonA . draw ( ColorF ( 0.0 , 1.0 , 0.3 ). setA ( controller . buttonA . pressed () ? 1.0 : 0.3 )); buttonB . draw ( ColorF ( 1.0 , 0.0 , 0.3 ). setA ( controller . buttonB . pressed () ? 1.0 : 0.3 )); buttonX . draw ( ColorF ( 0.0 , 0.3 , 1.0 ). setA ( controller . buttonX . pressed () ? 1.0 : 0.3 )); buttonY . draw ( ColorF ( 1.0 , 0.5 , 0.0 ). setA ( controller . buttonY . pressed () ? 1.0 : 0.3 )); buttonBack . draw ( ColorF ( controller . buttonBack . pressed () ? 1.0 : 0.7 )); buttonStart . draw ( ColorF ( controller . buttonStart . pressed () ? 1.0 : 0.7 )); SimpleGUI :: RadioButtons ( userIndex , { U \"1P\" , U \"2P\" , U \"3P\" , U \"4P\" }, Vec2 ( 10 , 10 )); SimpleGUI :: CheckBox ( deadZone , U \"DeadZone\" , Vec2 ( 240 , 10 )); SimpleGUI :: Slider ( U \"left\" , leftV , Vec2 ( 240 , 50 )); SimpleGUI :: Slider ( U \"right\" , rightV , Vec2 ( 240 , 90 )); } } Joy-Con \u00b6 PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Joy-Con \u306e\u60c5\u5831\u306f JoyConL \u307e\u305f\u306f JoyConR \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 )); Window :: Resize ( 1280 , 720 ); Effect effect ; Vec2 left ( 640 - 100 , 100 ), right ( 640 + 100 , 100 ); double angle = 0 _deg ; double scale = 400.0 ; bool covered = true ; while ( System :: Update ()) { Circle ( Vec2 ( 640 - 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); Circle ( Vec2 ( 640 + 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); // Joy-Con (L) \u3092\u53d6\u5f97 if ( const auto joy = JoyConL ( 0 )) { joy . drawAt ( Vec2 ( 640 - 300 , 450 ), scale , - 90 _deg - angle , covered ); if ( auto d = joy . povD8 ()) { left += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = left ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } // Joy-Con (R) \u3092\u53d6\u5f97 if ( const auto joy = JoyConR ( 0 )) { joy . drawAt ( Vec2 ( 640 + 300 , 450 ), scale , 90 _deg + angle , covered ); if ( auto d = joy . povD8 ()) { right += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = right ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } Circle ( left , 30 ). draw ( ColorF ( 0.0 , 0.75 , 0.9 )); Circle ( right , 30 ). draw ( ColorF ( 1.0 , 0.4 , 0.3 )); effect . update (); SimpleGUI :: Slider ( U \"Rotation: \" , angle , - 180 _deg , 180 _deg , Vec2 ( 20 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Scale: \" , scale , 100.0 , 600.0 , Vec2 ( 20 , 60 ), 120 , 200 ); SimpleGUI :: CheckBox ( covered , U \"Covered\" , Vec2 ( 20 , 100 )); } } Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc \u00b6 PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u60c5\u5831\u306f ProController \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53d6\u5f97 if ( const auto pro = ProController ( 0 )) { // \u5404\u30dc\u30bf\u30f3\u306e\u72b6\u614b\u3092\u8868\u793a Print << U \"A: \" << pro . buttonA . pressed (); Print << U \"B: \" << pro . buttonB . pressed (); Print << U \"X: \" << pro . buttonX . pressed (); Print << U \"Y: \" << pro . buttonY . pressed (); Print << U \"L: \" << pro . buttonL . pressed (); Print << U \"R: \" << pro . buttonR . pressed (); Print << U \"ZL: \" << pro . buttonZL . pressed (); Print << U \"ZR: \" << pro . buttonZR . pressed (); Print << U \"-: \" << pro . buttonMinus . pressed (); Print << U \"+: \" << pro . buttonPlus . pressed (); Print << U \"LS: \" << pro . buttonLStick . pressed (); Print << U \"RS: \" << pro . buttonRStick . pressed (); Print << U \"Screenshot: \" << pro . buttonScreenshot . pressed (); Print << U \"Home: \" << pro . buttonHome . pressed (); Print << U \"LStick: \" << pro . LStick (); Print << U \"RStick: \" << pro . RStick (); Print << U \"POV: \" << pro . povD8 (); } else { Print << U \"No Pro Controller found\" ; } } } \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9 \u00b6 \u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u6c4e\u7528\u7684\u306a\u30af\u30e9\u30b9\u304c Gamepad \u3067\u3059\u3002\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f Gamepad . MaxUserCount - 1 \u3067\u5b9a\u7fa9\u3055\u308c\u308b 15 \u304c\u6700\u5927\u5024\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 800 , 680 ); size_t userIndex = 0 ; const Array < String > indices = Iota ( Gamepad . MaxUserCount ). map ( Format ); while ( System :: Update ()) { ClearPrint (); if ( const auto gamepad = Gamepad ( userIndex )) { Print << U \"[{}] {}\" _fmt ( gamepad . getInfo (). index , gamepad . getInfo (). name ); for ( auto [ i , button ] : Indexed ( gamepad . buttons )) { Print << U \"button{}: {}\" _fmt ( i , button . pressed ()); } for ( auto [ i , axe ] : Indexed ( gamepad . axes )) { Print << U \"axe{}: {}\" _fmt ( i , axe ); } Print << U \"POV: \" << gamepad . povD8 (); } SimpleGUI :: RadioButtons ( userIndex , indices , Vec2 ( 500 , 20 )); } } \u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u5217\u6319 \u00b6 # include <Siv3D.hpp> void Main () { for ( const auto & info : System :: EnumerateGamepads ()) { Print << U \"[{}] {}\" _fmt ( info . index , info . name ); } while ( System :: Update ()) { } }","title":"Gamepad"},{"location":"reference/gamepad/#gamepad","text":"","title":"Gamepad"},{"location":"reference/gamepad/#xinput","text":"PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u306f XInput \u3092\u901a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 640 , 480 ); constexpr ColorF background ( 0.6 , 0.8 , 0.7 ); Scene :: SetBackground ( background ); constexpr Ellipse buttonLB ( 160 , 140 , 50 , 24 ); constexpr Ellipse buttonRB ( 520 , 140 , 50 , 24 ); constexpr RectF leftTrigger ( 150 , 16 , 40 , 100 ); constexpr RectF rightTrigger ( 500 , 16 , 40 , 100 ); constexpr Circle buttonLThumb ( 170 , 250 , 35 ); constexpr Circle buttonRThumb ( 420 , 350 , 35 ); constexpr Circle buttonDPad ( 260 , 350 , 40 ); constexpr Circle buttonA ( 510 , 300 , 20 ); constexpr Circle buttonB ( 560 , 250 , 20 ); constexpr Circle buttonX ( 460 , 250 , 20 ); constexpr Circle buttonY ( 510 , 200 , 20 ); constexpr Circle buttonBack ( 270 , 250 , 15 ); constexpr Circle buttonStart ( 410 , 250 , 15 ); // \u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (0 - 3) size_t userIndex = 0 ; // \u30c7\u30c3\u30c9\u30be\u30fc\u30f3\u306e\u6709\u52b9\u7121\u52b9 bool deadZone = false ; // \u632f\u52d5 (0.0 - 1.0) double leftV = 0.0 , rightV = 0.0 ; while ( System :: Update ()) { // \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e XInput \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u53d6\u5f97 auto controller = XInput ( userIndex ); if ( deadZone ) { controller . setLeftTriggerDeadZone (); controller . setRightTriggerDeadZone (); controller . setLeftThumbDeadZone (); controller . setRightThumbDeadZone (); } else { controller . setLeftTriggerDeadZone ( DeadZone :: Disabled ()); controller . setRightTriggerDeadZone ( DeadZone :: Disabled ()); controller . setLeftThumbDeadZone ( DeadZone :: Disabled ()); controller . setRightThumbDeadZone ( DeadZone :: Disabled ()); } // \u632f\u52d5 controller . setVibration ( leftV , rightV ); buttonLB . draw ( ColorF ( controller . buttonLB . pressed () ? 1.0 : 0.7 )); buttonRB . draw ( ColorF ( controller . buttonRB . pressed () ? 1.0 : 0.7 )); Ellipse ( 340 + 3.0 * Random ( leftV + rightV ), 480 , 300 , 440 ). draw ( ColorF ( 0.9 )); Ellipse ( 340 , 40 , 220 , 120 ). draw ( background ); Circle ( 340 , 660 , 240 ). draw ( background ); Circle ( 340 , 250 , 30 ). draw ( ColorF ( 0.6 )); // \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u63a5\u7d9a\u306e\u6709\u7121 if ( controller . isConnected ()) { Circle ( 340 , 250 , 32 ). drawPie ( - 0.5 _pi + 0.5 _pi * controller . userIndex , 0.5 _pi , ColorF ( 0.7 , 1.0 , 0.5 )); } Circle ( 340 , 250 , 25 ). draw ( ColorF ( 0.6 )); leftTrigger . draw ( AlphaF ( 0.25 )); leftTrigger . stretched (( controller . leftTrigger - 1.0 ) * leftTrigger . h , 0 , 0 , 0 ). draw (); rightTrigger . draw ( AlphaF ( 0.25 )); rightTrigger . stretched (( controller . rightTrigger - 1.0 ) * rightTrigger . h , 0 , 0 , 0 ). draw (); buttonLThumb . draw ( ColorF ( controller . buttonLThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonLThumb . center + Vec2 ( controller . leftThumbX , - controller . leftThumbY ) * 25 , 20 ). draw (); buttonRThumb . draw ( ColorF ( controller . buttonRThumb . pressed () ? 0.85 : 0.5 )); Circle ( buttonRThumb . center + Vec2 ( controller . rightThumbX , - controller . rightThumbY ) * 25 , 20 ). draw (); buttonDPad . draw ( ColorF ( 0.5 )); const Vec2 direction ( controller . buttonRight . pressed () - controller . buttonLeft . pressed (), controller . buttonDown . pressed () - controller . buttonUp . pressed ()); if ( ! direction . isZero ()) { Circle ( buttonDPad . center + direction . normalized () * 25 , 15 ). draw (); } buttonA . draw ( ColorF ( 0.0 , 1.0 , 0.3 ). setA ( controller . buttonA . pressed () ? 1.0 : 0.3 )); buttonB . draw ( ColorF ( 1.0 , 0.0 , 0.3 ). setA ( controller . buttonB . pressed () ? 1.0 : 0.3 )); buttonX . draw ( ColorF ( 0.0 , 0.3 , 1.0 ). setA ( controller . buttonX . pressed () ? 1.0 : 0.3 )); buttonY . draw ( ColorF ( 1.0 , 0.5 , 0.0 ). setA ( controller . buttonY . pressed () ? 1.0 : 0.3 )); buttonBack . draw ( ColorF ( controller . buttonBack . pressed () ? 1.0 : 0.7 )); buttonStart . draw ( ColorF ( controller . buttonStart . pressed () ? 1.0 : 0.7 )); SimpleGUI :: RadioButtons ( userIndex , { U \"1P\" , U \"2P\" , U \"3P\" , U \"4P\" }, Vec2 ( 10 , 10 )); SimpleGUI :: CheckBox ( deadZone , U \"DeadZone\" , Vec2 ( 240 , 10 )); SimpleGUI :: Slider ( U \"left\" , leftV , Vec2 ( 240 , 50 )); SimpleGUI :: Slider ( U \"right\" , rightV , Vec2 ( 240 , 90 )); } }","title":"XInput \u5bfe\u5fdc\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9"},{"location":"reference/gamepad/#joy-con","text":"PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Joy-Con \u306e\u60c5\u5831\u306f JoyConL \u307e\u305f\u306f JoyConR \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.9 )); Window :: Resize ( 1280 , 720 ); Effect effect ; Vec2 left ( 640 - 100 , 100 ), right ( 640 + 100 , 100 ); double angle = 0 _deg ; double scale = 400.0 ; bool covered = true ; while ( System :: Update ()) { Circle ( Vec2 ( 640 - 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); Circle ( Vec2 ( 640 + 300 , 450 ), scale / 2 ). drawFrame ( scale * 0.1 ); // Joy-Con (L) \u3092\u53d6\u5f97 if ( const auto joy = JoyConL ( 0 )) { joy . drawAt ( Vec2 ( 640 - 300 , 450 ), scale , - 90 _deg - angle , covered ); if ( auto d = joy . povD8 ()) { left += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = left ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } // Joy-Con (R) \u3092\u53d6\u5f97 if ( const auto joy = JoyConR ( 0 )) { joy . drawAt ( Vec2 ( 640 + 300 , 450 ), scale , 90 _deg + angle , covered ); if ( auto d = joy . povD8 ()) { right += Circular ( 4 , * d * 45 _deg ); } if ( joy . button2 . down ()) { effect . add ([ center = right ]( double t ) { Circle ( center , 20 + t * 200 ). drawFrame ( 10 , 0 , AlphaF ( 1.0 - t )); return t < 1.0 ; }); } } Circle ( left , 30 ). draw ( ColorF ( 0.0 , 0.75 , 0.9 )); Circle ( right , 30 ). draw ( ColorF ( 1.0 , 0.4 , 0.3 )); effect . update (); SimpleGUI :: Slider ( U \"Rotation: \" , angle , - 180 _deg , 180 _deg , Vec2 ( 20 , 20 ), 120 , 200 ); SimpleGUI :: Slider ( U \"Scale: \" , scale , 100.0 , 600.0 , Vec2 ( 20 , 60 ), 120 , 200 ); SimpleGUI :: CheckBox ( covered , U \"Covered\" , Vec2 ( 20 , 100 )); } }","title":"Joy-Con"},{"location":"reference/gamepad/#pro","text":"PC \u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b Nintendo Switch \u306e Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u60c5\u5831\u306f ProController \u3092\u901a\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); // Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u53d6\u5f97 if ( const auto pro = ProController ( 0 )) { // \u5404\u30dc\u30bf\u30f3\u306e\u72b6\u614b\u3092\u8868\u793a Print << U \"A: \" << pro . buttonA . pressed (); Print << U \"B: \" << pro . buttonB . pressed (); Print << U \"X: \" << pro . buttonX . pressed (); Print << U \"Y: \" << pro . buttonY . pressed (); Print << U \"L: \" << pro . buttonL . pressed (); Print << U \"R: \" << pro . buttonR . pressed (); Print << U \"ZL: \" << pro . buttonZL . pressed (); Print << U \"ZR: \" << pro . buttonZR . pressed (); Print << U \"-: \" << pro . buttonMinus . pressed (); Print << U \"+: \" << pro . buttonPlus . pressed (); Print << U \"LS: \" << pro . buttonLStick . pressed (); Print << U \"RS: \" << pro . buttonRStick . pressed (); Print << U \"Screenshot: \" << pro . buttonScreenshot . pressed (); Print << U \"Home: \" << pro . buttonHome . pressed (); Print << U \"LStick: \" << pro . LStick (); Print << U \"RStick: \" << pro . RStick (); Print << U \"POV: \" << pro . povD8 (); } else { Print << U \"No Pro Controller found\" ; } } }","title":"Pro \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc"},{"location":"reference/gamepad/#_1","text":"\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u6c4e\u7528\u7684\u306a\u30af\u30e9\u30b9\u304c Gamepad \u3067\u3059\u3002\u30e6\u30fc\u30b6\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f Gamepad . MaxUserCount - 1 \u3067\u5b9a\u7fa9\u3055\u308c\u308b 15 \u304c\u6700\u5927\u5024\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 800 , 680 ); size_t userIndex = 0 ; const Array < String > indices = Iota ( Gamepad . MaxUserCount ). map ( Format ); while ( System :: Update ()) { ClearPrint (); if ( const auto gamepad = Gamepad ( userIndex )) { Print << U \"[{}] {}\" _fmt ( gamepad . getInfo (). index , gamepad . getInfo (). name ); for ( auto [ i , button ] : Indexed ( gamepad . buttons )) { Print << U \"button{}: {}\" _fmt ( i , button . pressed ()); } for ( auto [ i , axe ] : Indexed ( gamepad . axes )) { Print << U \"axe{}: {}\" _fmt ( i , axe ); } Print << U \"POV: \" << gamepad . povD8 (); } SimpleGUI :: RadioButtons ( userIndex , indices , Vec2 ( 500 , 20 )); } }","title":"\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9"},{"location":"reference/gamepad/#_2","text":"# include <Siv3D.hpp> void Main () { for ( const auto & info : System :: EnumerateGamepads ()) { Print << U \"[{}] {}\" _fmt ( info . index , info . name ); } while ( System :: Update ()) { } }","title":"\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u306e\u5217\u6319"},{"location":"reference/json/","text":"JSON File \u00b6 Loading dataset from a JSON file \u00b6 # include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"JSON file"},{"location":"reference/json/#json-file","text":"","title":"JSON File"},{"location":"reference/json/#loading-dataset-from-a-json-file","text":"# include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"Loading dataset from a JSON file"},{"location":"reference/kd-tree/","text":"kd-tree \u00b6 \u534a\u5f84\u306b\u3088\u308b\u63a2\u7d22\u3068 k \u8fd1\u508d\u6cd5\u306b\u3088\u308b\u63a2\u7d22 \u00b6 # include <Siv3D.hpp> struct Unit { Circle circle ; ColorF color ; void draw () const { circle . draw ( color ); } }; // Unit \u3092 KDTree \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30c0\u30d7\u30bf struct UnitAdpater : KDTreeAdapter < Array < Unit > , Vec2 , double , 2 > { static const element_type * GetPointer ( const point_type & point ) { return & point . x ; } static element_type GetElement ( const dataset_type & dataset , size_t index , size_t dim ) { return dataset [ index ]. circle . center . elem ( dim ); } static element_type DistanceSq ( const dataset_type & dataset , size_t index , const element_type * other ) { return dataset [ index ]. circle . center . distanceFromSq ( Vec2 ( other [ 0 ], other [ 1 ])); } }; void Main () { // 4000 \u500b\u306e Unit \u3092\u751f\u6210 Array < Unit > units ; for ( size_t i = 0 ; i < 4000 ; ++ i ) { Unit unit ; unit . circle = Circle ( RandomVec2 ( Circle ( 0 , 0 , 100 )), 0.25 ); unit . color = RandomColorF (); units << unit ; } // kd-tree \u3092\u69cb\u7bc9 KDTree < UnitAdpater > kdTree ( units ); // \u63a2\u7d22\u306e\u7a2e\u985e\uff08\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff09 size_t searchTypeIndex = 0 ; // radius search \u3059\u308b\u969b\u306e\u63a2\u7d22\u8ddd\u96e2 double searchDistance = 4.0 ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 24 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); // \u753b\u9762\u5185\u306e\u30e6\u30cb\u30c3\u30c8\u3060\u3051\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u57fa\u6e96\u306e\u9577\u65b9\u5f62 const RectF viewRect = camera . getRegion (); const RectF viewRectScaled = viewRect . scaledAt ( viewRect . center (), 1.2 ); { auto t = camera . createTransformer (); const Vec2 cursorPos = Cursor :: PosF (); if ( searchTypeIndex == 0 ) // radius search { Circle ( cursorPos , searchDistance ). draw ( ColorF ( 1.0 , 0.2 )); // searchDistance \u4ee5\u5185\u306e\u8ddd\u96e2\u306b\u3042\u308b Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . radiusSearch ( cursorPos , searchDistance )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } else // k-NN search { const size_t k = ( searchTypeIndex == 1 ) ? 1 : 5 ; // \u6700\u3082\u8fd1\u3044 k \u500b\u306e Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . knnSearch ( k , cursorPos )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } // \u30e6\u30cb\u30c3\u30c8\u3092\u63cf\u753b for ( const auto & unit : units ) { // \u63cf\u753b\u8ca0\u8377\u524a\u6e1b\u306e\u305f\u3081\u3001\u753b\u9762\u5185 (viewRectScaled) \u306b\u7121\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7 if ( ! unit . circle . center . intersects ( viewRectScaled )) { continue ; } unit . draw (); } } SimpleGUI :: RadioButtons ( searchTypeIndex , { U \"radius\" , U \"k-NN (k=1)\" , U \"k-NN (k=5)\" }, Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"searchDistance\" , searchDistance , 0.0 , 20.0 , Vec2 ( 180 , 20 ), 160 , 120 , ( searchTypeIndex == 0 )); if ( SimpleGUI :: Button ( U \"Move units\" , Vec2 ( 180 , 60 ))) { // Unit \u3092\u30e9\u30f3\u30c0\u30e0\u306b\u79fb\u52d5 for ( auto & unit : units ) { unit . circle . moveBy ( RandomVec2 ( 0.5 )); } // Unit \u306e\u5ea7\u6a19\u304c\u66f4\u65b0\u3055\u308c\u305f\u306e\u3067 kd-tree \u3092\u518d\u69cb\u7bc9 kdTree . rebuildIndex (); } camera . draw ( Palette :: Orange ); } }","title":"kd-tree"},{"location":"reference/kd-tree/#kd-tree","text":"","title":"kd-tree"},{"location":"reference/kd-tree/#k","text":"# include <Siv3D.hpp> struct Unit { Circle circle ; ColorF color ; void draw () const { circle . draw ( color ); } }; // Unit \u3092 KDTree \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30a2\u30c0\u30d7\u30bf struct UnitAdpater : KDTreeAdapter < Array < Unit > , Vec2 , double , 2 > { static const element_type * GetPointer ( const point_type & point ) { return & point . x ; } static element_type GetElement ( const dataset_type & dataset , size_t index , size_t dim ) { return dataset [ index ]. circle . center . elem ( dim ); } static element_type DistanceSq ( const dataset_type & dataset , size_t index , const element_type * other ) { return dataset [ index ]. circle . center . distanceFromSq ( Vec2 ( other [ 0 ], other [ 1 ])); } }; void Main () { // 4000 \u500b\u306e Unit \u3092\u751f\u6210 Array < Unit > units ; for ( size_t i = 0 ; i < 4000 ; ++ i ) { Unit unit ; unit . circle = Circle ( RandomVec2 ( Circle ( 0 , 0 , 100 )), 0.25 ); unit . color = RandomColorF (); units << unit ; } // kd-tree \u3092\u69cb\u7bc9 KDTree < UnitAdpater > kdTree ( units ); // \u63a2\u7d22\u306e\u7a2e\u985e\uff08\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff09 size_t searchTypeIndex = 0 ; // radius search \u3059\u308b\u969b\u306e\u63a2\u7d22\u8ddd\u96e2 double searchDistance = 4.0 ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 24 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); // \u753b\u9762\u5185\u306e\u30e6\u30cb\u30c3\u30c8\u3060\u3051\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u57fa\u6e96\u306e\u9577\u65b9\u5f62 const RectF viewRect = camera . getRegion (); const RectF viewRectScaled = viewRect . scaledAt ( viewRect . center (), 1.2 ); { auto t = camera . createTransformer (); const Vec2 cursorPos = Cursor :: PosF (); if ( searchTypeIndex == 0 ) // radius search { Circle ( cursorPos , searchDistance ). draw ( ColorF ( 1.0 , 0.2 )); // searchDistance \u4ee5\u5185\u306e\u8ddd\u96e2\u306b\u3042\u308b Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . radiusSearch ( cursorPos , searchDistance )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } else // k-NN search { const size_t k = ( searchTypeIndex == 1 ) ? 1 : 5 ; // \u6700\u3082\u8fd1\u3044 k \u500b\u306e Unit \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97 for ( auto index : kdTree . knnSearch ( k , cursorPos )) { Line ( cursorPos , units [ index ]. circle . center ). draw ( 0.1 ); } } // \u30e6\u30cb\u30c3\u30c8\u3092\u63cf\u753b for ( const auto & unit : units ) { // \u63cf\u753b\u8ca0\u8377\u524a\u6e1b\u306e\u305f\u3081\u3001\u753b\u9762\u5185 (viewRectScaled) \u306b\u7121\u3051\u308c\u3070\u30b9\u30ad\u30c3\u30d7 if ( ! unit . circle . center . intersects ( viewRectScaled )) { continue ; } unit . draw (); } } SimpleGUI :: RadioButtons ( searchTypeIndex , { U \"radius\" , U \"k-NN (k=1)\" , U \"k-NN (k=5)\" }, Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"searchDistance\" , searchDistance , 0.0 , 20.0 , Vec2 ( 180 , 20 ), 160 , 120 , ( searchTypeIndex == 0 )); if ( SimpleGUI :: Button ( U \"Move units\" , Vec2 ( 180 , 60 ))) { // Unit \u3092\u30e9\u30f3\u30c0\u30e0\u306b\u79fb\u52d5 for ( auto & unit : units ) { unit . circle . moveBy ( RandomVec2 ( 0.5 )); } // Unit \u306e\u5ea7\u6a19\u304c\u66f4\u65b0\u3055\u308c\u305f\u306e\u3067 kd-tree \u3092\u518d\u69cb\u7bc9 kdTree . rebuildIndex (); } camera . draw ( Palette :: Orange ); } }","title":"\u534a\u5f84\u306b\u3088\u308b\u63a2\u7d22\u3068 k \u8fd1\u508d\u6cd5\u306b\u3088\u308b\u63a2\u7d22"},{"location":"reference/math-parser/","text":"Math parser \u00b6 \u6570\u5f0f\u306e\u8a08\u7b97 \u00b6 Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"Math parser"},{"location":"reference/math-parser/#math-parser","text":"","title":"Math parser"},{"location":"reference/math-parser/#_1","text":"Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"\u6570\u5f0f\u306e\u8a08\u7b97"},{"location":"reference/navmesh/","text":"NavMesh \u00b6 2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh \u00b6 # include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"NavMesh"},{"location":"reference/navmesh/#navmesh","text":"","title":"NavMesh"},{"location":"reference/navmesh/#2d-navmesh","text":"# include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh"},{"location":"reference/network/","text":"Network \u00b6 1 \u5bfe 1 \u306e TCP \u901a\u4fe1 \u00b6 \u30b5\u30fc\u30d0\u5074 \u00b6 # include <Siv3D.hpp> void Main () { constexpr uint16 port = 50000 ; bool connected = false ; TCPServer server ; server . startAccept ( port ); Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); Point clientPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point serverPlayerPos = Cursor :: Pos (); if ( server . hasSession ()) { if ( ! connected ) // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a { connected = true ; Window :: SetTitle ( U \"TCPServer: Connection established!\" ); } // \u9001\u4fe1 server . send ( serverPlayerPos ); // \u53d7\u4fe1 while ( server . read ( clientPlayerPos )); } // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5207\u65ad if ( connected && ! server . hasSession ()) { // \u5207\u65ad server . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); server . startAccept ( port ); } Circle ( serverPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( clientPlayerPos , 10 ). draw ( Palette :: Orange ); } } \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074 \u00b6 # include <Siv3D.hpp> void Main () { const IPv4 ip = IPv4 :: Localhost (); constexpr uint16 port = 50000 ; bool connected = false ; TCPClient client ; client . connect ( ip , port ); Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); Point serverPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point clientPlayerPos = Cursor :: Pos (); if ( client . isConnected ()) { if ( ! connected ) { connected = true ; Window :: SetTitle ( U \"TCPClient: Connection established!\" ); } // \u9001\u4fe1 client . send ( clientPlayerPos ); // \u53d7\u4fe1 while ( client . read ( serverPlayerPos )); } if ( client . hasError ()) // \u5207\u65ad/\u63a5\u7d9a\u30a8\u30e9\u30fc { client . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); client . connect ( ip , port ); } Circle ( clientPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( serverPlayerPos , 30 ). draw ( Palette :: Orange ); } }","title":"Network"},{"location":"reference/network/#network","text":"","title":"Network"},{"location":"reference/network/#1-1-tcp","text":"","title":"1 \u5bfe 1 \u306e TCP \u901a\u4fe1"},{"location":"reference/network/#_1","text":"# include <Siv3D.hpp> void Main () { constexpr uint16 port = 50000 ; bool connected = false ; TCPServer server ; server . startAccept ( port ); Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); Point clientPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point serverPlayerPos = Cursor :: Pos (); if ( server . hasSession ()) { if ( ! connected ) // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a { connected = true ; Window :: SetTitle ( U \"TCPServer: Connection established!\" ); } // \u9001\u4fe1 server . send ( serverPlayerPos ); // \u53d7\u4fe1 while ( server . read ( clientPlayerPos )); } // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5207\u65ad if ( connected && ! server . hasSession ()) { // \u5207\u65ad server . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPServer: Waiting for connection...\" ); server . startAccept ( port ); } Circle ( serverPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( clientPlayerPos , 10 ). draw ( Palette :: Orange ); } }","title":"\u30b5\u30fc\u30d0\u5074"},{"location":"reference/network/#_2","text":"# include <Siv3D.hpp> void Main () { const IPv4 ip = IPv4 :: Localhost (); constexpr uint16 port = 50000 ; bool connected = false ; TCPClient client ; client . connect ( ip , port ); Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); Point serverPlayerPos ( 0 , 0 ); while ( System :: Update ()) { const Point clientPlayerPos = Cursor :: Pos (); if ( client . isConnected ()) { if ( ! connected ) { connected = true ; Window :: SetTitle ( U \"TCPClient: Connection established!\" ); } // \u9001\u4fe1 client . send ( clientPlayerPos ); // \u53d7\u4fe1 while ( client . read ( serverPlayerPos )); } if ( client . hasError ()) // \u5207\u65ad/\u63a5\u7d9a\u30a8\u30e9\u30fc { client . disconnect (); connected = false ; Window :: SetTitle ( U \"TCPClient: Waiting for connection...\" ); client . connect ( ip , port ); } Circle ( clientPlayerPos , 30 ). draw ( Palette :: Skyblue ); Circle ( serverPlayerPos , 30 ). draw ( Palette :: Orange ); } }","title":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074"},{"location":"reference/nlp/","text":"Natural language processing \u00b6 \u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"Natural language processing"},{"location":"reference/nlp/#natural-language-processing","text":"","title":"Natural language processing"},{"location":"reference/nlp/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"\u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790"},{"location":"reference/objdetection/","text":"Object detection \u00b6 \u30a4\u30e9\u30b9\u30c8\u304b\u3089\u306e\u9854\u691c\u51fa \u00b6 IIllustration by \u53e4\u53e4\u7c73 # include <Siv3D.hpp> void Main () { Texture texture ; double scale = 1.0 ; Array < Rect > detectedFaces ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u30a4\u30e9\u30b9\u30c8\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: AnimeFace ); // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); // \u753b\u50cf\u306e\u62e1\u5927\u7e2e\u5c0f\u7387 scale = static_cast < double > ( texture . width ()) / image . width (); } } if ( texture ) { texture . draw ( 0 , 0 ); // \u9854\u306e\u9818\u57df\u306e\u5ea7\u6a19\u3092\u8868\u793a\u306b\u5408\u308f\u305b\u308b Transformer2D t ( Mat3x2 :: Scale ( scale )); for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 / scale , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } } } \u30ab\u30e1\u30e9\u304b\u3089\u306e\u9854\u691c\u51fa \u00b6 # include <Siv3D.hpp> void Main () { Webcam webcam ( 0 ); // \u5927\u304d\u3044\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304b\u3089\u9854\u3092\u691c\u51fa\u3059\u308b\u306e\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067 640x480 \u524d\u5f8c\u3067 webcam . setResolution ( Size ( 640 , 480 )); const Size resolution = webcam . getResolution (); if ( ! webcam . start ()) { throw Error ( U \"Webcam not available.\" ); } Window :: Resize ( resolution ); Image image ; DynamicTexture texture ; Array < Rect > detectedFaces ; // \u753b\u50cf\u4e2d\u306e\u9854\u306e\u6700\u4f4e\u30b5\u30a4\u30ba\u306e\u76ee\u5b89 const Size minimumFaceSize = Size :: All ( image . height () / 8 ); while ( System :: Update ()) { if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); // \u753b\u50cf\u5185\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: Face , 3 , minimumFaceSize ); texture . fillIfNotBusy ( image ); } if ( texture ) { texture . draw (); } for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } }","title":"Object detection"},{"location":"reference/objdetection/#object-detection","text":"","title":"Object detection"},{"location":"reference/objdetection/#_1","text":"IIllustration by \u53e4\u53e4\u7c73 # include <Siv3D.hpp> void Main () { Texture texture ; double scale = 1.0 ; Array < Rect > detectedFaces ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u30a4\u30e9\u30b9\u30c8\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: AnimeFace ); // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); // \u753b\u50cf\u306e\u62e1\u5927\u7e2e\u5c0f\u7387 scale = static_cast < double > ( texture . width ()) / image . width (); } } if ( texture ) { texture . draw ( 0 , 0 ); // \u9854\u306e\u9818\u57df\u306e\u5ea7\u6a19\u3092\u8868\u793a\u306b\u5408\u308f\u305b\u308b Transformer2D t ( Mat3x2 :: Scale ( scale )); for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 / scale , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } } }","title":"\u30a4\u30e9\u30b9\u30c8\u304b\u3089\u306e\u9854\u691c\u51fa"},{"location":"reference/objdetection/#_2","text":"# include <Siv3D.hpp> void Main () { Webcam webcam ( 0 ); // \u5927\u304d\u3044\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304b\u3089\u9854\u3092\u691c\u51fa\u3059\u308b\u306e\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067 640x480 \u524d\u5f8c\u3067 webcam . setResolution ( Size ( 640 , 480 )); const Size resolution = webcam . getResolution (); if ( ! webcam . start ()) { throw Error ( U \"Webcam not available.\" ); } Window :: Resize ( resolution ); Image image ; DynamicTexture texture ; Array < Rect > detectedFaces ; // \u753b\u50cf\u4e2d\u306e\u9854\u306e\u6700\u4f4e\u30b5\u30a4\u30ba\u306e\u76ee\u5b89 const Size minimumFaceSize = Size :: All ( image . height () / 8 ); while ( System :: Update ()) { if ( webcam . hasNewFrame ()) { webcam . getFrame ( image ); // \u753b\u50cf\u5185\u306e\u9854\u3092\u691c\u51fa detectedFaces = image . detectObjects ( HaarCascade :: Face , 3 , minimumFaceSize ); texture . fillIfNotBusy ( image ); } if ( texture ) { texture . draw (); } for ( const auto & detectedFace : detectedFaces ) { detectedFace . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 , Periodic :: Sine0_1 ( 1.5 s ))); } } }","title":"\u30ab\u30e1\u30e9\u304b\u3089\u306e\u9854\u691c\u51fa"},{"location":"reference/twitter/","text":"Twitter \u00b6 \u30c4\u30a4\u30fc\u30c8\u306e\u6295\u7a3f\u753b\u9762\u3092\u8868\u793a \u00b6 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D! #Siv3D\" ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Tweet\" , Vec2 ( 20 , 20 ))) { // text \u3092\u3064\u3076\u3084\u304f\u30c4\u30a4\u30fc\u30c8\u6295\u7a3f\u753b\u9762\u3092\u958b\u304f Twitter :: OpenTweetWindow ( text ); } } }","title":"Twitter"},{"location":"reference/twitter/#twitter","text":"","title":"Twitter"},{"location":"reference/twitter/#_1","text":"# include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D! #Siv3D\" ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Tweet\" , Vec2 ( 20 , 20 ))) { // text \u3092\u3064\u3076\u3084\u304f\u30c4\u30a4\u30fc\u30c8\u6295\u7a3f\u753b\u9762\u3092\u958b\u304f Twitter :: OpenTweetWindow ( text ); } } }","title":"\u30c4\u30a4\u30fc\u30c8\u306e\u6295\u7a3f\u753b\u9762\u3092\u8868\u793a"},{"location":"reference/unicode/","text":"Text encoding conversion \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f String \u3092\u6a19\u6e96\u306e\u6587\u5b57\u5217\u578b\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u4e92\u63db\u306e\u305f\u3081\u306b\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5909\u63db\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 std::string, std::wstring, String \u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e std::string \u304b\u3089 std::wstring \u304b\u3089 String \u304b\u3089 std::string \u3078 - N/A String::narrow() std::wstring \u3078 N/A - String::toWstr() String \u3078 Unicode::Widen() Unicode::FromWString() - const char* \u3078 std::string::c_str() N/A String::narrow().c_str() const wchar_t* \u3078 N/A std::wstring::c_str() String::toWstr().c_str() String \u304b\u3089 Unicode \u3078\u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e String \u304b\u3089 std::string (UTF-8) \u3078 String::toUTF8() std::u16string (UTF-16) \u3078 String::toUTF16() std::u32string (UTF-32) \u3078 String::toUTF32() Unicode \u304b\u3089 String \u3078\u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 String \u3078 Unicode::FromUTF8() Unicode::FromUTF16() Unicode::FromUTF32() Unicode \u306e\u5909\u63db \u00b6 \u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 std::string (UTF-8) \u3078 - Unicode::UTF16ToUTF8() Unicode::UTF32ToUTF8() std::u16string (UTF-16) \u3078 Unicode::UTF8ToUTF16() - Unicode::UTF32ToUTF16() std::u32string (UTF-32) \u3078 Unicode::UTF8ToUTF32() Unicode::UTF16ToUTF32() - ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408 \u00b6 \u30c6\u30ad\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u304c ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3068\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 std::string_view \u2192 String \u3078\u306e\u5909\u63db: Unicode :: WidenAscii () StringView \u2192 std::string \u3078\u306e\u5909\u63db: Unicode :: NarrowAscii () \u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406 \u00b6 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u305f\u3081\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u3067\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 Translator_UTF8toUTF32 Translator_UTF16toUTF32 Translator_UTF32toUTF8 Translator_UTF32toUTF16","title":"Text encoding conversion"},{"location":"reference/unicode/#text-encoding-conversion","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f String \u3092\u6a19\u6e96\u306e\u6587\u5b57\u5217\u578b\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u4e92\u63db\u306e\u305f\u3081\u306b\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5909\u63db\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"Text encoding conversion"},{"location":"reference/unicode/#stdstring-stdwstring-string","text":"\u5909\u63db\u306e\u7a2e\u985e std::string \u304b\u3089 std::wstring \u304b\u3089 String \u304b\u3089 std::string \u3078 - N/A String::narrow() std::wstring \u3078 N/A - String::toWstr() String \u3078 Unicode::Widen() Unicode::FromWString() - const char* \u3078 std::string::c_str() N/A String::narrow().c_str() const wchar_t* \u3078 N/A std::wstring::c_str() String::toWstr().c_str()","title":"std::string, std::wstring, String \u306e\u5909\u63db"},{"location":"reference/unicode/#string-unicode","text":"\u5909\u63db\u306e\u7a2e\u985e String \u304b\u3089 std::string (UTF-8) \u3078 String::toUTF8() std::u16string (UTF-16) \u3078 String::toUTF16() std::u32string (UTF-32) \u3078 String::toUTF32()","title":"String \u304b\u3089 Unicode \u3078\u306e\u5909\u63db"},{"location":"reference/unicode/#unicode-string","text":"\u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 String \u3078 Unicode::FromUTF8() Unicode::FromUTF16() Unicode::FromUTF32()","title":"Unicode \u304b\u3089 String \u3078\u306e\u5909\u63db"},{"location":"reference/unicode/#unicode","text":"\u5909\u63db\u306e\u7a2e\u985e std::string (UTF-8) \u304b\u3089 std::u16string (UTF-16) \u304b\u3089 std::u32string (UTF-32) \u304b\u3089 std::string (UTF-8) \u3078 - Unicode::UTF16ToUTF8() Unicode::UTF32ToUTF8() std::u16string (UTF-16) \u3078 Unicode::UTF8ToUTF16() - Unicode::UTF32ToUTF16() std::u32string (UTF-32) \u3078 Unicode::UTF8ToUTF32() Unicode::UTF16ToUTF32() -","title":"Unicode \u306e\u5909\u63db"},{"location":"reference/unicode/#ascii","text":"\u30c6\u30ad\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u304c ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3068\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 std::string_view \u2192 String \u3078\u306e\u5909\u63db: Unicode :: WidenAscii () StringView \u2192 std::string \u3078\u306e\u5909\u63db: Unicode :: NarrowAscii ()","title":"ASCII \u6587\u5b57\u306e\u307f\u306e\u5834\u5408"},{"location":"reference/unicode/#_1","text":"\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u305f\u3081\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u3067\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 Translator_UTF8toUTF32 Translator_UTF16toUTF32 Translator_UTF32toUTF8 Translator_UTF32toUTF16","title":"\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406"},{"location":"sample/app/","text":"Application \u00b6 Sketch \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } Piano \u00b6 # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s ); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } } Kaleidoscope sketch \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } } Image to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } } Sketch to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } Audio player \u00b6 # include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } } Text to Polygon \u00b6 # include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } } Mandelbrot set \u00b6 # include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } } Game of life editor \u00b6 # include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } } QR encoder \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } } Dot sketch \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } } Clock \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } } JPEG Glitch \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } } FFT from microphone \u00b6 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } Sketch to P2Body \u00b6 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } } Image viwer \u00b6 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); } } if ( texture ) { texture . drawAt ( Scene :: Center ()); } } }","title":"Application"},{"location":"sample/app/#application","text":"","title":"Application"},{"location":"sample/app/#sketch","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch"},{"location":"sample/app/#piano","text":"# include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s ); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"Piano"},{"location":"sample/app/#kaleidoscope-sketch","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } }","title":"Kaleidoscope sketch"},{"location":"sample/app/#image-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } }","title":"Image to Polygon"},{"location":"sample/app/#sketch-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch to Polygon"},{"location":"sample/app/#audio-player","text":"# include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } }","title":"Audio player"},{"location":"sample/app/#text-to-polygon","text":"# include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } }","title":"Text to Polygon"},{"location":"sample/app/#mandelbrot-set","text":"# include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } }","title":"Mandelbrot set"},{"location":"sample/app/#game-of-life-editor","text":"# include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } }","title":"Game of life editor"},{"location":"sample/app/#qr-encoder","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } }","title":"QR encoder"},{"location":"sample/app/#dot-sketch","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } }","title":"Dot sketch"},{"location":"sample/app/#clock","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } }","title":"Clock"},{"location":"sample/app/#jpeg-glitch","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } }","title":"JPEG Glitch"},{"location":"sample/app/#fft-from-microphone","text":"# include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( unspecified ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"FFT from microphone"},{"location":"sample/app/#sketch-to-p2body","text":"# include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } }","title":"Sketch to P2Body"},{"location":"sample/app/#image-viwer","text":"# include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30d5\u30a1\u30a4\u30eb\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f if ( DragDrop :: HasNewFilePaths ()) { // \u30d5\u30a1\u30a4\u30eb\u3092\u753b\u50cf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3081\u305f if ( const Image image { DragDrop :: GetDroppedFilePaths (). front (). path }) { // \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306b\u5408\u3046\u3088\u3046\u306b\u753b\u50cf\u3092\u62e1\u5927\u7e2e\u5c0f texture = Texture ( image . fitted ( Scene :: Size ())); } } if ( texture ) { texture . drawAt ( Scene :: Center ()); } } }","title":"Image viwer"},{"location":"sample/game-template/","text":"Game template \u00b6 Game project template \u00b6 \u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u958b\u767a\u3092\u3059\u3050\u306b\u59cb\u3081\u3089\u308c\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059\u3002 \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002 https://github.com/Siv3D/GameTemplate \u6a5f\u80fd \u00b6 \u57fa\u672c\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5206\u5272\u3068 SceneManager \u5bfe\u5fdc\u6e08\u307f OpenSiv3D \u7528\u306e .gitignore \u304c\u4ed8\u5c5e Visual Studio \u7528\u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3068\u3001Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u68b1\u3057\u3001\u3069\u3061\u3089\u304b\u3089\u3067\u3082\u958b\u767a\u53ef\u80fd \u4f7f\u7528\u624b\u9806 \u00b6 \u6700\u65b0\u306e OpenSiv3D SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059 macOS \u306e\u5834\u5408\u3001\u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e README . md \u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u3001SDK \u306e include \u3068 lib \u30d5\u30a9\u30eb\u30c0\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059 Visual Studio \u306e\u5834\u5408\u306f\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3001Xcode \u306e\u5834\u5408\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u307e\u3059 Scene management \u00b6 \u958b\u767a\u521d\u671f\u306b\u306f\u958b\u767a\u901f\u5ea6\u304c\u91cd\u8981\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b Main.cpp \u306b\u3059\u3079\u3066\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"\u306f\u3058\u3081\u308b\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"\u304a\u308f\u308b\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } } Typing game \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"Geme template"},{"location":"sample/game-template/#game-template","text":"","title":"Game template"},{"location":"sample/game-template/#game-project-template","text":"\u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u958b\u767a\u3092\u3059\u3050\u306b\u59cb\u3081\u3089\u308c\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059\u3002 \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002 https://github.com/Siv3D/GameTemplate","title":"Game project template"},{"location":"sample/game-template/#_1","text":"\u57fa\u672c\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5206\u5272\u3068 SceneManager \u5bfe\u5fdc\u6e08\u307f OpenSiv3D \u7528\u306e .gitignore \u304c\u4ed8\u5c5e Visual Studio \u7528\u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3068\u3001Xcode \u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u68b1\u3057\u3001\u3069\u3061\u3089\u304b\u3089\u3067\u3082\u958b\u767a\u53ef\u80fd","title":"\u6a5f\u80fd"},{"location":"sample/game-template/#_2","text":"\u6700\u65b0\u306e OpenSiv3D SDK \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059 macOS \u306e\u5834\u5408\u3001\u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e README . md \u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u3001SDK \u306e include \u3068 lib \u30d5\u30a9\u30eb\u30c0\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059 Visual Studio \u306e\u5834\u5408\u306f\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u3001Xcode \u306e\u5834\u5408\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u307e\u3059","title":"\u4f7f\u7528\u624b\u9806"},{"location":"sample/game-template/#scene-management","text":"\u958b\u767a\u521d\u671f\u306b\u306f\u958b\u767a\u901f\u5ea6\u304c\u91cd\u8981\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b Main.cpp \u306b\u3059\u3079\u3066\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"\u306f\u3058\u3081\u308b\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"\u304a\u308f\u308b\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } }","title":"Scene management"},{"location":"sample/game-template/#typing-game","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"Typing game"},{"location":"sample/game/","text":"Game \u00b6 Breakout \u00b6 # include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } } Pinball \u00b6 # include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } } Emoji Tower \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } Shooter \u00b6 # include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } } 15 puzzle \u00b6 # include <Siv3D.hpp> bool Swappable ( int32 a , int32 b ) { return ( a / 4 == b / 4 && Abs ( a - b ) == 1 ) || ( a % 4 == b % 4 && Abs ( a - b ) == 4 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); constexpr int32 cellSize = 100 ; constexpr Point offset ( 60 , 40 ); // \u30c0\u30a4\u30a2\u30ed\u30b0\u304b\u3089\u753b\u50cf\u3092\u9078\u629e const Image image = Dialog :: OpenImage (); // \u6b63\u65b9\u5f62\u306b\u5207\u308a\u629c\u304f const Texture texture ( image . squareClipped (), TextureDesc :: Mipped ); Optional < int32 > grabbed ; // \u30e9\u30f3\u30c0\u30e0\u306a\u64cd\u4f5c\u3067\u30d1\u30ba\u30eb\u3092\u30b7\u30e3\u30c3\u30d5\u30eb Array < int32 > pieces = Range ( 0 , 15 ); { int32 pos15 = 15 ; for ( int32 i = 0 ; i < 1000 ; ++ i ) { const int32 to = pos15 + Sample ({ - 4 , - 1 , 1 , 4 }); if ( InRange ( to , 0 , 15 ) && Swappable ( pos15 , to )) { std :: swap ( pieces [ pos15 ], pieces [ to ]); pos15 = to ; } } } while ( System :: Update ()) { Rect ( offset , 4 * cellSize ) . drawShadow ( Vec2 ( 0 , 2 ), 12 , 8 ) . draw ( ColorF ( 0.25 )) . drawFrame ( 0 , 8 , ColorF ( 0.3 , 0.5 , 0.7 )); if ( ! MouseL . pressed ()) { grabbed = none ; } for ( auto i : step ( 16 )) { const int32 pieceID = pieces [ i ]; const Rect rect = Rect ( i % 4 * cellSize , i / 4 * cellSize , cellSize ). movedBy ( offset ); if ( pieceID == 15 ) { if ( grabbed && rect . mouseOver () && Swappable ( i , grabbed . value ())) { std :: swap ( pieces [ i ], pieces [ grabbed . value ()]); grabbed = i ; } continue ; } if ( rect . leftClicked ()) { grabbed = i ; } rect ( texture . uv ( pieceID % 4 * 0.25 , pieceID / 4 * 0.25 , 0.25 , 0.25 )) . draw () . drawFrame ( 1 , 0 , ColorF ( 1.0 , 0.75 )); if ( grabbed == i ) { rect . draw ( ColorF ( 1.0 , 0.5 , 0.0 , 0.3 )); } if ( rect . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } texture . resized ( 180 ) . draw ( offset . x + cellSize * 4 + 40 , offset . y ) . drawFrame ( 0 , 4 , ColorF ( 0.3 , 0.5 , 0.7 )); } } Number chain \u00b6 # include <Siv3D.hpp> struct Bubble { // \u30d0\u30d6\u30eb\u306e\u5186\u306e\u534a\u5f84 static constexpr int32 CircleR = 30 ; // \u30d0\u30d6\u30eb\u306e\u5186 Circle circle ; // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 int32 index ; // \u63a5\u7d9a\u6e08\u307f\u306a\u3089 true \u306b bool connected = false ; void draw () const { if ( connected ) { circle . drawShadow ( Vec2 ( 1 , 2 ), 10 , 3 ). draw () . drawFrame ( 2 , 0 , ColorF ( 0.3 , 0.6 , 1.0 )); } else { circle . draw (); } FontAsset ( U \"Bubble\" )( index + 1 ). drawAt ( circle . center , ColorF ( 0.25 )); } }; // \u30d0\u30d6\u30eb\u3069\u3046\u3057\u304c\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af bool CheckBubbles ( const Array < Bubble >& bubbles ) { for ( auto i : step ( bubbles . size ())) { for ( auto k : step ( bubbles . size ())) { // \u91cd\u306a\u3063\u3066\u3044\u308b if ( i != k && bubbles [ i ]. circle . stretched ( 5 ). intersects ( bubbles [ k ]. circle . stretched ( 5 ))) { return false ; } } } return true ; } // \u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u30d0\u30d6\u30eb\u3092\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u751f\u6210 Array < Bubble > MakeBubbles ( int32 count ) { Array < Bubble > bubbles ( count ); do { for ( auto i : step ( count )) { // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 bubbles [ i ]. index = i ; // \u30d0\u30d6\u30eb\u306e\u5186 bubbles [ i ]. circle . set ( RandomVec2 ( Circle ( Scene :: Center (), Scene :: Height () / 2 - Bubble :: CircleR )), Bubble :: CircleR ); } } while ( ! CheckBubbles ( bubbles )); return bubbles ; } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u30d0\u30d6\u30eb\u306e\u500b\u6570 constexpr int32 GetBubbleCount ( int32 level ) { return Min ( level , 15 ); } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u5236\u9650\u6642\u9593 constexpr double GetTime ( int32 level ) { return ( level <= 15 ) ? 8.0 : 8.0 - Min (( level - 15 ) * 0.05 , 2.0 ); } void Main () { Scene :: SetBackground ( Palette :: White ); FontAsset :: Register ( U \"Bubble\" , 36 , Typeface :: Medium ); Effect effect ; // \u52b9\u679c\u97f3\u3092\u4f5c\u6210 const Array < PianoKey > keys = { PianoKey :: C5 , PianoKey :: D5 , PianoKey :: E5 , PianoKey :: F5 , PianoKey :: G5 , PianoKey :: A5 , PianoKey :: B5 , PianoKey :: C6 , PianoKey :: D6 , PianoKey :: E6 , PianoKey :: F6 , PianoKey :: G6 , PianoKey :: A6 , PianoKey :: B6 , PianoKey :: C7 }; const Array < Audio > sounds = keys . map ([]( auto k ) { return Audio ( GMInstrument :: Glockenspiel , k , 0.3 s ); }); // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30ec\u30d9\u30eb int32 level = 1 ; // \u63a5\u7d9a\u6570 int32 connected = 0 ; // \u6b8b\u308a\u6642\u9593\u306e\u30bf\u30a4\u30de\u30fc Timer timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb Array < Bubble > bubbles = MakeBubbles ( GetBubbleCount ( level )); while ( System :: Update ()) { const double delta = Scene :: DeltaTime (); // \u5236\u9650\u6642\u9593\u3092\u8868\u3059\u80cc\u666f RectF ( Scene :: Size () * Vec2 ( 1 , timer . progress0_1 ())). draw ( HSV ( level * 30 , 0.3 , 0.9 )); for ( auto & bubble : bubbles ) { if (( bubble . index == connected ) && ! bubble . connected && bubble . circle . stretched ( 10 ). mouseOver ()) { // \u63a5\u7d9a\u6e08\u307f\u306b bubble . connected = true ; // \u63a5\u7d9a\u6570\u3092\u5897\u3084\u3059 ++ connected ; // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = Cursor :: Pos ()]( double t ) { Circle ( pos , Bubble :: CircleR + t * 200 ). drawFrame ( 2 , 0 , ColorF ( 0.2 , 0.5 , 1.0 , 1.0 - t * 2.5 )); return t < 0.4 ; }); // \u30d0\u30d6\u30eb\u306e\u6570\u5b57\u306b\u5fdc\u3058\u3066\u52b9\u679c\u97f3\u3092\u9cf4\u3089\u3059 sounds [ bubble . index ]. playOneShot ( 0.8 ); } // \u30d0\u30d6\u30eb\u3092\u5186\u5468\u306b\u6cbf\u3063\u3066\u79fb\u52d5 bubble . circle . center = OffsetCircular ( Scene :: Center (), bubble . circle . center ) . rotate (( IsEven ( bubble . index ) ? 20 _deg : - 20 _deg ) * delta ); } // \u30d0\u30d6\u30eb\u3092\u3059\u3079\u3066\u3064\u306a\u3050\u304b\u3001\u6642\u9593\u5207\u308c\u306b\u306a\u3063\u305f\u3089 if ( const bool failed = timer . reachedZero (); ( connected == GetBubbleCount ( level )) || failed ) { // \u30ec\u30d9\u30eb\u3092\u66f4\u65b0 level = failed ? 1 : ++ level ; // \u63a5\u7d9a\u6570\u3092\u30ea\u30bb\u30c3\u30c8 connected = 0 ; // \u5236\u9650\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8 timer = Timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb\u3092\u518d\u751f\u6210 bubbles = MakeBubbles ( GetBubbleCount ( level )); // \u30cf\u30a4\u30b9\u30b3\u30a2\u3092\u66f4\u65b0 highScore = Max ( highScore , level ); // \u30bf\u30a4\u30c8\u30eb\u3092\u66f4\u65b0 Window :: SetTitle ( U \"Level {} (High score: {})\" _fmt ( level , highScore )); } // \u30d0\u30d6\u30eb\u3092\u3064\u306a\u3050\u7dda for ( int32 i = 0 ; i < ( connected - 1 ); ++ i ) { Line ( bubbles [ i ]. circle . center , bubbles [ i + 1 ]. circle . center ). draw ( 3 , Palette :: Orange ); } // \u30d0\u30d6\u30eb\u3092\u63cf\u753b for ( const auto & bubble : bubbles ) { bubble . draw (); } effect . update (); } }","title":"Game"},{"location":"sample/game/#game","text":"","title":"Game"},{"location":"sample/game/#breakout","text":"# include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } }","title":"Breakout"},{"location":"sample/game/#pinball","text":"# include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } }","title":"Pinball"},{"location":"sample/game/#emoji-tower","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"Emoji Tower"},{"location":"sample/game/#shooter","text":"# include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } }","title":"Shooter"},{"location":"sample/game/#15-puzzle","text":"# include <Siv3D.hpp> bool Swappable ( int32 a , int32 b ) { return ( a / 4 == b / 4 && Abs ( a - b ) == 1 ) || ( a % 4 == b % 4 && Abs ( a - b ) == 4 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); constexpr int32 cellSize = 100 ; constexpr Point offset ( 60 , 40 ); // \u30c0\u30a4\u30a2\u30ed\u30b0\u304b\u3089\u753b\u50cf\u3092\u9078\u629e const Image image = Dialog :: OpenImage (); // \u6b63\u65b9\u5f62\u306b\u5207\u308a\u629c\u304f const Texture texture ( image . squareClipped (), TextureDesc :: Mipped ); Optional < int32 > grabbed ; // \u30e9\u30f3\u30c0\u30e0\u306a\u64cd\u4f5c\u3067\u30d1\u30ba\u30eb\u3092\u30b7\u30e3\u30c3\u30d5\u30eb Array < int32 > pieces = Range ( 0 , 15 ); { int32 pos15 = 15 ; for ( int32 i = 0 ; i < 1000 ; ++ i ) { const int32 to = pos15 + Sample ({ - 4 , - 1 , 1 , 4 }); if ( InRange ( to , 0 , 15 ) && Swappable ( pos15 , to )) { std :: swap ( pieces [ pos15 ], pieces [ to ]); pos15 = to ; } } } while ( System :: Update ()) { Rect ( offset , 4 * cellSize ) . drawShadow ( Vec2 ( 0 , 2 ), 12 , 8 ) . draw ( ColorF ( 0.25 )) . drawFrame ( 0 , 8 , ColorF ( 0.3 , 0.5 , 0.7 )); if ( ! MouseL . pressed ()) { grabbed = none ; } for ( auto i : step ( 16 )) { const int32 pieceID = pieces [ i ]; const Rect rect = Rect ( i % 4 * cellSize , i / 4 * cellSize , cellSize ). movedBy ( offset ); if ( pieceID == 15 ) { if ( grabbed && rect . mouseOver () && Swappable ( i , grabbed . value ())) { std :: swap ( pieces [ i ], pieces [ grabbed . value ()]); grabbed = i ; } continue ; } if ( rect . leftClicked ()) { grabbed = i ; } rect ( texture . uv ( pieceID % 4 * 0.25 , pieceID / 4 * 0.25 , 0.25 , 0.25 )) . draw () . drawFrame ( 1 , 0 , ColorF ( 1.0 , 0.75 )); if ( grabbed == i ) { rect . draw ( ColorF ( 1.0 , 0.5 , 0.0 , 0.3 )); } if ( rect . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } } texture . resized ( 180 ) . draw ( offset . x + cellSize * 4 + 40 , offset . y ) . drawFrame ( 0 , 4 , ColorF ( 0.3 , 0.5 , 0.7 )); } }","title":"15 puzzle"},{"location":"sample/game/#number-chain","text":"# include <Siv3D.hpp> struct Bubble { // \u30d0\u30d6\u30eb\u306e\u5186\u306e\u534a\u5f84 static constexpr int32 CircleR = 30 ; // \u30d0\u30d6\u30eb\u306e\u5186 Circle circle ; // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 int32 index ; // \u63a5\u7d9a\u6e08\u307f\u306a\u3089 true \u306b bool connected = false ; void draw () const { if ( connected ) { circle . drawShadow ( Vec2 ( 1 , 2 ), 10 , 3 ). draw () . drawFrame ( 2 , 0 , ColorF ( 0.3 , 0.6 , 1.0 )); } else { circle . draw (); } FontAsset ( U \"Bubble\" )( index + 1 ). drawAt ( circle . center , ColorF ( 0.25 )); } }; // \u30d0\u30d6\u30eb\u3069\u3046\u3057\u304c\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af bool CheckBubbles ( const Array < Bubble >& bubbles ) { for ( auto i : step ( bubbles . size ())) { for ( auto k : step ( bubbles . size ())) { // \u91cd\u306a\u3063\u3066\u3044\u308b if ( i != k && bubbles [ i ]. circle . stretched ( 5 ). intersects ( bubbles [ k ]. circle . stretched ( 5 ))) { return false ; } } } return true ; } // \u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u30d0\u30d6\u30eb\u3092\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u751f\u6210 Array < Bubble > MakeBubbles ( int32 count ) { Array < Bubble > bubbles ( count ); do { for ( auto i : step ( count )) { // \u30d0\u30d6\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 bubbles [ i ]. index = i ; // \u30d0\u30d6\u30eb\u306e\u5186 bubbles [ i ]. circle . set ( RandomVec2 ( Circle ( Scene :: Center (), Scene :: Height () / 2 - Bubble :: CircleR )), Bubble :: CircleR ); } } while ( ! CheckBubbles ( bubbles )); return bubbles ; } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u30d0\u30d6\u30eb\u306e\u500b\u6570 constexpr int32 GetBubbleCount ( int32 level ) { return Min ( level , 15 ); } // \u6307\u5b9a\u3057\u305f\u30ec\u30d9\u30eb\u306b\u304a\u3051\u308b\u5236\u9650\u6642\u9593 constexpr double GetTime ( int32 level ) { return ( level <= 15 ) ? 8.0 : 8.0 - Min (( level - 15 ) * 0.05 , 2.0 ); } void Main () { Scene :: SetBackground ( Palette :: White ); FontAsset :: Register ( U \"Bubble\" , 36 , Typeface :: Medium ); Effect effect ; // \u52b9\u679c\u97f3\u3092\u4f5c\u6210 const Array < PianoKey > keys = { PianoKey :: C5 , PianoKey :: D5 , PianoKey :: E5 , PianoKey :: F5 , PianoKey :: G5 , PianoKey :: A5 , PianoKey :: B5 , PianoKey :: C6 , PianoKey :: D6 , PianoKey :: E6 , PianoKey :: F6 , PianoKey :: G6 , PianoKey :: A6 , PianoKey :: B6 , PianoKey :: C7 }; const Array < Audio > sounds = keys . map ([]( auto k ) { return Audio ( GMInstrument :: Glockenspiel , k , 0.3 s ); }); // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30ec\u30d9\u30eb int32 level = 1 ; // \u63a5\u7d9a\u6570 int32 connected = 0 ; // \u6b8b\u308a\u6642\u9593\u306e\u30bf\u30a4\u30de\u30fc Timer timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb Array < Bubble > bubbles = MakeBubbles ( GetBubbleCount ( level )); while ( System :: Update ()) { const double delta = Scene :: DeltaTime (); // \u5236\u9650\u6642\u9593\u3092\u8868\u3059\u80cc\u666f RectF ( Scene :: Size () * Vec2 ( 1 , timer . progress0_1 ())). draw ( HSV ( level * 30 , 0.3 , 0.9 )); for ( auto & bubble : bubbles ) { if (( bubble . index == connected ) && ! bubble . connected && bubble . circle . stretched ( 10 ). mouseOver ()) { // \u63a5\u7d9a\u6e08\u307f\u306b bubble . connected = true ; // \u63a5\u7d9a\u6570\u3092\u5897\u3084\u3059 ++ connected ; // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = Cursor :: Pos ()]( double t ) { Circle ( pos , Bubble :: CircleR + t * 200 ). drawFrame ( 2 , 0 , ColorF ( 0.2 , 0.5 , 1.0 , 1.0 - t * 2.5 )); return t < 0.4 ; }); // \u30d0\u30d6\u30eb\u306e\u6570\u5b57\u306b\u5fdc\u3058\u3066\u52b9\u679c\u97f3\u3092\u9cf4\u3089\u3059 sounds [ bubble . index ]. playOneShot ( 0.8 ); } // \u30d0\u30d6\u30eb\u3092\u5186\u5468\u306b\u6cbf\u3063\u3066\u79fb\u52d5 bubble . circle . center = OffsetCircular ( Scene :: Center (), bubble . circle . center ) . rotate (( IsEven ( bubble . index ) ? 20 _deg : - 20 _deg ) * delta ); } // \u30d0\u30d6\u30eb\u3092\u3059\u3079\u3066\u3064\u306a\u3050\u304b\u3001\u6642\u9593\u5207\u308c\u306b\u306a\u3063\u305f\u3089 if ( const bool failed = timer . reachedZero (); ( connected == GetBubbleCount ( level )) || failed ) { // \u30ec\u30d9\u30eb\u3092\u66f4\u65b0 level = failed ? 1 : ++ level ; // \u63a5\u7d9a\u6570\u3092\u30ea\u30bb\u30c3\u30c8 connected = 0 ; // \u5236\u9650\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8 timer = Timer ( GetTime ( level ), true ); // \u30d0\u30d6\u30eb\u3092\u518d\u751f\u6210 bubbles = MakeBubbles ( GetBubbleCount ( level )); // \u30cf\u30a4\u30b9\u30b3\u30a2\u3092\u66f4\u65b0 highScore = Max ( highScore , level ); // \u30bf\u30a4\u30c8\u30eb\u3092\u66f4\u65b0 Window :: SetTitle ( U \"Level {} (High score: {})\" _fmt ( level , highScore )); } // \u30d0\u30d6\u30eb\u3092\u3064\u306a\u3050\u7dda for ( int32 i = 0 ; i < ( connected - 1 ); ++ i ) { Line ( bubbles [ i ]. circle . center , bubbles [ i + 1 ]. circle . center ). draw ( 3 , Palette :: Orange ); } // \u30d0\u30d6\u30eb\u3092\u63cf\u753b for ( const auto & bubble : bubbles ) { bubble . draw (); } effect . update (); } }","title":"Number chain"},{"location":"sample/visual/","text":"Visual effect \u00b6 \u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } } \u4ed8\u7b8b \u00b6 # include <Siv3D.hpp> void DrawStickyNote ( const RectF & rect , const ColorF & noteColor ) { // \u5c11\u3057\u3060\u3051\u56de\u8ee2\u3055\u305b\u3066\u5f71\u3092\u63cf\u304f { Transformer2D t ( Mat3x2 :: Rotate ( 2 _deg , rect . pos )); rect . stretched ( - 2 , 1 , 1 , - 4 ). drawShadow ( Vec2 ( 0 , 0 ), 12 , 0 , ColorF ( 0.0 , 0.4 )); } rect . draw ( noteColor ); } void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.98 , 0.96 )); const Font font ( 36 , Typeface :: Bold ); while ( System :: Update ()) { for ( auto i : step ( 10 )) { const RectF rect ( 60 + i / 5 * 280 , 20 + i % 5 * 90 , 230 , 70 ); DrawStickyNote ( rect , HSV ( i * 36 , 0.46 , 1.0 )); font ( U \"Text\" ). draw ( rect . pos . movedBy ( 20 , 10 ), ColorF ( 0.1 , 0.95 )); } } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u53cd\u5c04 \u00b6 # include <Siv3D.hpp> void Main () { const std :: array < Texture , 3 > textures = { Texture ( Emoji ( U \"\ud83d\udcb9\" )), Texture ( Emoji ( U \"\ud83d\udcc5\" )), Texture ( Emoji ( U \"\ud83c\udfe1\" )), }; constexpr Size imageSize = Emoji :: ImageSize ; while ( System :: Update ()) { Rect ( 0 , 300 , 800 , 300 ). draw ( ColorF ( 0.2 , 0.3 , 0.4 )); for ( auto [ i , texture ] : Indexed ( textures )) { const Vec2 pos ( 140 + i * 200 , 220 ); texture . draw ( pos ); // \u53cd\u5c04\u3059\u308b\u30c6\u30af\u30b9\u30c1\u30e3 texture ( 0 , imageSize . y / 2 , imageSize . x , imageSize . y / 2 ). flipped () . draw ( pos . x , pos . y + imageSize . y , Arg :: top = AlphaF ( 0.8 ), Arg :: bottom = AlphaF ( 0.0 )); } } } \u30c6\u30ad\u30b9\u30c8\u306e\u767b\u5834 \u00b6 # include <Siv3D.hpp> // Glyph \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b void DrawText ( const DrawableText & fontText , const Vec2 & pos , const ColorF & color , double t , void f ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ), double characterdPerSec ) { Vec2 penPos = pos ; for ( const auto & glyph : fontText ) { if ( glyph . codePoint == U '\\n' ) { penPos . x = pos . x ; penPos . y += fontText . font . height (); continue ; } const double targetTime = glyph . index * characterdPerSec ; if ( targetTime > t ) { break ; } f ( penPos , glyph , color , t - targetTime ); penPos . x += glyph . xAdvance ; } } // \u6587\u5b57\u304c\u4e0a\u304b\u3089\u3086\u3063\u304f\u308a\u964d\u3063\u3066\u304f\u308b\u8868\u73fe void TextEffect1 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double y = EaseInQuad ( Saturate ( 1 - t / 0.3 )) * - 20.0 ; const double a = Min ( t / 0.3 , 1.0 ); glyph . texture . draw ( penPos + glyph . offset + Vec2 ( 0 , y ), ColorF ( color , a )); } // \u6587\u5b57\u304c\u52e2\u3044\u3088\u304f\u73fe\u308c\u308b\u8868\u73fe void TextEffect2 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double s = Min ( t / 0.1 , 1.0 ); const double a = Min ( t / 0.2 , 1.0 ); glyph . texture . scaled ( 3.0 - s * 2 ). draw ( penPos + glyph . offset , ColorF ( color , a )); } // \u843d\u3061\u3066\u304d\u305f\u6587\u5b57\u304c\u3057\u3070\u3089\u304f\u63fa\u308c\u308b\u8868\u73fe void TextEffect3 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double angle = Sin ( t * 1440 _deg ) * 25 _deg * Saturate ( 1.0 - t / 0.6 ); const double y = Saturate ( 1 - t / 0.05 ) * - 20.0 ; glyph . texture . rotated ( angle ). draw ( penPos + glyph . offset + Vec2 ( 0 , y ), color ); } void Main () { const Font font ( 32 , Typeface :: Bold ); const String text = U \"Lorem ipsum dolor sit amet, consectetur \\n \" U \"adipiscing elit, sed do eiusmod tempor \\n \" U \"incididunt ut labore et dolore magna aliqua.\" ; Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 620 , 520 ))) { stopwatch . restart (); } const double t = stopwatch . sF (); DrawText ( font ( text ), Vec2 ( 40 , 40 ), Palette :: Skyblue , t , TextEffect1 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 200 ), Palette :: Orange , t , TextEffect2 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 360 ), Palette :: Seagreen , t , TextEffect3 , 0.1 ); } } RenderTexture \u3092\u4f7f\u3063\u3066\u56f3\u5f62\u3084\u6587\u5b57\u306e\u5f71\u3092\u63cf\u304f \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 100 , Typeface :: Heavy ); const Texture emoji ( Emoji ( U \"\ud83d\udc27\" )); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture shadow ( 800 , 600 ); RenderTexture shadowInternal ( shadow . size ()); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 BlendState bs = BlendState :: Default ; bs . op = BlendOp :: Max ; bs . srcAlpha = Blend :: SrcAlpha ; bs . dstAlpha = Blend :: DestAlpha ; bs . opAlpha = BlendOp :: Max ; while ( System :: Update ()) { const RectF rect ( 100 + Periodic :: Sine0_1 ( 4 s ) * 400 , 200 , 200 ); const Line line ( 100 , 100 , 400 , 500 ); shadow . clear ( ColorF ( 1.0 , 0.0 )); { // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080 ScopedRenderTarget2D target ( shadow ); ScopedRenderStates2D blend ( bs ); font ( U \"Siv3D\" ). draw ( 400 , 60 ); rect . draw (); line . draw ( LineStyle :: RoundCap , 10 ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } // \u66f8\u304d\u8fbc\u307e\u308c\u305f\u5f71\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3057\u3066\u7070\u8272\u3067\u63cf\u753b Shader :: GaussianBlur ( shadow , shadowInternal , shadow ); const Vec2 shadowDirection = Circular ( 10 , Scene :: Time () * 50 _deg ); shadow . draw ( shadowDirection , ColorF ( 0.5 )); { // \u672c\u6765\u306e\u8272\u3067\u63cf\u753b\u3059\u308b font ( U \"Siv3D\" ). draw ( 400 , 60 , Palette :: Orange ); rect . draw ( Palette :: Seagreen ); line . draw ( LineStyle :: RoundCap , 10 , Palette :: White ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } } } 2D \u30e9\u30a4\u30c8\u30d6\u30eb\u30fc\u30e0 \u00b6 # include <Siv3D.hpp> void DrawScene () { Circle ( 680 , 40 , 20 ). draw (); Rect ( Arg :: center ( 680 , 110 ), 30 ). draw (); Triangle ( 680 , 180 , 40 ). draw (); Circle ( 740 , 40 , 20 ). draw ( HSV ( 0 )); Rect ( Arg :: center ( 740 , 110 ), 30 ). draw ( HSV ( 120 )); Triangle ( 740 , 180 , 40 ). draw ( HSV ( 240 )); Circle ( 50 , 200 , 300 ). drawFrame ( 4 ); Circle ( 550 , 450 , 200 ). drawFrame ( 4 ); for ( auto i : step ( 12 )) { const double angle = i * 30 _deg + Scene :: Time () * 5 _deg ; const Vec2 pos = OffsetCircular ( Scene :: Center (), 200 , angle ); Circle ( pos , 8 ). draw ( HSV ( i * 30 )); } } void Main () { constexpr Size sceneSize ( 800 , 600 ); RenderTexture gaussianA1 ( sceneSize ), gaussianB1 ( sceneSize ); RenderTexture gaussianA4 ( sceneSize / 4 ), gaussianB4 ( sceneSize / 4 ); RenderTexture gaussianA8 ( sceneSize / 8 ), gaussianB8 ( sceneSize / 8 ); double a8 = 0.0 , a4 = 0.0 , a1 = 0.0 ; while ( System :: Update ()) { // \u901a\u5e38\u306e\u30b7\u30fc\u30f3\u63cf\u753b DrawScene (); { // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u3046\u4e00\u5ea6\u30b7\u30fc\u30f3\u3092\u63cf\u304f gaussianA1 . clear ( ColorF ( 0.0 )); { ScopedRenderTarget2D target ( gaussianA1 ); ScopedRenderStates2D blend ( BlendState :: Additive ); DrawScene (); } // \u30aa\u30ea\u30b8\u30ca\u30eb\u30b5\u30a4\u30ba\u306e\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A1) // A1 \u3092 1/4 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A4) // A4 \u3092 1/2 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A8) Shader :: GaussianBlur ( gaussianA1 , gaussianB1 , gaussianA1 ); Shader :: Downsample ( gaussianA1 , gaussianA4 ); Shader :: GaussianBlur ( gaussianA4 , gaussianB4 , gaussianA4 ); Shader :: Downsample ( gaussianA4 , gaussianA8 ); Shader :: GaussianBlur ( gaussianA8 , gaussianB8 , gaussianA8 ); } { ScopedRenderStates2D blend ( BlendState :: Additive ); if ( a1 ) { gaussianA1 . resized ( sceneSize ). draw ( ColorF ( a1 )); } if ( a4 ) { gaussianA4 . resized ( sceneSize ). draw ( ColorF ( a4 )); } if ( a8 ) { gaussianA8 . resized ( sceneSize ). draw ( ColorF ( a8 )); } } SimpleGUI :: Slider ( U \"a8: {:.1f}\" _fmt ( a8 ), a8 , 0.0 , 4.0 , Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"a4: {:.1f}\" _fmt ( a4 ), a4 , 0.0 , 4.0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"a1: {:.1f}\" _fmt ( a1 ), a1 , 0.0 , 4.0 , Vec2 ( 20 , 100 )); if ( SimpleGUI :: Button ( U \"0, 0, 0\" , Vec2 ( 20 , 140 ))) { a1 = a4 = a8 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 0, 0\" , Vec2 ( 20 , 180 ))) { a8 = 1.0 ; a4 = a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 0\" , Vec2 ( 20 , 220 ))) { a8 = a4 = 1.0 ; a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 1\" , Vec2 ( 20 , 260 ))) { a8 = a4 = a1 = 1.0 ; } } } \u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7 \u00b6 # include <Siv3D.hpp> // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u4f5c\u308b Image CreatePattern () { Image image ( 16 , 16 , Palette :: White ); Circle ( 0 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 8 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 16 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 4 , 12 , 2 ). paint ( image , Palette :: Black ); Circle ( 12 , 12 , 2 ). paint ( image , Palette :: Black ); return image ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PatternBrush { // \u30d1\u30bf\u30fc\u30f3\u306e UV \u306e\u30b9\u30b1\u30fc\u30eb Float2 uvScale ; Float2 _unused = {}; }; void Main () { constexpr Size sceneSize ( 600 , 600 ); // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture patternTexture ( CreatePattern (), TextureDesc :: Mipped ); // \u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"pattern_brush\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PatternBrush\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PatternBrush > cb ; cb -> uvScale = Float2 ( sceneSize ) / patternTexture . size (); // \u30da\u30f3\u3067\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture renderTexture ( sceneSize , Palette :: Black ); // \u30da\u30f3\u306e\u592a\u3055 double thickness = 20 ; while ( System :: Update ()) { if ( MouseL . pressed ()) { { ScopedRenderTarget2D rt ( renderTexture ); if ( MouseL . down ()) { Circle ( Cursor :: PosF (), thickness * 0.5 ). draw (); } else if ( MouseL . pressed () && ! Cursor :: Delta (). isZero ()) { Line ( Cursor :: PreviousPosF (), Cursor :: PosF ()) . draw ( LineStyle :: RoundCap , thickness ); } } Graphics2D :: Flush (); renderTexture . resolve (); } Rect ( sceneSize ). draw (); { // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , patternTexture ); // \u30d1\u30bf\u30fc\u30f3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b Graphics2D :: SetSamplerState ( 1 , SamplerState :: RepeatLinear ); { Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); renderTexture . draw (); } } // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u53f3\u4e0a\u306b\u8868\u793a patternTexture . draw ( 620 , 20 ); } } pattern_brush.hlsl Texture2D g_texture0 : register ( t0 ); Texture2D g_texture1 : register ( t1 ); SamplerState g_sampler0 : register ( s0 ); SamplerState g_sampler1 : register ( s1 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) cbuffer PatternBrush : register ( b1 ) { float2 g_uvScale ; } // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float alpha = g_texture0 . Sample ( g_sampler0 , input . uv ). r ; float4 texColor = g_texture1 . Sample ( g_sampler1 , input . uv * g_uvScale ); texColor . a = alpha ; return ( texColor * input . color ) + g_colorAdd ; } pattern_brush.frag #version 410 uniform sampler2D Texture0 ; uniform sampler2D Texture1 ; // PS_0 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // PS_1 layout ( std140 ) uniform PatternBrush { vec2 g_uvScale ; }; // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { float alpha = texture ( Texture0 , UV ). r ; vec4 texColor = texture ( Texture1 , UV * g_uvScale ); texColor . a = alpha ; FragColor = ( texColor * Color ) + g_colorAdd ; }","title":"Visual effect"},{"location":"sample/visual/#visual-effect","text":"","title":"Visual effect"},{"location":"sample/visual/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } }","title":"\u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b"},{"location":"sample/visual/#_2","text":"# include <Siv3D.hpp> void DrawStickyNote ( const RectF & rect , const ColorF & noteColor ) { // \u5c11\u3057\u3060\u3051\u56de\u8ee2\u3055\u305b\u3066\u5f71\u3092\u63cf\u304f { Transformer2D t ( Mat3x2 :: Rotate ( 2 _deg , rect . pos )); rect . stretched ( - 2 , 1 , 1 , - 4 ). drawShadow ( Vec2 ( 0 , 0 ), 12 , 0 , ColorF ( 0.0 , 0.4 )); } rect . draw ( noteColor ); } void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.98 , 0.96 )); const Font font ( 36 , Typeface :: Bold ); while ( System :: Update ()) { for ( auto i : step ( 10 )) { const RectF rect ( 60 + i / 5 * 280 , 20 + i % 5 * 90 , 230 , 70 ); DrawStickyNote ( rect , HSV ( i * 36 , 0.46 , 1.0 )); font ( U \"Text\" ). draw ( rect . pos . movedBy ( 20 , 10 ), ColorF ( 0.1 , 0.95 )); } } }","title":"\u4ed8\u7b8b"},{"location":"sample/visual/#_3","text":"# include <Siv3D.hpp> void Main () { const std :: array < Texture , 3 > textures = { Texture ( Emoji ( U \"\ud83d\udcb9\" )), Texture ( Emoji ( U \"\ud83d\udcc5\" )), Texture ( Emoji ( U \"\ud83c\udfe1\" )), }; constexpr Size imageSize = Emoji :: ImageSize ; while ( System :: Update ()) { Rect ( 0 , 300 , 800 , 300 ). draw ( ColorF ( 0.2 , 0.3 , 0.4 )); for ( auto [ i , texture ] : Indexed ( textures )) { const Vec2 pos ( 140 + i * 200 , 220 ); texture . draw ( pos ); // \u53cd\u5c04\u3059\u308b\u30c6\u30af\u30b9\u30c1\u30e3 texture ( 0 , imageSize . y / 2 , imageSize . x , imageSize . y / 2 ). flipped () . draw ( pos . x , pos . y + imageSize . y , Arg :: top = AlphaF ( 0.8 ), Arg :: bottom = AlphaF ( 0.0 )); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u53cd\u5c04"},{"location":"sample/visual/#_4","text":"# include <Siv3D.hpp> // Glyph \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b void DrawText ( const DrawableText & fontText , const Vec2 & pos , const ColorF & color , double t , void f ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ), double characterdPerSec ) { Vec2 penPos = pos ; for ( const auto & glyph : fontText ) { if ( glyph . codePoint == U '\\n' ) { penPos . x = pos . x ; penPos . y += fontText . font . height (); continue ; } const double targetTime = glyph . index * characterdPerSec ; if ( targetTime > t ) { break ; } f ( penPos , glyph , color , t - targetTime ); penPos . x += glyph . xAdvance ; } } // \u6587\u5b57\u304c\u4e0a\u304b\u3089\u3086\u3063\u304f\u308a\u964d\u3063\u3066\u304f\u308b\u8868\u73fe void TextEffect1 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double y = EaseInQuad ( Saturate ( 1 - t / 0.3 )) * - 20.0 ; const double a = Min ( t / 0.3 , 1.0 ); glyph . texture . draw ( penPos + glyph . offset + Vec2 ( 0 , y ), ColorF ( color , a )); } // \u6587\u5b57\u304c\u52e2\u3044\u3088\u304f\u73fe\u308c\u308b\u8868\u73fe void TextEffect2 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double s = Min ( t / 0.1 , 1.0 ); const double a = Min ( t / 0.2 , 1.0 ); glyph . texture . scaled ( 3.0 - s * 2 ). draw ( penPos + glyph . offset , ColorF ( color , a )); } // \u843d\u3061\u3066\u304d\u305f\u6587\u5b57\u304c\u3057\u3070\u3089\u304f\u63fa\u308c\u308b\u8868\u73fe void TextEffect3 ( const Vec2 & penPos , const Glyph & glyph , const ColorF & color , double t ) { const double angle = Sin ( t * 1440 _deg ) * 25 _deg * Saturate ( 1.0 - t / 0.6 ); const double y = Saturate ( 1 - t / 0.05 ) * - 20.0 ; glyph . texture . rotated ( angle ). draw ( penPos + glyph . offset + Vec2 ( 0 , y ), color ); } void Main () { const Font font ( 32 , Typeface :: Bold ); const String text = U \"Lorem ipsum dolor sit amet, consectetur \\n \" U \"adipiscing elit, sed do eiusmod tempor \\n \" U \"incididunt ut labore et dolore magna aliqua.\" ; Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 620 , 520 ))) { stopwatch . restart (); } const double t = stopwatch . sF (); DrawText ( font ( text ), Vec2 ( 40 , 40 ), Palette :: Skyblue , t , TextEffect1 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 200 ), Palette :: Orange , t , TextEffect2 , 0.1 ); DrawText ( font ( text ), Vec2 ( 40 , 360 ), Palette :: Seagreen , t , TextEffect3 , 0.1 ); } }","title":"\u30c6\u30ad\u30b9\u30c8\u306e\u767b\u5834"},{"location":"sample/visual/#rendertexture","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 100 , Typeface :: Heavy ); const Texture emoji ( Emoji ( U \"\ud83d\udc27\" )); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 RenderTexture shadow ( 800 , 600 ); RenderTexture shadowInternal ( shadow . size ()); // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30d6\u30ec\u30f3\u30c9\u30b9\u30c6\u30fc\u30c8 BlendState bs = BlendState :: Default ; bs . op = BlendOp :: Max ; bs . srcAlpha = Blend :: SrcAlpha ; bs . dstAlpha = Blend :: DestAlpha ; bs . opAlpha = BlendOp :: Max ; while ( System :: Update ()) { const RectF rect ( 100 + Periodic :: Sine0_1 ( 4 s ) * 400 , 200 , 200 ); const Line line ( 100 , 100 , 400 , 500 ); shadow . clear ( ColorF ( 1.0 , 0.0 )); { // \u5f71\u306e\u5f62\u72b6\u3092\u66f8\u304d\u8fbc\u3080 ScopedRenderTarget2D target ( shadow ); ScopedRenderStates2D blend ( bs ); font ( U \"Siv3D\" ). draw ( 400 , 60 ); rect . draw (); line . draw ( LineStyle :: RoundCap , 10 ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } // \u66f8\u304d\u8fbc\u307e\u308c\u305f\u5f71\u3092\u30ac\u30a6\u30b9\u307c\u304b\u3057\u3057\u3066\u7070\u8272\u3067\u63cf\u753b Shader :: GaussianBlur ( shadow , shadowInternal , shadow ); const Vec2 shadowDirection = Circular ( 10 , Scene :: Time () * 50 _deg ); shadow . draw ( shadowDirection , ColorF ( 0.5 )); { // \u672c\u6765\u306e\u8272\u3067\u63cf\u753b\u3059\u308b font ( U \"Siv3D\" ). draw ( 400 , 60 , Palette :: Orange ); rect . draw ( Palette :: Seagreen ); line . draw ( LineStyle :: RoundCap , 10 , Palette :: White ); emoji . rotated ( Scene :: Time () * 30 _deg ). drawAt ( 600 , 500 ); } } }","title":"RenderTexture \u3092\u4f7f\u3063\u3066\u56f3\u5f62\u3084\u6587\u5b57\u306e\u5f71\u3092\u63cf\u304f"},{"location":"sample/visual/#2d","text":"# include <Siv3D.hpp> void DrawScene () { Circle ( 680 , 40 , 20 ). draw (); Rect ( Arg :: center ( 680 , 110 ), 30 ). draw (); Triangle ( 680 , 180 , 40 ). draw (); Circle ( 740 , 40 , 20 ). draw ( HSV ( 0 )); Rect ( Arg :: center ( 740 , 110 ), 30 ). draw ( HSV ( 120 )); Triangle ( 740 , 180 , 40 ). draw ( HSV ( 240 )); Circle ( 50 , 200 , 300 ). drawFrame ( 4 ); Circle ( 550 , 450 , 200 ). drawFrame ( 4 ); for ( auto i : step ( 12 )) { const double angle = i * 30 _deg + Scene :: Time () * 5 _deg ; const Vec2 pos = OffsetCircular ( Scene :: Center (), 200 , angle ); Circle ( pos , 8 ). draw ( HSV ( i * 30 )); } } void Main () { constexpr Size sceneSize ( 800 , 600 ); RenderTexture gaussianA1 ( sceneSize ), gaussianB1 ( sceneSize ); RenderTexture gaussianA4 ( sceneSize / 4 ), gaussianB4 ( sceneSize / 4 ); RenderTexture gaussianA8 ( sceneSize / 8 ), gaussianB8 ( sceneSize / 8 ); double a8 = 0.0 , a4 = 0.0 , a1 = 0.0 ; while ( System :: Update ()) { // \u901a\u5e38\u306e\u30b7\u30fc\u30f3\u63cf\u753b DrawScene (); { // \u30ac\u30a6\u30b9\u307c\u304b\u3057\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3082\u3046\u4e00\u5ea6\u30b7\u30fc\u30f3\u3092\u63cf\u304f gaussianA1 . clear ( ColorF ( 0.0 )); { ScopedRenderTarget2D target ( gaussianA1 ); ScopedRenderStates2D blend ( BlendState :: Additive ); DrawScene (); } // \u30aa\u30ea\u30b8\u30ca\u30eb\u30b5\u30a4\u30ba\u306e\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A1) // A1 \u3092 1/4 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A4) // A4 \u3092 1/2 \u30b5\u30a4\u30ba\u306b\u3057\u3066\u30ac\u30a6\u30b9\u307c\u304b\u3057 (A8) Shader :: GaussianBlur ( gaussianA1 , gaussianB1 , gaussianA1 ); Shader :: Downsample ( gaussianA1 , gaussianA4 ); Shader :: GaussianBlur ( gaussianA4 , gaussianB4 , gaussianA4 ); Shader :: Downsample ( gaussianA4 , gaussianA8 ); Shader :: GaussianBlur ( gaussianA8 , gaussianB8 , gaussianA8 ); } { ScopedRenderStates2D blend ( BlendState :: Additive ); if ( a1 ) { gaussianA1 . resized ( sceneSize ). draw ( ColorF ( a1 )); } if ( a4 ) { gaussianA4 . resized ( sceneSize ). draw ( ColorF ( a4 )); } if ( a8 ) { gaussianA8 . resized ( sceneSize ). draw ( ColorF ( a8 )); } } SimpleGUI :: Slider ( U \"a8: {:.1f}\" _fmt ( a8 ), a8 , 0.0 , 4.0 , Vec2 ( 20 , 20 )); SimpleGUI :: Slider ( U \"a4: {:.1f}\" _fmt ( a4 ), a4 , 0.0 , 4.0 , Vec2 ( 20 , 60 )); SimpleGUI :: Slider ( U \"a1: {:.1f}\" _fmt ( a1 ), a1 , 0.0 , 4.0 , Vec2 ( 20 , 100 )); if ( SimpleGUI :: Button ( U \"0, 0, 0\" , Vec2 ( 20 , 140 ))) { a1 = a4 = a8 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 0, 0\" , Vec2 ( 20 , 180 ))) { a8 = 1.0 ; a4 = a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 0\" , Vec2 ( 20 , 220 ))) { a8 = a4 = 1.0 ; a1 = 0.0 ; } if ( SimpleGUI :: Button ( U \"1, 1, 1\" , Vec2 ( 20 , 260 ))) { a8 = a4 = a1 = 1.0 ; } } }","title":"2D \u30e9\u30a4\u30c8\u30d6\u30eb\u30fc\u30e0"},{"location":"sample/visual/#_5","text":"# include <Siv3D.hpp> // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u4f5c\u308b Image CreatePattern () { Image image ( 16 , 16 , Palette :: White ); Circle ( 0 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 8 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 16 , 4 , 2 ). paint ( image , Palette :: Black ); Circle ( 4 , 12 , 2 ). paint ( image , Palette :: Black ); Circle ( 12 , 12 , 2 ). paint ( image , Palette :: Black ); return image ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) struct PatternBrush { // \u30d1\u30bf\u30fc\u30f3\u306e UV \u306e\u30b9\u30b1\u30fc\u30eb Float2 uvScale ; Float2 _unused = {}; }; void Main () { constexpr Size sceneSize ( 600 , 600 ); // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u306e\u30c6\u30af\u30b9\u30c1\u30e3 const Texture patternTexture ( CreatePattern (), TextureDesc :: Mipped ); // \u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7\u7528\u306e\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0 // \u30b7\u30a7\u30fc\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u3001Windows \u3067\u306f hlsl, macOS/Linux \u3067\u306f frag \u3092\u9078\u629e // {} \u5185\u306f\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u540d\u524d\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u5b9a\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 const PixelShader ps ( U \"pattern_brush\" SIV3D_SELECT_SHADER ( U \".hlsl\" , U \".frag\" ), { { U \"PSConstants2D\" , 0 }, { U \"PatternBrush\" , 1 } }); if ( ! ps ) { throw Error ( U \"Failed to load a shader file\" ); } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 ConstantBuffer < PatternBrush > cb ; cb -> uvScale = Float2 ( sceneSize ) / patternTexture . size (); // \u30da\u30f3\u3067\u66f8\u304d\u8fbc\u3080\u30ec\u30f3\u30c0\u30fc\u30c6\u30af\u30b9\u30c1\u30e3 MSRenderTexture renderTexture ( sceneSize , Palette :: Black ); // \u30da\u30f3\u306e\u592a\u3055 double thickness = 20 ; while ( System :: Update ()) { if ( MouseL . pressed ()) { { ScopedRenderTarget2D rt ( renderTexture ); if ( MouseL . down ()) { Circle ( Cursor :: PosF (), thickness * 0.5 ). draw (); } else if ( MouseL . pressed () && ! Cursor :: Delta (). isZero ()) { Line ( Cursor :: PreviousPosF (), Cursor :: PosF ()) . draw ( LineStyle :: RoundCap , thickness ); } } Graphics2D :: Flush (); renderTexture . resolve (); } Rect ( sceneSize ). draw (); { // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 [1] \u306e\u30c6\u30af\u30b9\u30c1\u30e3\u30b9\u30ed\u30c3\u30c8\u306b\u30bb\u30c3\u30c8 Graphics2D :: SetTexture ( 1 , patternTexture ); // \u30d1\u30bf\u30fc\u30f3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b Graphics2D :: SetSamplerState ( 1 , SamplerState :: RepeatLinear ); { Graphics2D :: SetConstantBuffer ( ShaderStage :: Pixel , 1 , cb ); ScopedCustomShader2D shader ( ps ); renderTexture . draw (); } } // \u30d1\u30bf\u30fc\u30f3\u753b\u50cf\u3092\u53f3\u4e0a\u306b\u8868\u793a patternTexture . draw ( 620 , 20 ); } } pattern_brush.hlsl Texture2D g_texture0 : register ( t0 ); Texture2D g_texture1 : register ( t1 ); SamplerState g_sampler0 : register ( s0 ); SamplerState g_sampler1 : register ( s1 ); cbuffer PSConstants2D : register ( b0 ) { float4 g_colorAdd ; float4 g_sdfParam ; float4 g_internal ; } // \u5b9a\u6570\u30d0\u30c3\u30d5\u30a1 (PS_1) cbuffer PatternBrush : register ( b1 ) { float2 g_uvScale ; } // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; struct PSInput { float4 position : SV_POSITION ; float4 color : COLOR0 ; float2 uv : TEXCOORD0 ; }; float4 PS ( PSInput input ) : SV_TARGET { float alpha = g_texture0 . Sample ( g_sampler0 , input . uv ). r ; float4 texColor = g_texture1 . Sample ( g_sampler1 , input . uv * g_uvScale ); texColor . a = alpha ; return ( texColor * input . color ) + g_colorAdd ; } pattern_brush.frag #version 410 uniform sampler2D Texture0 ; uniform sampler2D Texture1 ; // PS_0 layout ( std140 ) uniform PSConstants2D { vec4 g_colorAdd ; vec4 g_sdfParam ; vec4 g_internal ; }; // PS_1 layout ( std140 ) uniform PatternBrush { vec2 g_uvScale ; }; // [C++] //struct PatternBrush //{ // Float2 uvScale; // Float2 _unused = {}; //}; // // PSInput // layout ( location = 0 ) in vec4 Color ; layout ( location = 1 ) in vec2 UV ; // // PSOutput // layout ( location = 0 ) out vec4 FragColor ; void main () { float alpha = texture ( Texture0 , UV ). r ; vec4 texColor = texture ( Texture1 , UV * g_uvScale ); texColor . a = alpha ; FragColor = ( texColor * Color ) + g_colorAdd ; }","title":"\u30d1\u30bf\u30fc\u30f3\u30d6\u30e9\u30b7"},{"location":"sponsors/sponsors/","text":"\ud83d\udc97 Siv3D Sponsors \u00b6 Apply / Reward \u00b6 https://github.com/sponsors/Reputeless Sponsors \u00b6 sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara","title":"\ud83d\udc97Sponsors"},{"location":"sponsors/sponsors/#siv3d-sponsors","text":"","title":"\ud83d\udc97 Siv3D Sponsors"},{"location":"sponsors/sponsors/#apply-reward","text":"https://github.com/sponsors/Reputeless","title":"Apply / Reward"},{"location":"sponsors/sponsors/#sponsors","text":"sknjpn \u30a2\u30b2\u30cf\u30de chobby75 papparappara","title":"Sponsors"},{"location":"store/store/","text":"Siv3D Store \u00b6 LINE sticker \u00b6 Siv3D-kun LINE stickers","title":"Siv3D Store"},{"location":"store/store/#siv3d-store","text":"","title":"Siv3D Store"},{"location":"store/store/#line-sticker","text":"Siv3D-kun LINE stickers","title":"LINE sticker"},{"location":"support/support/","text":"\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066 \u00b6 \u30e1\u30fc\u30eb\u3084\u30c0\u30a4\u30ec\u30af\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8 (DM) \u306b\u3088\u308b\u500b\u5225\u30b5\u30dd\u30fc\u30c8\u306e\u4f9d\u983c\u306f reputeless \u2709 gmail . com \u307e\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\uff08\u6709\u511f\uff09\u3002 \u305d\u308c\u4ee5\u5916\u306e\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u624b\u6bb5\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3001\u554f\u984c\u304c\u767a\u751f\u3057\u305f \u00b6 Siv3D Slack BBS Twitter \u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u898b\u3064\u3051\u305f \u00b6 GitHub Issues Siv3D Slack Twitter \u65b0\u6a5f\u80fd\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8 \u00b6 GitHub Issues Siv3D Slack Twitter \u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u307b\u3057\u3044 \u00b6 OpenSiv3D \u5b9f\u88c5\u4f1a \u5408\u8a08 1000 \u884c\u672a\u6e80\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308c\u3070 Siv3D Slack \u3082\u53ef","title":"Support"},{"location":"support/support/#_1","text":"\u30e1\u30fc\u30eb\u3084\u30c0\u30a4\u30ec\u30af\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8 (DM) \u306b\u3088\u308b\u500b\u5225\u30b5\u30dd\u30fc\u30c8\u306e\u4f9d\u983c\u306f reputeless \u2709 gmail . com \u307e\u3067\u304a\u554f\u3044\u5408\u308f\u305b\u304f\u3060\u3055\u3044\uff08\u6709\u511f\uff09\u3002 \u305d\u308c\u4ee5\u5916\u306e\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u624b\u6bb5\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066"},{"location":"support/support/#_2","text":"Siv3D Slack BBS Twitter","title":"\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3001\u554f\u984c\u304c\u767a\u751f\u3057\u305f"},{"location":"support/support/#_3","text":"GitHub Issues Siv3D Slack Twitter","title":"\u30d0\u30b0\u3084\u4e0d\u5177\u5408\u3092\u898b\u3064\u3051\u305f"},{"location":"support/support/#_4","text":"GitHub Issues Siv3D Slack Twitter","title":"\u65b0\u6a5f\u80fd\u3084\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8"},{"location":"support/support/#_5","text":"OpenSiv3D \u5b9f\u88c5\u4f1a \u5408\u8a08 1000 \u884c\u672a\u6e80\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308c\u3070 Siv3D Slack \u3082\u53ef","title":"\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u307b\u3057\u3044"},{"location":"training/1-1/","text":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u5186\u3092\u914d\u7f6e\u3059\u308b \u00b6 \u30af\u30ea\u30c3\u30af\u3067\u753b\u9762\u4e0a\u306b\u5186\u3092\u914d\u7f6e\u3057\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u57fa\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u308b\u305f\u3073\u306b\u3001 Array < Circle > \u306b Circle \u578b\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002 Array < Circle > \u306e\u5404\u8981\u7d20\u306b\u306f\u7bc4\u56f2 for \u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Circle > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u3092\u8ffd\u52a0 circles << Circle ( Cursor :: Pos (), circleR ); } // \u914d\u5217\u5185\u306e\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { circle . draw ( circleColor ); } } } 2. \u5bb9\u91cf\u3092\u7bc0\u7d04 \u00b6 \u5186\u306e\u534a\u5f84\u304c\u5b9a\u6570\u306e\u5834\u5408\u3001 Circle \u3092\u683c\u7d0d\u3059\u308b\u4ee3\u308f\u308a\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3067\u3042\u308b Vec2 \u3092\u683c\u7d0d\u3059\u308b\u3060\u3051\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3053\u308c\u3067\u914d\u5217\u306e\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c 3 \u5206\u306e 2 \u306b\u306a\u308a\u307e\u3059 (1 \u8981\u7d20\u3042\u305f\u308a 24 \u30d0\u30a4\u30c8 \u2192 16 \u30d0\u30a4\u30c8)\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } } 3. \u30b7\u30fc\u30f3\u4e0a\u306e\u30af\u30ea\u30c3\u30af\u306b\u9650\u308b \u00b6 \u3053\u3053\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u79fb\u52d5\u3055\u305b\u3088\u3046\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3082\u5186\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u3001\u6761\u4ef6\u3092 if ( Scene :: Rect () . leftClicked ()) \u306b\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u9818\u57df\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306e\u307f\u3001\u5186\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } } 4. \u5186\u3054\u3068\u306b\u8272\u3092\u5909\u3048\u308b \u00b6 Vec2 \u3084 Circle \u578b\u306f\u8272\u306e\u60c5\u5831\u3092\u6301\u3066\u306a\u3044\u306e\u3067\u3001\u4f4d\u7f6e\u306e\u60c5\u5831\u3068\u5408\u308f\u305b\u3066 ColorF \u3082\u6301\u3064\u65b0\u3057\u3044\u69cb\u9020\u4f53 CircleItem \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; void Main () { // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > circleItems ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 circleItems . emplace_back ( Cursor :: Pos (), RandomColorF ()); } // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : circleItems ) { circleItem . draw (); } } } 5. Main \u3092\u77ed\u304f \u00b6 Main () \u95a2\u6570\u5185\u306e\u8a18\u8ff0\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u7ba1\u7406\u7528\u306e\u30af\u30e9\u30b9 CircleItemManager \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); } // \u3059\u3079\u3066\u306e CircleItem \u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } } 6. \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u3051\u308b \u00b6 \u5186\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; // \u30a8\u30d5\u30a7\u30af\u30c8 Effect m_effect ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 m_effect . add ([ center ]( double t ) { const double e = EaseOutExpo ( t ); Circle ( center , CircleItem :: CircleR + e * 30 ) . drawFrame ( 0 , 4 * e , ColorF ( 1.0 , ( 1 - e ))); return t < 1.0 ; }); } // \u3059\u3079\u3066\u306e CircleItem \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u30fb\u63cf\u753b m_effect . update (); // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } }","title":"Circles"},{"location":"training/1-1/#_1","text":"\u30af\u30ea\u30c3\u30af\u3067\u753b\u9762\u4e0a\u306b\u5186\u3092\u914d\u7f6e\u3057\u3066\u3044\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u5186\u3092\u914d\u7f6e\u3059\u308b"},{"location":"training/1-1/#1","text":"\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u308b\u305f\u3073\u306b\u3001 Array < Circle > \u306b Circle \u578b\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002 Array < Circle > \u306e\u5404\u8981\u7d20\u306b\u306f\u7bc4\u56f2 for \u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Circle > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u3092\u8ffd\u52a0 circles << Circle ( Cursor :: Pos (), circleR ); } // \u914d\u5217\u5185\u306e\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { circle . draw ( circleColor ); } } }","title":"1. \u57fa\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"training/1-1/#2","text":"\u5186\u306e\u534a\u5f84\u304c\u5b9a\u6570\u306e\u5834\u5408\u3001 Circle \u3092\u683c\u7d0d\u3059\u308b\u4ee3\u308f\u308a\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3067\u3042\u308b Vec2 \u3092\u683c\u7d0d\u3059\u308b\u3060\u3051\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3053\u308c\u3067\u914d\u5217\u306e\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c 3 \u5206\u306e 2 \u306b\u306a\u308a\u307e\u3059 (1 \u8981\u7d20\u3042\u305f\u308a 24 \u30d0\u30a4\u30c8 \u2192 16 \u30d0\u30a4\u30c8)\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } }","title":"2. \u5bb9\u91cf\u3092\u7bc0\u7d04"},{"location":"training/1-1/#3","text":"\u3053\u3053\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u79fb\u52d5\u3055\u305b\u3088\u3046\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3082\u5186\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u3001\u6761\u4ef6\u3092 if ( Scene :: Rect () . leftClicked ()) \u306b\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u9818\u57df\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306e\u307f\u3001\u5186\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u306e\u534a\u5f84 constexpr double circleR = 24.0 ; // \u5186\u306e\u8272 constexpr ColorF circleColor ( 0.4 , 0.8 , 0.6 ); // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < Vec2 > circles ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8ffd\u52a0 circles << Cursor :: Pos (); } // \u914d\u5217\u5185\u306e\u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u4f7f\u3063\u3066\u5186\u3092\u63cf\u753b for ( const auto & circle : circles ) { Circle ( circle , circleR ). draw ( circleColor ); } } }","title":"3. \u30b7\u30fc\u30f3\u4e0a\u306e\u30af\u30ea\u30c3\u30af\u306b\u9650\u308b"},{"location":"training/1-1/#4","text":"Vec2 \u3084 Circle \u578b\u306f\u8272\u306e\u60c5\u5831\u3092\u6301\u3066\u306a\u3044\u306e\u3067\u3001\u4f4d\u7f6e\u306e\u60c5\u5831\u3068\u5408\u308f\u305b\u3066 ColorF \u3082\u6301\u3064\u65b0\u3057\u3044\u69cb\u9020\u4f53 CircleItem \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; void Main () { // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > circleItems ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 circleItems . emplace_back ( Cursor :: Pos (), RandomColorF ()); } // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : circleItems ) { circleItem . draw (); } } }","title":"4. \u5186\u3054\u3068\u306b\u8272\u3092\u5909\u3048\u308b"},{"location":"training/1-1/#5-main","text":"Main () \u95a2\u6570\u5185\u306e\u8a18\u8ff0\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u7ba1\u7406\u7528\u306e\u30af\u30e9\u30b9 CircleItemManager \u3092\u4f5c\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); } // \u3059\u3079\u3066\u306e CircleItem \u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } }","title":"5. Main \u3092\u77ed\u304f"},{"location":"training/1-1/#6","text":"\u5186\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> struct CircleItem { // \u5186\u306e\u534a\u5f84 (\u5b9a\u6570\uff09 static constexpr double CircleR = 24.0 ; // \u5186\u306e\u4e2d\u5fc3\u5ea7\u6a19 Vec2 center ; // \u5186\u306e\u8272 ColorF color ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem () = default ; // \u5ea7\u6a19\u3001\u8272\u3092\u521d\u671f\u5316\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItem ( const Vec2 & _center , const ColorF & _color ) : center ( _center ) , color ( _color ) {} // \u5186\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { Circle ( center , CircleR ). draw ( color ); } }; class CircleItemManager { private : // CircleItem \u3092\u683c\u7d0d\u3059\u308b\u914d\u5217 Array < CircleItem > m_circleItems ; // \u30a8\u30d5\u30a7\u30af\u30c8 Effect m_effect ; public : // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf CircleItemManager () = default ; // \u65b0\u3057\u3044 CircleItem \u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void add ( const Vec2 & center , const ColorF & color ) { // \u914d\u5217\u306b CircleItem \u3092\u8ffd\u52a0 m_circleItems . emplace_back ( center , color ); // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 m_effect . add ([ center ]( double t ) { const double e = EaseOutExpo ( t ); Circle ( center , CircleItem :: CircleR + e * 30 ) . drawFrame ( 0 , 4 * e , ColorF ( 1.0 , ( 1 - e ))); return t < 1.0 ; }); } // \u3059\u3079\u3066\u306e CircleItem \u3068\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u63cf\u753b\u3059\u308b\u30e1\u30f3\u30d0\u95a2\u6570 void draw () const { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u30fb\u63cf\u753b m_effect . update (); // \u914d\u5217\u5185\u306e CircleItem \u3092\u63cf\u753b for ( const auto & circleItem : m_circleItems ) { circleItem . draw (); } } }; void Main () { CircleItemManager circleItemManager ; while ( System :: Update ()) { // \u3082\u3057\u30b7\u30fc\u30f3\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( Scene :: Rect (). leftClicked ()) { // \u8ffd\u52a0 circleItemManager . add ( Cursor :: Pos (), RandomColorF ()); } // \u63cf\u753b circleItemManager . draw (); } }","title":"6. \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u3051\u308b"},{"location":"training/2-1/","text":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u4e09\u76ee\u4e26\u3079 \u00b6 2 \u4eba\u3067\u904a\u3076\u4e09\u76ee\u4e26\u3079\u3092\u4f5c\u308a\u307e\u3059\u3002 1. \u683c\u5b50\u3092\u8868\u793a\u3059\u308b \u00b6 # include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } } 2. \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3057\u305f\u30bb\u30eb\u3092\u5f37\u8abf\u8868\u793a \u00b6 # include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } } 3. \u3007 \u3068 \u00d7 \u3092\u8868\u793a \u00b6 \u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30de\u30fc\u30af\u3092 Grid < int32 > \u3067\u7ba1\u7406\u3057\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30bb\u30eb\u306f\u30de\u30fc\u30af\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; GameBoard () { // \u8868\u793a\u30c6\u30b9\u30c8\u7528\u306b\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [{ 0 , 0 }] = O_Mark ; m_grid [{ 1 , 0 }] = X_Mark ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } } 4. \u30af\u30ea\u30c3\u30af\u3067\u30de\u30fc\u30af\u3092\u7f6e\u3051\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 \u7a7a\u767d\u306e\u30bb\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3001\u4ea4\u4e92\u306b \u3007 \u3068 \u00d7 \u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3081\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . update (); gameBoard . draw (); } } 5. \u30b2\u30fc\u30e0\u76e4\u3092\u79fb\u52d5\u3055\u305b\u308b \u00b6 Transofrmer2D \u3067\u30012D \u63cf\u753b\u5ea7\u6a19\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u30b7\u30d5\u30c8\u3057\u3001\u30b2\u30fc\u30e0\u306e\u76e4\u9762\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } } 6. \u30b2\u30fc\u30e0\u7d42\u4e86\u5224\u5b9a \u00b6 \u6b8b\u308a\u306e\u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u3089\u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3057\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } } 7. \u30b2\u30fc\u30e0\u7d42\u4e86\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3059\u308b\u3068\u300cReset\u300d\u30dc\u30bf\u30f3\u304c\u73fe\u308c\u3001\u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // 3 \u3064\u306e\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8 void reset () { m_currentMark = O_Mark ; m_grid . fill ( 0 ); m_lines . clear (); m_gameOver = false ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u305f\u304b\u3092\u8fd4\u3059 bool isGameOver () const { return m_gameOver ; } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u3066\u3044\u305f\u3089 if ( gameBoard . isGameOver ()) { // Reset \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u30ea\u30bb\u30c3\u30c8 if ( SimpleGUI :: ButtonAt ( U \"Reset\" , Vec2 ( 400 , 520 ))) { gameBoard . reset (); } } } }","title":"Tic-tac-toe"},{"location":"training/2-1/#_1","text":"2 \u4eba\u3067\u904a\u3076\u4e09\u76ee\u4e26\u3079\u3092\u4f5c\u308a\u307e\u3059\u3002","title":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0 | \u4e09\u76ee\u4e26\u3079"},{"location":"training/2-1/#1","text":"# include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } }","title":"1. \u683c\u5b50\u3092\u8868\u793a\u3059\u308b"},{"location":"training/2-1/#2","text":"# include <Siv3D.hpp> class GameBoard { private : // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } }","title":"2. \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3057\u305f\u30bb\u30eb\u3092\u5f37\u8abf\u8868\u793a"},{"location":"training/2-1/#3","text":"\u30bb\u30eb\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30de\u30fc\u30af\u3092 Grid < int32 > \u3067\u7ba1\u7406\u3057\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30bb\u30eb\u306f\u30de\u30fc\u30af\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; GameBoard () { // \u8868\u793a\u30c6\u30b9\u30c8\u7528\u306b\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [{ 0 , 0 }] = O_Mark ; m_grid [{ 1 , 0 }] = X_Mark ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . draw (); } }","title":"3. \u3007 \u3068 \u00d7 \u3092\u8868\u793a"},{"location":"training/2-1/#4","text":"\u7a7a\u767d\u306e\u30bb\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\u3001\u4ea4\u4e92\u306b \u3007 \u3068 \u00d7 \u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3081\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); GameBoard gameBoard ; while ( System :: Update ()) { gameBoard . update (); gameBoard . draw (); } }","title":"4. \u30af\u30ea\u30c3\u30af\u3067\u30de\u30fc\u30af\u3092\u7f6e\u3051\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"training/2-1/#5","text":"Transofrmer2D \u3067\u30012D \u63cf\u753b\u5ea7\u6a19\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u30b7\u30d5\u30c8\u3057\u3001\u30b2\u30fc\u30e0\u306e\u76e4\u9762\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } }","title":"5. \u30b2\u30fc\u30e0\u76e4\u3092\u79fb\u52d5\u3055\u305b\u308b"},{"location":"training/2-1/#6","text":"\u6b8b\u308a\u306e\u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u3089\u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3057\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } } }","title":"6. \u30b2\u30fc\u30e0\u7d42\u4e86\u5224\u5b9a"},{"location":"training/2-1/#7","text":"\u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3059\u308b\u3068\u300cReset\u300d\u30dc\u30bf\u30f3\u304c\u73fe\u308c\u3001\u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // 3 \u3064\u306e\u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u304b\u3092\u8fd4\u3059\u95a2\u6570 bool CheckLine ( const Grid < int32 >& grid , const Point & cellA , const Point & cellB , const Point & cellC ) { const int32 a = grid [ cellA ]; const int32 b = grid [ cellB ]; const int32 c = grid [ cellC ]; return (( a != 0 ) && a == b && b == c ); } // \u30de\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7\u3092\u8fd4\u3059\u95a2\u6570 Array < std :: pair < Point , Point >> CheckLines ( const Grid < int32 >& grid ) { Array < std :: pair < Point , Point >> results ; // \u7e26 3 \u5217\u3092\u8abf\u3079\u308b for ( auto x : step ( 3 )) { if ( CheckLine ( grid , Point ( x , 0 ), Point ( x , 1 ), Point ( x , 2 ))) { results . emplace_back ( Point ( x , 0 ), Point ( x , 2 )); } } // \u6a2a 3 \u884c\u3092\u8abf\u3079\u308b for ( auto y : step ( 3 )) { if ( CheckLine ( grid , Point ( 0 , y ), Point ( 1 , y ), Point ( 2 , y ))) { results . emplace_back ( Point ( 0 , y ), Point ( 2 , y )); } } // \u659c\u3081\uff08\u5de6\u4e0a -> \u53f3\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 0 , 0 ), Point ( 1 , 1 ), Point ( 2 , 2 ))) { results . emplace_back ( Point ( 0 , 0 ), Point ( 2 , 2 )); } // \u659c\u3081\uff08\u53f3\u4e0a -> \u5de6\u4e0b) \u3092\u8abf\u3079\u308b if ( CheckLine ( grid , Point ( 2 , 0 ), Point ( 1 , 1 ), Point ( 0 , 2 ))) { results . emplace_back ( Point ( 2 , 0 ), Point ( 0 , 2 )); } return results ; } class GameBoard { private : // 3x3 \u306e\u4e8c\u6b21\u5143\u914d\u5217 (\u521d\u671f\u5024\u306f\u5168\u8981\u7d20 0) Grid < int32 > m_grid = Grid < int32 > ( 3 , 3 ); // \u3053\u308c\u304b\u3089\u7f6e\u304f\u30de\u30fc\u30af int32 m_currentMark = O_Mark ; // \u30b2\u30fc\u30e0\u7d42\u4e86\u30d5\u30e9\u30b0 bool m_gameOver = false ; // 3 \u3064\u9023\u7d9a\u3057\u305f\u30e9\u30a4\u30f3\u306e\u4e00\u89a7 Array < std :: pair < Point , Point >> m_lines ; // \u683c\u5b50\u3092\u63cf\u304f void drawGridLines () const { // \u7dda\u3092\u5f15\u304f for ( auto i : { 1 , 2 }) { Line ( i * CellSize , 0 , i * CellSize , 3 * CellSize ) . draw ( 4 , ColorF ( 0.25 )); Line ( 0 , i * CellSize , 3 * CellSize , i * CellSize ) . draw ( 4 , ColorF ( 0.25 )); } } // \u30bb\u30eb\u3092\u63cf\u304f void drawCells () const { // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // X \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 if ( mark == X_Mark ) { // X \u30de\u30fc\u30af\u3092\u63cf\u304f Shape2D :: Cross ( CellSize * 0.4 , 10 , cell . center ()) . draw ( ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } else if ( mark == O_Mark ) // O \u30de\u30fc\u30af\u3060\u3063\u305f\u3089 { // \u3007 \u30de\u30fc\u30af\u3092\u63cf\u304f Circle ( cell . center (), CellSize * 0.4 - 10 ) . drawFrame ( 10 , 0 , ColorF ( 0.2 )); // \u3053\u306e\u30bb\u30eb\u306f\u3053\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u3044 continue ; } // \u30bb\u30eb\u304c\u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc\u3055\u308c\u305f\u3089 if ( ! m_gameOver && cell . mouseOver ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u30a2\u30a4\u30b3\u30f3\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); // \u30bb\u30eb\u306e\u4e0a\u306b\u534a\u900f\u660e\u306e\u767d\u3092\u63cf\u304f cell . stretched ( - 2 ). draw ( ColorF ( 1.0 , 0.6 )); } } } // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63cf\u304f void drawResults () const { for ( const auto & line : m_lines ) { // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30bb\u30eb\u3092\u53d6\u5f97 const Rect cellBegin ( line . first * CellSize , CellSize ); const Rect cellEnd ( line . second * CellSize , CellSize ); // \u7dda\u3092\u5f15\u304f Line ( cellBegin . center (), cellEnd . center ()) . stretched ( CellSize * 0.45 ) . draw ( LineStyle :: RoundCap , 5 , ColorF ( 0.6 )); } } public : // \u30bb\u30eb\u306e\u5927\u304d\u3055 static constexpr int32 CellSize = 150 ; // O \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 O_Mark = 1 ; // X \u30de\u30fc\u30af\u306e\u5024 static constexpr int32 X_Mark = 2 ; void update () { if ( m_gameOver ) { return ; } // 3x3 \u306e\u30bb\u30eb for ( auto p : step ( Size ( 3 , 3 ))) { // \u30bb\u30eb const Rect cell ( p * CellSize , CellSize ); // \u30bb\u30eb\u306e\u30de\u30fc\u30af const int32 mark = m_grid [ p ]; // \u30bb\u30eb\u304c\u7a7a\u767d\u3067\u3001\u306a\u304a\u304b\u3064\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if (( mark == 0 ) && cell . leftClicked ()) { // \u30bb\u30eb\u306b\u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u66f8\u304d\u8fbc\u3080 m_grid [ p ] = m_currentMark ; // \u73fe\u5728\u306e\u30de\u30fc\u30af\u3092\u5165\u308c\u66ff\u3048\u308b m_currentMark = (( m_currentMark == O_Mark ) ? X_Mark : O_Mark ); // \u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u3092\u63a2\u3059 m_lines = CheckLines ( m_grid ); // \u7a7a\u767d\u30bb\u30eb\u304c 0 \u306b\u306a\u308b\u304b\u3001\u3064\u306a\u304c\u3063\u305f\u30e9\u30a4\u30f3\u304c\u898b\u3064\u304b\u3063\u305f\u3089 if ( m_grid . count ( 0 ) == 0 || m_lines ) { // \u30b2\u30fc\u30e0\u7d42\u4e86 m_gameOver = true ; } } } } // \u30b2\u30fc\u30e0\u3092\u30ea\u30bb\u30c3\u30c8 void reset () { m_currentMark = O_Mark ; m_grid . fill ( 0 ); m_lines . clear (); m_gameOver = false ; } // \u63cf\u753b void draw () const { drawGridLines (); drawCells (); drawResults (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u305f\u304b\u3092\u8fd4\u3059 bool isGameOver () const { return m_gameOver ; } }; void Main () { // \u80cc\u666f\u8272 Scene :: SetBackground ( ColorF ( 0.8 , 1.0 , 0.9 )); constexpr Point offset ( 175 , 30 ); GameBoard gameBoard ; while ( System :: Update ()) { { // 2D \u63cf\u753b\u3068\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u79fb\u52d5 Transformer2D tr ( Mat3x2 :: Translate ( offset ), true ); gameBoard . update (); gameBoard . draw (); } // \u30b2\u30fc\u30e0\u304c\u7d42\u4e86\u3057\u3066\u3044\u305f\u3089 if ( gameBoard . isGameOver ()) { // Reset \u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u30ea\u30bb\u30c3\u30c8 if ( SimpleGUI :: ButtonAt ( U \"Reset\" , Vec2 ( 400 , 520 ))) { gameBoard . reset (); } } } }","title":"7. \u30b2\u30fc\u30e0\u7d42\u4e86\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"tutorial/2d-intersection/","text":"4. 2D intersection \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc \u00b6 \u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } } 4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af \u00b6 \u30af\u30ea\u30c3\u30af \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } } \u62bc\u3055\u308c\u3066\u3044\u308b \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } } 4.3 \u56f3\u5f62\u306e\u4ea4\u5dee \u00b6 2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080 \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } 4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9 \u00b6 \u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4. 2D intersection"},{"location":"tutorial/2d-intersection/#4-2d-intersection","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"4. 2D intersection"},{"location":"tutorial/2d-intersection/#41","text":"\u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc"},{"location":"tutorial/2d-intersection/#42","text":"","title":"4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af"},{"location":"tutorial/2d-intersection/#_1","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } }","title":"\u30af\u30ea\u30c3\u30af"},{"location":"tutorial/2d-intersection/#_2","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"\u62bc\u3055\u308c\u3066\u3044\u308b"},{"location":"tutorial/2d-intersection/#43","text":"2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002","title":"4.3 \u56f3\u5f62\u306e\u4ea4\u5dee"},{"location":"tutorial/2d-intersection/#44","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } }","title":"4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080"},{"location":"tutorial/2d-intersection/#45","text":"\u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002","title":"4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9"},{"location":"tutorial/2d-intersection/#46","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb"},{"location":"tutorial/2d-renderstates/","text":"15. 2D render states \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u30012D \u63cf\u753b\u306e\u8a2d\u5b9a\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3001\u8868\u73fe\u306e\u5e45\u3092\u5e83\u3052\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 15.1 \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9 \u00b6 ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b BlendState :: Additive \u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u753b\u50cf\u304c\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u306f\u3001\u80cc\u666f\u8272\u306b RGB \u6210\u5206\u3092\u52a0\u7b97\u3059\u308b\u3088\u3046\u306b\u63cf\u753b\u3055\u308c\u308b\u306e\u3067\u3001\u91cd\u306d\u3066\u63cf\u753b\u3057\u305f\u90e8\u5206\u304c\u660e\u308b\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; for ( int32 i = 0 ; i < 400 ; ++ i ) { points << RandomVec2 ( Scene :: Rect ()); } bool enabled = true ; while ( System :: Update ()) { if ( enabled ) { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u6709\u52b9 const ScopedRenderStates2D state ( BlendState :: Additive ); for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } else { // \u901a\u5e38\u306e\u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9 for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } SimpleGUI :: CheckBox ( enabled , U \"AdditiveBlend\" , Vec2 ( 20 , 20 )); } } 15.2 \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97 \u00b6 \u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorAdd2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u52a0\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u52a0\u7b97\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 0.0 , 0.0 , 0.0 , 0.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97 const ScopedColorAdd2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } } 15.3 \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97 \u00b6 \u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorMul2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u4e57\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002 \u306a\u304a\u3001 .draw () \u306b\u8272\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u500b\u5225\u306b\u4e57\u7b97\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff08\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 5.10 \u53c2\u7167\uff09\u3002 ScopedColorMul2D \u306f\u305d\u306e\u8a2d\u5b9a\u3092\u4e00\u62ec\u3057\u3066\u9069\u7528\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 1.0 , 1.0 , 1.0 , 1.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97 const ScopedColorMul2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } } 15.4 \u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30d5\u30a3\u30eb\u30bf \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b\u969b\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u306b\u3088\u3063\u3066\u8272\u304c\u6ed1\u3089\u304b\u306b\u88dc\u9593\u3055\u308c\u307e\u3059\u3002\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3063\u305f\u307e\u307e\u62e1\u5927\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: ClampNearest \u3092 ScopedRenderStates2D \u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); bool linear = true ; double scale = 1.0 ; while ( System :: Update ()) { if ( linear ) { // \u901a\u5e38\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30e2\u30fc\u30c9 cat . scaled ( scale ). drawAt ( Scene :: Center ()); } else { // \u7dda\u5f62\u88dc\u9593\u306a\u3057 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( scale ). drawAt ( Scene :: Center ()); } SimpleGUI :: Slider ( scale , 0.1 , 8.0 , Vec2 ( 20 , 20 ), 200 ); SimpleGUI :: CheckBox ( linear , U \"Linear\" , Vec2 ( 20 , 60 )); } } 15.5 \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8 \u00b6 ScopedViewport2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30b7\u30fc\u30f3\u5185\u306b\u4eee\u60f3\u306e\u30b7\u30fc\u30f3\u3092\u4f5c\u308a\u3001\u65b0\u3057\u3044\u9577\u65b9\u5f62\u306e\u63cf\u753b\u9818\u57df\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u63cf\u753b\u6642\u306b\u306f\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u304c (0, 0) \u306e\u63cf\u753b\u5ea7\u6a19\u306b\u306a\u308a\u3001\u9577\u65b9\u5f62\u306e\u7bc4\u56f2\u5916\u306b\u306f\u307f\u51fa\u305f\u3082\u306e\u306f\u63cf\u753b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306f\u63cf\u753b\u306e\u5ea7\u6a19\u306b\u3057\u304b\u5f71\u97ff\u3092\u53ca\u307c\u3055\u306a\u3044\u306e\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u540c\u69d8\u306b\u79fb\u52d5\u3055\u305b\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u5f8c\u8ff0\u3059\u308b Transformer2D \u3068\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); } } } 15.6 \u5ea7\u6a19\u5909\u63db \u00b6 Transformer2D \u306f\u3001\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u3001\u4e00\u62ec\u3067\u56de\u8ee2\u30fb\u62e1\u5927\u7e2e\u5c0f\u3001\u5ea7\u6a19\u79fb\u52d5\u306a\u3069\u306e\u5ea7\u6a19\u5909\u63db\u3092\u9069\u7528\u3067\u304d\u308b\u3001\u975e\u5e38\u306b\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3059\u3002 \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092 Mat3x2 \u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3057\u3001 Transformer2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u305d\u306e\u884c\u5217\u306b\u3088\u308b\u5ea7\u6a19\u5909\u63db\u304c\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); constexpr Circle circle ( 200 , 400 , 60 ); size_t index = 0 ; while ( System :: Update ()) { // \u4f55\u3082\u3057\u306a\u3044\u884c\u5217 Mat3x2 mat = Mat3x2 :: Identity (); if ( index == 0 ) { } else if ( index == 1 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u57fa\u6e96\u306b 1.5 \u500d\u62e1\u5927 mat = Mat3x2 :: Scale ( 1.5 , Scene :: Center ()); } else if ( index == 2 ) { // (50, 50) \u79fb\u52d5 mat = Mat3x2 :: Translate ( 50 , 50 ); } else if ( index == 3 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066 30\u00b0 \u56de\u8ee2 mat = Mat3x2 :: Rotate ( 30 _deg , Scene :: Center ()); } else if ( index == 4 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066\u5f90\u3005\u306b\u56de\u8ee2\u3057\u306a\u304c\u3089\u62e1\u5927 mat = Mat3x2 :: Rotate ( Scene :: Time () * 5 _deg , Scene :: Center ()) . scaled ( 1.0 + Scene :: Time () * 0.03 , Scene :: Center ()); } { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u63cf\u753b\u3068\u540c\u69d8\u306b\u5909\u63db constexpr bool transformCursorPos = true ; // \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u9069\u7528 const Transformer2D t ( mat , transformCursorPos ); textureWindmill . draw ( 0 , 0 ); textureSiv3DKun . draw ( 360 , 100 ); circle . draw ( circle . mouseOver () ? Palette :: Red : Palette :: Yellow ); } SimpleGUI :: RadioButtons ( index , { U \"Identity\" , U \"Scale\" , U \"Translate\" , U \"Rotate\" , U \"Roatate * Scale\" }, Vec2 ( 600 , 20 )); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u307f\u5ea7\u6a19\u5909\u63db \u00b6 \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u305f\u969b\u306a\u3069\u3001\u63cf\u753b\u306e\u5ea7\u6a19\u5909\u63db\u306f\u4e0d\u8981\u3067\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u5909\u63db\u3060\u3051\u884c\u3044\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u3001 Transformer2D \u306e\u7b2c 1 \u5f15\u6570\u306b Mat3x2 : Identity () \u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u7528\u306e\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { ClearPrint (); if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); // \u63cf\u753b\u306f\u5ea7\u6a19\u5909\u63db\u305b\u305a\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3060\u3051\u5909\u63db const Transformer2D transform ( Mat3x2 :: Identity (), Mat3x2 :: Translate ( viewportRect . pos )); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u304c\u5909\u63db\u3055\u308c\u3066\u3044\u308b Print << Cursor :: PosF (); Circle ( Cursor :: PosF (), 20 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); } } } Transformer2D \u306e\u52b9\u679c\u306e\u4e57\u7b97 \u00b6 Transformer2D \u306e\u52b9\u679c\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u65b0\u3057\u3044 Transformer2D \u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u5ea7\u6a19\u5909\u63db\u306e\u52b9\u679c\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u91cd\u306d\u304c\u3051\u306b\u3088\u3063\u3066\u8907\u96d1\u306a\u52d5\u304d\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double t = Scene :: Time () * - 30 _deg ; const Transformer2D t0 ( Mat3x2 :: Translate ( Scene :: Center ())); Circle ( 0 , 0 , 40 ). draw ( Palette :: Orange ); Circle ( 0 , 0 , 160 ). drawFrame (); const Transformer2D t1 ( Mat3x2 :: Translate ( 160 , 0 ). rotated ( t )); Circle ( 0 , 0 , 20 ). draw ( Palette :: Skyblue ); Circle ( 0 , 0 , 40 ). drawFrame (); const Transformer2D t2 ( Mat3x2 :: Translate ( 40 , 0 ). rotated ( t * 4 )); Circle ( 0 , 0 , 10 ). draw ( Palette :: White ); } } 15.7 2D \u30ab\u30e1\u30e9 \u00b6 Camera2D \u3092\u4f7f\u3046\u3068\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u305f\u76f4\u611f\u7684\u306a\u64cd\u4f5c\u3067 Transformer2D \u3092\u4f5c\u6210\u3001\u66f4\u65b0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Camera2D :: update () \u3067\u306f W/A/S/D \u30ad\u30fc\u3067\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52d5\u3001\u2191/\u2193 \u30ad\u30fc\u3067\u62e1\u5927\u7e2e\u5c0f\u3001\u30de\u30a6\u30b9\u53f3\u30af\u30ea\u30c3\u30af\u3067\u81ea\u7531\u79fb\u52d5\u3001\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u62e1\u5927\u7e2e\u5c0f\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u30ad\u30fc\u64cd\u4f5c\u3092\u7121\u52b9\u306b\u3057\u305f\u3044\u5834\u5408\u306f Camera2D \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Camera2DParameters :: MouseOnly () \u3092\u6e21\u3057\u307e\u3059\u3002\u30ab\u30e1\u30e9\u306e\u6319\u52d5\u306f Camera2DParameters \u306b\u3088\u3063\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Camera2D :: draw () \u3067\u306f\u30de\u30a6\u30b9\u3067\u306e\u30ab\u30e1\u30e9\u64cd\u4f5c\u3092\u88dc\u52a9\u3059\u308b\u77e2\u5370 UI \u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 , 0.8 , 0.7 )); const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // 2D \u30ab\u30e1\u30e9 // \u4e2d\u5fc3\u304c (0, 0), \u62e1\u5927\u7387 1.0 \u306b\u306a\u308b\u3088\u3046\u306a\u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 1.0 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); for ( int32 i = 0 ; i < 8 ; ++ i ) { Circle ( 0 , 0 , 50 + i * 50 ). drawFrame ( 2 ); } cat . drawAt ( 0 , 0 ); Shape2D :: Star ( 50 , Vec2 ( 200 , 200 )). draw ( Palette :: Yellow ); } if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // 2D \u30ab\u30e1\u30e9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 camera . setCenter ( Vec2 ( 0 , 0 )); camera . setTargetCenter ( Vec2 ( 0 , 0 )); camera . setScale ( 1.0 ); camera . setTargetScale ( 1.0 ); } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } 15.8 \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u30e2\u30fc\u30c9\u3067\u63cf\u753b \u00b6 ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b RasterizerState :: WireframeCullNone \u3092\u6e21\u3059\u3068\u3001\u56f3\u5f62\u3084\u753b\u50cf\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306e\u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u304c\u63cf\u753b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u8868\u793a\u30e2\u30fc\u30c9\u306b const ScopedRenderStates2D rasterizer ( RasterizerState :: WireframeCullNone ); textureWindmill . draw ( 20 , 20 ); Circle ( Scene :: Center (), 100 ). draw (); Shape2D :: Star ( 100 , Vec2 ( 150 , 400 )). draw ( Palette :: Yellow ); } } 15.9 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u304f\u308a\u8fd4\u3057 \u00b6 ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u6642\u306b UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u306e\u51e6\u7406\u306e\u65b9\u6cd5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Texture :: mapped () \u306b\u3088\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u3060\u3051\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3088\u3046\u306a TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3092\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: RepeatLinear \u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067 .draw () \u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u304c\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture tree ( Emoji ( U \"\ud83c\udf32\" )); while ( System :: Update ()) { // UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u3001\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0 const ScopedRenderStates2D rasterizer ( SamplerState :: RepeatLinear ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3074\u3063\u305f\u308a\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u63cf\u753b tree . mapped ( Scene :: Size ()). draw (); } } 15.10 \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u00b6 ScopedRenderStates2D \u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b BlendState , SamplerState , RasterizerState \u306e 3 \u3064\u3092\u4e00\u5ea6\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 BlendState , SamplerState , RasterizerState \u306f\u3001\u3053\u306e\u7ae0\u3067\u7d39\u4ecb\u3057\u305f\u4ee5\u5916\u306b\u3082\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3061\u3001\u69d8\u3005\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u53ef\u80fd\u3067\u3059\u30022D \u63cf\u753b\u306b\u304a\u3051\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f BlendState :: Default , SamplerState :: Default2D , RasterizerState :: Default2D \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Scoped\uff5e \u306e\u306f\u305f\u3089\u304d \u00b6 Scoped \uff5e \u7cfb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084 Transformer2D \u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u4f55\u3082\u50cd\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u81ea\u8eab\u304c\u7834\u68c4\u3055\u308c\u308b\u3068\u304d\uff08\u30b9\u30b3\u30fc\u30d7\u304c\u7d42\u4e86\u3059\u308b\u3068\u304d\uff09\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6700\u521d\u306e\u72b6\u614b\u306b\u623b\u3059\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { { // \u7dda\u5f62\u88dc\u9593\u3092\u7121\u52b9\u306b\u3059\u308b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6709\u52b9\u5316 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( 4 ). drawAt ( 200 , 300 ); } // \u3053\u3053\u3067 state \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u304c\u521d\u671f\u72b6\u614b\u306b cat . scaled ( 4 ). drawAt ( 600 , 300 ); } }","title":"15. 2D render states"},{"location":"tutorial/2d-renderstates/#15-2d-render-states","text":"\u3053\u306e\u7ae0\u3067\u306f\u30012D \u63cf\u753b\u306e\u8a2d\u5b9a\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u3001\u8868\u73fe\u306e\u5e45\u3092\u5e83\u3052\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"15. 2D render states"},{"location":"tutorial/2d-renderstates/#151","text":"ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b BlendState :: Additive \u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u56f3\u5f62\u3084\u753b\u50cf\u304c\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3067\u306f\u3001\u80cc\u666f\u8272\u306b RGB \u6210\u5206\u3092\u52a0\u7b97\u3059\u308b\u3088\u3046\u306b\u63cf\u753b\u3055\u308c\u308b\u306e\u3067\u3001\u91cd\u306d\u3066\u63cf\u753b\u3057\u305f\u90e8\u5206\u304c\u660e\u308b\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; for ( int32 i = 0 ; i < 400 ; ++ i ) { points << RandomVec2 ( Scene :: Rect ()); } bool enabled = true ; while ( System :: Update ()) { if ( enabled ) { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u6709\u52b9 const ScopedRenderStates2D state ( BlendState :: Additive ); for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } else { // \u901a\u5e38\u306e\u30d6\u30ec\u30f3\u30c9\u30e2\u30fc\u30c9 for ( const auto & point : points ) { Circle ( point , 20 ). draw ( HSV ( point . y * 100 + point . x * 100 , 0.5 )); } } SimpleGUI :: CheckBox ( enabled , U \"AdditiveBlend\" , Vec2 ( 20 , 20 )); } }","title":"15.1 \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9"},{"location":"tutorial/2d-renderstates/#152","text":"\u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorAdd2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u52a0\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u52a0\u7b97\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 0.0 , 0.0 , 0.0 , 0.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97 const ScopedColorAdd2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } }","title":"15.2 \u63cf\u753b\u6642\u306b\u8272\u3092\u52a0\u7b97"},{"location":"tutorial/2d-renderstates/#153","text":"\u753b\u50cf\u3084\u56f3\u5f62\u3092\u63cf\u304f\u3068\u304d\u306b\u3001\u672c\u6765\u306e\u8272\u306b RGBA \u6210\u5206\u3092\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3059\u308b\u306b\u306f\u3001 ScopedColorMul2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3001\u4e57\u7b97\u3057\u305f\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u63cf\u753b\u306e RGBA \u5024\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002 \u306a\u304a\u3001 .draw () \u306b\u8272\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u500b\u5225\u306b\u4e57\u7b97\u306e\u8272\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff08\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb 5.10 \u53c2\u7167\uff09\u3002 ScopedColorMul2D \u306f\u305d\u306e\u8a2d\u5b9a\u3092\u4e00\u62ec\u3057\u3066\u9069\u7528\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); ColorF add ( 1.0 , 1.0 , 1.0 , 1.0 ); while ( System :: Update ()) { { // \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97 const ScopedColorMul2D state ( add ); textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } SimpleGUI :: Slider ( U \"R\" , add . r , Vec2 ( 620 , 20 ), 40 ); SimpleGUI :: Slider ( U \"G\" , add . g , Vec2 ( 620 , 60 ), 40 ); SimpleGUI :: Slider ( U \"B\" , add . b , Vec2 ( 620 , 100 ), 40 ); } }","title":"15.3 \u63cf\u753b\u6642\u306b\u8272\u3092\u4e57\u7b97"},{"location":"tutorial/2d-renderstates/#154","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b\u969b\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u306b\u3088\u3063\u3066\u8272\u304c\u6ed1\u3089\u304b\u306b\u88dc\u9593\u3055\u308c\u307e\u3059\u3002\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3063\u305f\u307e\u307e\u62e1\u5927\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: ClampNearest \u3092 ScopedRenderStates2D \u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); bool linear = true ; double scale = 1.0 ; while ( System :: Update ()) { if ( linear ) { // \u901a\u5e38\u306e\u30b5\u30f3\u30d7\u30e9\u30fc\u30e2\u30fc\u30c9 cat . scaled ( scale ). drawAt ( Scene :: Center ()); } else { // \u7dda\u5f62\u88dc\u9593\u306a\u3057 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( scale ). drawAt ( Scene :: Center ()); } SimpleGUI :: Slider ( scale , 0.1 , 8.0 , Vec2 ( 20 , 20 ), 200 ); SimpleGUI :: CheckBox ( linear , U \"Linear\" , Vec2 ( 20 , 60 )); } }","title":"15.4 \u30c6\u30af\u30b9\u30c1\u30e3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30d5\u30a3\u30eb\u30bf"},{"location":"tutorial/2d-renderstates/#155","text":"ScopedViewport2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30b7\u30fc\u30f3\u5185\u306b\u4eee\u60f3\u306e\u30b7\u30fc\u30f3\u3092\u4f5c\u308a\u3001\u65b0\u3057\u3044\u9577\u65b9\u5f62\u306e\u63cf\u753b\u9818\u57df\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u63cf\u753b\u6642\u306b\u306f\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u304c (0, 0) \u306e\u63cf\u753b\u5ea7\u6a19\u306b\u306a\u308a\u3001\u9577\u65b9\u5f62\u306e\u7bc4\u56f2\u5916\u306b\u306f\u307f\u51fa\u305f\u3082\u306e\u306f\u63cf\u753b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306f\u63cf\u753b\u306e\u5ea7\u6a19\u306b\u3057\u304b\u5f71\u97ff\u3092\u53ca\u307c\u3055\u306a\u3044\u306e\u3067\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u540c\u69d8\u306b\u79fb\u52d5\u3055\u305b\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u5f8c\u8ff0\u3059\u308b Transformer2D \u3068\u7d44\u307f\u5408\u308f\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); } } }","title":"15.5 \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8"},{"location":"tutorial/2d-renderstates/#156","text":"Transformer2D \u306f\u3001\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u3001\u4e00\u62ec\u3067\u56de\u8ee2\u30fb\u62e1\u5927\u7e2e\u5c0f\u3001\u5ea7\u6a19\u79fb\u52d5\u306a\u3069\u306e\u5ea7\u6a19\u5909\u63db\u3092\u9069\u7528\u3067\u304d\u308b\u3001\u975e\u5e38\u306b\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3059\u3002 \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092 Mat3x2 \u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3057\u3001 Transformer2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u6709\u52b9\u306a\u9593\u3001\u305d\u306e\u884c\u5217\u306b\u3088\u308b\u5ea7\u6a19\u5909\u63db\u304c\u63cf\u753b\u3084\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); constexpr Circle circle ( 200 , 400 , 60 ); size_t index = 0 ; while ( System :: Update ()) { // \u4f55\u3082\u3057\u306a\u3044\u884c\u5217 Mat3x2 mat = Mat3x2 :: Identity (); if ( index == 0 ) { } else if ( index == 1 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u57fa\u6e96\u306b 1.5 \u500d\u62e1\u5927 mat = Mat3x2 :: Scale ( 1.5 , Scene :: Center ()); } else if ( index == 2 ) { // (50, 50) \u79fb\u52d5 mat = Mat3x2 :: Translate ( 50 , 50 ); } else if ( index == 3 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066 30\u00b0 \u56de\u8ee2 mat = Mat3x2 :: Rotate ( 30 _deg , Scene :: Center ()); } else if ( index == 4 ) { // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u3092\u56de\u8ee2\u306e\u8ef8\u306b\u3057\u3066\u5f90\u3005\u306b\u56de\u8ee2\u3057\u306a\u304c\u3089\u62e1\u5927 mat = Mat3x2 :: Rotate ( Scene :: Time () * 5 _deg , Scene :: Center ()) . scaled ( 1.0 + Scene :: Time () * 0.03 , Scene :: Center ()); } { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3082\u63cf\u753b\u3068\u540c\u69d8\u306b\u5909\u63db constexpr bool transformCursorPos = true ; // \u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u9069\u7528 const Transformer2D t ( mat , transformCursorPos ); textureWindmill . draw ( 0 , 0 ); textureSiv3DKun . draw ( 360 , 100 ); circle . draw ( circle . mouseOver () ? Palette :: Red : Palette :: Yellow ); } SimpleGUI :: RadioButtons ( index , { U \"Identity\" , U \"Scale\" , U \"Translate\" , U \"Rotate\" , U \"Roatate * Scale\" }, Vec2 ( 600 , 20 )); } }","title":"15.6 \u5ea7\u6a19\u5909\u63db"},{"location":"tutorial/2d-renderstates/#_1","text":"\u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u305f\u969b\u306a\u3069\u3001\u63cf\u753b\u306e\u5ea7\u6a19\u5909\u63db\u306f\u4e0d\u8981\u3067\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u5909\u63db\u3060\u3051\u884c\u3044\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u3001 Transformer2D \u306e\u7b2c 1 \u5f15\u6570\u306b Mat3x2 : Identity () \u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u7528\u306e\u5ea7\u6a19\u5909\u63db\u884c\u5217\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9818\u57df Rect viewportRect ( 200 , 200 , 400 , 200 ); bool grab = false ; while ( System :: Update ()) { ClearPrint (); if ( grab ) { viewportRect . pos . moveBy ( Cursor :: Delta ()); } // \u30df\u30cb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u30d0\u30fc const Rect bar ( viewportRect . pos . movedBy ( 0 , - 40 ), viewportRect . w , 40 ); // \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u3092\u3064\u304b\u3093\u3067\u79fb\u52d5 if ( bar . leftClicked ()) { grab = true ; } else if ( MouseL . up ()) { grab = false ; } bar . stretched ( 2 , 2 , 0 , 2 ). draw ( Palette :: Seagreen ); viewportRect . drawFrame ( 0 , 2 , Palette :: Seagreen ); { // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u306e\u9069\u7528 const ScopedViewport2D viewport ( viewportRect ); // \u63cf\u753b\u306f\u5ea7\u6a19\u5909\u63db\u305b\u305a\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3060\u3051\u5909\u63db const Transformer2D transform ( Mat3x2 :: Identity (), Mat3x2 :: Translate ( viewportRect . pos )); Rect ( 0 , 0 , viewportRect . size ). draw ( ColorF ( 0.8 , 0.9 , 1.0 )); Circle ( 200 , 100 , 150 ). draw (); cat . drawAt ( 20 , 20 ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u304c\u5909\u63db\u3055\u308c\u3066\u3044\u308b Print << Cursor :: PosF (); Circle ( Cursor :: PosF (), 20 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); } } }","title":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u307f\u5ea7\u6a19\u5909\u63db"},{"location":"tutorial/2d-renderstates/#transformer2d","text":"Transformer2D \u306e\u52b9\u679c\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u65b0\u3057\u3044 Transformer2D \u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u5ea7\u6a19\u5909\u63db\u306e\u52b9\u679c\u304c\u4e57\u7b97\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u91cd\u306d\u304c\u3051\u306b\u3088\u3063\u3066\u8907\u96d1\u306a\u52d5\u304d\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double t = Scene :: Time () * - 30 _deg ; const Transformer2D t0 ( Mat3x2 :: Translate ( Scene :: Center ())); Circle ( 0 , 0 , 40 ). draw ( Palette :: Orange ); Circle ( 0 , 0 , 160 ). drawFrame (); const Transformer2D t1 ( Mat3x2 :: Translate ( 160 , 0 ). rotated ( t )); Circle ( 0 , 0 , 20 ). draw ( Palette :: Skyblue ); Circle ( 0 , 0 , 40 ). drawFrame (); const Transformer2D t2 ( Mat3x2 :: Translate ( 40 , 0 ). rotated ( t * 4 )); Circle ( 0 , 0 , 10 ). draw ( Palette :: White ); } }","title":"Transformer2D \u306e\u52b9\u679c\u306e\u4e57\u7b97"},{"location":"tutorial/2d-renderstates/#157-2d","text":"Camera2D \u3092\u4f7f\u3046\u3068\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3063\u305f\u76f4\u611f\u7684\u306a\u64cd\u4f5c\u3067 Transformer2D \u3092\u4f5c\u6210\u3001\u66f4\u65b0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Camera2D :: update () \u3067\u306f W/A/S/D \u30ad\u30fc\u3067\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52d5\u3001\u2191/\u2193 \u30ad\u30fc\u3067\u62e1\u5927\u7e2e\u5c0f\u3001\u30de\u30a6\u30b9\u53f3\u30af\u30ea\u30c3\u30af\u3067\u81ea\u7531\u79fb\u52d5\u3001\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u62e1\u5927\u7e2e\u5c0f\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u30ad\u30fc\u64cd\u4f5c\u3092\u7121\u52b9\u306b\u3057\u305f\u3044\u5834\u5408\u306f Camera2D \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Camera2DParameters :: MouseOnly () \u3092\u6e21\u3057\u307e\u3059\u3002\u30ab\u30e1\u30e9\u306e\u6319\u52d5\u306f Camera2DParameters \u306b\u3088\u3063\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Camera2D :: draw () \u3067\u306f\u30de\u30a6\u30b9\u3067\u306e\u30ab\u30e1\u30e9\u64cd\u4f5c\u3092\u88dc\u52a9\u3059\u308b\u77e2\u5370 UI \u3092\u8868\u793a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 , 0.8 , 0.7 )); const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // 2D \u30ab\u30e1\u30e9 // \u4e2d\u5fc3\u304c (0, 0), \u62e1\u5927\u7387 1.0 \u306b\u306a\u308b\u3088\u3046\u306a\u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , 0 ), 1.0 ); while ( System :: Update ()) { // 2D \u30ab\u30e1\u30e9\u3092\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u306e\u8a2d\u5b9a\u304b\u3089 Transformer2D \u3092\u4f5c\u6210 const auto t = camera . createTransformer (); for ( int32 i = 0 ; i < 8 ; ++ i ) { Circle ( 0 , 0 , 50 + i * 50 ). drawFrame ( 2 ); } cat . drawAt ( 0 , 0 ); Shape2D :: Star ( 50 , Vec2 ( 200 , 200 )). draw ( Palette :: Yellow ); } if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // 2D \u30ab\u30e1\u30e9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 camera . setCenter ( Vec2 ( 0 , 0 )); camera . setTargetCenter ( Vec2 ( 0 , 0 )); camera . setScale ( 1.0 ); camera . setTargetScale ( 1.0 ); } // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"15.7 2D \u30ab\u30e1\u30e9"},{"location":"tutorial/2d-renderstates/#158","text":"ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b RasterizerState :: WireframeCullNone \u3092\u6e21\u3059\u3068\u3001\u56f3\u5f62\u3084\u753b\u50cf\u3092\u69cb\u6210\u3059\u308b\u30dd\u30ea\u30b4\u30f3\u306e\u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u304c\u63cf\u753b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" ); while ( System :: Update ()) { // \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u8868\u793a\u30e2\u30fc\u30c9\u306b const ScopedRenderStates2D rasterizer ( RasterizerState :: WireframeCullNone ); textureWindmill . draw ( 20 , 20 ); Circle ( Scene :: Center (), 100 ). draw (); Shape2D :: Star ( 100 , Vec2 ( 150 , 400 )). draw ( Palette :: Yellow ); } }","title":"15.8 \u30ef\u30a4\u30e4\u30d5\u30ec\u30fc\u30e0\u30e2\u30fc\u30c9\u3067\u63cf\u753b"},{"location":"tutorial/2d-renderstates/#159","text":"ScopedRenderStates2D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u6642\u306b UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u306e\u51e6\u7406\u306e\u65b9\u6cd5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Texture :: mapped () \u306b\u3088\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u3060\u3051\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3088\u3046\u306a TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3092\u30b5\u30f3\u30d7\u30e9\u30fc\u30b9\u30c6\u30fc\u30c8 SamplerState :: RepeatLinear \u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067 .draw () \u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5185\u5bb9\u304c\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture tree ( Emoji ( U \"\ud83c\udf32\" )); while ( System :: Update ()) { // UV \u5ea7\u6a19\u304c 0.0\uff5e1.0 \u306e\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3068\u304d\u3001\u304f\u308a\u8fd4\u3057\u30de\u30c3\u30d4\u30f3\u30b0 const ScopedRenderStates2D rasterizer ( SamplerState :: RepeatLinear ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3074\u3063\u305f\u308a\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u63cf\u753b tree . mapped ( Scene :: Size ()). draw (); } }","title":"15.9 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u304f\u308a\u8fd4\u3057"},{"location":"tutorial/2d-renderstates/#1510","text":"","title":"15.10 \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"tutorial/2d-renderstates/#_2","text":"ScopedRenderStates2D \u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b BlendState , SamplerState , RasterizerState \u306e 3 \u3064\u3092\u4e00\u5ea6\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 BlendState , SamplerState , RasterizerState \u306f\u3001\u3053\u306e\u7ae0\u3067\u7d39\u4ecb\u3057\u305f\u4ee5\u5916\u306b\u3082\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3061\u3001\u69d8\u3005\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u53ef\u80fd\u3067\u3059\u30022D \u63cf\u753b\u306b\u304a\u3051\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f BlendState :: Default , SamplerState :: Default2D , RasterizerState :: Default2D \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"tutorial/2d-renderstates/#scoped","text":"Scoped \uff5e \u7cfb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084 Transformer2D \u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u4f55\u3082\u50cd\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u81ea\u8eab\u304c\u7834\u68c4\u3055\u308c\u308b\u3068\u304d\uff08\u30b9\u30b3\u30fc\u30d7\u304c\u7d42\u4e86\u3059\u308b\u3068\u304d\uff09\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6700\u521d\u306e\u72b6\u614b\u306b\u623b\u3059\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { { // \u7dda\u5f62\u88dc\u9593\u3092\u7121\u52b9\u306b\u3059\u308b\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u3092\u6709\u52b9\u5316 const ScopedRenderStates2D state ( SamplerState :: ClampNearest ); cat . scaled ( 4 ). drawAt ( 200 , 300 ); } // \u3053\u3053\u3067 state \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8\u304c\u521d\u671f\u72b6\u614b\u306b cat . scaled ( 4 ). drawAt ( 600 , 300 ); } }","title":"Scoped\uff5e \u306e\u306f\u305f\u3089\u304d"},{"location":"tutorial/animation/","text":"3. Animation \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002 3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Scene::Time() \u00b6 Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Scene::Center() \u00b6 \u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } } Scene::DeltaTime() \u00b6 Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } } step \u00b6 Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++i) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } } OffsetCircular \u00b6 \u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } } 3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u00b6 \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8 \u00b6 Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002 MouseL.down() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } } Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b \u00b6 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } } 3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Periodic::Square0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } } Periodic::Triangle0_1() \u00b6 0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Triangle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sine0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sawtooth0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Jump0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } } 3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 \u00b6 Transition \u00b6 \u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 MouseL.pressed() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } 3.5 \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 Min, Max \u00b6 Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 \u7dda\u5f62\u88dc\u9593 \u00b6 \u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"3. Animation"},{"location":"tutorial/animation/#3-animation","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002","title":"3. Animation"},{"location":"tutorial/animation/#31","text":"","title":"3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorial/animation/#scenetime","text":"Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002","title":"Scene::Time()"},{"location":"tutorial/animation/#scenecenter","text":"\u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"Scene::Center()"},{"location":"tutorial/animation/#scenedeltatime","text":"Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } }","title":"Scene::DeltaTime()"},{"location":"tutorial/animation/#step","text":"Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++i) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } }","title":"step"},{"location":"tutorial/animation/#offsetcircular","text":"\u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } }","title":"OffsetCircular"},{"location":"tutorial/animation/#32","text":"\u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002","title":"3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1"},{"location":"tutorial/animation/#stopwatch","text":"Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002","title":"Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8"},{"location":"tutorial/animation/#mouseldown","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"MouseL.down()"},{"location":"tutorial/animation/#stopwatch_1","text":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } }","title":"Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b"},{"location":"tutorial/animation/#33","text":"Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorial/animation/#periodicsquare0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } }","title":"Periodic::Square0_1()"},{"location":"tutorial/animation/#periodictriangle0_1","text":"0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Triangle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Triangle0_1()"},{"location":"tutorial/animation/#periodicsine0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sine0_1()"},{"location":"tutorial/animation/#periodicsawtooth0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sawtooth0_1()"},{"location":"tutorial/animation/#periodicjump0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } }","title":"Periodic::Jump0_1()"},{"location":"tutorial/animation/#34","text":"","title":"3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3"},{"location":"tutorial/animation/#transition","text":"\u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Transition"},{"location":"tutorial/animation/#mouselpressed","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } }","title":"MouseL.pressed()"},{"location":"tutorial/animation/#35","text":"","title":"3.5 \u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"tutorial/animation/#min-max","text":"Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Min, Max"},{"location":"tutorial/animation/#_1","text":"\u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } }","title":"\u7dda\u5f62\u88dc\u9593"},{"location":"tutorial/animation/#_2","text":"0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"tutorial/asset/","text":"17. Asset management \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3042\u3089\u3086\u308b\u3068\u3053\u308d\u304b\u3089 Texture , Audio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 17.1 \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u306e\u57fa\u672c \u00b6 Siv3D \u306f Texture \u3084 Aufio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u306e\u30cf\u30f3\u30c9\u30eb\u306b\u540d\u524d\u3092\u3064\u3051\u3001\u540d\u524d\u3092\u901a\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u300c\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u300d\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u6271\u3046\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332 (Register)\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30d7\u30ea\u30ed\u30fc\u30c9 (Preload)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u4f7f\u7528\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30ea\u30ea\u30fc\u30b9 (Release)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332\u89e3\u9664 (Unregister)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u767b\u9332 \u00b6 \u30a2\u30bb\u30c3\u30c8\u3092\u30a8\u30f3\u30b8\u30f3\u306b\u767b\u9332\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u7a2e\u985e\uff08\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308b\u304b\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u3067\u3042\u308b\u304b\u306a\u3069\uff09\u3092\u95a2\u6570\u3067\u6307\u5b9a\u3057\u3001\u30a2\u30bb\u30c3\u30c8\u306b\u4e00\u610f\u306e\u540d\u524d\u3092\u3064\u3051\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u3069\u306e\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002 \u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u3053\u306e\u6642\u70b9\u3067\u306f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306f\u69cb\u7bc9\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u5897\u3048\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30d7\u30ea\u30ed\u30fc\u30c9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u5b9f\u969b\u306b\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a8\u30f3\u30b8\u30f3\u304c\u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b\u4e0e\u3048\u3089\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5f93\u3063\u3066\u30e1\u30e2\u30ea\u306b\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u3059\u3067\u306b\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002 \u4f7f\u7528 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u3001 Texture \u3084 Audio \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u3053\u308c\u3092\u4f7f\u3063\u3066\u3001\u524d\u7ae0\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b .draw () \u3057\u305f\u308a\u3001 .play () \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e Texture \u3084 Audio \u3092\u8fd4\u3057\u307e\u3059\u3002\u30d7\u30ea\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30fc\u30c9\u3092\u884c\u3044\u307e\u3059\u3002 \u30ea\u30ea\u30fc\u30b9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u4e0a\u304b\u3089\u89e3\u653e\u3057\u307e\u3059\u3002 \u30ea\u30ea\u30fc\u30b9\u5f8c\u3082\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u306f\u6b8b\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u518d\u5ea6\u30d7\u30ea\u30ed\u30fc\u30c9\u3057\u305f\u308a\u3001\u4f7f\u7528\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4e00\u5ea6\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3092\u3053\u306e\u5148\u3057\u3070\u3089\u304f\u4f7f\u308f\u305a\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u6291\u3048\u305f\u3044\u5834\u5408\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ea\u30ea\u30fc\u30b9\u3092\u3057\u307e\u3057\u3087\u3046\u3002 \u767b\u9332\u89e3\u9664 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u3068\u540d\u524d\u3092\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002 \u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30ea\u30ea\u30fc\u30b9\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642\u306b\u306f\u3059\u3079\u3066\u306e\u30a2\u30bb\u30c3\u30c8\u304c\u81ea\u52d5\u3067\u30ea\u30ea\u30fc\u30b9\u3001\u767b\u9332\u89e3\u9664\u3055\u308c\u308b\u305f\u3081\u3001\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u89e3\u9664\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 17.2 Texture \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { Draw (); } } 17.3 Audio \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void MakeSound () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"Sound\" ). playOneShot (); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 AudioAsset :: Register ( U \"BGM\" , U \"example/test.mp3\" ); AudioAsset :: Register ( U \"Sound\" , GMInstrument :: Piano1 , PianoKey :: A4 , 0.5 s ); // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"BGM\" ). setVolume ( 0.3 ); AudioAsset ( U \"BGM\" ). play (); while ( System :: Update ()) { if ( MouseL . down ()) { MakeSound (); } } } 17.4 Font \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb \u00b6 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 FontAsset ( U \"Title\" )( U \"My Game\" ). drawAt ( 400 , 100 ); FontAsset ( U \"Menu\" )( U \"Play\" ). drawAt ( 400 , 400 ); FontAsset ( U \"Menu\" )( U \"Exit\" ). drawAt ( 400 , 500 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 FontAsset :: Register ( U \"Title\" , 60 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 40 , Typeface :: Medium ); while ( System :: Update ()) { Draw (); } } 17.5 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u30ed\u30fc\u30c9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadImmediately () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u30b2\u30fc\u30e0\u306e\u5b9f\u884c\u4e2d\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u304c\u767a\u751f\u3057\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3059\u308b\u306e\u3092\u9632\u304e\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadImmediately ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadImmediately ()); while ( System :: Update ()) { Draw (); } } 17.6 \u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9 \u00b6 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadAsync () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u30a2\u30bb\u30c3\u30c8\u3092\u540c\u6642\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30ed\u30fc\u30c9\u6642\u9593\u3092\u6e1b\u3089\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 TextureAsset :: IsReady () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u3088\u308a\u524d\u306b\u30a2\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u7a7a\u306e Texture \u3084 Audio \u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 Warning macOS \u3068 Linux \u3067\u306f\u3001 Texture \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c System :: Update () \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u5b9f\u884c\u4e2d\u306f System :: Update () \u306e\u547c\u3073\u51fa\u3057\u3092\u901a\u5e38\u901a\u308a\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadAsync ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadAsync ()); bool loaded = false ; while ( System :: Update ()) { if ( ! loaded ) { // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b\u30c1\u30a7\u30c3\u30af const bool r1 = TextureAsset :: IsReady ( U \"Windmill\" ); const bool r2 = TextureAsset :: IsReady ( U \"Siv3D-kun\" ); if ( r1 && r2 ) // \u4e21\u65b9\u3068\u3082\u30ed\u30fc\u30c9\u5b8c\u4e86 { loaded = true ; } } if ( loaded ) { Draw (); } else { // \u30ed\u30fc\u30c9\u4e2d\u306f\u5186\u3092\u8868\u793a Circle ( Scene :: Center (), 100 ). draw (); } } }","title":"17. Asset management"},{"location":"tutorial/asset/#17-asset-management","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3042\u3089\u3086\u308b\u3068\u3053\u308d\u304b\u3089 Texture , Audio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"17. Asset management"},{"location":"tutorial/asset/#171","text":"Siv3D \u306f Texture \u3084 Aufio , Font \u306a\u3069\u306e\u30a2\u30bb\u30c3\u30c8\u306e\u30cf\u30f3\u30c9\u30eb\u306b\u540d\u524d\u3092\u3064\u3051\u3001\u540d\u524d\u3092\u901a\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u300c\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u300d\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u3092\u6271\u3046\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332 (Register)\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30d7\u30ea\u30ed\u30fc\u30c9 (Preload)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u4f7f\u7528\u300d \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u30ea\u30ea\u30fc\u30b9 (Release)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09 \u30a2\u30bb\u30c3\u30c8\u306e\u300c\u767b\u9332\u89e3\u9664 (Unregister)\u300d\uff08\u7701\u7565\u53ef\u80fd\uff09","title":"17.1 \u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u306e\u57fa\u672c"},{"location":"tutorial/asset/#_1","text":"\u30a2\u30bb\u30c3\u30c8\u3092\u30a8\u30f3\u30b8\u30f3\u306b\u767b\u9332\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u7a2e\u985e\uff08\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308b\u304b\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u3067\u3042\u308b\u304b\u306a\u3069\uff09\u3092\u95a2\u6570\u3067\u6307\u5b9a\u3057\u3001\u30a2\u30bb\u30c3\u30c8\u306b\u4e00\u610f\u306e\u540d\u524d\u3092\u3064\u3051\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306a\u3069\u306e\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002 \u7279\u306b\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u3053\u306e\u6642\u70b9\u3067\u306f\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u306f\u69cb\u7bc9\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u5897\u3048\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u767b\u9332"},{"location":"tutorial/asset/#_2","text":"\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u5b9f\u969b\u306b\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 \u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a8\u30f3\u30b8\u30f3\u304c\u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b\u4e0e\u3048\u3089\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5f93\u3063\u3066\u30e1\u30e2\u30ea\u306b\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u3059\u3067\u306b\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","title":"\u30d7\u30ea\u30ed\u30fc\u30c9"},{"location":"tutorial/asset/#_3","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u3001 Texture \u3084 Audio \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002 \u3053\u308c\u3092\u4f7f\u3063\u3066\u3001\u524d\u7ae0\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b .draw () \u3057\u305f\u308a\u3001 .play () \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u30a2\u30bb\u30c3\u30c8\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e Texture \u3084 Audio \u3092\u8fd4\u3057\u307e\u3059\u3002\u30d7\u30ea\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30fc\u30c9\u3092\u884c\u3044\u307e\u3059\u3002","title":"\u4f7f\u7528"},{"location":"tutorial/asset/#_4","text":"\u30a2\u30bb\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u4e0a\u304b\u3089\u89e3\u653e\u3057\u307e\u3059\u3002 \u30ea\u30ea\u30fc\u30b9\u5f8c\u3082\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u306f\u6b8b\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u518d\u5ea6\u30d7\u30ea\u30ed\u30fc\u30c9\u3057\u305f\u308a\u3001\u4f7f\u7528\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4e00\u5ea6\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3092\u3053\u306e\u5148\u3057\u3070\u3089\u304f\u4f7f\u308f\u305a\u3001\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092\u6291\u3048\u305f\u3044\u5834\u5408\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ea\u30ea\u30fc\u30b9\u3092\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u30ea\u30ea\u30fc\u30b9"},{"location":"tutorial/asset/#_5","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u60c5\u5831\u3068\u540d\u524d\u3092\u30a2\u30bb\u30c3\u30c8\u7ba1\u7406\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002 \u8a72\u5f53\u30a2\u30bb\u30c3\u30c8\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30ea\u30ea\u30fc\u30b9\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642\u306b\u306f\u3059\u3079\u3066\u306e\u30a2\u30bb\u30c3\u30c8\u304c\u81ea\u52d5\u3067\u30ea\u30ea\u30fc\u30b9\u3001\u767b\u9332\u89e3\u9664\u3055\u308c\u308b\u305f\u3081\u3001\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u89e3\u9664\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u767b\u9332\u89e3\u9664"},{"location":"tutorial/asset/#172-texture","text":"# include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" ); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { Draw (); } }","title":"17.2 Texture \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"tutorial/asset/#173-audio","text":"# include <Siv3D.hpp> void MakeSound () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"Sound\" ). playOneShot (); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 AudioAsset :: Register ( U \"BGM\" , U \"example/test.mp3\" ); AudioAsset :: Register ( U \"Sound\" , GMInstrument :: Piano1 , PianoKey :: A4 , 0.5 s ); // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 AudioAsset ( U \"BGM\" ). setVolume ( 0.3 ); AudioAsset ( U \"BGM\" ). play (); while ( System :: Update ()) { if ( MouseL . down ()) { MakeSound (); } } }","title":"17.3 Audio \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"tutorial/asset/#174-font","text":"# include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 FontAsset ( U \"Title\" )( U \"My Game\" ). drawAt ( 400 , 100 ); FontAsset ( U \"Menu\" )( U \"Play\" ). drawAt ( 400 , 400 ); FontAsset ( U \"Menu\" )( U \"Exit\" ). drawAt ( 400 , 500 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332 FontAsset :: Register ( U \"Title\" , 60 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 40 , Typeface :: Medium ); while ( System :: Update ()) { Draw (); } }","title":"17.4 Font \u30a2\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb"},{"location":"tutorial/asset/#175","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadImmediately () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30d7\u30ea\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u30b2\u30fc\u30e0\u306e\u5b9f\u884c\u4e2d\u306b\u30a2\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c9\u304c\u767a\u751f\u3057\u3066\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u304c\u4f4e\u4e0b\u3059\u308b\u306e\u3092\u9632\u304e\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadImmediately ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadImmediately ()); while ( System :: Update ()) { Draw (); } }","title":"17.5 \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u30ed\u30fc\u30c9"},{"location":"tutorial/asset/#176","text":"\u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u6642\u306b AssetParameter :: LoadAsync () \u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3068\u3001\u767b\u9332\u5f8c\u306b\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u30a2\u30bb\u30c3\u30c8\u3092\u540c\u6642\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30ed\u30fc\u30c9\u6642\u9593\u3092\u6e1b\u3089\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u3068 TextureAsset :: IsReady () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u3088\u308a\u524d\u306b\u30a2\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u7a7a\u306e Texture \u3084 Audio \u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f TextureAsset \u3068 AudioAsset \u306b\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 Warning macOS \u3068 Linux \u3067\u306f\u3001 Texture \u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c System :: Update () \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u975e\u540c\u671f\u30ed\u30fc\u30c9\u3092\u5b9f\u884c\u4e2d\u306f System :: Update () \u306e\u547c\u3073\u51fa\u3057\u3092\u901a\u5e38\u901a\u308a\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Draw () { // \u30a2\u30bb\u30c3\u30c8\u306e\u4f7f\u7528 TextureAsset ( U \"Windmill\" ). draw (); TextureAsset ( U \"Siv3D-kun\" ). scaled ( 0.8 ). drawAt ( 200 , 200 ); } void Main () { // \u30a2\u30bb\u30c3\u30c8\u306e\u767b\u9332\u3068\u540c\u6642\u306b\u30d7\u30ea\u30ed\u30fc\u30c9 TextureAsset :: Register ( U \"Windmill\" , U \"example/windmill.png\" , AssetParameter :: LoadAsync ()); TextureAsset :: Register ( U \"Siv3D-kun\" , U \"example/siv3d-kun.png\" , TextureDesc :: Mipped , AssetParameter :: LoadAsync ()); bool loaded = false ; while ( System :: Update ()) { if ( ! loaded ) { // \u975e\u540c\u671f\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u304b\u30c1\u30a7\u30c3\u30af const bool r1 = TextureAsset :: IsReady ( U \"Windmill\" ); const bool r2 = TextureAsset :: IsReady ( U \"Siv3D-kun\" ); if ( r1 && r2 ) // \u4e21\u65b9\u3068\u3082\u30ed\u30fc\u30c9\u5b8c\u4e86 { loaded = true ; } } if ( loaded ) { Draw (); } else { // \u30ed\u30fc\u30c9\u4e2d\u306f\u5186\u3092\u8868\u793a Circle ( Scene :: Center (), 100 ). draw (); } } }","title":"17.6 \u30a2\u30bb\u30c3\u30c8\u306e\u975e\u540c\u671f\u30ed\u30fc\u30c9"},{"location":"tutorial/audio/","text":"13. Audio \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u52b9\u679c\u97f3\u3084\u97f3\u697d\u306e\u518d\u751f\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 13.1 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u305f\u3044\u3068\u304d\u306f Audio \u3092\u4f5c\u6210\u3057\u3001 .play () \u3067\u518d\u751f\u3057\u307e\u3059\u3002\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b .play () \u3092\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Audio \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Texture \u3084 Font \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Audio \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Audio \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210 const Audio audio ( U \"example/test.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } } \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.4.0 \u3067\u306f\u30014 \u7a2e\u985e\u306e\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 WAVE wav \u2714 MP3 mp3 \u2714 AAC m4a \u2714 (Windows / macOS \u306e\u307f) Ogg Vorbis ogg \u2714 Opus opus (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 13.2 \u4e00\u6642\u505c\u6b62\u3068\u5dfb\u304d\u623b\u3057 \u00b6 \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f . pause () , \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059\u306b\u306f .stop () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ))) { // \u518d\u751f audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 60 ))) { // \u4e00\u6642\u505c\u6b62 audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 ( 20 , 100 ))) { // \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop (); } } } 13.3 \u97f3\u91cf\u3092\u5909\u3048\u308b \u00b6 \u97f3\u91cf\u3092\u5909\u3048\u308b\u306b\u306f .setVolume () \u306b 0.0\uff5e1.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u5927\u306e 1.0 \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double volume = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( volume , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf\u3092\u8a2d\u5b9a (0.0 - 1.0) audio . setVolume ( volume ); } } } 13.4 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b \u00b6 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b\u306b\u306f .setSpeed () \u306b\u3001\u30b9\u30d4\u30fc\u30c9\u306e\u500d\u7387\u306b\u3042\u305f\u308b 0.1\uff5e2.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1.0 \u3067\u3059\u3002\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u304c\u901f\u304f\u306a\u308b\u3068\u97f3\u306f\u9ad8\u304f\u805e\u3053\u3048\u3001\u9045\u304f\u306a\u308b\u3068\u4f4e\u304f\u805e\u3053\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double speed = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( speed ), speed , 0.1 , 2.0 , Vec2 ( 20 , 20 ))) { // \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u8a2d\u5b9a (0.1 - 2.0) audio . setSpeed ( speed ); } } } 13.5 \u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b \u00b6 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u5408\u8a08\u518d\u751f\u6642\u9593\uff08\u79d2\uff09\u306f .lengthSec () , \u5408\u8a08\u518d\u751f\u30b5\u30f3\u30d7\u30eb\u306f .samples () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e\u3092 .posSec () \u3067\u306f\u79d2\u3001 .posSample () \u3067\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u518d\u751f\u4f4d\u7f6e\u3088\u308a\u5c11\u3057\u5148\u884c\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u306e\u30b5\u30f3\u30d7\u30eb\u4f4d\u7f6e\u3092 .streamPosSample () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53\u306e\u9577\u3055 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u73fe\u5728\u306e\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); } } 13.6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b \u00b6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 .setPosSample () \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001 .setPosSec () \u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u6642\u9593\uff08\u79d2\uff09\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); if ( SimpleGUI :: Button ( U \"0 samples\" , Vec2 ( 300 , 20 ))) { // 0 \u30b5\u30f3\u30d7\u30eb\u76ee\uff08\u66f2\u306e\u5148\u982d\uff09\u306b\u79fb\u52d5 audio . setPosSample ( 0 ); } if ( SimpleGUI :: Button ( U \"441,000 samples\" , Vec2 ( 300 , 60 ))) { // 441,000 \u30b5\u30f3\u30d7\u30eb\u76ee\u306b\u79fb\u52d5 audio . setPosSample ( 441000 ); } if ( SimpleGUI :: Button ( U \"20.0 sec\" , Vec2 ( 300 , 100 ))) { // 20 \u79d2\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5 audio . setPosSec ( 20.0 ); } } } 13.7 \u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b \u00b6 \u66f2\u306e\u518d\u751f\u304c\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u81ea\u52d5\u7684\u306b\u5148\u982d\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Arg :: loop = true \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b const Audio audio ( U \"example/test.mp3\" , Arg :: loop = true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } } .setLoop () \u306b true \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b audio . setLoop ( true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } } 13.8 \u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b \u00b6 \u518d\u751f\u6642\u306f\u66f2\u306e\u5148\u982d\u304b\u3089\u958b\u59cb\u3057\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u7d42\u7aef\u4f4d\u7f6e\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u306b\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u5148\u982d\u4f4d\u7f6e\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u308b\u306b\u306f\u3001\u5148\u982d\u4f4d\u7f6e\u3092 Arg ;; loopBegin , \u7d42\u7aef\u4f4d\u7f6e\u3092 Arg :: loopEnd \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u518d\u751f\u4f4d\u7f6e\uff08\u79d2\uff09\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); if ( const auto loop = audio . getLoop ()) { // \u30eb\u30fc\u30d7\u306e\u958b\u59cb\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopBegin: {} samples\" _fmt ( loop -> beginPos ); // \u30eb\u30fc\u30d7\u306e\u7d42\u4e86\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopEnd: {} samples\" _fmt ( loop -> endPos ); } } } \u30eb\u30fc\u30d7\u4f4d\u7f6e\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 66150 , Arg :: loopEnd = 1962450 ); audio . play (); while ( System :: Update ()) { } } .setLoop () \u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); audio . setLoop ( Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { } } 13.9 \u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b \u00b6 \u697d\u5668\u306e\u7a2e\u985e\u3068\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3092\u6307\u5b9a\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3057\u3001\u305d\u3053\u304b\u3089 Audio \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b GMInstrument \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u697d\u5668\u540d\u3001 PianoKey \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3092\u6e21\u3057\u307e\u3059\u3002 Info \u97f3\u306e\u9577\u3055\u306f 0.5 \u79d2\u306a\u3089 0 . 5 s , 2 \u79d2\u306a\u3089 2 s \u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u6307\u5b9a\u3059\u308b\u97f3\u306e\u9577\u3055\u306f\u76ee\u5b89\u3067\u3042\u308a\u3001\u5b9f\u969b\u306b\u4f5c\u6210\u3055\u308c\u308b Audio \u306f\u3053\u308c\u3088\u308a\u3082\u9577\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { piano . play (); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . play (); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . play (); } } } 13.10 \u540c\u3058\u97f3\u58f0\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b \u00b6 1 \u3064\u306e Audio \u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306b\u306f .play () \u306e\u4ee3\u308f\u308a\u306b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf 0.5 \u3067\u518d\u751f piano . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . playOneShot ( 0.5 ); } } } 13.11 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af \u00b6 if ( audio ) \u3067\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! audio ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Audio\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa \u00b6 \u7a7a\uff08\u304b\u3089\uff09\u306e Audio \u3092\u518d\u751f\u3059\u308b\u3068\u3001\u300c\u30dd\u30ef\u30fc\u300d\u3068\u9cf4\u308b\u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u304c\u9cf4\u308b audio . play (); while ( System :: Update ()) { } } \u518d\u751f\u4e2d\u304b\u3092\u30c1\u30a7\u30c3\u30af \u00b6 \u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306f .isPlaying () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { // \u518d\u751f\u4e2d\u306a\u3089\u300cPause\u300d\u30dc\u30bf\u30f3 if ( audio . isPlaying ()) { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 20 ), 120 )) { audio . pause (); } } else // \u505c\u6b62\u4e2d\u306a\u3089\u300cPlay\u300d\u30dc\u30bf\u30f3 { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ), 120 )) { audio . play (); } } } }","title":"13. Audio"},{"location":"tutorial/audio/#13-audio","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u52b9\u679c\u97f3\u3084\u97f3\u697d\u306e\u518d\u751f\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"13. Audio"},{"location":"tutorial/audio/#131","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f\u3057\u305f\u3044\u3068\u304d\u306f Audio \u3092\u4f5c\u6210\u3057\u3001 .play () \u3067\u518d\u751f\u3057\u307e\u3059\u3002\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b .play () \u3092\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Audio \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Texture \u3084 Font \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Audio \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Audio \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067 Audio \u3092\u4f5c\u6210 const Audio audio ( U \"example/test.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u518d\u751f audio . play (); while ( System :: Update ()) { } }","title":"13.1 \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u518d\u751f"},{"location":"tutorial/audio/#_1","text":"OpenSiv3D v0.4.0 \u3067\u306f\u30014 \u7a2e\u985e\u306e\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 WAVE wav \u2714 MP3 mp3 \u2714 AAC m4a \u2714 (Windows / macOS \u306e\u307f) Ogg Vorbis ogg \u2714 Opus opus (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u97f3\u58f0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"tutorial/audio/#132","text":"\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f . pause () , \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059\u306b\u306f .stop () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ))) { // \u518d\u751f audio . play (); } if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 60 ))) { // \u4e00\u6642\u505c\u6b62 audio . pause (); } if ( SimpleGUI :: Button ( U \"Stop\" , Vec2 ( 20 , 100 ))) { // \u505c\u6b62\u3057\u3066\u518d\u751f\u4f4d\u7f6e\u3092\u6700\u521d\u306b\u623b\u3059 audio . stop (); } } }","title":"13.2 \u4e00\u6642\u505c\u6b62\u3068\u5dfb\u304d\u623b\u3057"},{"location":"tutorial/audio/#133","text":"\u97f3\u91cf\u3092\u5909\u3048\u308b\u306b\u306f .setVolume () \u306b 0.0\uff5e1.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u5927\u306e 1.0 \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double volume = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( volume , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf\u3092\u8a2d\u5b9a (0.0 - 1.0) audio . setVolume ( volume ); } } }","title":"13.3 \u97f3\u91cf\u3092\u5909\u3048\u308b"},{"location":"tutorial/audio/#134","text":"\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b\u306b\u306f .setSpeed () \u306b\u3001\u30b9\u30d4\u30fc\u30c9\u306e\u500d\u7387\u306b\u3042\u305f\u308b 0.1\uff5e2.0 \u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1.0 \u3067\u3059\u3002\u518d\u751f\u30b9\u30d4\u30fc\u30c9\u304c\u901f\u304f\u306a\u308b\u3068\u97f3\u306f\u9ad8\u304f\u805e\u3053\u3048\u3001\u9045\u304f\u306a\u308b\u3068\u4f4e\u304f\u805e\u3053\u3048\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); double speed = 1.0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( speed ), speed , 0.1 , 2.0 , Vec2 ( 20 , 20 ))) { // \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u8a2d\u5b9a (0.1 - 2.0) audio . setSpeed ( speed ); } } }","title":"13.4 \u518d\u751f\u30b9\u30d4\u30fc\u30c9\u3092\u5909\u3048\u308b"},{"location":"tutorial/audio/#135","text":"\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u5408\u8a08\u518d\u751f\u6642\u9593\uff08\u79d2\uff09\u306f .lengthSec () , \u5408\u8a08\u518d\u751f\u30b5\u30f3\u30d7\u30eb\u306f .samples () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e\u3092 .posSec () \u3067\u306f\u79d2\u3001 .posSample () \u3067\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u518d\u751f\u4f4d\u7f6e\u3088\u308a\u5c11\u3057\u5148\u884c\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u306e\u30b5\u30f3\u30d7\u30eb\u4f4d\u7f6e\u3092 .streamPosSample () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53\u306e\u9577\u3055 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u73fe\u5728\u306e\u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u73fe\u5728\u306e\u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); } }","title":"13.5 \u518d\u751f\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b"},{"location":"tutorial/audio/#136","text":"\u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 .setPosSample () \u3067\u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u30b5\u30f3\u30d7\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001 .setPosSec () \u79fb\u52d5\u5148\u306e\u4f4d\u7f6e\u3092\u6642\u9593\uff08\u79d2\uff09\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); if ( SimpleGUI :: Button ( U \"0 samples\" , Vec2 ( 300 , 20 ))) { // 0 \u30b5\u30f3\u30d7\u30eb\u76ee\uff08\u66f2\u306e\u5148\u982d\uff09\u306b\u79fb\u52d5 audio . setPosSample ( 0 ); } if ( SimpleGUI :: Button ( U \"441,000 samples\" , Vec2 ( 300 , 60 ))) { // 441,000 \u30b5\u30f3\u30d7\u30eb\u76ee\u306b\u79fb\u52d5 audio . setPosSample ( 441000 ); } if ( SimpleGUI :: Button ( U \"20.0 sec\" , Vec2 ( 300 , 100 ))) { // 20 \u79d2\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5 audio . setPosSec ( 20.0 ); } } }","title":"13.6 \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/audio/#137","text":"\u66f2\u306e\u518d\u751f\u304c\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u81ea\u52d5\u7684\u306b\u5148\u982d\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b Arg :: loop = true \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b const Audio audio ( U \"example/test.mp3\" , Arg :: loop = true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } } .setLoop () \u306b true \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); // \u30eb\u30fc\u30d7\u518d\u751f\u3092\u6709\u52b9\u306b\u3059\u308b audio . setLoop ( true ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); } }","title":"13.7 \u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b"},{"location":"tutorial/audio/#138","text":"\u518d\u751f\u6642\u306f\u66f2\u306e\u5148\u982d\u304b\u3089\u958b\u59cb\u3057\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u7d42\u7aef\u4f4d\u7f6e\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u306b\u3001\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30d7\u5148\u982d\u4f4d\u7f6e\u304b\u3089\u30eb\u30fc\u30d7\u518d\u751f\u3055\u305b\u308b\u306b\u306f\u3001\u5148\u982d\u4f4d\u7f6e\u3092 Arg ;; loopBegin , \u7d42\u7aef\u4f4d\u7f6e\u3092 Arg :: loopEnd \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u518d\u751f\u4f4d\u7f6e\uff08\u79d2\uff09\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { ClearPrint (); // \u66f2\u5168\u4f53 Print << U \"all: {:.1f} sec ({} samples)\" _fmt ( audio . lengthSec (), audio . samples ()); // \u518d\u751f\u4f4d\u7f6e Print << U \"play: {:.1f} sec ({} samples)\" _fmt ( audio . posSec (), audio . posSample ()); // \u30d0\u30c3\u30d5\u30a1\u9001\u4fe1\u6e08\u307f\u4f4d\u7f6e Print << U \"stream: {} samples\" _fmt ( audio . streamPosSample ()); // \u30eb\u30fc\u30d7\u304c\u6709\u52b9\u304b Print << U \"loop: {}\" _fmt ( audio . isLoop ()); if ( const auto loop = audio . getLoop ()) { // \u30eb\u30fc\u30d7\u306e\u958b\u59cb\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopBegin: {} samples\" _fmt ( loop -> beginPos ); // \u30eb\u30fc\u30d7\u306e\u7d42\u4e86\u4f4d\u7f6e\uff08\u30b5\u30f3\u30d7\u30eb\uff09 Print << U \"loopEnd: {} samples\" _fmt ( loop -> endPos ); } } } \u30eb\u30fc\u30d7\u4f4d\u7f6e\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30f3\u30d7\u30eb\u6570\u3092\u57fa\u6e96\u306b\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u8a2d\u5b9a const Audio audio ( U \"example/test.mp3\" , Arg :: loopBegin = 66150 , Arg :: loopEnd = 1962450 ); audio . play (); while ( System :: Update ()) { } } .setLoop () \u3067\u3082\u540c\u69d8\u306e\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Audio audio ( U \"example/test.mp3\" ); audio . setLoop ( Arg :: loopBegin = 1.5 s , Arg :: loopEnd = 44.5 s ); audio . play (); while ( System :: Update ()) { } }","title":"13.8 \u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u30eb\u30fc\u30d7\u518d\u751f\u3059\u308b"},{"location":"tutorial/audio/#139","text":"\u697d\u5668\u306e\u7a2e\u985e\u3068\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3092\u6307\u5b9a\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3057\u3001\u305d\u3053\u304b\u3089 Audio \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Audio \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b GMInstrument \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u697d\u5668\u540d\u3001 PianoKey \u3067\u5217\u6319\u3055\u308c\u3066\u3044\u308b\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3092\u6e21\u3057\u307e\u3059\u3002 Info \u97f3\u306e\u9577\u3055\u306f 0.5 \u79d2\u306a\u3089 0 . 5 s , 2 \u79d2\u306a\u3089 2 s \u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u6307\u5b9a\u3059\u308b\u97f3\u306e\u9577\u3055\u306f\u76ee\u5b89\u3067\u3042\u308a\u3001\u5b9f\u969b\u306b\u4f5c\u6210\u3055\u308c\u308b Audio \u306f\u3053\u308c\u3088\u308a\u3082\u9577\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { piano . play (); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . play (); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . play (); } } }","title":"13.9 \u697d\u5668\u306e\u97f3\u3092\u751f\u6210\u3059\u308b"},{"location":"tutorial/audio/#1310","text":"1 \u3064\u306e Audio \u3092\u91cd\u306d\u3066\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u306b\u306f .play () \u306e\u4ee3\u308f\u308a\u306b .playOneShot () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d4\u30a2\u30ce\u306e C4 (\u30c9) \u306e\u97f3 const Audio piano ( GMInstrument :: Piano1 , PianoKey :: C4 , 0.5 s ); // \u30af\u30e9\u30ea\u30cd\u30c3\u30c8\u306e D4 (\u30ec) \u306e\u97f3 const Audio clarinet ( GMInstrument :: Clarinet , PianoKey :: D4 , 0.5 s ); // \u30c8\u30e9\u30f3\u30da\u30c3\u30c8\u306e E4 (\u30df) \u306e\u97f3 const Audio trumpet ( GMInstrument :: Trumpet , PianoKey :: E4 , 0.5 s ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Piano\" , Vec2 ( 20 , 20 ))) { // \u97f3\u91cf 0.5 \u3067\u518d\u751f piano . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Clarinet\" , Vec2 ( 20 , 60 ))) { clarinet . playOneShot ( 0.5 ); } if ( SimpleGUI :: Button ( U \"Trumpet\" , Vec2 ( 20 , 100 ))) { trumpet . playOneShot ( 0.5 ); } } }","title":"13.10 \u540c\u3058\u97f3\u58f0\u3092\u91cd\u306d\u3066\u518d\u751f\u3059\u308b"},{"location":"tutorial/audio/#1311","text":"","title":"13.11 \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"tutorial/audio/#_2","text":"if ( audio ) \u3067\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! audio ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Audio\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af"},{"location":"tutorial/audio/#_3","text":"\u7a7a\uff08\u304b\u3089\uff09\u306e Audio \u3092\u518d\u751f\u3059\u308b\u3068\u3001\u300c\u30dd\u30ef\u30fc\u300d\u3068\u9cf4\u308b\u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306b\u306a\u308b const Audio audio ( U \"aaa/bbb.mp3\" ); // \u30c0\u30df\u30fc\u306e\u52b9\u679c\u97f3\u304c\u9cf4\u308b audio . play (); while ( System :: Update ()) { } }","title":"\u7a7a\u306e\u30aa\u30fc\u30c7\u30a3\u30aa"},{"location":"tutorial/audio/#_4","text":"\u518d\u751f\u4e2d\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u306f .isPlaying () \u304c true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Audio audio ( U \"example/test.mp3\" ); audio . play (); while ( System :: Update ()) { // \u518d\u751f\u4e2d\u306a\u3089\u300cPause\u300d\u30dc\u30bf\u30f3 if ( audio . isPlaying ()) { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 20 , 20 ), 120 )) { audio . pause (); } } else // \u505c\u6b62\u4e2d\u306a\u3089\u300cPlay\u300d\u30dc\u30bf\u30f3 { if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 20 , 20 ), 120 )) { audio . play (); } } } }","title":"\u518d\u751f\u4e2d\u304b\u3092\u30c1\u30a7\u30c3\u30af"},{"location":"tutorial/basic/","text":"1. First steps \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0 \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 \u00b6 \u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002 1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002 1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 1.5 Hello, Siv3D! \u00b6 \u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 1.6 \u3082\u3063\u3068 Print \u00b6 Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } } 1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059 \u00b6 Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002 1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1. First steps"},{"location":"tutorial/basic/#1-first-steps","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"1. First steps"},{"location":"tutorial/basic/#11","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0"},{"location":"tutorial/basic/#12","text":"\u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002","title":"1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8"},{"location":"tutorial/basic/#13","text":"\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002","title":"1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"tutorial/basic/#14","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002","title":"1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"tutorial/basic/#15-hello-siv3d","text":"\u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"1.5 Hello, Siv3D!"},{"location":"tutorial/basic/#16-print","text":"Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } }","title":"1.6 \u3082\u3063\u3068 Print"},{"location":"tutorial/basic/#17-print","text":"Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059"},{"location":"tutorial/basic/#18","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb"},{"location":"tutorial/binary-file/","text":"21. Binary file \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6700\u5c0f\u9650\u306e\u30b3\u30b9\u30c8\u3067\u30d5\u30a1\u30a4\u30eb\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 21.1 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3068\u306f \u00b6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb \u306f\u3001\u30c7\u30fc\u30bf\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u306a\u304f \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf \u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070 299792458 \u3068\u3044\u3046 int32 \u578b\u306e\u6570\u5024\u306f\u3001 \"299792458\" \u3068\u3044\u3046 9 \u6587\u5b57\uff089 \u30d0\u30a4\u30c8) \u3067\u306f\u306a\u304f\u3001 00010001110111100111100001001010 \u306e\u30d3\u30c3\u30c8\u5217\u3067\u8868\u3055\u308c\u308b 4 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u969b\u3001\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u6570\u5024\u3001\u6570\u5024\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u5909\u63db\u306b\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u3001\u5fc5\u8981\u306a\u30b5\u30a4\u30ba\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u5909\u63db\u306e\u30b3\u30b9\u30c8\u304c\u304b\u304b\u3089\u305a\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u56fa\u5b9a\u30b5\u30a4\u30ba\u306e\u30c7\u30fc\u30bf\u5bb9\u91cf\u3057\u304b\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002 int32 \u3084 double \u306a\u3069\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3084\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u69cb\u6210\u3055\u308c\u305f trivially copyable \u306a\u30af\u30e9\u30b9 ( Point , Vec2 , Rect , ColorF ) \u306a\u3069\u306f\u3001\u5358\u7d14\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u3067\u5bb9\u6613\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u307e\u3059\u304c\u3001 Array \u3084 String \u306a\u3069\u3001\u30dd\u30a4\u30f3\u30bf\u3067\u5185\u90e8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u578b\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u9069\u5207\u306b\u6271\u306b\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u5f8c\u534a\u3066\u8aac\u660e\u3059\u308b \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd \u3092\u4f7f\u3046\u3068\u3001 Array \u3084 String , \u305d\u306e\u4ed6\u3044\u304f\u3064\u304b\u306e Siv3D \u306e trivially copyable \u3067\u306a\u3044\u30af\u30e9\u30b9\u3092\u7c21\u5358\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 21.2 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u5358\u7d14\u306a\u5024\u3092\u66f8\u304d\u8fbc\u3080 \u00b6 \u30d5\u30a1\u30a4\u30eb\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f BinaryWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 .BinaryWriter: : write () \u306b trivially copyable \u306a\u578b\u306e\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u5024\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 777 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 3.1415 ); // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( Point ( 123 , 456 )); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 const GameScore s = { 10 , 20 , 30 , 40 }; writer . write ( s ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.3 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5358\u7d14\u306a\u5024\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f BinaryReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 BinaryReader :: read () \u306b trivially copyable \u306a\u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u305d\u306e\u5024\u306e\u30b5\u30a4\u30ba\u5206\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u306e\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u306e\u5206\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 Point pos ; reader . read ( pos ); Print << pos ; // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } \u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306e\u79fb\u52d5 \u00b6 BinaryReader :: setPos () \u3067\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u305f\u5834\u6240\u306b\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 BinaryReader :: skip () \u3067\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u5206\u8aad\u307f\u98db\u3070\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // \u5148\u982d\u304b\u3089 4 \u30d0\u30a4\u30c8\u9032\u3093\u3060\u4f4d\u7f6e\u306b\u79fb\u52d5 reader . setPos ( 4 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // 8 \u30d0\u30a4\u30c8\u5206\u8aad\u307f\u98db\u3070\u3059 reader . skip ( 8 ); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.4 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b \u00b6 BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 BinaryReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f BinaryReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f BinaryReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { BinaryReader reader ; if ( ! reader . open ( U \"test.bin\" )) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } } 21.5 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 \u00b6 String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u306e\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u5f8c\u8ff0\u3059\u308b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test-no-serialize.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 const uint64 length = text . length (); // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( length ); // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( text . data (), sizeof ( char32 ) * length ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 \u524d\u9805\u306b\u7d9a\u3044\u3066\u3001 String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u305a\u306b\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test-no-serialize.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 uint64 length = 0 ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 String text ; // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( length ); if ( 0 < length ) { // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306e\u305f\u3081\u306b\u30ea\u30b5\u30a4\u30ba text . resize ( length ); // \u30c6\u30ad\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u5206\u3060\u3051\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( text . data (), sizeof ( char32 ) * length ); } Print << length ; Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.7 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09 \u00b6 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u578b ( trivially copyable \u3067\u306a\u3044\u578b\u3082\u542b\u3080) \u3092\u3001\u5c11\u306a\u3044\u8a18\u8ff0\u3067\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3048\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f Serializer < BinaryWriter > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Serializer < BinaryWriter > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer . getWriter ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Serializer < BinaryWriter > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"test-serialize.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer ( text ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.8 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09 \u00b6 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f Deserializer < BinaryReader > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Deserializer < BinaryReader > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader . getReader ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Deserializer < BinaryReader > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"test-serialize.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c6\u30ad\u30b9\u30c8 String text ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( text ); Print << text . length (); Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 21.9 \u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b \u00b6 \u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306b\u306f\u3001 template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) \u3068\u3044\u3046 public \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002 archive () \u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001\u305d\u306e\u30af\u30e9\u30b9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u308a\u3001 Serializer \u3084 Deserializer \u3067\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u3068\u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { String name ; int32 id ; int32 score ; // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) { archive ( name , id , score ); } }; void Main () { { // \u8a18\u9332\u3057\u305f\u3044\u30c7\u30fc\u30bf const Array < GameScore > scores = { GameScore { U \"Player1\" , 111 , 1000 }, GameScore { U \"Player2\" , 222 , 2000 }, GameScore { U \"Player3\" , 333 , 3000 }, }; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"score.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8a18\u9332 writer ( scores ); // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c7\u30fc\u30bf Array < GameScore > scores ; { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"score.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( scores ); // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u3093\u3060\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d for ( const auto & score : scores ) { Print << U \"{}(id: {}): {}\" _fmt ( score . name , score . id , score . score ); } while ( System :: Update ()) { } }","title":"21. Binary file"},{"location":"tutorial/binary-file/#21-binary-file","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6700\u5c0f\u9650\u306e\u30b3\u30b9\u30c8\u3067\u30d5\u30a1\u30a4\u30eb\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"21. Binary file"},{"location":"tutorial/binary-file/#211","text":"\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb \u306f\u3001\u30c7\u30fc\u30bf\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u306a\u304f \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf \u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f8b\u3048\u3070 299792458 \u3068\u3044\u3046 int32 \u578b\u306e\u6570\u5024\u306f\u3001 \"299792458\" \u3068\u3044\u3046 9 \u6587\u5b57\uff089 \u30d0\u30a4\u30c8) \u3067\u306f\u306a\u304f\u3001 00010001110111100111100001001010 \u306e\u30d3\u30c3\u30c8\u5217\u3067\u8868\u3055\u308c\u308b 4 \u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u969b\u3001\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u6570\u5024\u3001\u6570\u5024\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u5909\u63db\u306b\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u3001\u5fc5\u8981\u306a\u30b5\u30a4\u30ba\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306f\u5909\u63db\u306e\u30b3\u30b9\u30c8\u304c\u304b\u304b\u3089\u305a\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u56fa\u5b9a\u30b5\u30a4\u30ba\u306e\u30c7\u30fc\u30bf\u5bb9\u91cf\u3057\u304b\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002 int32 \u3084 double \u306a\u3069\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3084\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u69cb\u6210\u3055\u308c\u305f trivially copyable \u306a\u30af\u30e9\u30b9 ( Point , Vec2 , Rect , ColorF ) \u306a\u3069\u306f\u3001\u5358\u7d14\u306b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u3067\u5bb9\u6613\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u307e\u3059\u304c\u3001 Array \u3084 String \u306a\u3069\u3001\u30dd\u30a4\u30f3\u30bf\u3067\u5185\u90e8\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u578b\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u9069\u5207\u306b\u6271\u306b\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u5f8c\u534a\u3066\u8aac\u660e\u3059\u308b \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd \u3092\u4f7f\u3046\u3068\u3001 Array \u3084 String , \u305d\u306e\u4ed6\u3044\u304f\u3064\u304b\u306e Siv3D \u306e trivially copyable \u3067\u306a\u3044\u30af\u30e9\u30b9\u3092\u7c21\u5358\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"21.1 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3068\u306f"},{"location":"tutorial/binary-file/#212","text":"\u30d5\u30a1\u30a4\u30eb\u306b\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f BinaryWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 .BinaryWriter: : write () \u306b trivially copyable \u306a\u578b\u306e\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u5024\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 777 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( 3.1415 ); // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 writer . write ( Point ( 123 , 456 )); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u66f8\u304d\u8fbc\u3080 const GameScore s = { 10 , 20 , 30 , 40 }; writer . write ( s ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.2 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u5358\u7d14\u306a\u5024\u3092\u66f8\u304d\u8fbc\u3080"},{"location":"tutorial/binary-file/#213","text":"\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f BinaryReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 BinaryReader :: read () \u306b trivially copyable \u306a\u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u305d\u306e\u5024\u306e\u30b5\u30a4\u30ba\u5206\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u306e\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u306e\u5206\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // Point \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 Point pos ; reader . read ( pos ); Print << pos ; // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.3 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5358\u7d14\u306a\u5024\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/binary-file/#_1","text":"BinaryReader :: setPos () \u3067\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u305f\u5834\u6240\u306b\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 BinaryReader :: skip () \u3067\u3001\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u5206\u8aad\u307f\u98db\u3070\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { int32 a , b , c , d ; }; void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // \u5148\u982d\u304b\u3089 4 \u30d0\u30a4\u30c8\u9032\u3093\u3060\u4f4d\u7f6e\u306b\u79fb\u52d5 reader . setPos ( 4 ); // double \u578b\u306e\u5024 (8 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 double d ; reader . read ( d ); Print << d ; // 8 \u30d0\u30a4\u30c8\u5206\u8aad\u307f\u98db\u3070\u3059 reader . skip ( 8 ); // GameScore \u578b\u306e\u5024 (16 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 GameScore s ; reader . read ( s ); Print << U \"{}, {}, {}, {}\" _fmt ( s . a , s . b , s . c , s . d ); while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306e\u79fb\u52d5"},{"location":"tutorial/binary-file/#214","text":"BinaryReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 BinaryReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f BinaryReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f BinaryReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { BinaryReader reader ; if ( ! reader . open ( U \"test.bin\" )) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test.bin`\" ); } // int32 \u578b\u306e\u5024 (4 \u30d0\u30a4\u30c8) \u3092\u8aad\u307f\u8fbc\u3080 int32 n ; reader . read ( n ); Print << n ; // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } }","title":"21.4 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b"},{"location":"tutorial/binary-file/#215","text":"String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u306e\u306f\u5c11\u3057\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u5f8c\u8ff0\u3059\u308b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryWriter writer ( U \"test-no-serialize.bin\" ); if ( ! writer ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 const uint64 length = text . length (); // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( length ); // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer . write ( text . data (), sizeof ( char32 ) * length ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.5 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080"},{"location":"tutorial/binary-file/#216","text":"\u524d\u9805\u306b\u7d9a\u3044\u3066\u3001 String \u3084 Array \u306e\u3088\u3046\u306b\u5358\u7d14\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044 ( trivially copyable \u3067\u306a\u3044) \u30c7\u30fc\u30bf\u3092\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u308f\u305a\u306b\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3046\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 BinaryReader reader ( U \"test-no-serialize.bin\" ); if ( ! reader ) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-no-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055 uint64 length = 0 ; // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 String text ; // \u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( length ); if ( 0 < length ) { // \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306e\u305f\u3081\u306b\u30ea\u30b5\u30a4\u30ba text . resize ( length ); // \u30c6\u30ad\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u5206\u3060\u3051\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 reader . read ( text . data (), sizeof ( char32 ) * length ); } Print << length ; Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.6 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/binary-file/#217","text":"\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u578b ( trivially copyable \u3067\u306a\u3044\u578b\u3082\u542b\u3080) \u3092\u3001\u5c11\u306a\u3044\u8a18\u8ff0\u3067\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3067\u6271\u3048\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f Serializer < BinaryWriter > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Serializer < BinaryWriter > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer . getWriter ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Serializer < BinaryWriter > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"test-serialize.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u66f8\u304d\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8 const String text = U \"Hello, Siv3D\" ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080 writer ( text ); while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.7 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09"},{"location":"tutorial/binary-file/#218","text":"\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f Deserializer < BinaryReader > \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 Deserializer < BinaryReader > \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader . getReader ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 Deserializer < BinaryReader > :: operator () \u3067\u5024\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"test-serialize.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `test-serialize.bin`\" ); } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c6\u30ad\u30b9\u30c8 String text ; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( text ); Print << text . length (); Print << text ; while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"21.8 \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff08\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\uff09"},{"location":"tutorial/binary-file/#219","text":"\u30e6\u30fc\u30b6\u304c\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306b\u306f\u3001 template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) \u3068\u3044\u3046 public \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002 archive () \u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001\u305d\u306e\u30af\u30e9\u30b9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u308a\u3001 Serializer \u3084 Deserializer \u3067\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> // \u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u3068\u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3059\u308b\u69cb\u9020\u4f53 struct GameScore { String name ; int32 id ; int32 score ; // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u305f\u3081\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b template < class Archive > void SIV3D_SERIALIZE ( Archive & archive ) { archive ( name , id , score ); } }; void Main () { { // \u8a18\u9332\u3057\u305f\u3044\u30c7\u30fc\u30bf const Array < GameScore > scores = { GameScore { U \"Player1\" , 111 , 1000 }, GameScore { U \"Player2\" , 222 , 2000 }, GameScore { U \"Player3\" , 333 , 3000 }, }; // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Serializer < BinaryWriter > writer ( U \"score.bin\" ); if ( ! writer . getWriter ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8a18\u9332 writer ( scores ); // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u307f\u5148\u306e\u30c7\u30fc\u30bf Array < GameScore > scores ; { // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 Deserializer < BinaryReader > reader ( U \"score.bin\" ); if ( ! reader . getReader ()) // \u3082\u3057\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to open `score.bin`\" ); } // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u5fdc\u578b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 // \uff08\u81ea\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u304c\u884c\u308f\u308c\u308b\uff09 reader ( scores ); // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } // \u8aad\u307f\u8fbc\u3093\u3060\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d for ( const auto & score : scores ) { Print << U \"{}(id: {}): {}\" _fmt ( score . name , score . id , score . score ); } while ( System :: Update ()) { } }","title":"21.9 \u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3055\u305b\u308b"},{"location":"tutorial/config-file/","text":"19. Configuration file \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001CSV, INI, JSON, TOML, XML \u306a\u3069\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 OpenSiv3D \u3067\u306e\u8a2d\u5b9a\u306e\u8a18\u8ff0\u306b\u306f\u3001\u8aad\u307f\u3084\u3059\u3055\u3068\u66f8\u304d\u3084\u3059\u3055\u306b\u512a\u308c\u305f TOML \u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Warning OpenSiv3D v0.4.1 \u3088\u308a\u3082\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f if ( ! ini ) \u3068 if ( ! csv ) \u304c\u53cd\u5bfe\u306e\u7d50\u679c\u3092\u8fd4\u3059\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b if ( ! ini . isOpened ()) if ( ! csv . isOpened ()) \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002OpenSiv3D v0.4.1 \u3067\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002 19.1 CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 CSV \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f CSVData \u3092\u4f7f\u3044\u307e\u3059\u3002 CSVData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! csv ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 CSV \u30c7\u30fc\u30bf\u306f Array < Array < String >> \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ row ][ col ] \u306b\u3088\u3063\u3066 row \u884c col \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002row, col \u306f 0 \u304b\u3089\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const CSVData csv ( U \"example/config/config.csv\" ); if ( ! csv ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.csv`\" ); } // \u5168\u3066\u306e\u884c\u3092\u5217\u6319 for ( size_t row = 0 ; row < csv . rows (); ++ row ) { // \u884c (Array<String>) \u306e\u8981\u7d20\u3092\u8868\u793a Print << csv [ row ]; } Print << U \"-----\" ; // 1 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97 (0 \u884c, 0 \u5217\u304b\u3089\u30ab\u30a6\u30f3\u30c8\uff09 const String windowTitle = csv [ 1 ][ 1 ]; // 2 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( csv [ 2 ][ 1 ]); // 3 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( csv [ 3 ][ 1 ]); // 4 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( csv [ 4 ][ 1 ]); // 5 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( csv [ 5 ][ 1 ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // 6 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = csv [ 6 ][ 1 ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 CSV \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( csv [ 7 ][ 1 ]); const size_t baseLine = 8 ; for ( auto i : step ( itemsCount )) { Item item ; item . label = csv [ baseLine + i * 2 ][ 1 ]; item . pos = Parse < Point > ( csv [ baseLine + i * 2 + 1 ][ 1 ]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.2 INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 INI \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f INIData \u3092\u4f7f\u3044\u307e\u3059\u3002 INIData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! ini ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 INI \u30c7\u30fc\u30bf\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b HashTable < String , String > \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"SECTION.NAME\" ] \u306b\u3088\u3063\u3066\u30bb\u30af\u30b7\u30e7\u30f3 SECTION \u306b\u3042\u308b\u540d\u524d NAME \u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( U \"example/config/config.ini\" ); if ( ! ini ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.ini`\" ); } // \u5168\u3066\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5217\u6319 for ( const auto & section : ini . sections ()) { // \u30bb\u30af\u30b7\u30e7\u30f3\u540d Print << U \"[{}]\" _fmt ( section . section ); // \u30bb\u30af\u30b7\u30e7\u30f3\u5185\u306e\u3059\u3079\u3066\u306e\u30ad\u30fc\u3092\u5217\u6319 for ( const auto & key : section . keys ) { // \u30ad\u30fc\u306e\u540d\u524d\u3068\u5024 Print << U \"{} = {}\" _fmt ( key . name , key . value ); } } Print << U \"-----\" ; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e title \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092\u53d6\u5f97 const String windowTitle = ini [ U \"Window.title\" ]; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e width \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( ini [ U \"Window.width\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e height \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( ini [ U \"Window.height\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e sizable \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( ini [ U \"Window.sizable\" ]); // Scene \u30bb\u30af\u30b7\u30e7\u30f3\u306e background \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( ini [ U \"Scene.background\" ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // Array \u30bb\u30af\u30b7\u30e7\u30f3\u306e values \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = ini [ U \"Array.values\" ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 INI \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( ini [ U \"Items.count\" ]); for ( auto i : step ( itemsCount )) { Item item ; item . label = ini [ U \"Item{}.label\" _fmt ( i )]; item . pos = Parse < Point > ( ini [ U \"Item{}.pos\" _fmt ( i )]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.3 JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 JSON \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f JSONReader \u3092\u4f7f\u3044\u307e\u3059\u3002 JSONReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! json ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 JSON \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b JSON \u306e\u8981\u7d20\u3092\u8868\u793a void ShowObject ( const JSONValue & value ) { for ( const auto & object : value . objectView ()) { switch ( object . value . getType ()) { case JSONValueType :: Empty : Print << U \"[Empty]\" << object . name ; break ; case JSONValueType :: Null : Print << U \"[Null]\" << object . name ; break ; case JSONValueType :: Object : Print << U \"[Object]\" << object . name ; ShowObject ( object . value ); break ; case JSONValueType :: Array : Print << U \"[Array]\" << object . name ; for ( const auto & element : object . value . arrayView ()) { ShowObject ( element ); } break ; case JSONValueType :: String : Print << U \"[String]\" << object . name ; Print << object . value . getString (); break ; case JSONValueType :: Number : Print << U \"[Number]\" << object . name ; Print << object . value . get < double > (); break ; case JSONValueType :: Bool : Print << U \"[Bool]\" << object . name ; Print << object . value . get < bool > (); break ; } } } void Main () { // JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const JSONReader json ( U \"example/config/config.json\" ); if ( ! json ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.json`\" ); } // JSON \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowObject ( json ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = json [ U \"Window.title\" ]. getString (); const int32 windowWidth = json [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = json [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = json [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = json [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : json [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : json [ U \"Items\" ]. arrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.4 TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 TOML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TOMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 TOMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! toml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 TOML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b TOML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowTable ( const TOMLValue & value ) { for ( const auto & table : value . tableView ()) { switch ( table . value . getType ()) { case TOMLValueType :: Empty : Print << U \"[Empty]\" << table . name ; break ; case TOMLValueType :: Table : Print << U \"[Table]\" << table . name ; ShowTable ( table . value ); break ; case TOMLValueType :: Array : Print << U \"[Array]\" << table . name ; for ( const auto & element : table . value . arrayView ()) { switch ( element . getType ()) { case TOMLValueType :: String : Print << element . getString (); break ; case TOMLValueType :: Number : Print << element . get < double > (); break ; case TOMLValueType :: Bool : Print << element . get < bool > (); break ; case TOMLValueType :: Date : Print << element . getDate (); break ; case TOMLValueType :: DateTime : Print << element . getDateTime (); break ; default : break ; } } break ; case TOMLValueType :: TableArray : Print << U \"[TableArray]\" << table . name ; for ( const auto & table2 : table . value . tableArrayView ()) { ShowTable ( table2 ); } break ; case TOMLValueType :: String : Print << U \"[String]\" << table . name ; Print << table . value . getString (); break ; case TOMLValueType :: Number : Print << U \"[Number]\" << table . name ; Print << table . value . get < double > (); break ; case TOMLValueType :: Bool : Print << U \"[Bool]\" << table . name ; Print << table . value . get < bool > (); break ; case TOMLValueType :: Date : Print << U \"[Date]\" << table . name ; Print << table . value . getDate (); break ; case TOMLValueType :: DateTime : Print << U \"[DateTime]\" << table . name ; Print << table . value . getDateTime (); break ; case TOMLValueType :: Unknown : Print << U \"[Unknown]\" << table . name ; break ; } } } void Main () { // TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const TOMLReader toml ( U \"example/config/config.toml\" ); if ( ! toml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.toml`\" ); } // TOML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowTable ( toml ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = toml [ U \"Window.title\" ]. getString (); const int32 windowWidth = toml [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = toml [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = toml [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = toml [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : toml [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.5 XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 XML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f XMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 XMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! xml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 XML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowElements () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b XML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowElements ( const XMLElement & element ) { for ( auto e = element . firstChild (); e ; e = e . nextSibling ()) { Print << U \"<{}>\" _fmt ( e . name ()); if ( const auto attributes = e . attributes ()) { Print << attributes ; } if ( const auto text = e . text ()) { Print << text ; } ShowElements ( e ); Print << U \"</{}>\" _fmt ( e . name ()); } } void Main () { // XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const XMLReader xml ( U \"example/config/config.xml\" ); if ( ! xml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.xml`\" ); } // XML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowElements ( xml ); Print << U \"-----\" ; String windowTitle ; int32 windowWidth = Window :: DefaultClientSize . x ; int32 windowHeight = Window :: DefaultClientSize . y ; bool windowSizable = false ; ColorF sceneBackground = ColorF ( 0.0 ); Array < int32 > values ; Array < Item > items ; // \u8981\u7d20\u3092\u8d70\u67fb\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u53d6\u5f97 for ( auto elem = xml . firstChild (); elem ; elem = elem . nextSibling ()) { const String name = elem . name (); if ( name == U \"Window\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"title\" ) { windowTitle = elem2 . text (); } else if ( name2 == U \"width\" ) { windowWidth = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"height\" ) { windowHeight = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"sizable\" ) { windowSizable = Parse < bool > ( elem2 . text ()); } } } else if ( name == U \"Scene\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"background\" ) { sceneBackground = Parse < ColorF > ( elem2 . text ()); } } } if ( name == U \"Array\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { values << Parse < int32 > ( elem2 . text ()); } } if ( name == U \"Items\" ) { Item item ; for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"label\" ) { item . label = elem2 . text (); } else if ( name2 == U \"pos\" ) { Point pos ( 0 , 0 ); for ( auto elem3 = elem2 . firstChild (); elem3 ; elem3 = elem3 . nextSibling ()) { const String name3 = elem3 . name (); if ( name3 == U \"x\" ) { pos . x = Parse < int32 > ( elem3 . text ()); } else if ( name3 == U \"y\" ) { pos . y = Parse < int32 > ( elem3 . text ()); } } item . pos = pos ; } } items << item ; } } Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } } 19.6 \u30d5\u30a1\u30a4\u30eb\u306e\u66f4\u65b0\u3092\u691c\u77e5\u3057\u3066\u30ea\u30ed\u30fc\u30c9\u3059\u308b \u00b6 DirectoryWatcher \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u77e5\u3067\u304d\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092 DirectoryWatcher \u3067\u76e3\u8996\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3068\u304d\u306b\u8aad\u307f\u8fbc\u307f\u306a\u304a\u3059\u4ed5\u7d44\u307f\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u306a\u304c\u3089\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u3092\u53cd\u6620\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570 Array < Item > LoadItems ( const FilePath & tomlPath ) { const TOMLReader toml ( tomlPath ); Array < Item > items ; if ( ! toml ) { return items ; } for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } return items ; } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // DirectoryWatcher \u3067\u306e\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u30d5\u30eb\u30d1\u30b9\u304c\u5fc5\u8981 const FilePath tomlPath = FileSystem :: FullPath ( U \"example/config/config.toml\" ); // `config.toml` \u304c\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u306e\u76e3\u8996 DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u30ed\u30fc\u30c9 Array < Item > items = LoadItems ( tomlPath ); // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u30c1\u30a7\u30c3\u30af for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) // TOML \u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 { Print << U \"reload\" ; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u518d\u8aad\u307f\u8fbc\u307f items = LoadItems ( tomlPath ); } } // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19. Configuration file"},{"location":"tutorial/config-file/#19-configuration-file","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001CSV, INI, JSON, TOML, XML \u306a\u3069\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 OpenSiv3D \u3067\u306e\u8a2d\u5b9a\u306e\u8a18\u8ff0\u306b\u306f\u3001\u8aad\u307f\u3084\u3059\u3055\u3068\u66f8\u304d\u3084\u3059\u3055\u306b\u512a\u308c\u305f TOML \u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 Warning OpenSiv3D v0.4.1 \u3088\u308a\u3082\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f if ( ! ini ) \u3068 if ( ! csv ) \u304c\u53cd\u5bfe\u306e\u7d50\u679c\u3092\u8fd4\u3059\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b if ( ! ini . isOpened ()) if ( ! csv . isOpened ()) \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002OpenSiv3D v0.4.1 \u3067\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002","title":"19. Configuration file"},{"location":"tutorial/config-file/#191-csv","text":"CSV \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f CSVData \u3092\u4f7f\u3044\u307e\u3059\u3002 CSVData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! csv ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 CSV \u30c7\u30fc\u30bf\u306f Array < Array < String >> \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ row ][ col ] \u306b\u3088\u3063\u3066 row \u884c col \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002row, col \u306f 0 \u304b\u3089\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const CSVData csv ( U \"example/config/config.csv\" ); if ( ! csv ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.csv`\" ); } // \u5168\u3066\u306e\u884c\u3092\u5217\u6319 for ( size_t row = 0 ; row < csv . rows (); ++ row ) { // \u884c (Array<String>) \u306e\u8981\u7d20\u3092\u8868\u793a Print << csv [ row ]; } Print << U \"-----\" ; // 1 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97 (0 \u884c, 0 \u5217\u304b\u3089\u30ab\u30a6\u30f3\u30c8\uff09 const String windowTitle = csv [ 1 ][ 1 ]; // 2 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( csv [ 2 ][ 1 ]); // 3 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( csv [ 3 ][ 1 ]); // 4 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( csv [ 4 ][ 1 ]); // 5 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( csv [ 5 ][ 1 ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // 6 \u884c 1 \u5217\u76ee\u306e\u30c6\u30ad\u30b9\u30c8\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = csv [ 6 ][ 1 ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 CSV \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( csv [ 7 ][ 1 ]); const size_t baseLine = 8 ; for ( auto i : step ( itemsCount )) { Item item ; item . label = csv [ baseLine + i * 2 ][ 1 ]; item . pos = Parse < Point > ( csv [ baseLine + i * 2 + 1 ][ 1 ]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.1 CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/config-file/#192-ini","text":"INI \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f INIData \u3092\u4f7f\u3044\u307e\u3059\u3002 INIData \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! ini ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 INI \u30c7\u30fc\u30bf\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b HashTable < String , String > \u306e\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"SECTION.NAME\" ] \u306b\u3088\u3063\u3066\u30bb\u30af\u30b7\u30e7\u30f3 SECTION \u306b\u3042\u308b\u540d\u524d NAME \u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; void Main () { // INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const INIData ini ( U \"example/config/config.ini\" ); if ( ! ini ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.ini`\" ); } // \u5168\u3066\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5217\u6319 for ( const auto & section : ini . sections ()) { // \u30bb\u30af\u30b7\u30e7\u30f3\u540d Print << U \"[{}]\" _fmt ( section . section ); // \u30bb\u30af\u30b7\u30e7\u30f3\u5185\u306e\u3059\u3079\u3066\u306e\u30ad\u30fc\u3092\u5217\u6319 for ( const auto & key : section . keys ) { // \u30ad\u30fc\u306e\u540d\u524d\u3068\u5024 Print << U \"{} = {}\" _fmt ( key . name , key . value ); } } Print << U \"-----\" ; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e title \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092\u53d6\u5f97 const String windowTitle = ini [ U \"Window.title\" ]; // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e width \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowWidth = Parse < int32 > ( ini [ U \"Window.width\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e height \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db const int32 windowHeight = Parse < int32 > ( ini [ U \"Window.height\" ]); // Windows \u30bb\u30af\u30b7\u30e7\u30f3\u306e sizable \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 bool \u578b\u306e\u5024\u306b\u5909\u63db const bool windowSizable = Parse < bool > ( ini [ U \"Window.sizable\" ]); // Scene \u30bb\u30af\u30b7\u30e7\u30f3\u306e background \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ColorF \u578b\u306e\u5024\u306b\u5909\u63db const ColorF sceneBackground = Parse < ColorF > ( ini [ U \"Scene.background\" ]); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // Array \u30bb\u30af\u30b7\u30e7\u30f3\u306e values \u30ad\u30fc\u306e\u5024\uff08\u30c6\u30ad\u30b9\u30c8\uff09\u3092 ',' \u3067\u533a\u5207\u3063\u3066\u914d\u5217\u306b\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092 int32 \u578b\u306e\u5024\u306b\u5909\u63db Array < int32 > values = ini [ U \"Array.values\" ]. split ( U ',' ). map ( Parse < int32 > ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 INI \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { const size_t itemsCount = Parse < size_t > ( ini [ U \"Items.count\" ]); for ( auto i : step ( itemsCount )) { Item item ; item . label = ini [ U \"Item{}.label\" _fmt ( i )]; item . pos = Parse < Point > ( ini [ U \"Item{}.pos\" _fmt ( i )]); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.2 INI \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/config-file/#193-json","text":"JSON \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f JSONReader \u3092\u4f7f\u3044\u307e\u3059\u3002 JSONReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! json ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 JSON \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b JSON \u306e\u8981\u7d20\u3092\u8868\u793a void ShowObject ( const JSONValue & value ) { for ( const auto & object : value . objectView ()) { switch ( object . value . getType ()) { case JSONValueType :: Empty : Print << U \"[Empty]\" << object . name ; break ; case JSONValueType :: Null : Print << U \"[Null]\" << object . name ; break ; case JSONValueType :: Object : Print << U \"[Object]\" << object . name ; ShowObject ( object . value ); break ; case JSONValueType :: Array : Print << U \"[Array]\" << object . name ; for ( const auto & element : object . value . arrayView ()) { ShowObject ( element ); } break ; case JSONValueType :: String : Print << U \"[String]\" << object . name ; Print << object . value . getString (); break ; case JSONValueType :: Number : Print << U \"[Number]\" << object . name ; Print << object . value . get < double > (); break ; case JSONValueType :: Bool : Print << U \"[Bool]\" << object . name ; Print << object . value . get < bool > (); break ; } } } void Main () { // JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const JSONReader json ( U \"example/config/config.json\" ); if ( ! json ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.json`\" ); } // JSON \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowObject ( json ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = json [ U \"Window.title\" ]. getString (); const int32 windowWidth = json [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = json [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = json [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = json [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : json [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 JSON \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : json [ U \"Items\" ]. arrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.3 JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/config-file/#194-toml","text":"TOML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TOMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 TOMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! toml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 TOML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowObject () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50 [ U \"NAME1.NAME2.NAME3...\" ] \u306b\u3088\u3063\u3066\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u76f4\u63a5\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b TOML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowTable ( const TOMLValue & value ) { for ( const auto & table : value . tableView ()) { switch ( table . value . getType ()) { case TOMLValueType :: Empty : Print << U \"[Empty]\" << table . name ; break ; case TOMLValueType :: Table : Print << U \"[Table]\" << table . name ; ShowTable ( table . value ); break ; case TOMLValueType :: Array : Print << U \"[Array]\" << table . name ; for ( const auto & element : table . value . arrayView ()) { switch ( element . getType ()) { case TOMLValueType :: String : Print << element . getString (); break ; case TOMLValueType :: Number : Print << element . get < double > (); break ; case TOMLValueType :: Bool : Print << element . get < bool > (); break ; case TOMLValueType :: Date : Print << element . getDate (); break ; case TOMLValueType :: DateTime : Print << element . getDateTime (); break ; default : break ; } } break ; case TOMLValueType :: TableArray : Print << U \"[TableArray]\" << table . name ; for ( const auto & table2 : table . value . tableArrayView ()) { ShowTable ( table2 ); } break ; case TOMLValueType :: String : Print << U \"[String]\" << table . name ; Print << table . value . getString (); break ; case TOMLValueType :: Number : Print << U \"[Number]\" << table . name ; Print << table . value . get < double > (); break ; case TOMLValueType :: Bool : Print << U \"[Bool]\" << table . name ; Print << table . value . get < bool > (); break ; case TOMLValueType :: Date : Print << U \"[Date]\" << table . name ; Print << table . value . getDate (); break ; case TOMLValueType :: DateTime : Print << U \"[DateTime]\" << table . name ; Print << table . value . getDateTime (); break ; case TOMLValueType :: Unknown : Print << U \"[Unknown]\" << table . name ; break ; } } } void Main () { // TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const TOMLReader toml ( U \"example/config/config.toml\" ); if ( ! toml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.toml`\" ); } // TOML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowTable ( toml ); Print << U \"-----\" ; // \u8981\u7d20\u306e\u30d1\u30b9\u3067\u5024\u3092\u53d6\u5f97 const String windowTitle = toml [ U \"Window.title\" ]. getString (); const int32 windowWidth = toml [ U \"Window.width\" ]. get < int32 > (); const int32 windowHeight = toml [ U \"Window.height\" ]. get < int32 > (); const bool windowSizable = toml [ U \"Window.sizable\" ]. get < bool > (); const ColorF sceneBackground = toml [ U \"Scene.background\" ]. get < ColorF > (); Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); // \u6570\u5024\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < int32 > values ; { for ( const auto & object : toml [ U \"Array.values\" ]. arrayView ()) { values << object . get < int32 > (); } } Print << values ; // \u30a2\u30a4\u30c6\u30e0\u306e\u914d\u5217\u3092 TOML \u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210 Array < Item > items ; { for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } } // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.4 TOML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/config-file/#195-xml","text":"XML \u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f XMLReader \u3092\u4f7f\u3044\u307e\u3059\u3002 XMLReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3084\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306a\u3069\u3001\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! xml ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 XML \u30c7\u30fc\u30bf\u306f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u306e ShowElements () \u95a2\u6570\u306e\u3088\u3046\u306b\u3057\u3066\u518d\u5e30\u7684\u306b\u5168\u8981\u7d20\u3092\u8d70\u67fb\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u518d\u5e30\u7684\u306b XML \u306e\u8981\u7d20\u3092\u8868\u793a void ShowElements ( const XMLElement & element ) { for ( auto e = element . firstChild (); e ; e = e . nextSibling ()) { Print << U \"<{}>\" _fmt ( e . name ()); if ( const auto attributes = e . attributes ()) { Print << attributes ; } if ( const auto text = e . text ()) { Print << text ; } ShowElements ( e ); Print << U \"</{}>\" _fmt ( e . name ()); } } void Main () { // XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080 const XMLReader xml ( U \"example/config/config.xml\" ); if ( ! xml ) // \u3082\u3057\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u3089 { throw Error ( U \"Failed to load `config.xml`\" ); } // XML \u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u8868\u793a ShowElements ( xml ); Print << U \"-----\" ; String windowTitle ; int32 windowWidth = Window :: DefaultClientSize . x ; int32 windowHeight = Window :: DefaultClientSize . y ; bool windowSizable = false ; ColorF sceneBackground = ColorF ( 0.0 ); Array < int32 > values ; Array < Item > items ; // \u8981\u7d20\u3092\u8d70\u67fb\u3057\u3066\u76ee\u7684\u306e\u5024\u3092\u53d6\u5f97 for ( auto elem = xml . firstChild (); elem ; elem = elem . nextSibling ()) { const String name = elem . name (); if ( name == U \"Window\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"title\" ) { windowTitle = elem2 . text (); } else if ( name2 == U \"width\" ) { windowWidth = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"height\" ) { windowHeight = Parse < int32 > ( elem2 . text ()); } else if ( name2 == U \"sizable\" ) { windowSizable = Parse < bool > ( elem2 . text ()); } } } else if ( name == U \"Scene\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"background\" ) { sceneBackground = Parse < ColorF > ( elem2 . text ()); } } } if ( name == U \"Array\" ) { for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { values << Parse < int32 > ( elem2 . text ()); } } if ( name == U \"Items\" ) { Item item ; for ( auto elem2 = elem . firstChild (); elem2 ; elem2 = elem2 . nextSibling ()) { const String name2 = elem2 . name (); if ( name2 == U \"label\" ) { item . label = elem2 . text (); } else if ( name2 == U \"pos\" ) { Point pos ( 0 , 0 ); for ( auto elem3 = elem2 . firstChild (); elem3 ; elem3 = elem3 . nextSibling ()) { const String name3 = elem3 . name (); if ( name3 == U \"x\" ) { pos . x = Parse < int32 > ( elem3 . text ()); } else if ( name3 == U \"y\" ) { pos . y = Parse < int32 > ( elem3 . text ()); } } item . pos = pos ; } } items << item ; } } Window :: SetTitle ( windowTitle ); Window :: Resize ( windowWidth , windowHeight ); Window :: SetStyle ( windowSizable ? WindowStyle :: Sizable : WindowStyle :: Fixed ); Scene :: SetBackground ( sceneBackground ); Print << values ; // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.5 XML \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/config-file/#196","text":"DirectoryWatcher \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u77e5\u3067\u304d\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092 DirectoryWatcher \u3067\u76e3\u8996\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3068\u304d\u306b\u8aad\u307f\u8fbc\u307f\u306a\u304a\u3059\u4ed5\u7d44\u307f\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u306a\u304c\u3089\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u3092\u53cd\u6620\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct Item { // \u30a2\u30a4\u30c6\u30e0\u306e\u30e9\u30d9\u30eb String label ; // \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u4e0a\u5ea7\u6a19 Point pos ; }; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570 Array < Item > LoadItems ( const FilePath & tomlPath ) { const TOMLReader toml ( tomlPath ); Array < Item > items ; if ( ! toml ) { return items ; } for ( const auto & object : toml [ U \"Items\" ]. tableArrayView ()) { Item item ; item . label = object [ U \"label\" ]. getString (); item . pos = Point ( object [ U \"pos.x\" ]. get < int32 > (), object [ U \"pos.y\" ]. get < int32 > ()); items << item ; } return items ; } void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // DirectoryWatcher \u3067\u306e\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u30d5\u30eb\u30d1\u30b9\u304c\u5fc5\u8981 const FilePath tomlPath = FileSystem :: FullPath ( U \"example/config/config.toml\" ); // `config.toml` \u304c\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u306e\u76e3\u8996 DirectoryWatcher watcher ( FileSystem :: ParentPath ( tomlPath )); // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u30ed\u30fc\u30c9 Array < Item > items = LoadItems ( tomlPath ); // \u30a2\u30a4\u30c6\u30e0\u63cf\u753b\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u3092\u30c1\u30a7\u30c3\u30af for ( const auto & change : watcher . retrieveChanges ()) { if ( change . first == tomlPath && change . second == FileAction :: Modified ) // TOML \u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089 { Print << U \"reload\" ; // \u30a2\u30a4\u30c6\u30e0\u60c5\u5831\u3092\u518d\u8aad\u307f\u8fbc\u307f items = LoadItems ( tomlPath ); } } // \u30a2\u30a4\u30c6\u30e0\u3092\u63cf\u753b for ( const auto & item : items ) { const Rect rect ( item . pos , 180 , 80 ); rect . draw (); font ( item . label ). drawAt ( rect . center (), ColorF ( 0.25 )); } } }","title":"19.6 \u30d5\u30a1\u30a4\u30eb\u306e\u66f4\u65b0\u3092\u691c\u77e5\u3057\u3066\u30ea\u30ed\u30fc\u30c9\u3059\u308b"},{"location":"tutorial/data-structures/","text":"6. Data structures \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002 6.1 \u52d5\u7684\u914d\u5217 \u00b6 Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8981\u7d20\u306e\u8ffd\u52a0 \u00b6 Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 \u00b6 [] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } } \u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b \u00b6 \u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } } \u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } } \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664 \u00b6 .erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } } 6.2 \u4e8c\u6b21\u5143\u914d\u5217 \u00b6 \u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Grid \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } } 6.3 \u6587\u5b57\u5217 \u00b6 Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 String \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db \u00b6 String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db \u00b6 std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } } 6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb \u00b6 \u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 HashTable \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } } 6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6. Data structures"},{"location":"tutorial/data-structures/#6-data-structures","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"6. Data structures"},{"location":"tutorial/data-structures/#61","text":"Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.1 \u52d5\u7684\u914d\u5217"},{"location":"tutorial/data-structures/#_1","text":"Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u8ffd\u52a0"},{"location":"tutorial/data-structures/#_2","text":"[] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9"},{"location":"tutorial/data-structures/#_3","text":"\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_4","text":"\u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } }","title":"\u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b"},{"location":"tutorial/data-structures/#_5","text":"\u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_6","text":"\u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_7","text":".erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } }","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_8","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"tutorial/data-structures/#62","text":"\u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.2 \u4e8c\u6b21\u5143\u914d\u5217"},{"location":"tutorial/data-structures/#grid","text":"# include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } }","title":"Grid \u306e\u57fa\u672c"},{"location":"tutorial/data-structures/#_9","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"tutorial/data-structures/#63","text":"Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"6.3 \u6587\u5b57\u5217"},{"location":"tutorial/data-structures/#string","text":"# include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } }","title":"String \u306e\u57fa\u672c"},{"location":"tutorial/data-structures/#_10","text":"String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db"},{"location":"tutorial/data-structures/#_11","text":"std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db"},{"location":"tutorial/data-structures/#64","text":"\u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002","title":"6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"tutorial/data-structures/#hashtable","text":"# include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } }","title":"HashTable \u306e\u57fa\u672c"},{"location":"tutorial/data-structures/#65","text":"Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"tutorial/effect/","text":"16. Effect \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6f14\u51fa\u306b\u4fbf\u5229\u306a Effect \u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002 16.1 Effect \u306e\u57fa\u672c \u00b6 \u30a8\u30d5\u30a7\u30af\u30c8\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u7ba1\u7406\u3059\u308b Effect \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001 Effect :: add < EffectType > () \u3067\u500b\u3005\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\u3053\u3053\u3067\u3044\u3046 EffectType \u306f\u3001 IEffect \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\u306f bool update ( double t ) override \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 t \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u63cf\u753b\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u3082\u7d99\u7d9a\u3055\u305b\u308b\u304b\u3092 bool \u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070 return t < 3 . 0 ; \u3068\u3059\u308c\u3070\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u306f 3 \u79d2\u9593\u7d99\u7d9a\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u3001\u6642\u9593\u3068\u3068\u3082\u306b\u5927\u304d\u304f\u306a\u308b\u8f2a\u3092\u767a\u751f\u3055\u305b\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; // \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u304c\u3001Effect::add<RingEffect>() \u306e\u5f15\u6570\u306b\u306a\u308b RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( m_pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add < RingEffect > ( Cursor :: Pos ()); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } \u30e9\u30e0\u30c0\u5f0f\u3067\u306e\u5b9f\u88c5 \u00b6 IEffect \u7d99\u627f\u30af\u30e9\u30b9\u306e\u4ee3\u308f\u308a\u306b\u3001\u5f15\u6570\u304c double , \u623b\u308a\u5024\u304c bool \u578b\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u6570\u884c\u3067\u66f8\u3051\u308b\u5358\u7d14\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u3001\u308f\u3056\u308f\u3056\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306f\u3053\u306e\u65b9\u6cd5\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add ([ pos = Cursor :: Pos ()]( double t ) { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; }); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } 16.2 \u5c11\u3057\u3053\u3060\u308f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8 \u00b6 \u30a4\u30fc\u30b8\u30f3\u30b0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; ColorF m_color ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) , m_color ( RandomColor ()) {} bool update ( double t ) override { // \u30a4\u30fc\u30b8\u30f3\u30b0 const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 100 ). drawFrame ( 20.0 * ( 1.0 - e ), m_color ); return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { effect . add < RingEffect > ( Cursor :: Pos ()); } { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3092\u6709\u52b9\u306b const ScopedRenderStates2D additiveBlend ( BlendState :: Additive ); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } } 16.3 \u4e0a\u6607\u3059\u308b\u6587\u5b57 \u00b6 \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct NumberEffect : IEffect { Vec2 m_start ; int32 m_number ; Font m_font ; NumberEffect ( const Vec2 & start , int32 num , const Font & font ) : m_start ( start ) , m_number ( num ) , m_font ( font ) {} bool update ( double t ) override { const HSV color ( 180 - m_number * 1.8 , 1.0 - ( t * 2.0 )); m_font ( m_number ). drawAt ( m_start . movedBy ( 0 , t * - 120 ), color ); // 0.5 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3067\u6d88\u6ec5 return t < 0.5 ; } }; void Main () { const Font font ( 50 , Typeface :: Heavy ); Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < NumberEffect > ( Cursor :: Pos (), Random ( 0 , 100 ), font ); } effect . update (); } } 16.4 \u98db\u3073\u6563\u308b\u7834\u7247 \u00b6 \u4e00\u3064\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u8907\u6570\u306e\u56f3\u5f62\u3092\u63cf\u304f\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct Particle { Vec2 start ; Vec2 velocity ; }; struct Spark : IEffect { Array < Particle > m_particles ; Spark ( const Vec2 & start ) : m_particles ( 50 ) { for ( auto & particle : m_particles ) { particle . start = start + RandomVec2 ( 10.0 ); particle . velocity = RandomVec2 ( 1.0 ) * Random ( 80.0 ); } } bool update ( double t ) override { for ( const auto & particle : m_particles ) { const Vec2 pos = particle . start + particle . velocity * t + 0.5 * t * t * Vec2 ( 0 , 240 ); Triangle ( pos , 16.0 , pos . x * 5 _deg ). draw ( HSV ( pos . y - 40 ). toColorF ( 1.0 - t )); } return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < Spark > ( Cursor :: Pos ()); } effect . update (); } } 16.5 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4e00\u6642\u505c\u6b62\u3068\u6d88\u53bb \u00b6 Effect :: pause () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62\u3001 Effect :: resume () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b\u3001 Effect :: clear () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 80 ). drawFrame ( 20.0 * ( 1.0 - e )); return t < 1.0 ; } }; void Main () { Effect effect ; // \u30a8\u30d5\u30a7\u30af\u30c8\u767a\u751f\u3055\u305b\u308b\u9593\u9694 constexpr double effectSpawnTime = 0.15 ; double time = 0.0 ; while ( System :: Update ()) { if ( ! effect . isPaused ()) { time += Scene :: DeltaTime (); } ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); // effectSpawnTime \u304c\u7d4c\u904e\u3059\u308b\u305f\u3073\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f if ( time >= effectSpawnTime ) { time -= effectSpawnTime ; effect . add < RingEffect > ( Cursor :: Pos ()); } effect . update (); if ( effect . isPaused ()) { if ( SimpleGUI :: Button ( U \"Resume\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b effect . resume (); } } else { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62 effect . pause (); } } if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 600 , 60 ), 100 )) { // \u767a\u751f\u4e2d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb effect . clear (); } } } \u3053\u306e\u7ae0\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u304c\u3001\u3088\u308a\u5927\u91cf\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u52b9\u7387\u7684\u306b\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u306f\u3001 ParticleSystem2D \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"16. Effect"},{"location":"tutorial/effect/#16-effect","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3084\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6f14\u51fa\u306b\u4fbf\u5229\u306a Effect \u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"16. Effect"},{"location":"tutorial/effect/#161-effect","text":"\u30a8\u30d5\u30a7\u30af\u30c8\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u7ba1\u7406\u3059\u308b Effect \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001 Effect :: add < EffectType > () \u3067\u500b\u3005\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\u3053\u3053\u3067\u3044\u3046 EffectType \u306f\u3001 IEffect \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\u306f bool update ( double t ) override \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 t \u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u63cf\u753b\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u3082\u7d99\u7d9a\u3055\u305b\u308b\u304b\u3092 bool \u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070 return t < 3 . 0 ; \u3068\u3059\u308c\u3070\u3001\u30a8\u30d5\u30a7\u30af\u30c8\u306f 3 \u79d2\u9593\u7d99\u7d9a\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30af\u30ea\u30c3\u30af\u3057\u305f\u5834\u6240\u306b\u3001\u6642\u9593\u3068\u3068\u3082\u306b\u5927\u304d\u304f\u306a\u308b\u8f2a\u3092\u767a\u751f\u3055\u305b\u308b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; // \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u304c\u3001Effect::add<RingEffect>() \u306e\u5f15\u6570\u306b\u306a\u308b RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( m_pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add < RingEffect > ( Cursor :: Pos ()); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } }","title":"16.1 Effect \u306e\u57fa\u672c"},{"location":"tutorial/effect/#_1","text":"IEffect \u7d99\u627f\u30af\u30e9\u30b9\u306e\u4ee3\u308f\u308a\u306b\u3001\u5f15\u6570\u304c double , \u623b\u308a\u5024\u304c bool \u578b\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u6570\u884c\u3067\u66f8\u3051\u308b\u5358\u7d14\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u3001\u308f\u3056\u308f\u3056\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306f\u3053\u306e\u65b9\u6cd5\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u6570 Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { // \u30a8\u30d5\u30a7\u30af\u30c8\u3092\u767a\u751f effect . add ([ pos = Cursor :: Pos ()]( double t ) { // \u6642\u9593\u306b\u5fdc\u3058\u3066\u5927\u304d\u304f\u306a\u308b\u8f2a Circle ( pos , t * 100 ). drawFrame (); // 1 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3057\u305f\u3089\u6d88\u6ec5 return t < 1.0 ; }); } // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } }","title":"\u30e9\u30e0\u30c0\u5f0f\u3067\u306e\u5b9f\u88c5"},{"location":"tutorial/effect/#162","text":"\u30a4\u30fc\u30b8\u30f3\u30b0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; ColorF m_color ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) , m_color ( RandomColor ()) {} bool update ( double t ) override { // \u30a4\u30fc\u30b8\u30f3\u30b0 const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 100 ). drawFrame ( 20.0 * ( 1.0 - e ), m_color ); return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); if ( MouseL . down ()) { effect . add < RingEffect > ( Cursor :: Pos ()); } { // \u52a0\u7b97\u30d6\u30ec\u30f3\u30c9\u3092\u6709\u52b9\u306b const ScopedRenderStates2D additiveBlend ( BlendState :: Additive ); // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 IEffect::update() \u3092\u5b9f\u884c effect . update (); } } }","title":"16.2 \u5c11\u3057\u3053\u3060\u308f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8"},{"location":"tutorial/effect/#163","text":"\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u305f\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct NumberEffect : IEffect { Vec2 m_start ; int32 m_number ; Font m_font ; NumberEffect ( const Vec2 & start , int32 num , const Font & font ) : m_start ( start ) , m_number ( num ) , m_font ( font ) {} bool update ( double t ) override { const HSV color ( 180 - m_number * 1.8 , 1.0 - ( t * 2.0 )); m_font ( m_number ). drawAt ( m_start . movedBy ( 0 , t * - 120 ), color ); // 0.5 \u79d2\u4ee5\u4e0a\u7d4c\u904e\u3067\u6d88\u6ec5 return t < 0.5 ; } }; void Main () { const Font font ( 50 , Typeface :: Heavy ); Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < NumberEffect > ( Cursor :: Pos (), Random ( 0 , 100 ), font ); } effect . update (); } }","title":"16.3 \u4e0a\u6607\u3059\u308b\u6587\u5b57"},{"location":"tutorial/effect/#164","text":"\u4e00\u3064\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3067\u8907\u6570\u306e\u56f3\u5f62\u3092\u63cf\u304f\u4f8b\u3067\u3059\u3002 # include <Siv3D.hpp> struct Particle { Vec2 start ; Vec2 velocity ; }; struct Spark : IEffect { Array < Particle > m_particles ; Spark ( const Vec2 & start ) : m_particles ( 50 ) { for ( auto & particle : m_particles ) { particle . start = start + RandomVec2 ( 10.0 ); particle . velocity = RandomVec2 ( 1.0 ) * Random ( 80.0 ); } } bool update ( double t ) override { for ( const auto & particle : m_particles ) { const Vec2 pos = particle . start + particle . velocity * t + 0.5 * t * t * Vec2 ( 0 , 240 ); Triangle ( pos , 16.0 , pos . x * 5 _deg ). draw ( HSV ( pos . y - 40 ). toColorF ( 1.0 - t )); } return t < 1.0 ; } }; void Main () { Effect effect ; while ( System :: Update ()) { if ( MouseL . down ()) { effect . add < Spark > ( Cursor :: Pos ()); } effect . update (); } }","title":"16.4 \u98db\u3073\u6563\u308b\u7834\u7247"},{"location":"tutorial/effect/#165","text":"Effect :: pause () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62\u3001 Effect :: resume () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b\u3001 Effect :: clear () \u3067\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> struct RingEffect : IEffect { Vec2 m_pos ; RingEffect ( const Vec2 & pos ) : m_pos ( pos ) {} bool update ( double t ) override { const double e = EaseOutExpo ( t ); Circle ( m_pos , e * 80 ). drawFrame ( 20.0 * ( 1.0 - e )); return t < 1.0 ; } }; void Main () { Effect effect ; // \u30a8\u30d5\u30a7\u30af\u30c8\u767a\u751f\u3055\u305b\u308b\u9593\u9694 constexpr double effectSpawnTime = 0.15 ; double time = 0.0 ; while ( System :: Update ()) { if ( ! effect . isPaused ()) { time += Scene :: DeltaTime (); } ClearPrint (); Print << U \"Active effects: {}\" _fmt ( effect . num_effects ()); // effectSpawnTime \u304c\u7d4c\u904e\u3059\u308b\u305f\u3073\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u304c\u767a\u751f if ( time >= effectSpawnTime ) { time -= effectSpawnTime ; effect . add < RingEffect > ( Cursor :: Pos ()); } effect . update (); if ( effect . isPaused ()) { if ( SimpleGUI :: Button ( U \"Resume\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u518d\u958b effect . resume (); } } else { if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 600 , 20 ), 100 )) { // \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3092\u4e00\u6642\u505c\u6b62 effect . pause (); } } if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 600 , 60 ), 100 )) { // \u767a\u751f\u4e2d\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u3059\u3079\u3066\u6d88\u53bb effect . clear (); } } } \u3053\u306e\u7ae0\u3067\u306f\u6271\u3044\u307e\u305b\u3093\u304c\u3001\u3088\u308a\u5927\u91cf\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u52b9\u7387\u7684\u306b\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u306f\u3001 ParticleSystem2D \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"16.5 \u30a8\u30d5\u30a7\u30af\u30c8\u306e\u4e00\u6642\u505c\u6b62\u3068\u6d88\u53bb"},{"location":"tutorial/font/","text":"8. Using fonts \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 8.1 Font \u00b6 \u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } } 8.2 \u6539\u884c\u3059\u308b \u00b6 \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } } 8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } } 8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e \u00b6 Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } } 8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046 \u00b6 PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } } 8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002 8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b \u00b6 Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } } 8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } } 8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b \u00b6 \u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } } 8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } } 8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b \u00b6 \u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } } 8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b \u00b6 font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } } 8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b \u00b6 Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } } 8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } } 8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b \u00b6 String :: substr ( 0 , N ) \u3067\u30010 \u6587\u5b57\u76ee\u304b\u3089 N \u6587\u5b57\u5206\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002N \u3092\u6642\u9593\u306b\u5fdc\u3058\u3066\u5897\u3084\u3059\u3053\u3068\u3067 1 \u6587\u5b57\u305a\u3064\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002N \u304c\u6587\u5b57\u5217\u306e\u9577\u3055\u3088\u308a\u3082\u5927\u304d\u304f\u306a\u3063\u3066\u3082\u3001\u305d\u306e\u5206\u306f\u5358\u306b\u7121\u8996\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } } 8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4 \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af \u00b6 if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30d5\u30a9\u30f3\u30c8 \u00b6 \u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"8. Using fonts"},{"location":"tutorial/font/#8-using-fonts","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"8. Using fonts"},{"location":"tutorial/font/#81-font","text":"\u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } }","title":"8.1 Font"},{"location":"tutorial/font/#82","text":"\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } }","title":"8.2 \u6539\u884c\u3059\u308b"},{"location":"tutorial/font/#83","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } }","title":"8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba"},{"location":"tutorial/font/#84","text":"Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } }","title":"8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"tutorial/font/#85","text":"PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } }","title":"8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046"},{"location":"tutorial/font/#86-pc","text":"PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002","title":"8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"tutorial/font/#87","text":"Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } }","title":"8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b"},{"location":"tutorial/font/#88","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } }","title":"8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b"},{"location":"tutorial/font/#89","text":"\u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } }","title":"8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b"},{"location":"tutorial/font/#810","text":"\u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } }","title":"8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"tutorial/font/#811","text":"\u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } }","title":"8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b"},{"location":"tutorial/font/#812","text":"font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } }","title":"8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b"},{"location":"tutorial/font/#813","text":"Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } }","title":"8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/font/#814","text":"Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } }","title":"8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"tutorial/font/#815-1","text":"String :: substr ( 0 , N ) \u3067\u30010 \u6587\u5b57\u76ee\u304b\u3089 N \u6587\u5b57\u5206\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002N \u3092\u6642\u9593\u306b\u5fdc\u3058\u3066\u5897\u3084\u3059\u3053\u3068\u3067 1 \u6587\u5b57\u305a\u3064\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002N \u304c\u6587\u5b57\u5217\u306e\u9577\u3055\u3088\u308a\u3082\u5927\u304d\u304f\u306a\u3063\u3066\u3082\u3001\u305d\u306e\u5206\u306f\u5358\u306b\u7121\u8996\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } }","title":"8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b"},{"location":"tutorial/font/#816","text":"","title":"8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c"},{"location":"tutorial/font/#_1","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4"},{"location":"tutorial/font/#_2","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba"},{"location":"tutorial/font/#_3","text":"if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af"},{"location":"tutorial/font/#_4","text":"\u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8"},{"location":"tutorial/formatting/","text":"7. Formatting ant parsing \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } } 7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002 \u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } } \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a \u00b6 { 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } } \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570 \u00b6 \u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } } \u30d1\u30c7\u30a3\u30f3\u30b0 \u00b6 N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } } \u57fa\u6570 \u00b6 { : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } } \u7b26\u53f7 \u00b6 { : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db \u00b6 Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Parse \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } } ParseError \u306e\u6355\u6349 \u00b6 \u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"7. Formatting and parsing"},{"location":"tutorial/formatting/#7-formatting-ant-parsing","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"7. Formatting ant parsing"},{"location":"tutorial/formatting/#71","text":"Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } }","title":"7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"tutorial/formatting/#72","text":"\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002","title":"7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"tutorial/formatting/#_1","text":"# include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } }","title":"\u57fa\u672c"},{"location":"tutorial/formatting/#_2","text":"{ 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } }","title":"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a"},{"location":"tutorial/formatting/#_3","text":"\u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } }","title":"\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570"},{"location":"tutorial/formatting/#_4","text":"N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } }","title":"\u30d1\u30c7\u30a3\u30f3\u30b0"},{"location":"tutorial/formatting/#_5","text":"{ : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } }","title":"\u57fa\u6570"},{"location":"tutorial/formatting/#_6","text":"{ : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7b26\u53f7"},{"location":"tutorial/formatting/#73","text":"Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db"},{"location":"tutorial/formatting/#parse","text":"# include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } }","title":"Parse \u306e\u57fa\u672c"},{"location":"tutorial/formatting/#parseerror","text":"\u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"ParseError \u306e\u6355\u6349"},{"location":"tutorial/gui/","text":"9. GUI \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 9.1 \u30dc\u30bf\u30f3 \u00b6 \u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } } 9.2 \u30b9\u30e9\u30a4\u30c0\u30fc \u00b6 \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } } 9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } } 9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 \u00b6 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } } 9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9. GUI"},{"location":"tutorial/gui/#9-gui","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"9. GUI"},{"location":"tutorial/gui/#91","text":"\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } }","title":"9.1 \u30dc\u30bf\u30f3"},{"location":"tutorial/gui/#92","text":"\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } }","title":"9.2 \u30b9\u30e9\u30a4\u30c0\u30fc"},{"location":"tutorial/gui/#93","text":"\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } }","title":"9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9"},{"location":"tutorial/gui/#94","text":"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } }","title":"9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3"},{"location":"tutorial/gui/#95","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9"},{"location":"tutorial/keyboard/","text":"11. Keyboard \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 11.1 \u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b \u00b6 \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u306b\u306f Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 A, B, C, ... \u306f KeyA , KeyB , KeyC , ... 1, 2, 3, ... \u306f Key1 , Key2 , Key3 , ... F1, F2, F3, ... \u306f KeyF1 , KeyF2 , KeyF3 , ... \u2191, \u2193, \u2190, \u2192 \u306f KeyUp , KeyDown , KeyLeft , KeyRight \u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeySpace \u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u306f KeyEnter \u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeyBackspace Tab \u30ad\u30fc\u306f KeyTab Esc \u30ad\u30fc\u306f KeyEscape PageUp, PageDown \u306f KeyPageUp , KeyPageDown Delete \u30ad\u30fc\u306f KeyDelete Numpad \u306e 0, 1, 2, ... \u306f KeyNum0 , KeyNum1 , KeyNum2 , ... \u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyShift \u5de6\u30b7\u30d5\u30c8\u30ad\u30fc\u3001\u53f3\u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyLShift , KeyRShift \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30ad\u30fc\u306f KeyControl (macOS) \u30b3\u30de\u30f3\u30c9\u30ad\u30fc\u306f KeyCommand \u300c,\u300d\u300c.\u300d\u300c/\u300d\u30ad\u30fc\u306f KeyComma , KeyPeriod , KeySlash \u4e0a\u8a18\u4ee5\u5916\u306e\u30ad\u30fc\u306f < Siv3D / Keyboard . hpp > \u3092\u53c2\u7167 \u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { const double delta = 200 * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } // [C] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u4e2d\u592e\u306b\u623b\u308b if ( KeyC . down ()) { pos = Scene :: Center (); } Circle ( pos , 50 ). draw (); } } 11.2 \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u6642\u9593 \u00b6 Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << KeyA . pressedDuration (); } } 11.3 \u30ad\u30fc\u306e\u540d\u524d \u00b6 Key :: name () \u306f\u3001\u305d\u306e\u30ad\u30fc\u306e\u540d\u524d\u3092 String \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << KeyA . name (); Print << KeySpace . name (); Print << KeyLeft . name (); Print << Key3 . name (); Print << KeyF11 . name (); while ( System :: Update ()) { } } 11.4 \u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b \u00b6 A \u307e\u305f\u306f B \u00b6 | \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u305d\u306e\u3044\u305a\u308c\u304b\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); if (( KeySpace | KeyEnter ). pressed ()) { Print << U \"KeySpace / KeyEnter\" ; } } } A \u3092\u62bc\u3057\u306a\u304c\u3089 B \u00b6 + \u3092\u4f7f\u3063\u3066 2 \u3064\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u5de6\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u306a\u304c\u3089\u3001\u53f3\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if (( KeyControl + KeyC ). down () || ( KeyCommand + KeyC ). down ()) { Print << U \"Ctrl + C / Command + C\" ; } } } 11.5 \u30c6\u30ad\u30b9\u30c8\u5165\u529b \u00b6 TextInput :: UpdateText () \u306b String \u578b\u306e\u5909\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 ); String text ; const Rect area ( 50 , 50 , 700 , 300 ); while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); area . draw ( ColorF ( 0.3 )); font ( text ). draw ( area . stretched ( - 20 )); } }","title":"11. Keyboard"},{"location":"tutorial/keyboard/#11-keyboard","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"11. Keyboard"},{"location":"tutorial/keyboard/#111","text":"\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u306b\u306f Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 A, B, C, ... \u306f KeyA , KeyB , KeyC , ... 1, 2, 3, ... \u306f Key1 , Key2 , Key3 , ... F1, F2, F3, ... \u306f KeyF1 , KeyF2 , KeyF3 , ... \u2191, \u2193, \u2190, \u2192 \u306f KeyUp , KeyDown , KeyLeft , KeyRight \u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeySpace \u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u306f KeyEnter \u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u306f KeyBackspace Tab \u30ad\u30fc\u306f KeyTab Esc \u30ad\u30fc\u306f KeyEscape PageUp, PageDown \u306f KeyPageUp , KeyPageDown Delete \u30ad\u30fc\u306f KeyDelete Numpad \u306e 0, 1, 2, ... \u306f KeyNum0 , KeyNum1 , KeyNum2 , ... \u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyShift \u5de6\u30b7\u30d5\u30c8\u30ad\u30fc\u3001\u53f3\u30b7\u30d5\u30c8\u30ad\u30fc\u306f KeyLShift , KeyRShift \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30ad\u30fc\u306f KeyControl (macOS) \u30b3\u30de\u30f3\u30c9\u30ad\u30fc\u306f KeyCommand \u300c,\u300d\u300c.\u300d\u300c/\u300d\u30ad\u30fc\u306f KeyComma , KeyPeriod , KeySlash \u4e0a\u8a18\u4ee5\u5916\u306e\u30ad\u30fc\u306f < Siv3D / Keyboard . hpp > \u3092\u53c2\u7167 \u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { const double delta = 200 * Scene :: DeltaTime (); // \u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u79fb\u52d5 if ( KeyLeft . pressed ()) { pos . x -= delta ; } if ( KeyRight . pressed ()) { pos . x += delta ; } if ( KeyUp . pressed ()) { pos . y -= delta ; } if ( KeyDown . pressed ()) { pos . y += delta ; } // [C] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u4e2d\u592e\u306b\u623b\u308b if ( KeyC . down ()) { pos = Scene :: Center (); } Circle ( pos , 50 ). draw (); } }","title":"11.1 \u30ad\u30fc\u306e\u5165\u529b\u72b6\u614b"},{"location":"tutorial/keyboard/#112","text":"Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << KeyA . pressedDuration (); } }","title":"11.2 \u30ad\u30fc\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u6642\u9593"},{"location":"tutorial/keyboard/#113","text":"Key :: name () \u306f\u3001\u305d\u306e\u30ad\u30fc\u306e\u540d\u524d\u3092 String \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << KeyA . name (); Print << KeySpace . name (); Print << KeyLeft . name (); Print << Key3 . name (); Print << KeyF11 . name (); while ( System :: Update ()) { } }","title":"11.3 \u30ad\u30fc\u306e\u540d\u524d"},{"location":"tutorial/keyboard/#114","text":"","title":"11.4 \u8907\u6570\u306e\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b"},{"location":"tutorial/keyboard/#a-b","text":"| \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u305d\u306e\u3044\u305a\u308c\u304b\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); if (( KeySpace | KeyEnter ). pressed ()) { Print << U \"KeySpace / KeyEnter\" ; } } }","title":"A \u307e\u305f\u306f B"},{"location":"tutorial/keyboard/#a-b_1","text":"+ \u3092\u4f7f\u3063\u3066 2 \u3064\u306e\u30ad\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u5de6\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u306a\u304c\u3089\u3001\u53f3\u306e\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if (( KeyControl + KeyC ). down () || ( KeyCommand + KeyC ). down ()) { Print << U \"Ctrl + C / Command + C\" ; } } }","title":"A \u3092\u62bc\u3057\u306a\u304c\u3089 B"},{"location":"tutorial/keyboard/#115","text":"TextInput :: UpdateText () \u306b String \u578b\u306e\u5909\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 30 ); String text ; const Rect area ( 50 , 50 , 700 , 300 ); while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); area . draw ( ColorF ( 0.3 )); font ( text ). draw ( area . stretched ( - 20 )); } }","title":"11.5 \u30c6\u30ad\u30b9\u30c8\u5165\u529b"},{"location":"tutorial/mouse/","text":"12. Mouse \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 12.1 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19 \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306f Cursor :: Pos () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: PosF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Info Cursor :: Pos () \u3067\u53d6\u5f97\u3067\u304d\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f\u3001\u76f4\u524d\u306e System :: Update () \u306e\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u306e\u5ea7\u6a19\u306e\u305f\u3081\u3001\u5b9f\u969b\u753b\u9762\u306b\u898b\u3048\u3066\u3044\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3088\u308a\u3082\u53e4\u3044\u5ea7\u6a19\u3092\u793a\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Skyblue ); } } 12.2 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf \u00b6 \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u306f Cursor :: Delta () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: DeltaF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u3092\u3064\u304b\u3093\u3067\u3044\u308b\u304b bool grab = false ; Circle circle ( Scene :: Center (), 50 ); while ( System :: Update ()) { if ( grab ) { // \u79fb\u52d5\u91cf\u5206\u3060\u3051\u5186\u3092\u79fb\u52d5 circle . moveBy ( Cursor :: Delta ()); } if ( circle . leftClicked ()) // \u5186\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 { grab = true ; } else if ( MouseL . up ()) // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u305f\u3089 { grab = false ; } if ( grab || circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } circle . draw ( Palette :: Skyblue ); } } Info \u56f3\u5f62\u306e .moveBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u307e\u3059\u3002\u4e00\u65b9\u3067\u4f3c\u305f\u3088\u3046\u306a\u540d\u524d\u306e .movedBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u305f\u65b0\u3057\u3044\u56f3\u5f62\u3092\u8fd4\u3057\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u306f\u5909\u66f4\u3057\u307e\u305b\u3093\u3002 12.3 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b \u00b6 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306b\u306f\u3001\u4ee5\u4e0b\u306e Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u5b9a\u6570 \u5bfe\u5fdc\u3059\u308b\u30dc\u30bf\u30f3 MouseL \u5de6\u30dc\u30bf\u30f3 MouseR \u53f3\u30dc\u30bf\u30f3 MouseM \u4e2d\u592e\u30dc\u30bf\u30f3 MouseX1 \u62e1\u5f35\u30dc\u30bf\u30f3 1 MouseX2 \u62e1\u5f35\u30dc\u30bf\u30f3 2 MouseX3 \u62e1\u5f35\u30dc\u30bf\u30f3 3 MouseX4 \u62e1\u5f35\u30dc\u30bf\u30f3 4 MouseX5 \u62e1\u5f35\u30dc\u30bf\u30f3 5 \u524d\u7ae0\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u3068\u540c\u69d8\u306b\u3001\u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressed (); Print << MouseM . pressed (); Print << MouseR . pressed (); } } 12.4 \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593 \u00b6 Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressedDuration (); } } 12.5 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf \u00b6 \u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: Wheel () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: WheelH () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { pos . y -= Mouse :: Wheel () * 10 ; pos . x += Mouse :: WheelH () * 10 ; RectF ( Arg :: center = pos , 200 ). draw (); } }","title":"12. Mouse"},{"location":"tutorial/mouse/#12-mouse","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"12. Mouse"},{"location":"tutorial/mouse/#121","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306f Cursor :: Pos () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: PosF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Info Cursor :: Pos () \u3067\u53d6\u5f97\u3067\u304d\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306f\u3001\u76f4\u524d\u306e System :: Update () \u306e\u547c\u3073\u51fa\u3057\u6642\u70b9\u3067\u306e\u5ea7\u6a19\u306e\u305f\u3081\u3001\u5b9f\u969b\u753b\u9762\u306b\u898b\u3048\u3066\u3044\u308b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3088\u308a\u3082\u53e4\u3044\u5ea7\u6a19\u3092\u793a\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Skyblue ); } }","title":"12.1 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19"},{"location":"tutorial/mouse/#122","text":"\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf\u306f Cursor :: Delta () \u3092\u4f7f\u3046\u3068 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u304c\u62e1\u5927\u7e2e\u5c0f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001 Cursor :: DeltaF () \u3092\u4f7f\u3046\u3068 Vec2 \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5186\u3092\u3064\u304b\u3093\u3067\u3044\u308b\u304b bool grab = false ; Circle circle ( Scene :: Center (), 50 ); while ( System :: Update ()) { if ( grab ) { // \u79fb\u52d5\u91cf\u5206\u3060\u3051\u5186\u3092\u79fb\u52d5 circle . moveBy ( Cursor :: Delta ()); } if ( circle . leftClicked ()) // \u5186\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089 { grab = true ; } else if ( MouseL . up ()) // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u96e2\u3055\u308c\u305f\u3089 { grab = false ; } if ( grab || circle . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } circle . draw ( Palette :: Skyblue ); } } Info \u56f3\u5f62\u306e .moveBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u307e\u3059\u3002\u4e00\u65b9\u3067\u4f3c\u305f\u3088\u3046\u306a\u540d\u524d\u306e .movedBy () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f x, y \u6210\u5206\u3060\u3051\u5ea7\u6a19\u3092\u79fb\u52d5\u3057\u305f\u65b0\u3057\u3044\u56f3\u5f62\u3092\u8fd4\u3057\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u306f\u5909\u66f4\u3057\u307e\u305b\u3093\u3002","title":"12.2 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u91cf"},{"location":"tutorial/mouse/#123","text":"\u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306b\u306f\u3001\u4ee5\u4e0b\u306e Key \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u5b9a\u6570 \u5bfe\u5fdc\u3059\u308b\u30dc\u30bf\u30f3 MouseL \u5de6\u30dc\u30bf\u30f3 MouseR \u53f3\u30dc\u30bf\u30f3 MouseM \u4e2d\u592e\u30dc\u30bf\u30f3 MouseX1 \u62e1\u5f35\u30dc\u30bf\u30f3 1 MouseX2 \u62e1\u5f35\u30dc\u30bf\u30f3 2 MouseX3 \u62e1\u5f35\u30dc\u30bf\u30f3 3 MouseX4 \u62e1\u5f35\u30dc\u30bf\u30f3 4 MouseX5 \u62e1\u5f35\u30dc\u30bf\u30f3 5 \u524d\u7ae0\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30ad\u30fc\u3068\u540c\u69d8\u306b\u3001\u62bc\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .down () , \u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092 .pressed () , \u96e2\u3055\u308c\u305f\u77ac\u9593\u3067\u3042\u308b\u304b\u3092 .up () \u3092\u4f7f\u3063\u3066 bool \u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 down pressed up \u62bc\u3057\u3066\u3044\u306a\u3044 \u62bc\u3057\u305f\u77ac\u9593 \u2714 \u2714 \u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b \u2714 \u96e2\u3057\u305f\u77ac\u9593 \u2714 \u96e2\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressed (); Print << MouseM . pressed (); Print << MouseR . pressed (); } }","title":"12.3 \u30de\u30a6\u30b9\u306e\u30dc\u30bf\u30f3\u306e\u5165\u529b\u72b6\u614b"},{"location":"tutorial/mouse/#124","text":"Key :: pressedDuration () \u306f\u3001\u305d\u306e\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\u3092 Duration \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << MouseL . pressedDuration (); } }","title":"12.4 \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u6642\u9593"},{"location":"tutorial/mouse/#125","text":"\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: Wheel () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6c34\u5e73\u30db\u30a4\u30fc\u30eb\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u306f\u3001 Mouse :: WheelH () \u306b\u3088\u3063\u3066 double \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Vec2 pos = Scene :: Center (); while ( System :: Update ()) { pos . y -= Mouse :: Wheel () * 10 ; pos . x += Mouse :: WheelH () * 10 ; RectF ( Arg :: center = pos , 200 ). draw (); } }","title":"12.5 \u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u91cf"},{"location":"tutorial/random/","text":"14. Random \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u3084\u8272\u3001\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u308a\u3001\u914d\u5217\u304b\u3089\u7121\u4f5c\u70ba\u306b\u8981\u7d20\u3092\u9078\u629e\u3057\u305f\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 14.1 \u534a\u3005\u306e\u78ba\u7387 \u00b6 RandomBool () \u306f 50% \u306e\u78ba\u7387\u3067 true , 50% \u306e\u78ba\u7387\u3067 false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 50% \u306e\u78ba\u7387\u3067 true, 50% \u306e\u78ba\u7387\u3067 false Print << RandomBool (); } } } } 14.2 \u78ba\u7387\u3092\u6307\u5b9a \u00b6 RandomBool () \u306b\u306f 0.0 \uff5e 1.0 \u306e\u7bc4\u56f2\u3067 true \u306b\u306a\u308b\u78ba\u7387\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u300210% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 1 \u3092\u300125% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 25 \u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 30% \u306e\u78ba\u7387\u3067 true, 70% \u306e\u78ba\u7387\u3067 false Print << RandomBool ( 0.3 ); } } } } 14.3 \u30e9\u30f3\u30c0\u30e0\u306a\u6570 \u00b6 Random < Type > ( max ) \u306f 0 \u304b\u3089 max \u307e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u3001 Random < Type > ( min , max ) \u306f min \u304b\u3089\u3000max \u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"int32\" , Vec2 ( 200 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0\uff5e100 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570 Print << Random ( 100 ); } } if ( SimpleGUI :: Button ( U \"double\" , Vec2 ( 200 , 60 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // -100.0\uff5e100.0 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << Random ( - 100.0 , 100.0 ); } } if ( SimpleGUI :: Button ( U \"char32\" , Vec2 ( 200 , 100 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // A\uff5eZ \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57 Print << Random ( U 'A' , U 'Z' ); } } } } 14.4 \u30e9\u30f3\u30c0\u30e0\u306a\u8272 \u00b6 RandomColorF () \u306f\u30e9\u30f3\u30c0\u30e0\u306a\u8272\u3092 HSV ( Random ( 360 . 0 ) , 1 . 0 , 1 . 0 ) \u3068\u3044\u3046\u5f0f\u3067\u751f\u6210\u3057\u3066 ColorF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < ColorF > colors ; for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 colors << RandomColor (); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & color : colors ) { color = RandomColor (); } } for ( size_t i : step ( colors . size ())) { Circle ( 50 + i * 50.0 , 100 , 20 ). draw ( colors [ i ]); } } } 14.5 \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19 \u00b6 RandomVec2(double) \u00b6 RandomVec2 ( double ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u3055\u3092\u6301\u3064\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Vec2 center = Scene :: Center (); // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb Vec2 dir = RandomVec2 ( 200 ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb dir = RandomVec2 ( 200 ); } Circle ( center , 20 ). draw (); Circle ( center , 200 ). drawFrame ( 1 , 1 , Palette :: Gray ); Circle ( center + dir , 10 ). draw (); } } RandomVec2(RectF) \u00b6 RandomVec2 ( RectF ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr RectF rect ( 100 , 100 , 400 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( rect ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( rect ); } } rect . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } } RandomVec2(Circle) \u00b6 RandomVec2 ( Circle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u5186\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 300 , 200 , 150 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( circle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( circle ); } } circle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } } RandomVec2(Triangle) \u00b6 RandomVec2 ( Triangle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u4e09\u89d2\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Triangle triangle ( 100 , 100 , 500 , 300 , 200 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( triangle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( triangle ); } } triangle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } } 14.6 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20 \u00b6 Array :: choice () \u306f\u3001\u914d\u5217\u306e\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3059 Print << options . choice (); } } } 14.7 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8907\u6570\u306e\u8981\u7d20 \u00b6 Array :: choice () \u306b\u500b\u6570\u3092\u6e21\u3059\u3068\u3001\u914d\u5217\u306e\u4e2d\u304b\u3089\u3001\u91cd\u8907\u306a\u304f\u305d\u306e\u500b\u6570\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u9078\u629e\u3057\u3001\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\u8981\u7d20\u306e\u9806\u756a\u306f\u914d\u5217\u5185\u3067\u306e\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092 3 \u3064\u8fd4\u3059 Print << options . choice ( 3 ); } } } 14.8 \u914d\u5217\u306e\u30b7\u30e3\u30c3\u30d5\u30eb \u00b6 Array :: shuffle () \u306f\u914d\u5217\u306e\u8981\u7d20\u306e\u9806\u756a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u307e\u3059\u3002 Array :: shuffled () \u3092\u4f7f\u3046\u3068\u3001\u81ea\u8eab\u306f\u5909\u66f4\u305b\u305a\u306b\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u305f\u65b0\u3057\u3044\u914d\u5217\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Shuffle\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u8981\u7d20\u306e\u9806\u756a\u3092\u30b7\u30e3\u30c3\u30d5\u30eb options . shuffle (); Print << options ; } } } 14.9 \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e \u00b6 Sample () \u3092\u4f7f\u3046\u3068\u3001 {} \u3067\u6e21\u3057\u305f\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u8981\u7d20\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << Sample ({ 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } } \u7b2c 1 \u5f15\u6570\u306b\u500b\u6570\u3001\u7b2c 2 \u5f15\u6570\u306b\u9078\u629e\u80a2\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 Arrai :: choice () \u306e\u6642\u3068\u540c\u69d8\u306b\u3001\u8981\u7d20\u306e\u9806\u756a\u306f\u6700\u521d\u306b\u6e21\u3055\u308c\u305f\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b 3 \u500b\u9078\u629e Print << Sample ( 3 , { 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } } 14.10 \u51fa\u73fe\u78ba\u7387 \u00b6 \u78ba\u7387\u306b\u30d0\u30a4\u30a2\u30b9\u304c\u3042\u308b\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u7d50\u679c\u3092\u9078\u629e\u3059\u308b\u3068\u304d\u306f DiscreteSample \u3092\u4f7f\u3044\u307e\u3059\u3002\u9078\u629e\u80a2\u3092\u914d\u5217\u3067\u3001\u9078\u629e\u80a2\u306e\u78ba\u7387\u5206\u5e03\u3092 DiscreteDistribution \u3067\u6e96\u5099\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u78ba\u7387\u5206\u5e03\u306f double \u578b\u306e\u5024\u3067\u6307\u5b9a\u3057\u3001\u5408\u8a08\u304c\u7279\u5b9a\u306e\u6570\u306b\u306a\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002{1, 6, 3} \u306a\u3089 10%, 60%, 30% \u3068\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9078\u629e\u80a2 const Array < String > options = { U \"$0\" , U \"$1\" , U \"$5\" , U \"$20\" , U \"$100\" , U \"$500\" , U \"$2000\" , }; // \u9078\u629e\u80a2\u306b\u5bfe\u5fdc\u3059\u308b\u78ba\u7387\u5206\u5e03 // \uff08$0 \u306f $2000 \u3088\u308a\u3082 1000 \u500d\u51fa\u3084\u3059\u3044\uff09 DiscreteDistribution distribution ( { 1000 , 200 , 50 , 10 , 5 , 2 , 1 , }); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u78ba\u7387\u5206\u5e03\u306b\u57fa\u3065\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << DiscreteSample ( options , distribution ); } } } }","title":"14. Random"},{"location":"tutorial/random/#14-random","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u3084\u8272\u3001\u5ea7\u6a19\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u308a\u3001\u914d\u5217\u304b\u3089\u7121\u4f5c\u70ba\u306b\u8981\u7d20\u3092\u9078\u629e\u3057\u305f\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"14. Random"},{"location":"tutorial/random/#141","text":"RandomBool () \u306f 50% \u306e\u78ba\u7387\u3067 true , 50% \u306e\u78ba\u7387\u3067 false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 50% \u306e\u78ba\u7387\u3067 true, 50% \u306e\u78ba\u7387\u3067 false Print << RandomBool (); } } } }","title":"14.1 \u534a\u3005\u306e\u78ba\u7387"},{"location":"tutorial/random/#142","text":"RandomBool () \u306b\u306f 0.0 \uff5e 1.0 \u306e\u7bc4\u56f2\u3067 true \u306b\u306a\u308b\u78ba\u7387\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u300210% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 1 \u3092\u300125% \u306e\u78ba\u7387\u3067 true \u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u5834\u5408\u306f 0 . 25 \u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 30% \u306e\u78ba\u7387\u3067 true, 70% \u306e\u78ba\u7387\u3067 false Print << RandomBool ( 0.3 ); } } } }","title":"14.2 \u78ba\u7387\u3092\u6307\u5b9a"},{"location":"tutorial/random/#143","text":"Random < Type > ( max ) \u306f 0 \u304b\u3089 max \u307e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u3001 Random < Type > ( min , max ) \u306f min \u304b\u3089\u3000max \u306e\u7bc4\u56f2\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"int32\" , Vec2 ( 200 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // 0\uff5e100 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570 Print << Random ( 100 ); } } if ( SimpleGUI :: Button ( U \"double\" , Vec2 ( 200 , 60 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // -100.0\uff5e100.0 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 Print << Random ( - 100.0 , 100.0 ); } } if ( SimpleGUI :: Button ( U \"char32\" , Vec2 ( 200 , 100 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // A\uff5eZ \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57 Print << Random ( U 'A' , U 'Z' ); } } } }","title":"14.3 \u30e9\u30f3\u30c0\u30e0\u306a\u6570"},{"location":"tutorial/random/#144","text":"RandomColorF () \u306f\u30e9\u30f3\u30c0\u30e0\u306a\u8272\u3092 HSV ( Random ( 360 . 0 ) , 1 . 0 , 1 . 0 ) \u3068\u3044\u3046\u5f0f\u3067\u751f\u6210\u3057\u3066 ColorF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < ColorF > colors ; for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u8272 colors << RandomColor (); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & color : colors ) { color = RandomColor (); } } for ( size_t i : step ( colors . size ())) { Circle ( 50 + i * 50.0 , 100 , 20 ). draw ( colors [ i ]); } } }","title":"14.4 \u30e9\u30f3\u30c0\u30e0\u306a\u8272"},{"location":"tutorial/random/#145","text":"","title":"14.5 \u30e9\u30f3\u30c0\u30e0\u306a\u5ea7\u6a19"},{"location":"tutorial/random/#randomvec2double","text":"RandomVec2 ( double ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u3055\u3092\u6301\u3064\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Vec2 center = Scene :: Center (); // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb Vec2 dir = RandomVec2 ( 200 ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { // \u9577\u3055\u304c 200 \u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30d9\u30af\u30c8\u30eb dir = RandomVec2 ( 200 ); } Circle ( center , 20 ). draw (); Circle ( center , 200 ). drawFrame ( 1 , 1 , Palette :: Gray ); Circle ( center + dir , 10 ). draw (); } }","title":"RandomVec2(double)"},{"location":"tutorial/random/#randomvec2rectf","text":"RandomVec2 ( RectF ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr RectF rect ( 100 , 100 , 400 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( rect ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // rect \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( rect ); } } rect . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } }","title":"RandomVec2(RectF)"},{"location":"tutorial/random/#randomvec2circle","text":"RandomVec2 ( Circle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u5186\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 300 , 200 , 150 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( circle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // circle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( circle ); } } circle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } }","title":"RandomVec2(Circle)"},{"location":"tutorial/random/#randomvec2triangle","text":"RandomVec2 ( Triangle ) \u306f\u3001\u6307\u5b9a\u3057\u305f\u4e09\u89d2\u5f62\u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u3092 Vec2 \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Triangle triangle ( 100 , 100 , 500 , 300 , 200 , 300 ); Array < Vec2 > points ; for ( size_t i = 0 ; i < 100 ; ++ i ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 points << RandomVec2 ( triangle ); } while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 20 , 20 ))) { for ( auto & point : points ) { // triangle \u306e\u5185\u90e8\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u70b9 point = RandomVec2 ( triangle ); } } triangle . draw ( Palette :: Gray ); for ( const auto & point : points ) { Circle ( point , 3 ). draw (); } } }","title":"RandomVec2(Triangle)"},{"location":"tutorial/random/#146","text":"Array :: choice () \u306f\u3001\u914d\u5217\u306e\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u8fd4\u3059 Print << options . choice (); } } }","title":"14.6 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20"},{"location":"tutorial/random/#147","text":"Array :: choice () \u306b\u500b\u6570\u3092\u6e21\u3059\u3068\u3001\u914d\u5217\u306e\u4e2d\u304b\u3089\u3001\u91cd\u8907\u306a\u304f\u305d\u306e\u500b\u6570\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092\u9078\u629e\u3057\u3001\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\u8981\u7d20\u306e\u9806\u756a\u306f\u914d\u5217\u5185\u3067\u306e\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 200 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306a\u8981\u7d20\u3092 3 \u3064\u8fd4\u3059 Print << options . choice ( 3 ); } } }","title":"14.7 \u914d\u5217\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8907\u6570\u306e\u8981\u7d20"},{"location":"tutorial/random/#148","text":"Array :: shuffle () \u306f\u914d\u5217\u306e\u8981\u7d20\u306e\u9806\u756a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u307e\u3059\u3002 Array :: shuffled () \u3092\u4f7f\u3046\u3068\u3001\u81ea\u8eab\u306f\u5909\u66f4\u305b\u305a\u306b\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u305f\u65b0\u3057\u3044\u914d\u5217\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" , U \"Black\" , U \"White\" }; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Shuffle\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u8981\u7d20\u306e\u9806\u756a\u3092\u30b7\u30e3\u30c3\u30d5\u30eb options . shuffle (); Print << options ; } } }","title":"14.8 \u914d\u5217\u306e\u30b7\u30e3\u30c3\u30d5\u30eb"},{"location":"tutorial/random/#149","text":"Sample () \u3092\u4f7f\u3046\u3068\u3001 {} \u3067\u6e21\u3057\u305f\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u8981\u7d20\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << Sample ({ 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } } \u7b2c 1 \u5f15\u6570\u306b\u500b\u6570\u3001\u7b2c 2 \u5f15\u6570\u306b\u9078\u629e\u80a2\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 Arrai :: choice () \u306e\u6642\u3068\u540c\u69d8\u306b\u3001\u8981\u7d20\u306e\u9806\u756a\u306f\u6700\u521d\u306b\u6e21\u3055\u308c\u305f\u9806\u5e8f\u3068\u540c\u3058\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); // \u30e9\u30f3\u30c0\u30e0\u306b 3 \u500b\u9078\u629e Print << Sample ( 3 , { 1 , 2 , 5 , 10 , 20 , 50 , 100 }); } } }","title":"14.9 \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e"},{"location":"tutorial/random/#1410","text":"\u78ba\u7387\u306b\u30d0\u30a4\u30a2\u30b9\u304c\u3042\u308b\u8907\u6570\u306e\u9078\u629e\u80a2\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u7d50\u679c\u3092\u9078\u629e\u3059\u308b\u3068\u304d\u306f DiscreteSample \u3092\u4f7f\u3044\u307e\u3059\u3002\u9078\u629e\u80a2\u3092\u914d\u5217\u3067\u3001\u9078\u629e\u80a2\u306e\u78ba\u7387\u5206\u5e03\u3092 DiscreteDistribution \u3067\u6e96\u5099\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u78ba\u7387\u5206\u5e03\u306f double \u578b\u306e\u5024\u3067\u6307\u5b9a\u3057\u3001\u5408\u8a08\u304c\u7279\u5b9a\u306e\u6570\u306b\u306a\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002{1, 6, 3} \u306a\u3089 10%, 60%, 30% \u3068\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9078\u629e\u80a2 const Array < String > options = { U \"$0\" , U \"$1\" , U \"$5\" , U \"$20\" , U \"$100\" , U \"$500\" , U \"$2000\" , }; // \u9078\u629e\u80a2\u306b\u5bfe\u5fdc\u3059\u308b\u78ba\u7387\u5206\u5e03 // \uff08$0 \u306f $2000 \u3088\u308a\u3082 1000 \u500d\u51fa\u3084\u3059\u3044\uff09 DiscreteDistribution distribution ( { 1000 , 200 , 50 , 10 , 5 , 2 , 1 , }); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Reset\" , Vec2 ( 300 , 20 ))) { ClearPrint (); for ( int32 i = 0 ; i < 10 ; ++ i ) { // \u78ba\u7387\u5206\u5e03\u306b\u57fa\u3065\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e Print << DiscreteSample ( options , distribution ); } } } }","title":"14.10 \u51fa\u73fe\u78ba\u7387"},{"location":"tutorial/release/","text":"99. Releasing your application \u00b6 99.1 \u00b6","title":"99. Releasing your application"},{"location":"tutorial/release/#99-releasing-your-application","text":"","title":"99. Releasing your application"},{"location":"tutorial/release/#991","text":"","title":"99.1"},{"location":"tutorial/resource/","text":"20. Embedded resource \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3001\u305d\u308c\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 20.1 \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306e\u57fa\u672c \u00b6 Siv3D \u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3046\u753b\u50cf\u3084\u97f3\u58f0\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092 .exe \u3084 .app \u306b\u57cb\u3081\u8fbc\u307f\u3001\u30e6\u30fc\u30b6\u304b\u3089\u898b\u3066\u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3088\u3046\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u3080\u3068\u3001\u914d\u5e03\u304c\u7c21\u5358\u306b\u306a\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u524a\u9664\u3055\u308c\u305f\u308a\u3001\u5909\u66f4\u3055\u308c\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u983b\u7e41\u306b\u66f4\u65b0\u3059\u308b\u958b\u767a\u4e2d\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306f\u305b\u305a\u3001\u30ea\u30ea\u30fc\u30b9\u304c\u8fd1\u304f\u306a\u3063\u3066\u304b\u3089\u57cb\u3081\u8fbc\u307f\u306b\u5909\u66f4\u3059\u308b\u3068\u52b9\u7387\u304c\u826f\u3044\u3067\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3080\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 Windows \u306e\u5834\u5408 \u00b6 App / Resource . rc \u306b\u3001\u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 App / Resource . rc \u3092\u30e1\u30e2\u5e33\u306a\u3069\uff08Visual Studio \u306f\u4e0d\u53ef\uff09\u306e\u5916\u90e8\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304d\u3001 Resource ( example / windmill . png ) \u306e\u3088\u3046\u306b\u3001\u57cb\u3081\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u3001\u57cb\u3081\u8fbc\u3080\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u8ffd\u8a18\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u306e\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u3068 .exe \u306b\u30d5\u30a1\u30a4\u30eb\u304c\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002 macOS \u306e\u5834\u5408 \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u300cCreate folder references\u300d\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u4e0a\u3067\u9752\u3044\u30d5\u30a9\u30eb\u30c0\u30a2\u30a4\u30b3\u30f3\u306b\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3059\u3079\u3066 .app \u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c\u9752\u3044\u30a2\u30a4\u30b3\u30f3\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Linux \u306e\u5834\u5408 \u00b6 Linux \u7248\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u57cb\u3081\u8fbc\u307f\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001 resources / \u30d5\u30a9\u30eb\u30c0\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u540c\u68b1\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c resources / \u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 20.2 \u57cb\u3081\u8fbc\u307e\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 \u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u3053\u308c\u307e\u3067 U \"example/windmill.png\" \u3068\u6307\u5b9a\u3057\u3066\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092 Resource () \u3067\u56f2\u3093\u3067 Resource ( U \"example/windmill.png\" ) \u306b\u5909\u66f4\u3057\u307e\u3059\uff08Windows, macOS, Linux \u5171\u901a\uff09\u3002 \u30d3\u30eb\u30c9\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u7570\u306a\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3055\u305b\u3066\u304b\u3089\u5b9f\u884c\u3057\u3001\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u306e\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u3001\u57cb\u3081\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u3053\u3068\u306e\u78ba\u8a8d\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureFile ( U \"example/windmill.png\" ); // \u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureResource ( Resource ( U \"example/windmill.png\" )); while ( System :: Update ()) { textureFile . draw ( 0 , 0 ); textureResource . draw ( 0 , 320 ); } }","title":"20. Embedded resource"},{"location":"tutorial/resource/#20-embedded-resource","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u753b\u50cf\u3084\u97f3\u58f0\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3001\u305d\u308c\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"20. Embedded resource"},{"location":"tutorial/resource/#201","text":"Siv3D \u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3046\u753b\u50cf\u3084\u97f3\u58f0\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092 .exe \u3084 .app \u306b\u57cb\u3081\u8fbc\u307f\u3001\u30e6\u30fc\u30b6\u304b\u3089\u898b\u3066\u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3088\u3046\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u57cb\u3081\u8fbc\u3080\u3068\u3001\u914d\u5e03\u304c\u7c21\u5358\u306b\u306a\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u524a\u9664\u3055\u308c\u305f\u308a\u3001\u5909\u66f4\u3055\u308c\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u983b\u7e41\u306b\u66f4\u65b0\u3059\u308b\u958b\u767a\u4e2d\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306f\u305b\u305a\u3001\u30ea\u30ea\u30fc\u30b9\u304c\u8fd1\u304f\u306a\u3063\u3066\u304b\u3089\u57cb\u3081\u8fbc\u307f\u306b\u5909\u66f4\u3059\u308b\u3068\u52b9\u7387\u304c\u826f\u3044\u3067\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u57cb\u3081\u8fbc\u3080\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002","title":"20.1 \u30ea\u30bd\u30fc\u30b9\u306e\u57cb\u3081\u8fbc\u307f\u306e\u57fa\u672c"},{"location":"tutorial/resource/#windows","text":"App / Resource . rc \u306b\u3001\u57cb\u3081\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 App / Resource . rc \u3092\u30e1\u30e2\u5e33\u306a\u3069\uff08Visual Studio \u306f\u4e0d\u53ef\uff09\u306e\u5916\u90e8\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304d\u3001 Resource ( example / windmill . png ) \u306e\u3088\u3046\u306b\u3001\u57cb\u3081\u8fbc\u307f\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u3001\u57cb\u3081\u8fbc\u3080\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u8ffd\u8a18\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u306e\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u3068 .exe \u306b\u30d5\u30a1\u30a4\u30eb\u304c\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002","title":"Windows \u306e\u5834\u5408"},{"location":"tutorial/resource/#macos","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u300cCreate folder references\u300d\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ca\u30d3\u30b2\u30fc\u30bf\u4e0a\u3067\u9752\u3044\u30d5\u30a9\u30eb\u30c0\u30a2\u30a4\u30b3\u30f3\u306b\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3059\u3079\u3066 .app \u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c\u9752\u3044\u30a2\u30a4\u30b3\u30f3\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"macOS \u306e\u5834\u5408"},{"location":"tutorial/resource/#linux","text":"Linux \u7248\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u57cb\u3081\u8fbc\u307f\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001 resources / \u30d5\u30a9\u30eb\u30c0\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3057\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u540c\u68b1\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f Siv3D \u306e\u5185\u90e8\u51e6\u7406\u306b\u5fc5\u8981\u306a engine / \u30d5\u30a9\u30eb\u30c0\u304c resources / \u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"Linux \u306e\u5834\u5408"},{"location":"tutorial/resource/#202","text":"\u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u3053\u308c\u307e\u3067 U \"example/windmill.png\" \u3068\u6307\u5b9a\u3057\u3066\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092 Resource () \u3067\u56f2\u3093\u3067 Resource ( U \"example/windmill.png\" ) \u306b\u5909\u66f4\u3057\u307e\u3059\uff08Windows, macOS, Linux \u5171\u901a\uff09\u3002 \u30d3\u30eb\u30c9\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u7570\u306a\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3055\u305b\u3066\u304b\u3089\u5b9f\u884c\u3057\u3001\u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u306e\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u3001\u57cb\u3081\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u3053\u3068\u306e\u78ba\u8a8d\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureFile ( U \"example/windmill.png\" ); // \u57cb\u3081\u8fbc\u307f\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u307f const Texture textureResource ( Resource ( U \"example/windmill.png\" )); while ( System :: Update ()) { textureFile . draw ( 0 , 0 ); textureResource . draw ( 0 , 320 ); } }","title":"20.2 \u57cb\u3081\u8fbc\u307e\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/scene-manager/","text":"22. Scene management \u00b6 \u30b7\u30fc\u30f3\u7ba1\u7406\uff08\u307e\u305f\u306f \u30b7\u30fc\u30f3\u9077\u79fb \uff09\u3092\u4f7f\u3046\u3068\u3001\u8907\u96d1\u306a\u30a2\u30d7\u30ea\uff08\u3068\u304f\u306b\u30b2\u30fc\u30e0\uff09\u3092\u52b9\u7387\u3088\u304f\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u306f\u3001\u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u3001\u30ea\u30b6\u30eb\u30c8\u306a\u3069\u3001\u500b\u3005\u306e\u5834\u9762\uff08\u30b7\u30fc\u30f3\uff09\u3092\u500b\u5225\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u3001\u305d\u308c\u3089\u3092\u884c\u304d\u6765\u3059\u308b\u3053\u3068\u3067\u5168\u4f53\u306e\u6d41\u308c\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002Siv3D \u306e SceneManager \u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u3042\u308b\u5834\u9762\u306e\u30af\u30e9\u30b9\u304b\u3089\u5225\u306e\u5834\u9762\u306e\u30af\u30e9\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u5f15\u304d\u7d99\u3044\u3060\u308a\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3067\u6ed1\u3089\u304b\u306b\u753b\u9762\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3059\u308b\u51e6\u7406\u304c\u81ea\u52d5\u7684\u306b\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 Note \u30b7\u30fc\u30f3\u7ba1\u7406\u306b\u304a\u3051\u308b\u300c\u30b7\u30fc\u30f3\u300d\u3068\u306f\u3001\u500b\u3005\u306e\u5834\u9762\u3084\u3001\u305d\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u6307\u3057\u307e\u3059\u300210 \u7ae0\u3067\u8aac\u660e\u3057\u305f\u30b7\u30fc\u30f3\u3084 Scene :: \u540d\u524d\u7a7a\u9593\u306e\u6a5f\u80fd\u3068\u306f\u5225\u306e\u6982\u5ff5\u3067\u3059\u3002 22.1 \u30b7\u30fc\u30f3\u306e\u57fa\u672c \u00b6 \u500b\u3005\u306e\u30b7\u30fc\u30f3\u3092\u533a\u5225\u3059\u308b\u5024\uff08\u30b9\u30c6\u30fc\u30c8\uff09\u306e\u578b\u3092\u6c7a\u3081\u307e\u3059\u3002\u4f8b\u3048\u3070 String \u578b\u3092\u4f7f\u3046\u3068\u3001\u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306f U \"Title\" , \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306f U \"Game\" \u3068\u3044\u3063\u305f\u540d\u524d\u3092\u4ed8\u3051\u3066\u533a\u5225\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30af\u30e9\u30b9\u540d\u3068\u540d\u524d\u3092\u4e00\u81f4\u3055\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u5fc5\u305a\u3057\u3082\u5f93\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u3001\u30b9\u30c6\u30fc\u30c8\u306e\u578b\u3092\u4f7f\u3044 using App = SceneManager < String > ; \u306e\u3088\u3046\u306b\u3057\u3066\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u30af\u30e9\u30b9\u306e\u578b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u30b7\u30fc\u30f3\u3092 App :: Scene \u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\u901a\u5e38\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001 update () , draw () \u306e 3 \u3064\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002 Main () \u95a2\u6570\u306b\u306f App \u578b\u306e\u5909\u6570\u3092\u4f5c\u308a\u3001\u7528\u610f\u3057\u305f\u30b7\u30fc\u30f3\u30af\u30e9\u30b9\u3092 .add () \u3067\u767b\u9332\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067 App :: update () \u3092\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u305b\u3070\u3001\u6700\u521d\u306b\u767b\u9332\u3057\u305f\u30b7\u30fc\u30f3\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3067\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 update () \u95a2\u6570\u304c\u5148\u306b\u547c\u3070\u308c\u3001\u305d\u306e\u6b21\u306b draw () \u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.2 \u30b7\u30fc\u30f3\u9077\u79fb \u00b6 \u5148\u307b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3042\u308b\u30b7\u30fc\u30f3\u306e\u5b9f\u884c\u4e2d\u306b\u3001\u5225\u306e\u30b7\u30fc\u30f3\u306b\u9077\u79fb\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30b7\u30fc\u30f3\u306e update () \u95a2\u6570\u5185\u3067 changeScene () \u3092\u547c\u3073\u3001\u884c\u304d\u305f\u3044\u5148\u306e\u30b7\u30fc\u30f3\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306f\u3001\u30b7\u30fc\u30f3\u3092\u9077\u79fb\u3059\u308b\u305f\u3073\u3001\u53e4\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u306f\u7834\u68c4\u3055\u308c\u3001\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.3 \u30b7\u30fc\u30f3\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709 \u00b6 \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u306e\u60c5\u5831\u306a\u3069\u3001\u30b7\u30fc\u30f3\u3092\u307e\u305f\u3044\u3067\u5171\u6709\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30c7\u30fc\u30bf\u578b\u3092 SceneManager <> \u306e 2 \u3064\u76ee\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30b7\u30fc\u30f3\u306e\u95a2\u6570\u304b\u3089 geteData () \u3092\u901a\u3057\u3066\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u4f5c\u6210\u6642\u306b 1 \u5ea6\u3060\u3051\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 // \u3053\u3053\u3067 GameData \u3082\u521d\u671f\u5316\u3055\u308c\u308b App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.4 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f SceneManager :: setFadeColor () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u5207\u308a\u66ff\u3048\u306e\u6642\u9593\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u306b\u306f\u3001 changeScene () \u306e\u7b2c 2 \u5f15\u6570\u306b\u6642\u9593\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1 \u79d2\uff09\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b 0.3 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Game\" , 0.3 s ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b 2 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Title\" , 2.0 s ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); // \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272 manager . setFadeColor ( Palette :: Skyblue ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } } 22.5 \u3055\u3089\u306b\u30b7\u30fc\u30f3\u7ba1\u7406\u3092\u5b66\u3076 \u00b6 \u3088\u308a\u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u3092\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f Siv3D\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8/\u30b7\u30fc\u30f3\u9077\u79fb\uff081 \u30d5\u30a1\u30a4\u30eb\u7248\uff09 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u30b7\u30fc\u30f3\u3054\u3068\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5206\u5272\u3092\u3059\u308b\u5834\u5408\u306f \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u306e\u69cb\u9020\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 update () \u3084 draw () \u306e\u307b\u304b\u306b\u3001 updateFadeIn () , updateFadeOut () , drawFadeIn () , drawFadeOut () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u306e\u6700\u4e2d\u306e\u6319\u52d5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003: \u30b7\u30fc\u30f3\u5207\u308a\u66ff\u3048\u6642\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b","title":"22. Scene management"},{"location":"tutorial/scene-manager/#22-scene-management","text":"\u30b7\u30fc\u30f3\u7ba1\u7406\uff08\u307e\u305f\u306f \u30b7\u30fc\u30f3\u9077\u79fb \uff09\u3092\u4f7f\u3046\u3068\u3001\u8907\u96d1\u306a\u30a2\u30d7\u30ea\uff08\u3068\u304f\u306b\u30b2\u30fc\u30e0\uff09\u3092\u52b9\u7387\u3088\u304f\u958b\u767a\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u306f\u3001\u30b2\u30fc\u30e0\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u3001\u30ea\u30b6\u30eb\u30c8\u306a\u3069\u3001\u500b\u3005\u306e\u5834\u9762\uff08\u30b7\u30fc\u30f3\uff09\u3092\u500b\u5225\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u3001\u305d\u308c\u3089\u3092\u884c\u304d\u6765\u3059\u308b\u3053\u3068\u3067\u5168\u4f53\u306e\u6d41\u308c\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002Siv3D \u306e SceneManager \u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001\u3042\u308b\u5834\u9762\u306e\u30af\u30e9\u30b9\u304b\u3089\u5225\u306e\u5834\u9762\u306e\u30af\u30e9\u30b9\u306b\u30c7\u30fc\u30bf\u3092\u5f15\u304d\u7d99\u3044\u3060\u308a\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3067\u6ed1\u3089\u304b\u306b\u753b\u9762\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3059\u308b\u51e6\u7406\u304c\u81ea\u52d5\u7684\u306b\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 Note \u30b7\u30fc\u30f3\u7ba1\u7406\u306b\u304a\u3051\u308b\u300c\u30b7\u30fc\u30f3\u300d\u3068\u306f\u3001\u500b\u3005\u306e\u5834\u9762\u3084\u3001\u305d\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u6307\u3057\u307e\u3059\u300210 \u7ae0\u3067\u8aac\u660e\u3057\u305f\u30b7\u30fc\u30f3\u3084 Scene :: \u540d\u524d\u7a7a\u9593\u306e\u6a5f\u80fd\u3068\u306f\u5225\u306e\u6982\u5ff5\u3067\u3059\u3002","title":"22. Scene management"},{"location":"tutorial/scene-manager/#221","text":"\u500b\u3005\u306e\u30b7\u30fc\u30f3\u3092\u533a\u5225\u3059\u308b\u5024\uff08\u30b9\u30c6\u30fc\u30c8\uff09\u306e\u578b\u3092\u6c7a\u3081\u307e\u3059\u3002\u4f8b\u3048\u3070 String \u578b\u3092\u4f7f\u3046\u3068\u3001\u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306f U \"Title\" , \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306f U \"Game\" \u3068\u3044\u3063\u305f\u540d\u524d\u3092\u4ed8\u3051\u3066\u533a\u5225\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30af\u30e9\u30b9\u540d\u3068\u540d\u524d\u3092\u4e00\u81f4\u3055\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u5fc5\u305a\u3057\u3082\u5f93\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u307e\u305a\u3001\u30b9\u30c6\u30fc\u30c8\u306e\u578b\u3092\u4f7f\u3044 using App = SceneManager < String > ; \u306e\u3088\u3046\u306b\u3057\u3066\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u30af\u30e9\u30b9\u306e\u578b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u30b7\u30fc\u30f3\u3092 App :: Scene \u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\u901a\u5e38\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001 update () , draw () \u306e 3 \u3064\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002 Main () \u95a2\u6570\u306b\u306f App \u578b\u306e\u5909\u6570\u3092\u4f5c\u308a\u3001\u7528\u610f\u3057\u305f\u30b7\u30fc\u30f3\u30af\u30e9\u30b9\u3092 .add () \u3067\u767b\u9332\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067 App :: update () \u3092\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u305b\u3070\u3001\u6700\u521d\u306b\u767b\u9332\u3057\u305f\u30b7\u30fc\u30f3\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3067\u306f\u6bce\u30d5\u30ec\u30fc\u30e0 update () \u95a2\u6570\u304c\u5148\u306b\u547c\u3070\u308c\u3001\u305d\u306e\u6b21\u306b draw () \u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.1 \u30b7\u30fc\u30f3\u306e\u57fa\u672c"},{"location":"tutorial/scene-manager/#222","text":"\u5148\u307b\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3042\u308b\u30b7\u30fc\u30f3\u306e\u5b9f\u884c\u4e2d\u306b\u3001\u5225\u306e\u30b7\u30fc\u30f3\u306b\u9077\u79fb\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30b7\u30fc\u30f3\u306e update () \u95a2\u6570\u5185\u3067 changeScene () \u3092\u547c\u3073\u3001\u884c\u304d\u305f\u3044\u5148\u306e\u30b7\u30fc\u30f3\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306f\u3001\u30b7\u30fc\u30f3\u3092\u9077\u79fb\u3059\u308b\u305f\u3073\u3001\u53e4\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u306f\u7834\u68c4\u3055\u308c\u3001\u65b0\u3057\u3044\u30b7\u30fc\u30f3\u306e\u30af\u30e9\u30b9\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> using App = SceneManager < String > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.2 \u30b7\u30fc\u30f3\u9077\u79fb"},{"location":"tutorial/scene-manager/#223","text":"\u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u306e\u60c5\u5831\u306a\u3069\u3001\u30b7\u30fc\u30f3\u3092\u307e\u305f\u3044\u3067\u5171\u6709\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30c7\u30fc\u30bf\u578b\u3092 SceneManager <> \u306e 2 \u3064\u76ee\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30b7\u30fc\u30f3\u306e\u95a2\u6570\u304b\u3089 geteData () \u3092\u901a\u3057\u3066\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f\u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u4f5c\u6210\u6642\u306b 1 \u5ea6\u3060\u3051\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Game\" ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b\u9077\u79fb changeScene ( U \"Title\" ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 // \u3053\u3053\u3067 GameData \u3082\u521d\u671f\u5316\u3055\u308c\u308b App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.3 \u30b7\u30fc\u30f3\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709"},{"location":"tutorial/scene-manager/#224","text":"\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f SceneManager :: setFadeColor () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306e\u5207\u308a\u66ff\u3048\u306e\u6642\u9593\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u306b\u306f\u3001 changeScene () \u306e\u7b2c 2 \u5f15\u6570\u306b\u6642\u9593\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 1 \u79d2\uff09\u3002 # include <Siv3D.hpp> struct GameData { int32 score = 0 ; }; using App = SceneManager < String , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public App :: Scene { public : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u5fc5\u305a\u5b9f\u88c5\uff09 Title ( const InitData & init ) : IScene ( init ) { } // \u66f4\u65b0\u95a2\u6570 void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u306b 0.3 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Game\" , 0.3 s ); } } // \u63cf\u753b\u95a2\u6570 (const \u4fee\u98fe) void draw () const override { Scene :: SetBackground ( ColorF ( 0.3 , 0.4 , 0.5 )); FontAsset ( U \"TitleFont\" )( U \"My Game\" ). drawAt ( 400 , 100 ); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 520 , 540 ); Circle ( Cursor :: Pos (), 50 ). draw ( Palette :: Orange ); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public App :: Scene { private : Texture m_texture ; public : Game ( const InitData & init ) : IScene ( init ) , m_texture ( Emoji ( U \"\ud83d\udc08\" )) { } void update () override { // \u5de6\u30af\u30ea\u30c3\u30af\u3067 if ( MouseL . down ()) { // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\u306b 2 \u79d2\u304b\u3051\u3066\u9077\u79fb changeScene ( U \"Title\" , 2.0 s ); } // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u79fb\u52d5\u3067\u30b9\u30b3\u30a2\u304c\u5897\u52a0 getData (). score += static_cast < int32 > ( Cursor :: Delta (). length () * 10 ); } void draw () const override { Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.6 )); m_texture . drawAt ( Cursor :: Pos ()); // \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u3092\u8868\u793a FontAsset ( U \"ScoreFont\" )( U \"Score: {}\" _fmt ( getData (). score )). draw ( 40 , 40 ); } }; void Main () { FontAsset :: Register ( U \"TitleFont\" , 60 , Typeface :: Heavy ); FontAsset :: Register ( U \"ScoreFont\" , 30 , Typeface :: Bold ); // \u30b7\u30fc\u30f3\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f5c\u6210 App manager ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Title\"\uff09\u3092\u767b\u9332 manager . add < Title > ( U \"Title\" ); // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\uff08\u540d\u524d\u306f U\"Game\"\uff09\u3092\u767b\u9332 manager . add < Game > ( U \"Game\" ); // \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u6642\u306e\u753b\u9762\u306e\u8272 manager . setFadeColor ( Palette :: Skyblue ); while ( System :: Update ()) { // \u73fe\u5728\u306e\u30b7\u30fc\u30f3\u3092\u5b9f\u884c if ( ! manager . update ()) { break ; } } }","title":"22.4 \u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"tutorial/scene-manager/#225","text":"\u3088\u308a\u672c\u683c\u7684\u306a\u30b2\u30fc\u30e0\u3092\u30b7\u30fc\u30f3\u7ba1\u7406\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f Siv3D\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8/\u30b7\u30fc\u30f3\u9077\u79fb\uff081 \u30d5\u30a1\u30a4\u30eb\u7248\uff09 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u30b7\u30fc\u30f3\u3054\u3068\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5206\u5272\u3092\u3059\u308b\u5834\u5408\u306f \u30b2\u30fc\u30e0\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u306e\u69cb\u9020\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 update () \u3084 draw () \u306e\u307b\u304b\u306b\u3001 updateFadeIn () , updateFadeOut () , drawFadeIn () , drawFadeOut () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3\u30fb\u30d5\u30a7\u30fc\u30c9\u30a2\u30a6\u30c8\u306e\u6700\u4e2d\u306e\u6319\u52d5\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003: \u30b7\u30fc\u30f3\u5207\u308a\u66ff\u3048\u6642\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b","title":"22.5 \u3055\u3089\u306b\u30b7\u30fc\u30f3\u7ba1\u7406\u3092\u5b66\u3076"},{"location":"tutorial/shape/","text":"2. Drawing shapes \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002 2.1 \u5186\u3092\u63cf\u304f \u00b6 \u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update () \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } } 2.2 \u8272\u3092\u4ed8\u3051\u308b \u00b6 \u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } } 2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b \u00b6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update () \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time () \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } } 2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002 2.5 \u67a0\u3092\u63cf\u304f \u00b6 \u56f3\u5f62\u306f\u3001 .draw () \u306e\u4ee3\u308f\u308a\u306b .drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 .drawFrame () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw () \u3084 .drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 2.6 \u7dda\u5206\u3092\u63cf\u304f \u00b6 \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } } 2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } } 2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } } 2.9 \u6955\u5186\u3092\u63cf\u304f \u00b6 \u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } } 2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } } 2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } } 2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f \u00b6 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } } 2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f \u00b6 LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } } 2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f \u00b6 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } } 2.16 \u77e2\u5370\u3092\u63cf\u304f \u00b6 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } } 2.17 \u6247\u5f62\u3092\u63cf\u304f \u00b6 \u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } } 2.18 \u5186\u5f27\u3092\u63cf\u304f \u00b6 \u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } } 2.19 \u56f3\u5f62\u306e\u64cd\u4f5c \u00b6 \u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } } 2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 \u00b6 Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2. Drawing shapes"},{"location":"tutorial/shape/#2-drawing-shapes","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002","title":"2. Drawing shapes"},{"location":"tutorial/shape/#21","text":"\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update () \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"2.1 \u5186\u3092\u63cf\u304f"},{"location":"tutorial/shape/#22","text":"\u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } }","title":"2.2 \u8272\u3092\u4ed8\u3051\u308b"},{"location":"tutorial/shape/#23","text":"\u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update () \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time () \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } }","title":"2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b"},{"location":"tutorial/shape/#24","text":"\u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#25","text":"\u56f3\u5f62\u306f\u3001 .draw () \u306e\u4ee3\u308f\u308a\u306b .drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 .drawFrame () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw () \u3084 .drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002","title":"2.5 \u67a0\u3092\u63cf\u304f"},{"location":"tutorial/shape/#26","text":"\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } }","title":"2.6 \u7dda\u5206\u3092\u63cf\u304f"},{"location":"tutorial/shape/#27","text":"\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } }","title":"2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#28","text":"Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } }","title":"2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#29","text":"\u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } }","title":"2.9 \u6955\u5186\u3092\u63cf\u304f"},{"location":"tutorial/shape/#210","text":"\u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } }","title":"2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#211","text":"\u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } }","title":"2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#212","text":"Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#213","text":"\u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } }","title":"2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f"},{"location":"tutorial/shape/#214-catmull-rom","text":"LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } }","title":"2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"tutorial/shape/#215","text":"2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } }","title":"2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"tutorial/shape/#216","text":"# include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } }","title":"2.16 \u77e2\u5370\u3092\u63cf\u304f"},{"location":"tutorial/shape/#217","text":"\u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } }","title":"2.17 \u6247\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#218","text":"\u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } }","title":"2.18 \u5186\u5f27\u3092\u63cf\u304f"},{"location":"tutorial/shape/#219","text":"\u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } }","title":"2.19 \u56f3\u5f62\u306e\u64cd\u4f5c"},{"location":"tutorial/shape/#220","text":"Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002","title":"2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71"},{"location":"tutorial/shape/#221","text":"Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorial/text-file/","text":"18. Text file \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u6587\u5b57\u3092\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 18.1 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TextReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 TextReader :: readLine () \u306b String \u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u6b21\u306b\u898b\u3064\u304b\u3063\u305f\u6539\u884c\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u306e 1 \u884c\u5206\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u305d\u306e\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u3053\u307e\u3067\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b while \u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b TextReader reader ( U \"example/test.txt\" ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader ) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // \u7d42\u7aef\u306b\u9054\u3059\u308b\u307e\u3067 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } 18.2 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b \u00b6 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 TextReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f TextReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f TextReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextReader reader ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader . open ( U \"example/test.txt\" )) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } } 18.3 \u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080 \u00b6 \u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f TextWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u65b9\u6cd5\u306f Print \u3068\u4f3c\u3066\u3044\u3066\u3001\u30aa\u30fc\u30d7\u30f3\u6e08\u307f\u306e TextWriter \u306e\u5909\u6570\u306b\u5411\u304b\u3063\u3066 << \u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044 1 \u884c\u5206\u306e\u6587\u5b57\u5217\u3084\u5024\u3092\u9001\u308a\u307e\u3059\u3002\u66f8\u304d\u8fbc\u307f\u306e\u6700\u5f8c\u306b\u306f\u6539\u884c\u304c\u81ea\u52d5\u3067\u633f\u5165\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306f\u30e1\u30f3\u30d0\u95a2\u6570 .write () \u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5185\u5bb9\u3092\u9001\u308a\u307e\u3059\u3002 .writeln () \u306f\u6539\u884c\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b // \uff08\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\uff09 TextWriter writer ( U \" tutorial.txt \" ) ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \" Failed to open `tutorial.txt` \" ) ; } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \" Hello, Siv3D! \" ; // \u5024\u3084\u6587\u5b57\u3092\u3000 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ' , ' << 456 << Point ( 10 , 20 ) ; // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U ' A ' ) ; writer . write ( U ' B ' ) ; // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U ' C ' ) ; // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ) ; writer . write ( U ' , ' ) ; writer . write ( 888 ) ; while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } \u51fa\u529b\u7d50\u679c (tutorial.txt) Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888 \u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1 \u00b6 TextWriter \u306f TextReader \u3068\u540c\u3058\u3088\u3046\u306b\u3001 .open () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3, .close () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30ed\u30fc\u30ba\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextWriter writer ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer . open ( U \"tutorial.txt\" )) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \"Hello, Siv3D!\" ; // \u5024\u3084\u6587\u5b57\u3092\u30001 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ',' << 456 << Point ( 10 , 20 ); // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U 'A' ); writer . write ( U 'B' ); // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U 'C' ); // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ); writer . write ( U ',' ); writer . write ( 888 ); // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba writer . close (); while ( System :: Update ()) { } } 18.4 \u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\u3067\u66f8\u304d\u3053\u3080 \u00b6 \u30c6\u30ad\u30b9\u30c8\u3092\u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f\u3001 TextWriter \u3067\u306e\u30aa\u30fc\u30d7\u30f3\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3068\u3057\u3066 OpenMode :: Append (\u8ffd\u52a0\u30e2\u30fc\u30c9) \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u540c\u540d\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u6642\u306f\u3001\u901a\u5e38\u3069\u304a\u308a\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u8ffd\u52a0\u30e2\u30fc\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 TextWriter writer ( U \"tutorial.txt\" , OpenMode :: Append ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092\u8ffd\u52a0\u3059\u308b writer . write ( U \" \\n ------\" ); while ( System :: Update ()) { } } 18.3 \u3067\u4f5c\u3063\u305f tutorial.txt \u306b\u8ffd\u52a0\u3057\u305f\u7d50\u679c Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888 ------ 18.5 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30b9\u30b3\u30fc\u30d7\u306b\u3088\u308b\u5236\u5fa1 \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1\u306f\u3001 { } \u3067\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u306e\u7d42\u4e86\u6642\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u3082\u826f\u3044\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { { TextWriter writer ( U \"tutorial.txt\" ); // 1 \u884c\u66f8\u304d\u8fbc\u3080 writer . write ( U \"Hello, Siv3D!\" ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } String text ; { // TextWriter \u3067\u30aa\u30fc\u30d7\u30f3\u3057\u305f\u307e\u307e\u3060\u3068\u3001\u3053\u3053\u3067\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3059\u308b TextReader reader ( U \"tutorial.txt\" ); // 1 \u884c\u8aad\u307f\u8fbc\u3080 reader . readLine ( text ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } Print << text ; while ( System :: Update ()) { } }","title":"18. Text file"},{"location":"tutorial/text-file/#18-text-file","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u6587\u5b57\u3092\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"18. Text file"},{"location":"tutorial/text-file/#181-1","text":"\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f TextReader \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306a\u3069\u3001\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! reader ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u30aa\u30fc\u30d7\u30f3\u76f4\u5f8c\u306f\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 TextReader :: readLine () \u306b String \u578b\u306e\u5909\u6570\u3092\u53c2\u7167\u3067\u6e21\u3059\u3068\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u59cb\u70b9\u3068\u3057\u3001\u6b21\u306b\u898b\u3064\u304b\u3063\u305f\u6539\u884c\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u306e 1 \u884c\u5206\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u305d\u306e\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u3092\u305d\u3053\u307e\u3067\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u8aad\u307f\u8fbc\u307f\u4f4d\u7f6e\u304c\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef\u306b\u3042\u3063\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u8aad\u307f\u8fbc\u3081\u306a\u3044\u3068\u304d\u306b\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b while \u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b TextReader reader ( U \"example/test.txt\" ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader ) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // \u7d42\u7aef\u306b\u9054\u3059\u308b\u307e\u3067 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } while ( System :: Update ()) { } // reader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b }","title":"18.1 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080"},{"location":"tutorial/text-file/#182","text":"TextReader \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u305b\u305a\u306b\u3001 TextReader :: open () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30aa\u30fc\u30d7\u30f3\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f true , \u5931\u6557\u3057\u305f\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 \u307e\u305f\u901a\u5e38\u306f TextReader \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u306b\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u305f\u308a\u3001\u5225\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3055\u308c\u305f\u307e\u307e\u3060\u3068\u64cd\u4f5c\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3050\u306b\u30af\u30ed\u30fc\u30ba\u3057\u305f\u3044\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3057\u305f\u3068\u304d\u306b\u306f TextReader :: close () \u3067\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextReader reader ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! reader . open ( U \"example/test.txt\" )) { throw Error ( U \"Failed to open `test.txt`\" ); } // \u884c\u306e\u5185\u5bb9\u3092\u8aad\u307f\u8fbc\u3080\u5909\u6570 String line ; // \u884c\u6570\u306e\u8868\u793a\u7528\u306e\u30ab\u30a6\u30f3\u30c8 size_t i = 0 ; // 1 \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 while ( reader . readLine ( line )) { Print << U \"{}: {}\" _fmt ( i ++ , line ); } // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba reader . close (); while ( System :: Update ()) { } }","title":"18.2 \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5236\u5fa1\u3059\u308b"},{"location":"tutorial/text-file/#183","text":"\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080\u306b\u306f TextWriter \u306e\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u3002 TextWriter \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u4e2d\u3060\u3063\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u4e0d\u6b63\u306a\u3082\u306e\u3060\u3063\u305f\u308a\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3057\u305f\u304b\u3069\u3046\u304b\u306f if ( ! writer ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 \u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30aa\u30fc\u30d7\u30f3\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u65b9\u6cd5\u306f Print \u3068\u4f3c\u3066\u3044\u3066\u3001\u30aa\u30fc\u30d7\u30f3\u6e08\u307f\u306e TextWriter \u306e\u5909\u6570\u306b\u5411\u304b\u3063\u3066 << \u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044 1 \u884c\u5206\u306e\u6587\u5b57\u5217\u3084\u5024\u3092\u9001\u308a\u307e\u3059\u3002\u66f8\u304d\u8fbc\u307f\u306e\u6700\u5f8c\u306b\u306f\u6539\u884c\u304c\u81ea\u52d5\u3067\u633f\u5165\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306f\u30e1\u30f3\u30d0\u95a2\u6570 .write () \u3092\u4f7f\u3063\u3066\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5185\u5bb9\u3092\u9001\u308a\u307e\u3059\u3002 .writeln () \u306f\u6539\u884c\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3059\u308b // \uff08\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u7834\u68c4\u3057\u3066\u304b\u3089\u30aa\u30fc\u30d7\u30f3\uff09 TextWriter writer ( U \" tutorial.txt \" ) ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \" Failed to open `tutorial.txt` \" ) ; } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \" Hello, Siv3D! \" ; // \u5024\u3084\u6587\u5b57\u3092\u3000 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ' , ' << 456 << Point ( 10 , 20 ) ; // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U ' A ' ) ; writer . write ( U ' B ' ) ; // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U ' C ' ) ; // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ) ; writer . write ( U ' , ' ) ; writer . write ( 888 ) ; while ( System :: Update ()) { } // writer \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b } \u51fa\u529b\u7d50\u679c (tutorial.txt) Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888","title":"18.3 \u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304d\u8fbc\u3080"},{"location":"tutorial/text-file/#_1","text":"TextWriter \u306f TextReader \u3068\u540c\u3058\u3088\u3046\u306b\u3001 .open () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3, .close () \u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30ed\u30fc\u30ba\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { TextWriter writer ; // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer . open ( U \"tutorial.txt\" )) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092 1 \u884c\u66f8\u304d\u8fbc\u3080 writer << U \"Hello, Siv3D!\" ; // \u5024\u3084\u6587\u5b57\u3092\u30001 \u884c\u66f8\u304d\u8fbc\u3080 writer << 123 << U ',' << 456 << Point ( 10 , 20 ); // 1 \u6587\u5b57\u305a\u3064\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( U 'A' ); writer . write ( U 'B' ); // 1 \u6587\u5b57\u66f8\u304d\u8fbc\u3093\u3067\u6539\u884c\u3082\u66f8\u304d\u8fbc\u3080 writer . writeln ( U 'C' ); // \u5024\u3092\u66f8\u304d\u8fbc\u3080\uff08\u6539\u884c\u7121\u3057\uff09 writer . write ( 777 ); writer . write ( U ',' ); writer . write ( 888 ); // \u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30ba writer . close (); while ( System :: Update ()) { } }","title":"\u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1"},{"location":"tutorial/text-file/#184","text":"\u30c6\u30ad\u30b9\u30c8\u3092\u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u304b\u3089\u8ffd\u52a0\u3067\u66f8\u304d\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f\u3001 TextWriter \u3067\u306e\u30aa\u30fc\u30d7\u30f3\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u30e2\u30fc\u30c9\u3068\u3057\u3066 OpenMode :: Append (\u8ffd\u52a0\u30e2\u30fc\u30c9) \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u540c\u540d\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u6642\u306f\u3001\u901a\u5e38\u3069\u304a\u308a\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u8ffd\u52a0\u30e2\u30fc\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3 TextWriter writer ( U \"tutorial.txt\" , OpenMode :: Append ); // \u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557 if ( ! writer ) { throw Error ( U \"Failed to open `tutorial.txt`\" ); } // \u6587\u7ae0\u3092\u8ffd\u52a0\u3059\u308b writer . write ( U \" \\n ------\" ); while ( System :: Update ()) { } } 18.3 \u3067\u4f5c\u3063\u305f tutorial.txt \u306b\u8ffd\u52a0\u3057\u305f\u7d50\u679c Hello , Siv3D ! 123 , 456 ( 10 , 20 ) ABC 777 , 888 ------","title":"18.4 \u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\u3067\u66f8\u304d\u3053\u3080"},{"location":"tutorial/text-file/#185","text":"","title":"18.5 \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"tutorial/text-file/#_2","text":"\u30d5\u30a1\u30a4\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u30fb\u30af\u30ed\u30fc\u30ba\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u5236\u5fa1\u306f\u3001 { } \u3067\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u306e\u7d42\u4e86\u6642\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u3082\u826f\u3044\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { { TextWriter writer ( U \"tutorial.txt\" ); // 1 \u884c\u66f8\u304d\u8fbc\u3080 writer . write ( U \"Hello, Siv3D!\" ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } String text ; { // TextWriter \u3067\u30aa\u30fc\u30d7\u30f3\u3057\u305f\u307e\u307e\u3060\u3068\u3001\u3053\u3053\u3067\u30aa\u30fc\u30d7\u30f3\u306b\u5931\u6557\u3059\u308b TextReader reader ( U \"tutorial.txt\" ); // 1 \u884c\u8aad\u307f\u8fbc\u3080 reader . readLine ( text ); // \u3053\u3053\u3067\u81ea\u52d5\u7684\u306b\u30af\u30ed\u30fc\u30ba } Print << text ; while ( System :: Update ()) { } }","title":"\u30b9\u30b3\u30fc\u30d7\u306b\u3088\u308b\u5236\u5fa1"},{"location":"tutorial/texture/","text":"5. Drawing images \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b \u00b6 \u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002 Texture::drawAt() \u00b6 .drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } } Texture::draw() \u00b6 .draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } } Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7 \u00b6 OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::scaled() \u00b6 Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } } Texture::resized() \u00b6 Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } } 5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002 Texture::rotated() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } } Texture::roatedAt() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } } 5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } } 5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } } 5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002 \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Triangle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } } 5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } } 5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } } 5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af \u00b6 if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165 \u00b6 Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"5. Drawing images"},{"location":"tutorial/texture/#5-drawing-images","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"5. Drawing images"},{"location":"tutorial/texture/#51","text":"\u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002","title":"5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#texturedrawat","text":".drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } }","title":"Texture::drawAt()"},{"location":"tutorial/texture/#texturedraw","text":".draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } }","title":"Texture::draw()"},{"location":"tutorial/texture/#siv3d","text":"OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002","title":"Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7"},{"location":"tutorial/texture/#52","text":"","title":"5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#texturescaled","text":"Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } }","title":"Texture::scaled()"},{"location":"tutorial/texture/#textureresized","text":"Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } }","title":"Texture::resized()"},{"location":"tutorial/texture/#53","text":"Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002","title":"5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#texturerotated","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } }","title":"Texture::rotated()"},{"location":"tutorial/texture/#textureroatedat","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } }","title":"Texture::roatedAt()"},{"location":"tutorial/texture/#54","text":"Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } }","title":"5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#55","text":"\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } }","title":"5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#56","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002","title":"5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#_1","text":"OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"tutorial/texture/#57","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Triangle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } }","title":"5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210"},{"location":"tutorial/texture/#58","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#59","text":"Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } }","title":"5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f"},{"location":"tutorial/texture/#510","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } }","title":"5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b"},{"location":"tutorial/texture/#511","text":"","title":"5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"tutorial/texture/#_2","text":"if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af"},{"location":"tutorial/texture/#_3","text":"\u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } }","title":"\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"tutorial/texture/#_4","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba"},{"location":"tutorial/texture/#_5","text":"Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165"},{"location":"tutorial/window/","text":"10. Scene and window \u00b6 Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: ClientHeight () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } } 10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } } 10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } } 10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10. Scene and window"},{"location":"tutorial/window/#10-scene-and-window","text":"Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"10. Scene and window"},{"location":"tutorial/window/#101","text":"\u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: ClientHeight () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#102","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#103","text":"\u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#104","text":"Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } }","title":"10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#105","text":"Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"tutorial/window/#106","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } }","title":"10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#107","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } }","title":"10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b"},{"location":"tutorial/window/#108","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b"}]}