{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siv3D: C++ Library for Creative Coding \u00b6 # include <Siv3D.hpp> void Main () { // Set background color to sky blue Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // Create a new font const Font font ( 60 ); // Create a new texture that contains a cat emoji const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // Coordinates of the cat Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // Put a message in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // Display the texture with animated size cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // Draw a translucent red circle that follows the mouse cursor Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // When [A] key is down if ( KeyA . down ()) { // Print `Hello!` Print << U \"Hello!\" ; } // When [Move the cat] button is pushed if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // Move the cat's coordinates to a random position in the screen catPos = RandomVec2 ( Scene :: Rect ()); } } } Getting started \u00b6 Requirements \u00b6 Windows \u00b6 Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Install Desktop development with C++ from the Visual Studio Installer macOS \u00b6 macOS High Sierra v10.13 or newer Xcode 10.1 or newer Linux \u00b6 Linux users must build OpenSiv3D from source. See Linux/README for further information. Installing OpenSiv3D SDK \u00b6 Windows \u00b6 Download OpenSiv3D Installer for Windows Desktop and run the installer. Note Use the Control Panel to uninstall OpenSiv3D SDK. macOS \u00b6 Download OpenSiv3D Project Templates for macOS and extract its contents. Building an OpenSiv3D Application \u00b6 Windows \u00b6 Lanuch Visual Studio 2019 and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project. Click OK to create the project. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging . macOS \u00b6 Open the project file (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) in Xcode. Click Run button \u25b6\ufe0f to build and run the application.","title":"Getting started with Siv3D"},{"location":"#siv3d-c-library-for-creative-coding","text":"# include <Siv3D.hpp> void Main () { // Set background color to sky blue Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // Create a new font const Font font ( 60 ); // Create a new texture that contains a cat emoji const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // Coordinates of the cat Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // Put a message in the middle of the screen font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // Display the texture with animated size cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // Draw a translucent red circle that follows the mouse cursor Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // When [A] key is down if ( KeyA . down ()) { // Print `Hello!` Print << U \"Hello!\" ; } // When [Move the cat] button is pushed if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // Move the cat's coordinates to a random position in the screen catPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Siv3D: C++ Library for Creative Coding"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#windows","text":"Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Install Desktop development with C++ from the Visual Studio Installer","title":"Windows"},{"location":"#macos","text":"macOS High Sierra v10.13 or newer Xcode 10.1 or newer","title":"macOS"},{"location":"#linux","text":"Linux users must build OpenSiv3D from source. See Linux/README for further information.","title":"Linux"},{"location":"#installing-opensiv3d-sdk","text":"","title":"Installing OpenSiv3D SDK"},{"location":"#windows_1","text":"Download OpenSiv3D Installer for Windows Desktop and run the installer. Note Use the Control Panel to uninstall OpenSiv3D SDK.","title":"Windows"},{"location":"#macos_1","text":"Download OpenSiv3D Project Templates for macOS and extract its contents.","title":"macOS"},{"location":"#building-an-opensiv3d-application","text":"","title":"Building an OpenSiv3D Application"},{"location":"#windows_2","text":"Lanuch Visual Studio 2019 and open a New Project Dialog by clicking Create a new project . Select OpenSiv3D(X.X.X) project and then click Next . Type a name for the project. Click OK to create the project. On the Build menu, click Build Solution . On the Debug menu, click Start Debugging .","title":"Windows"},{"location":"#macos_2","text":"Open the project file (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) in Xcode. Click Run button \u25b6\ufe0f to build and run the application.","title":"macOS"},{"location":"community/community/","text":"Community \u00b6 Slack \u00b6 Join Siv3D Slack (invitation link) \u3000 Twitter \u00b6 Siv3D on Twitter @Siv3D @Reputeless BBS \u00b6 Siv3D BBS","title":"Community"},{"location":"community/community/#community","text":"","title":"Community"},{"location":"community/community/#slack","text":"Join Siv3D Slack (invitation link)","title":"Slack"},{"location":"community/community/#twitter","text":"Siv3D on Twitter @Siv3D @Reputeless","title":"Twitter"},{"location":"community/community/#bbs","text":"Siv3D BBS","title":"BBS"},{"location":"ja-jp/","text":"Warning \u3053\u306e Web \u30b5\u30a4\u30c8\u3067\u306f 2019 \u5e74 7 \u6708\u306b\u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a\u306e OpenSiv3D v0.4.0 \u306e\u60c5\u5831\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002 Siv3D: \u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u3092\u6c34\u8272\u306b\u3059\u308b Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u7528\u610f const Font font ( 60 ); // \u732b\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u732b\u306e\u5ea7\u6a19 Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u5927\u304d\u3055\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u732b\u3092\u8868\u793a\u3059\u308b cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 if ( KeyA . down ()) { // Hello \u3068\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3059\u308b Print << U \"Hello!\" ; } // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // \u732b\u306e\u5ea7\u6a19\u3092\u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b catPos = RandomVec2 ( Scene :: Rect ()); } } } Siv3D \u3092\u306f\u3058\u3081\u3088\u3046 \u00b6 \u5fc5\u8981\u306a\u74b0\u5883 \u00b6 Windows \u00b6 Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Visual Studio Installer \u3067 C++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044 macOS \u00b6 macOS High Sierra v10.13 \u4ee5\u964d Xcode 10.1 \u4ee5\u964d Linux \u00b6 OpenSiv3D Linux \u7248\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30d3\u30eb\u30c9\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f Linux/README \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 OpenSiv3D SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 Windows \u00b6 OpenSiv3D Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 Note OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 macOS \u00b6 OpenSiv3D Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059\u3002 OpenSiv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9 \u00b6 Windows \u00b6 Visual Studio 2019 \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3001 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u9032\u307f\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e00\u89a7\u306e\u4e2d\u304b\u3089 OpenSiv3D(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3) \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5165\u529b\u3057\u305f\u8a2d\u5b9a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 macOS \u00b6 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) \u3092 Xcode \u3067\u958b\u304d\u307e\u3059\u3002 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#siv3d-c","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u3092\u6c34\u8272\u306b\u3059\u308b Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u7528\u610f const Font font ( 60 ); // \u732b\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7528\u610f const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); // \u732b\u306e\u5ea7\u6a19 Vec2 catPos ( 640 , 450 ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u63cf\u304f font ( U \"Hello, Siv3D!\ud83d\udc23\" ). drawAt ( Scene :: Center (), Palette :: Black ); // \u5927\u304d\u3055\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3055\u305b\u3066\u732b\u3092\u8868\u793a\u3059\u308b cat . resized ( 100 + Periodic :: Sine0_1 ( 1 s ) * 20 ). drawAt ( catPos ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u534a\u900f\u660e\u306e\u8d64\u3044\u5186\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ). draw ( ColorF ( 1 , 0 , 0 , 0.5 )); // [A] \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089 if ( KeyA . down ()) { // Hello \u3068\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u3059\u308b Print << U \"Hello!\" ; } // \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Move the cat\" , Vec2 ( 600 , 20 ))) { // \u732b\u306e\u5ea7\u6a19\u3092\u753b\u9762\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3059\u308b catPos = RandomVec2 ( Scene :: Rect ()); } } }","title":"Siv3D: \u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u306e\u305f\u3081\u306e C++ \u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"ja-jp/#siv3d","text":"","title":"Siv3D \u3092\u306f\u3058\u3081\u3088\u3046"},{"location":"ja-jp/#_1","text":"","title":"\u5fc5\u8981\u306a\u74b0\u5883"},{"location":"ja-jp/#windows","text":"Windows 7 SP1 / 8.1 / 10 (64-bit) Visual Studio 2019 version 16.1 Visual Studio Installer \u3067 C++ \u306b\u3088\u308b\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u958b\u767a \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044","title":"Windows"},{"location":"ja-jp/#macos","text":"macOS High Sierra v10.13 \u4ee5\u964d Xcode 10.1 \u4ee5\u964d","title":"macOS"},{"location":"ja-jp/#linux","text":"OpenSiv3D Linux \u7248\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30d3\u30eb\u30c9\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f Linux/README \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Linux"},{"location":"ja-jp/#opensiv3d-sdk","text":"","title":"OpenSiv3D SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ja-jp/#windows_1","text":"OpenSiv3D Installer for Windows Desktop \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 Note OpenSiv3D SDK \u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30cd\u30eb\u304b\u3089\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"Windows"},{"location":"ja-jp/#macos_1","text":"OpenSiv3D Project Templates for macOS \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u307e\u3059\u3002","title":"macOS"},{"location":"ja-jp/#opensiv3d","text":"","title":"OpenSiv3D \u30a2\u30d7\u30ea\u306e\u30d3\u30eb\u30c9"},{"location":"ja-jp/#windows_2","text":"Visual Studio 2019 \u306e\u30b9\u30bf\u30fc\u30c8\u753b\u9762\u3067 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3001 \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u9032\u307f\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e00\u89a7\u306e\u4e2d\u304b\u3089 OpenSiv3D(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3) \u3092\u9078\u629e\u3057\u3001 \u6b21\u3078 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5165\u529b\u3057\u305f\u8a2d\u5b9a\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001 \u4f5c\u6210 \u3092\u62bc\u3057\u307e\u3059\u3002 \u30d3\u30eb\u30c9 \u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0 \u30e1\u30cb\u30e5\u30fc\u306e \u30c7\u30d0\u30c3\u30b0\u306e\u958b\u59cb \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"Windows"},{"location":"ja-jp/#macos_2","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb (siv3d_vX.X.X_macOS/examples/empty/empty.xcodeproj) \u3092 Xcode \u3067\u958b\u304d\u307e\u3059\u3002 \u5b9f\u884c\u30dc\u30bf\u30f3 \u25b6\ufe0f \u3092\u62bc\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002","title":"macOS"},{"location":"ja-jp/community/community/","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u00b6 Siv3D \u30e6\u30fc\u30b6 Slack \u00b6 Siv3D Slack \u306b\u53c2\u52a0\u3059\u308b \u3000 Twitter \u00b6 Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 @Siv3D @Reputeless BBS \u00b6 Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#_1","text":"","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"ja-jp/community/community/#siv3d-slack","text":"Siv3D Slack \u306b\u53c2\u52a0\u3059\u308b","title":"Siv3D \u30e6\u30fc\u30b6 Slack"},{"location":"ja-jp/community/community/#twitter","text":"Siv3D \u306b\u95a2\u3059\u308b\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22 @Siv3D @Reputeless","title":"Twitter"},{"location":"ja-jp/community/community/#bbs","text":"Siv3D \u30e6\u30fc\u30b6\u52a9\u3051\u5408\u3044\u6240","title":"BBS"},{"location":"ja-jp/reference/2d-geometry/","text":"2D \u8a08\u7b97\u5e7e\u4f55 \u00b6 \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } } \u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u56f3\u5f62\u306e\u5f15\u304d\u7b97 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u70b9\u7fa4\u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } } Polygon \u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } } Polygon \u306e\u62e1\u5f35 \u00b6 # include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } } Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"2D \u8a08\u7b97\u5e7e\u4f55"},{"location":"ja-jp/reference/2d-geometry/#2d","text":"","title":"2D \u8a08\u7b97\u5e7e\u4f55"},{"location":"ja-jp/reference/2d-geometry/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } }","title":"\u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2"},{"location":"ja-jp/reference/2d-geometry/#_2","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df"},{"location":"ja-jp/reference/2d-geometry/#_3","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u5f15\u304d\u7b97"},{"location":"ja-jp/reference/2d-geometry/#_4","text":"# include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } }","title":"\u70b9\u7fa4\u306e\u51f8\u5305"},{"location":"ja-jp/reference/2d-geometry/#polygon","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } }","title":"Polygon \u306e\u51f8\u5305"},{"location":"ja-jp/reference/2d-geometry/#polygon_1","text":"# include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } }","title":"Polygon \u306e\u62e1\u5f35"},{"location":"ja-jp/reference/2d-geometry/#polygon_2","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b"},{"location":"ja-jp/reference/2d-shadow/","text":"2D \u56f3\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u306b\u5f71\u3092\u713c\u304d\u3053\u3080 \u00b6 \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"2D \u56f3\u5f62\u306e\u5f71"},{"location":"ja-jp/reference/2d-shadow/#2d","text":"Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"2D \u56f3\u5f62\u306e\u5f71"},{"location":"ja-jp/reference/2d-shadow/#_1","text":"\u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"\u30b7\u30fc\u30f3\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u306b\u5f71\u3092\u713c\u304d\u3053\u3080"},{"location":"ja-jp/reference/fullscreen/","text":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3 \u00b6 \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b \u00b6 Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"ja-jp/reference/fullscreen/#_1","text":"","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3"},{"location":"ja-jp/reference/fullscreen/#_2","text":"Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u9078\u629e\u3059\u308b"},{"location":"ja-jp/reference/json/","text":"JSON \u30d5\u30a1\u30a4\u30eb \u00b6 JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080 \u00b6 # include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"JSON \u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/reference/json/#json","text":"","title":"JSON \u30d5\u30a1\u30a4\u30eb"},{"location":"ja-jp/reference/json/#json_1","text":"# include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080"},{"location":"ja-jp/reference/math-parser/","text":"\u6570\u5f0f\u51e6\u7406 \u00b6 \u6570\u5f0f\u306e\u8a08\u7b97 \u00b6 Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"\u6570\u5f0f\u51e6\u7406"},{"location":"ja-jp/reference/math-parser/#_1","text":"","title":"\u6570\u5f0f\u51e6\u7406"},{"location":"ja-jp/reference/math-parser/#_2","text":"Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"\u6570\u5f0f\u306e\u8a08\u7b97"},{"location":"ja-jp/reference/navmesh/","text":"\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 \u00b6 2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh \u00b6 # include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5"},{"location":"ja-jp/reference/navmesh/#_1","text":"","title":"\u30ca\u30d3\u30e1\u30c3\u30b7\u30e5"},{"location":"ja-jp/reference/navmesh/#2d-navmesh","text":"# include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh"},{"location":"ja-jp/reference/nlp/","text":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406 \u00b6 \u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"},{"location":"ja-jp/reference/nlp/#_1","text":"","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"},{"location":"ja-jp/reference/nlp/#_2","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"\u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790"},{"location":"ja-jp/sample/app/","text":"\u30a2\u30d7\u30ea \u00b6 \u30b9\u30b1\u30c3\u30c1 \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } \u30d4\u30a2\u30ce \u00b6 # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } } \u4e07\u83ef\u93e1\u30b9\u30b1\u30c3\u30c1 \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } } Image to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } } Sketch to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } \u97f3\u697d\u30d7\u30ec\u30a4\u30e4\u30fc \u00b6 # include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } } Text to Polygon \u00b6 # include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } } \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408 \u00b6 # include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } } \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf \u00b6 # include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } } QR \u30b3\u30fc\u30c9\u4f5c\u6210 \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } } \u30c9\u30c3\u30c8\u304a\u7d75\u304b\u304d \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } } \u6642\u8a08 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } } JPEG Glitch \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } } \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790 \u00b6 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( 0 ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } Sketch to P2Body \u00b6 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } }","title":"\u30a2\u30d7\u30ea"},{"location":"ja-jp/sample/app/#_1","text":"","title":"\u30a2\u30d7\u30ea"},{"location":"ja-jp/sample/app/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"\u30b9\u30b1\u30c3\u30c1"},{"location":"ja-jp/sample/app/#_3","text":"# include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"\u30d4\u30a2\u30ce"},{"location":"ja-jp/sample/app/#_4","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } }","title":"\u4e07\u83ef\u93e1\u30b9\u30b1\u30c3\u30c1"},{"location":"ja-jp/sample/app/#image-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } }","title":"Image to Polygon"},{"location":"ja-jp/sample/app/#sketch-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch to Polygon"},{"location":"ja-jp/sample/app/#_5","text":"# include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } }","title":"\u97f3\u697d\u30d7\u30ec\u30a4\u30e4\u30fc"},{"location":"ja-jp/sample/app/#text-to-polygon","text":"# include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } }","title":"Text to Polygon"},{"location":"ja-jp/sample/app/#_6","text":"# include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } }","title":"\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408"},{"location":"ja-jp/sample/app/#_7","text":"# include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } }","title":"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf"},{"location":"ja-jp/sample/app/#qr","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } }","title":"QR \u30b3\u30fc\u30c9\u4f5c\u6210"},{"location":"ja-jp/sample/app/#_8","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } }","title":"\u30c9\u30c3\u30c8\u304a\u7d75\u304b\u304d"},{"location":"ja-jp/sample/app/#_9","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } }","title":"\u6642\u8a08"},{"location":"ja-jp/sample/app/#jpeg-glitch","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } }","title":"JPEG Glitch"},{"location":"ja-jp/sample/app/#_10","text":"# include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( 0 ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"\u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790"},{"location":"ja-jp/sample/app/#sketch-to-p2body","text":"# include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } }","title":"Sketch to P2Body"},{"location":"ja-jp/sample/game-template/","text":"\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u30b7\u30fc\u30f3\u9077\u79fb \u00b6 # include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"\u306f\u3058\u3081\u308b\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"\u304a\u308f\u308b\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } } \u30bf\u30a4\u30d4\u30f3\u30b0\u30b2\u30fc\u30e0\u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ja-jp/sample/game-template/#_1","text":"","title":"\u30b2\u30fc\u30e0\u958b\u767a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ja-jp/sample/game-template/#_2","text":"# include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"\u306f\u3058\u3081\u308b\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"\u304a\u308f\u308b\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } }","title":"\u30b7\u30fc\u30f3\u9077\u79fb"},{"location":"ja-jp/sample/game-template/#_3","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"\u30bf\u30a4\u30d4\u30f3\u30b0\u30b2\u30fc\u30e0\u306e\u57fa\u672c"},{"location":"ja-jp/sample/game/","text":"\u30b2\u30fc\u30e0 \u00b6 \u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057 \u00b6 # include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } } \u30d4\u30f3\u30dc\u30fc\u30eb \u00b6 # include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } } \u7d75\u6587\u5b57\u30bf\u30ef\u30fc \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } \u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0 \u00b6 # include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } }","title":"\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#_1","text":"","title":"\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/game/#_2","text":"# include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } }","title":"\u30d6\u30ed\u30c3\u30af\u304f\u305a\u3057"},{"location":"ja-jp/sample/game/#_3","text":"# include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } }","title":"\u30d4\u30f3\u30dc\u30fc\u30eb"},{"location":"ja-jp/sample/game/#_4","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"\u7d75\u6587\u5b57\u30bf\u30ef\u30fc"},{"location":"ja-jp/sample/game/#_5","text":"# include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } }","title":"\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0"},{"location":"ja-jp/sample/visual/","text":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe \u00b6 \u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } }","title":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe"},{"location":"ja-jp/sample/visual/#_1","text":"","title":"\u30d3\u30b8\u30e5\u30a2\u30eb\u8868\u73fe"},{"location":"ja-jp/sample/visual/#_2","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } }","title":"\u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b"},{"location":"ja-jp/store/store/","text":"\u30b7\u30e7\u30c3\u30d7 \u00b6 LINE \u30b9\u30bf\u30f3\u30d7 \u00b6 Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"Siv3D \u30b9\u30c8\u30a2"},{"location":"ja-jp/store/store/#_1","text":"","title":"\u30b7\u30e7\u30c3\u30d7"},{"location":"ja-jp/store/store/#line","text":"Siv3D \u304f\u3093 LINE \u30b9\u30bf\u30f3\u30d7","title":"LINE \u30b9\u30bf\u30f3\u30d7"},{"location":"ja-jp/tutorial/2d-intersection/","text":"4. \u3042\u305f\u308a\u5224\u5b9a \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc \u00b6 \u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } } 4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af \u00b6 \u30af\u30ea\u30c3\u30af \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } } \u62bc\u3055\u308c\u3066\u3044\u308b \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } } 4.3 \u56f3\u5f62\u306e\u4ea4\u5dee \u00b6 2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080 \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } 4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9 \u00b6 \u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4. \u3042\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/tutorial/2d-intersection/#4","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"4. \u3042\u305f\u308a\u5224\u5b9a"},{"location":"ja-jp/tutorial/2d-intersection/#41","text":"\u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc"},{"location":"ja-jp/tutorial/2d-intersection/#42","text":"","title":"4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af"},{"location":"ja-jp/tutorial/2d-intersection/#_1","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } }","title":"\u30af\u30ea\u30c3\u30af"},{"location":"ja-jp/tutorial/2d-intersection/#_2","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"\u62bc\u3055\u308c\u3066\u3044\u308b"},{"location":"ja-jp/tutorial/2d-intersection/#43","text":"2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002","title":"4.3 \u56f3\u5f62\u306e\u4ea4\u5dee"},{"location":"ja-jp/tutorial/2d-intersection/#44","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } }","title":"4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080"},{"location":"ja-jp/tutorial/2d-intersection/#45","text":"\u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002","title":"4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9"},{"location":"ja-jp/tutorial/2d-intersection/#46","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb"},{"location":"ja-jp/tutorial/2d-renderstates/","text":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8 \u00b6 15.1 \u00b6","title":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8"},{"location":"ja-jp/tutorial/2d-renderstates/#15-2d","text":"","title":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8"},{"location":"ja-jp/tutorial/2d-renderstates/#151","text":"","title":"15.1"},{"location":"ja-jp/tutorial/animation/","text":"3. \u52d5\u304d\u3092\u4f5c\u308b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002 3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Scene::Time() \u00b6 Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Scene::Center() \u00b6 \u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } } Scene::DeltaTime() \u00b6 Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } } step \u00b6 Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++n) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } } OffsetCircular \u00b6 \u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } } 3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u00b6 \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8 \u00b6 Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002 MouseL.down() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } } Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b \u00b6 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } } 3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Periodic::Square0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } } Periodic::Tringle0_1() \u00b6 0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Tringle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sine0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sawtooth0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Jump0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } } 3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 \u00b6 Transition \u00b6 \u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 MouseL.pressed() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } 3.5 \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 Min, Max \u00b6 Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 \u7dda\u5f62\u88dc\u9593 \u00b6 \u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"3. \u52d5\u304d\u3092\u4f5c\u308b"},{"location":"ja-jp/tutorial/animation/#3","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002","title":"3. \u52d5\u304d\u3092\u4f5c\u308b"},{"location":"ja-jp/tutorial/animation/#31","text":"","title":"3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/animation/#scenetime","text":"Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002","title":"Scene::Time()"},{"location":"ja-jp/tutorial/animation/#scenecenter","text":"\u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"Scene::Center()"},{"location":"ja-jp/tutorial/animation/#scenedeltatime","text":"Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } }","title":"Scene::DeltaTime()"},{"location":"ja-jp/tutorial/animation/#step","text":"Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++n) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } }","title":"step"},{"location":"ja-jp/tutorial/animation/#offsetcircular","text":"\u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } }","title":"OffsetCircular"},{"location":"ja-jp/tutorial/animation/#32","text":"\u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002","title":"3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1"},{"location":"ja-jp/tutorial/animation/#stopwatch","text":"Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002","title":"Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8"},{"location":"ja-jp/tutorial/animation/#mouseldown","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"MouseL.down()"},{"location":"ja-jp/tutorial/animation/#stopwatch_1","text":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } }","title":"Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b"},{"location":"ja-jp/tutorial/animation/#33","text":"Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/animation/#periodicsquare0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } }","title":"Periodic::Square0_1()"},{"location":"ja-jp/tutorial/animation/#periodictringle0_1","text":"0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Tringle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Tringle0_1()"},{"location":"ja-jp/tutorial/animation/#periodicsine0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sine0_1()"},{"location":"ja-jp/tutorial/animation/#periodicsawtooth0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sawtooth0_1()"},{"location":"ja-jp/tutorial/animation/#periodicjump0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } }","title":"Periodic::Jump0_1()"},{"location":"ja-jp/tutorial/animation/#34","text":"","title":"3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/animation/#transition","text":"\u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Transition"},{"location":"ja-jp/tutorial/animation/#mouselpressed","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } }","title":"MouseL.pressed()"},{"location":"ja-jp/tutorial/animation/#35","text":"","title":"3.5 \u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"ja-jp/tutorial/animation/#min-max","text":"Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Min, Max"},{"location":"ja-jp/tutorial/animation/#_1","text":"\u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } }","title":"\u7dda\u5f62\u88dc\u9593"},{"location":"ja-jp/tutorial/animation/#_2","text":"0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"ja-jp/tutorial/audio/","text":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f \u00b6 13.1 \u00b6","title":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"ja-jp/tutorial/audio/#13","text":"","title":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"ja-jp/tutorial/audio/#131","text":"","title":"13.1"},{"location":"ja-jp/tutorial/basic/","text":"1. Siv3D \u306e\u57fa\u672c \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0 \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 \u00b6 \u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002 1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002 1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 1.5 Hello, Siv3D! \u00b6 \u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 1.6 \u3082\u3063\u3068 Print \u00b6 Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } } 1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059 \u00b6 Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002 1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/basic/#1-siv3d","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"1. Siv3D \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/basic/#11","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0"},{"location":"ja-jp/tutorial/basic/#12","text":"\u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002","title":"1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8"},{"location":"ja-jp/tutorial/basic/#13","text":"\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002","title":"1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"ja-jp/tutorial/basic/#14","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002","title":"1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/basic/#15-hello-siv3d","text":"\u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"1.5 Hello, Siv3D!"},{"location":"ja-jp/tutorial/basic/#16-print","text":"Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } }","title":"1.6 \u3082\u3063\u3068 Print"},{"location":"ja-jp/tutorial/basic/#17-print","text":"Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059"},{"location":"ja-jp/tutorial/basic/#18","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb"},{"location":"ja-jp/tutorial/data-structures/","text":"6. \u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002 6.1 \u52d5\u7684\u914d\u5217 \u00b6 Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8981\u7d20\u306e\u8ffd\u52a0 \u00b6 Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 \u00b6 [] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } } \u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b \u00b6 \u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } } \u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } } \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664 \u00b6 .erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } } 6.2 \u4e8c\u6b21\u5143\u914d\u5217 \u00b6 \u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Grid \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } } 6.3 \u6587\u5b57\u5217 \u00b6 Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 String \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db \u00b6 String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db \u00b6 std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } } 6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb \u00b6 \u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 HashTable \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } } 6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6. \u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/tutorial/data-structures/#6","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"6. \u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/tutorial/data-structures/#61","text":"Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.1 \u52d5\u7684\u914d\u5217"},{"location":"ja-jp/tutorial/data-structures/#_1","text":"Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u8ffd\u52a0"},{"location":"ja-jp/tutorial/data-structures/#_2","text":"[] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9"},{"location":"ja-jp/tutorial/data-structures/#_3","text":"\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_4","text":"\u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } }","title":"\u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/tutorial/data-structures/#_5","text":"\u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_6","text":"\u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_7","text":".erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } }","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664"},{"location":"ja-jp/tutorial/data-structures/#_8","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"ja-jp/tutorial/data-structures/#62","text":"\u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.2 \u4e8c\u6b21\u5143\u914d\u5217"},{"location":"ja-jp/tutorial/data-structures/#grid","text":"# include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } }","title":"Grid \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/data-structures/#_9","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"ja-jp/tutorial/data-structures/#63","text":"Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"6.3 \u6587\u5b57\u5217"},{"location":"ja-jp/tutorial/data-structures/#string","text":"# include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } }","title":"String \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/data-structures/#_10","text":"String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/data-structures/#_11","text":"std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/data-structures/#64","text":"\u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002","title":"6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"ja-jp/tutorial/data-structures/#hashtable","text":"# include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } }","title":"HashTable \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/data-structures/#65","text":"Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"ja-jp/tutorial/font/","text":"8. \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 8.1 Font \u00b6 \u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } } 8.2 \u6539\u884c\u3059\u308b \u00b6 \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } } 8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } } 8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e \u00b6 Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } } 8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046 \u00b6 PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } } 8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002 8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b \u00b6 Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } } 8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } } 8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b \u00b6 \u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } } 8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } } 8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b \u00b6 \u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } } 8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b \u00b6 font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } } 8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b \u00b6 Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } } 8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } } 8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b \u00b6 String :: substr () # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } } 8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4 \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af \u00b6 if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30d5\u30a9\u30f3\u30c8 \u00b6 \u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"8. \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#8","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"8. \u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#81-font","text":"\u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } }","title":"8.1 Font"},{"location":"ja-jp/tutorial/font/#82","text":"\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } }","title":"8.2 \u6539\u884c\u3059\u308b"},{"location":"ja-jp/tutorial/font/#83","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } }","title":"8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba"},{"location":"ja-jp/tutorial/font/#84","text":"Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } }","title":"8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"ja-jp/tutorial/font/#85","text":"PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } }","title":"8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#86-pc","text":"PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002","title":"8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"ja-jp/tutorial/font/#87","text":"Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } }","title":"8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b"},{"location":"ja-jp/tutorial/font/#88","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } }","title":"8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/font/#89","text":"\u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } }","title":"8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b"},{"location":"ja-jp/tutorial/font/#810","text":"\u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } }","title":"8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"ja-jp/tutorial/font/#811","text":"\u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } }","title":"8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/tutorial/font/#812","text":"font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } }","title":"8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b"},{"location":"ja-jp/tutorial/font/#813","text":"Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } }","title":"8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/font/#814","text":"Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } }","title":"8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/font/#815-1","text":"String :: substr () # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } }","title":"8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b"},{"location":"ja-jp/tutorial/font/#816","text":"","title":"8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/font/#_1","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4"},{"location":"ja-jp/tutorial/font/#_2","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba"},{"location":"ja-jp/tutorial/font/#_3","text":"if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af"},{"location":"ja-jp/tutorial/font/#_4","text":"\u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8"},{"location":"ja-jp/tutorial/formatting/","text":"7. \u6587\u5b57\u5217\u3068\u6570\u5024\u306e\u5909\u63db \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } } 7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002 \u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } } \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a \u00b6 { 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } } \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570 \u00b6 \u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } } \u30d1\u30c7\u30a3\u30f3\u30b0 \u00b6 N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } } \u57fa\u6570 \u00b6 { : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } } \u7b26\u53f7 \u00b6 { : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db \u00b6 Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Parse \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } } ParseError \u306e\u6355\u6349 \u00b6 \u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"7. \u6587\u5b57\u5217\u3068\u6570\u5024\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#7","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"7. \u6587\u5b57\u5217\u3068\u6570\u5024\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#71","text":"Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } }","title":"7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#72","text":"\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002","title":"7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#_1","text":"# include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } }","title":"\u57fa\u672c"},{"location":"ja-jp/tutorial/formatting/#_2","text":"{ 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } }","title":"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a"},{"location":"ja-jp/tutorial/formatting/#_3","text":"\u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } }","title":"\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570"},{"location":"ja-jp/tutorial/formatting/#_4","text":"N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } }","title":"\u30d1\u30c7\u30a3\u30f3\u30b0"},{"location":"ja-jp/tutorial/formatting/#_5","text":"{ : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } }","title":"\u57fa\u6570"},{"location":"ja-jp/tutorial/formatting/#_6","text":"{ : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7b26\u53f7"},{"location":"ja-jp/tutorial/formatting/#73","text":"Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db"},{"location":"ja-jp/tutorial/formatting/#parse","text":"# include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } }","title":"Parse \u306e\u57fa\u672c"},{"location":"ja-jp/tutorial/formatting/#parseerror","text":"\u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"ParseError \u306e\u6355\u6349"},{"location":"ja-jp/tutorial/gui/","text":"9. GUI \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 9.1 \u30dc\u30bf\u30f3 \u00b6 \u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } } 9.2 \u30b9\u30e9\u30a4\u30c0\u30fc \u00b6 \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } } 9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } } 9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 \u00b6 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } } 9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9. GUI"},{"location":"ja-jp/tutorial/gui/#9-gui","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"9. GUI"},{"location":"ja-jp/tutorial/gui/#91","text":"\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } }","title":"9.1 \u30dc\u30bf\u30f3"},{"location":"ja-jp/tutorial/gui/#92","text":"\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } }","title":"9.2 \u30b9\u30e9\u30a4\u30c0\u30fc"},{"location":"ja-jp/tutorial/gui/#93","text":"\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } }","title":"9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/tutorial/gui/#94","text":"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } }","title":"9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3"},{"location":"ja-jp/tutorial/gui/#95","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9"},{"location":"ja-jp/tutorial/keyboard/","text":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 11.1 \u00b6 11.2 \u00b6 11.3 \u00b6 11.4 \u00b6 11.5 \u00b6 11.6 \u00b6 11.7 \u00b6","title":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b"},{"location":"ja-jp/tutorial/keyboard/#11","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b"},{"location":"ja-jp/tutorial/keyboard/#111","text":"","title":"11.1"},{"location":"ja-jp/tutorial/keyboard/#112","text":"","title":"11.2"},{"location":"ja-jp/tutorial/keyboard/#113","text":"","title":"11.3"},{"location":"ja-jp/tutorial/keyboard/#114","text":"","title":"11.4"},{"location":"ja-jp/tutorial/keyboard/#115","text":"","title":"11.5"},{"location":"ja-jp/tutorial/keyboard/#116","text":"","title":"11.6"},{"location":"ja-jp/tutorial/keyboard/#117","text":"","title":"11.7"},{"location":"ja-jp/tutorial/mouse/","text":"12. \u30de\u30a6\u30b9\u5165\u529b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 12.1 \u00b6","title":"12. \u30de\u30a6\u30b9\u5165\u529b"},{"location":"ja-jp/tutorial/mouse/#12","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"12. \u30de\u30a6\u30b9\u5165\u529b"},{"location":"ja-jp/tutorial/mouse/#121","text":"","title":"12.1"},{"location":"ja-jp/tutorial/random/","text":"14. \u30e9\u30f3\u30c0\u30e0 \u00b6 14.1 \u00b6","title":"14. \u30e9\u30f3\u30c0\u30e0"},{"location":"ja-jp/tutorial/random/#14","text":"","title":"14. \u30e9\u30f3\u30c0\u30e0"},{"location":"ja-jp/tutorial/random/#141","text":"","title":"14.1"},{"location":"ja-jp/tutorial/shape/","text":"2. \u56f3\u5f62\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002 2.1 \u5186\u3092\u63cf\u304f \u00b6 \u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update () \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } } 2.2 \u8272\u3092\u4ed8\u3051\u308b \u00b6 \u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } } 2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b \u00b6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update () \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time () \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } } 2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002 2.5 \u67a0\u3092\u63cf\u304f \u00b6 \u56f3\u5f62\u306f\u3001 .draw () \u306e\u4ee3\u308f\u308a\u306b .drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 .drawFrame () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw () \u3084 .drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 2.6 \u7dda\u5206\u3092\u63cf\u304f \u00b6 \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } } 2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } } 2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } } 2.9 \u6955\u5186\u3092\u63cf\u304f \u00b6 \u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } } 2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } } 2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } } 2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f \u00b6 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } } 2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f \u00b6 LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } } 2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f \u00b6 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } } 2.16 \u77e2\u5370\u3092\u63cf\u304f \u00b6 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } } 2.17 \u6247\u5f62\u3092\u63cf\u304f \u00b6 \u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } } 2.18 \u5186\u5f27\u3092\u63cf\u304f \u00b6 \u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } } 2.19 \u56f3\u5f62\u306e\u64cd\u4f5c \u00b6 \u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } } 2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 \u00b6 Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#2","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002","title":"2. \u56f3\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#21","text":"\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e .draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update () \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"2.1 \u5186\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#22","text":"\u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 .draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } }","title":"2.2 \u8272\u3092\u4ed8\u3051\u308b"},{"location":"ja-jp/tutorial/shape/#23","text":"\u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update () \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time () \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } }","title":"2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b"},{"location":"ja-jp/tutorial/shape/#24","text":"\u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#25","text":"\u56f3\u5f62\u306f\u3001 .draw () \u306e\u4ee3\u308f\u308a\u306b .drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 .drawFrame () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e .draw () \u3084 .drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002","title":"2.5 \u67a0\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#26","text":"\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } }","title":"2.6 \u7dda\u5206\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#27","text":"\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } }","title":"2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#28","text":"Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } }","title":"2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#29","text":"\u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } }","title":"2.9 \u6955\u5186\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#210","text":"\u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } }","title":"2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#211","text":"\u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } }","title":"2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#212","text":"Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#213","text":"\u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } }","title":"2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#214-catmull-rom","text":"LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } }","title":"2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#215","text":"2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } }","title":"2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#216","text":"# include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } }","title":"2.16 \u77e2\u5370\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#217","text":"\u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } }","title":"2.17 \u6247\u5f62\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#218","text":"\u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } }","title":"2.18 \u5186\u5f27\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/shape/#219","text":"\u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } }","title":"2.19 \u56f3\u5f62\u306e\u64cd\u4f5c"},{"location":"ja-jp/tutorial/shape/#220","text":"Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002","title":"2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71"},{"location":"ja-jp/tutorial/shape/#221","text":"Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3"},{"location":"ja-jp/tutorial/texture/","text":"5. \u753b\u50cf\u3092\u63cf\u304f \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b \u00b6 \u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002 Texture::drawAt() \u00b6 .drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: Setback // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } } Texture::draw() \u00b6 .draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } } Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7 \u00b6 OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::scaled() \u00b6 Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } } Texture::resized() \u00b6 Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } } 5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002 Texture::rotated() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } } Texture::roatedAt() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } } 5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } } 5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } } 5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002 \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Tringle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } } 5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } } 5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } } 5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af \u00b6 if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165 \u00b6 Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"5. \u753b\u50cf\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/texture/#5","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"5. \u753b\u50cf\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/texture/#51","text":"\u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002","title":"5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#texturedrawat","text":".drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: Setback // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } }","title":"Texture::drawAt()"},{"location":"ja-jp/tutorial/texture/#texturedraw","text":".draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } }","title":"Texture::draw()"},{"location":"ja-jp/tutorial/texture/#siv3d","text":"OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002","title":"Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7"},{"location":"ja-jp/tutorial/texture/#52","text":"","title":"5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#texturescaled","text":"Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } }","title":"Texture::scaled()"},{"location":"ja-jp/tutorial/texture/#textureresized","text":"Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } }","title":"Texture::resized()"},{"location":"ja-jp/tutorial/texture/#53","text":"Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002","title":"5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#texturerotated","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } }","title":"Texture::rotated()"},{"location":"ja-jp/tutorial/texture/#textureroatedat","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } }","title":"Texture::roatedAt()"},{"location":"ja-jp/tutorial/texture/#54","text":"Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } }","title":"5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#55","text":"\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } }","title":"5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#56","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002","title":"5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#_1","text":"OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"ja-jp/tutorial/texture/#57","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Tringle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } }","title":"5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210"},{"location":"ja-jp/tutorial/texture/#58","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b"},{"location":"ja-jp/tutorial/texture/#59","text":"Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } }","title":"5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f"},{"location":"ja-jp/tutorial/texture/#510","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } }","title":"5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b"},{"location":"ja-jp/tutorial/texture/#511","text":"","title":"5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"ja-jp/tutorial/texture/#_2","text":"if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af"},{"location":"ja-jp/tutorial/texture/#_3","text":"\u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } }","title":"\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"ja-jp/tutorial/texture/#_4","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba"},{"location":"ja-jp/tutorial/texture/#_5","text":"Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165"},{"location":"ja-jp/tutorial/window/","text":"10. \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: Height () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } } 10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } } 10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } } 10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10. \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/window/#10","text":"Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"10. \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"ja-jp/tutorial/window/#101","text":"\u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: Height () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#102","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#103","text":"\u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#104","text":"Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } }","title":"10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#105","text":"Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"ja-jp/tutorial/window/#106","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } }","title":"10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b"},{"location":"ja-jp/tutorial/window/#107","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } }","title":"10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b"},{"location":"ja-jp/tutorial/window/#108","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b"},{"location":"reference/2d-geometry/","text":"2D geometry \u00b6 \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } } \u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u56f3\u5f62\u306e\u5f15\u304d\u7b97 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } } \u70b9\u7fa4\u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } } Polygon \u306e\u51f8\u5305 \u00b6 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } } Polygon \u306e\u62e1\u5f35 \u00b6 # include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } } Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"2D geometry"},{"location":"reference/2d-geometry/#2d-geometry","text":"","title":"2D geometry"},{"location":"reference/2d-geometry/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.96 , 0.92 )); const Font font ( 40 , Typeface :: Heavy ); const Polygon polygon = Shape2D :: Star ( 240 , Scene :: Center ()); const LineString contour ( polygon . outer ()); LineString contourClosed = contour ; contourClosed << contour . front (); // \u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081 LineString \u3092\u7d30\u304b\u304f\u3059\u308b const LineString base = contourClosed . densified ( 10.0 ); LineString lines ; double distance = Inf < double > ; while ( System :: Update ()) { contour . drawClosed ( 12 , ColorF ( 0.7 )); lines . draw ( 10 , HSV ( 10 , 1.0 , 0.95 )); if ( MouseL . pressed ()) { lines << Cursor :: Pos (); // \u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2\u3092\u8a08\u7b97 distance = Geometry2D :: HausdorffDistance ( base , lines ); } if ( MouseR . pressed ()) { lines . clear (); distance = Inf < double > ; } if ( IsFinite ( distance )) { font ( U \"{:.2f}\" _fmt ( distance )). draw ( 20 , 20 , ColorF ( 0.25 )); } } }","title":"\u30cf\u30a6\u30b9\u30c9\u30eb\u30d5\u8ddd\u96e2"},{"location":"reference/2d-geometry/#_2","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . draw ( ColorF ( 1.0 , 0.8 )); // star \u3068 rect \u306e\u91cd\u306a\u308b\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: And ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u91cd\u306a\u308b\u9818\u57df"},{"location":"reference/2d-geometry/#_3","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center ()); while ( System :: Update ()) { const Rect rect ( Arg :: center ( Cursor :: Pos ()), 300 , 100 ); star . drawFrame ( 2 , Palette :: Yellow ); rect . drawFrame ( 2 , ColorF ( 1.0 , 0.8 )); // star \u304b\u3089 rect \u3092\u5f15\u3044\u305f\u9818\u57df\u3092 Polgyon \u306e\u914d\u5217\u3067\u53d6\u5f97 for ( const auto & polygon : Geometry2D :: Subtract ( star , rect . asPolygon ())) { polygon . draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )) . drawFrame ( 4 , ColorF ( 1.0 , 0.0 , 0.0 )); } } }","title":"\u56f3\u5f62\u306e\u5f15\u304d\u7b97"},{"location":"reference/2d-geometry/#_4","text":"# include <Siv3D.hpp> void Main () { Array < Vec2 > points ; Polygon convexHull ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u70b9\u3092\u8ffd\u52a0 points << Cursor :: Pos (); // \u51f8\u5305\u3092\u8a08\u7b97 convexHull = Geometry2D :: ConvexHull ( points ); } convexHull . draw ( Palette :: Skyblue ); for ( const auto & point : points ) { Circle ( point , 5 ). draw ( Palette :: Seagreen ); } } }","title":"\u70b9\u7fa4\u306e\u51f8\u5305"},{"location":"reference/2d-geometry/#polygon","text":"# include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 200 , Scene :: Center (), 15 _deg ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = star . calculateConvexHull (); while ( System :: Update ()) { convexHull . draw ( Palette :: Gray ); star . draw ( Palette :: Yellow ); } }","title":"Polygon \u306e\u51f8\u5305"},{"location":"reference/2d-geometry/#polygon_1","text":"# include <Siv3D.hpp> void Main () { Polygon polygon ; while ( System :: Update ()) { const Rect rect ( Arg :: center = Cursor :: Pos (), 100 ); if ( MouseL . down ()) { // polygon \u306b rect \u3092\u8ffd\u52a0\u3059\u308b // \u305f\u3060\u3057\u3001polygon \u3068 rect \u304c\u3064\u306a\u304c\u3089\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u3057\u3066 false \u3092\u8fd4\u3059 polygon . append ( rect . asPolygon ()); } polygon . draw ( Palette :: Skyblue ) . drawWireframe ( 1 , Palette :: White ); rect . drawFrame ( 1 , 0 , Palette :: Skyblue ); } }","title":"Polygon \u306e\u62e1\u5f35"},{"location":"reference/2d-geometry/#polygon_2","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.6 )); const Polygon starBase1 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( - 160 , 0 ))); const Polygon starBase2 ( Shape2D :: Star ( 100 , Scene :: Center (). movedBy ( 160 , 0 ))); Polygon star1 = starBase1 ; Polygon star2 = starBase2 ; double distance = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( distance ), distance , - 30.0 , 30.0 , Vec2 ( 20 , 20 ))) { // Polygon \u3092\u592a\u3089\u305b / \u7d30\u3089\u305b\u308b star1 = starBase1 . calculateRoundBuffer ( distance ); star2 = starBase2 . calculateBuffer ( distance ); } star1 . draw ( Palette :: Darkblue ); star2 . draw ( Palette :: Darkblue ); starBase1 . drawFrame ( 2 , Palette :: Yellow ); starBase2 . drawFrame ( 2 , Palette :: Yellow ); } }","title":"Polygon \u306e\u592a\u3089\u305b\u3001\u7d30\u3089\u305b"},{"location":"reference/2d-shadow/","text":"2D shadow \u00b6 Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Baking shadows on texture \u00b6 \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"2D shadow"},{"location":"reference/2d-shadow/#2d-shadow","text":"Rect , RectF , Circle , ReoundRect \u306b\u306f .drawShadow () \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u56f3\u5f62\u306e\u5f71\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u4f7f\u3044\u65b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3092\u9078\u629e\u3057\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"2D shadow"},{"location":"reference/2d-shadow/#baking-shadows-on-texture","text":"\u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u306e\u5ea7\u6a19\u3084\u5f62\u72b6\u304c\u5909\u5316\u3057\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30f3\u3068\u540c\u3058\u5927\u304d\u3055\u306e Image \u306b\u3042\u3089\u304b\u3058\u3081\u5f71\u3092\u713c\u304d\u3053\u3080\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Polygon star = Shape2D :: Star ( 160 , Vec2 ( 200 , 200 )); const Polygon arrow = Shape2D :: Arrow ( Vec2 ( 300 , 500 ), Vec2 ( 700 , 200 ), 50 , Vec2 ( 80 , 80 )); // \u5f71\u3092\u713c\u304d\u3053\u3080\u753b\u50cf\u3092\u7528\u610f constexpr Size canvaSize ( 800 , 600 ); Image shadowImage ( canvaSize , Color ( 255 , 0 )); // \u5f71\u3092\u843d\u3068\u3059\u56f3\u5f62\u3092\u63cf\u753b star . overwrite ( shadowImage , Color ( 255 )); arrow . overwrite ( shadowImage , Color ( 255 )); // \u753b\u50cf\u306b\u30ac\u30a6\u30b7\u30a2\u30f3\u30d6\u30e9\u30fc\u3092\u66f8\u3051\u308b shadowImage . gaussianBlur ( 12 ); // \u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( shadowImage ); bool showShadow = true ; bool showShape = true ; while ( System :: Update ()) { // \u5f71\u306e\u63cf\u753b if ( showShadow ) { texture . draw ( ColorF ( 0.0 , 0.5 )); } // \u56f3\u5f62\u306e\u63cf\u753b if ( showShape ) { star . draw (); arrow . draw (); } SimpleGUI :: CheckBox ( showShadow , U \"Shadow\" , Vec2 ( 550 , 20 ), 200 ); SimpleGUI :: CheckBox ( showShape , U \"Shape\" , Vec2 ( 550 , 60 ), 200 ); } }","title":"Baking shadows on texture"},{"location":"reference/fullscreen/","text":"Fullscreen \u00b6 Selecting a native fullscreen resolution \u00b6 Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"Fullscreen"},{"location":"reference/fullscreen/#fullscreen","text":"","title":"Fullscreen"},{"location":"reference/fullscreen/#selecting-a-native-fullscreen-resolution","text":"Warning Windows \u304b\u3064\u9ad8 DPI \u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u3001\u9ad8 DPI \u5bfe\u5fdc\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u306a\u3044\u3068\u3001\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002 < Siv3D . hpp > \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u524d\u306b SIV3D_WINDOWS_HIGH_DPI \u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u9ad8 DPI \u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u304a\u3044\u3066\u3001\u9ad8 DPI \u5bfe\u5fdc\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u30c9\u30c3\u30c8\u30d0\u30a4\u30c9\u30c3\u30c8\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u898b\u305f\u76ee\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # define SIV3D_WINDOWS_HIGH_DPI // Windows \u3067\u6700\u5927\u89e3\u50cf\u5ea6\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981 # include <Siv3D.hpp> void Main () { // \u73fe\u5728\u306e\u30e2\u30cb\u30bf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u53d6\u5f97 const Array < Size > resolutions = Graphics :: GetFullscreenResolutions (); if ( ! resolutions ) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3092\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\" ); } // \u9078\u629e\u80a2\u3092\u4f5c\u6210 const Array < String > options = resolutions . map ( Format ); // \u6700\u5927\u306e\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306b\u3059\u308b size_t index = resolutions . size () - 1 ; if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u30e2\u30fc\u30c9\u3078\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } while ( System :: Update ()) { // 100px \u56db\u65b9\u306e\u6b63\u65b9\u5f62\u3067\u753b\u9762\u3092\u57cb\u3081\u308b for ( auto p : step ( Scene :: Size () / 100 + Point ( 1 , 1 ))) { if ( IsOdd ( p . x + p . y )) { Rect ( p * 100 , 100 ). draw ( Palette :: Seagreen ); } } Circle ( Cursor :: Pos (), 20 ). draw (); // \u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u3092\u5909\u66f4\u3059\u308b if ( SimpleGUI :: RadioButtons ( index , options , Vec2 ( 20 , 20 ))) { if ( ! Window :: SetFullscreen ( true , resolutions [ index ])) { throw Error ( U \"\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u89e3\u50cf\u5ea6\u306e\u5207\u308a\u66ff\u3048\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\" ); } } } }","title":"Selecting a native fullscreen resolution"},{"location":"reference/json/","text":"JSON File \u00b6 Loading dataset from a JSON file \u00b6 # include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"JSON file"},{"location":"reference/json/#json-file","text":"","title":"JSON File"},{"location":"reference/json/#loading-dataset-from-a-json-file","text":"# include <Siv3D.hpp> struct Country { String code ; String name ; String native ; String phone ; String continent ; String capital ; String currency ; Array < String > languages ; }; void CodeToFlag ( const String & code , DynamicTexture & texture ) { if ( code . size () != 2 ) { return ; } const String emoji = { char32 ( 0x1F1E6 + ( code [ 0 ] - U 'A' )), char32 ( 0x1F1E6 + ( code [ 1 ] - U 'A' )) }; texture . fill ( Emoji :: CreateImage ( emoji )); } void Main () { const JSONReader json ( U \"example/countries/countries.json\" ); if ( ! json ) { throw Error ( U \"Failed to load `countries.json`\" ); } Array < Country > countries ; for ( const auto & object : json . objectView ()) { Country country ; country . code = object . name ; country . name = object . value [ U \"name\" ]. getString (); country . native = object . value [ U \"native\" ]. getString (); country . phone = object . value [ U \"phone\" ]. getString (); country . continent = object . value [ U \"continent\" ]. getString (); country . capital = object . value [ U \"capital\" ]. getString (); country . currency = object . value [ U \"currency\" ]. getString (); for ( const auto & language : object . value [ U \"languages\" ]. arrayView ()) { country . languages << language . getString (); } countries << country ; } constexpr ColorF textColor ( 0.15 ); const Font fontBig ( 32 , Typeface :: Heavy ); const Font fontMedium ( 26 ); DynamicTexture flagTexture ; CodeToFlag ( countries . front (). code , flagTexture ); size_t index = 0 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Previous\" , Vec2 ( 40 , 420 ))) { index = ( index + ( countries . size () - 1 )) % countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } if ( SimpleGUI :: Button ( U \"Next\" , Vec2 ( 680 , 420 ))) { ++ index %= countries . size (); CodeToFlag ( countries [ index ]. code , flagTexture ); } const Country & country = countries [ index ]; Rect ( 10 , 10 , 780 , 400 ). draw (); flagTexture . draw ( 20 , 20 ); fontBig ( country . name ). draw ( 170 , 60 , textColor ); fontMedium ( U \"native: \" , country . native ). draw ( 30 , 140 , textColor ); fontMedium ( U \"phone: \" , country . phone ). draw ( 30 , 180 , textColor ); fontMedium ( U \"continent: \" , country . continent ). draw ( 30 , 220 , textColor ); fontMedium ( U \"capital: \" , country . capital ). draw ( 30 , 260 , textColor ); fontMedium ( U \"currency: \" , country . currency ). draw ( 30 , 300 , textColor ); fontMedium ( U \"languages: \" , country . languages ). draw ( 30 , 340 , textColor ); } }","title":"Loading dataset from a JSON file"},{"location":"reference/math-parser/","text":"Math parser \u00b6 \u6570\u5f0f\u306e\u8a08\u7b97 \u00b6 Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"Math parser"},{"location":"reference/math-parser/#math-parser","text":"","title":"Math parser"},{"location":"reference/math-parser/#_1","text":"Eval () \u306b\u6570\u5f0f\u3092\u6e21\u3059\u3068\u3001 double \u578b\u306e\u7cbe\u5ea6\u3067\u306e\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002 EvalOpt () \u306f\u623b\u308a\u5024\u306e\u578b\u304c Optional < double > \u3067\u3001\u6570\u5f0f\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308b\u5834\u5408\u306f none \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes ; Optional < double > result = 0.0 ; while ( System :: Update ()) { // \u6570\u5f0f\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 if ( SimpleGUI :: TextBox ( tes , Vec2 ( 20 , 20 ), 700 )) { // \u7d50\u679c\u3092\u53d6\u5f97\uff08\u30a8\u30e9\u30fc\u306e\u5834\u5408 none\uff09 result = EvalOpt ( tes . text ); } if ( result ) { font ( result . value ()). draw ( Rect ( 20 , 100 , 760 , 500 ), ColorF ( 0.25 )); } else { font ( U \"Error\" ). draw ( 20 , 100 , ColorF ( 0.25 )); } } }","title":"\u6570\u5f0f\u306e\u8a08\u7b97"},{"location":"reference/navmesh/","text":"NavMesh \u00b6 2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh \u00b6 # include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"NavMesh"},{"location":"reference/navmesh/#navmesh","text":"","title":"NavMesh"},{"location":"reference/navmesh/#2d-navmesh","text":"# include <Siv3D.hpp> // Vec2 \u304b\u3089 NavMesh \u7528\u306e Vec3 \u3078\u5909\u63db inline constexpr Vec3 ToVec3 ( const Vec2 & xy ) { return Vec3 ( xy . x , 0.0 , xy . y ); } void Main () { // \u753b\u9762\u30b5\u30a4\u30ba\u3092\u5909\u66f4 Window :: Resize ( 1280 , 720 ); // \u30de\u30c3\u30d7\u306e\u9818\u57df constexpr Rect mapArea ( 0 , 0 , 1000 , 720 ); // \u30ca\u30d3\u30e1\u30c3\u30b7\u30e5 NavMesh navMesh ; // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u73fe\u3059\u308b\u3000Polygon Polygon polygon ; // \u7d4c\u8def LineString path ; // \u73fe\u5728\u5730 Vec2 pos ( 100 , 100 ); // \u76ee\u7684\u5730 Vec2 destination ( 300 , 300 ); // \u66f4\u65b0\u306e\u5fc5\u8981\u306e\u6709\u7121 bool dirty = true ; // \u5165\u529b\u30e2\u30fc\u30c9 0: \u30de\u30c3\u30d7, 1: \u73fe\u5728\u5730, 2: \u76ee\u7684\u5730 size_t inputMode = 0 ; while ( System :: Update ()) { // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u3092\u8868\u793a mapArea . draw ( ColorF ( 0.2 , 0.4 , 0.3 )); // \u30de\u30c3\u30d7\u306e\u5f62\u72b6\u3092\u8868\u793a\uff08\u66f4\u65b0\u304c\u5fc5\u8981\u306a\u6642\u306f\u30b0\u30ec\u30fc\uff09 polygon . draw ( dirty ? Palette :: Gray : Palette :: Yellow ); polygon . drawWireframe ( 1.0 , Palette :: Gray ); // \u30de\u30c3\u30d7\u30a8\u30ea\u30a2\u4e0a\u3067\u306e\u64cd\u4f5c if ( mapArea . mouseOver ()) { if ( inputMode == 0 ) { const Circle shape ( Arg :: center ( Cursor :: Pos ()), 30 ); shape . drawFrame ( 2 , Palette :: Skyblue ); if ( MouseL . pressed ()) { // \u30de\u30c3\u30d7\u306e Polygon \u306b\u5186\u3092\u8ffd\u52a0 dirty |= polygon . append ( shape . asPolygon ()); } // \u30ab\u30fc\u30bd\u30eb\u306f\u975e\u8868\u793a Cursor :: RequestStyle ( CursorStyle :: Hidden ); } else if ( inputMode == 1 ) { if ( MouseL . pressed ()) { // \u73fe\u5728\u5730\u3092\u5909\u66f4 pos = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } else if ( inputMode == 2 ) { if ( MouseL . pressed ()) { // \u76ee\u7684\u5730\u3092\u5909\u66f4 destination = Cursor :: Pos (); path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); } // \u30ab\u30fc\u30bd\u30eb\u306f\u624b\u306e\u30de\u30fc\u30af Cursor :: RequestStyle ( CursorStyle :: Hand ); } } // \u5165\u529b\u30e2\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 SimpleGUI :: RadioButtons ( inputMode , { U \"map\" , U \"position\" , U \"destination\" }, Vec2 ( 1050 , 40 ), 180 ); if ( SimpleGUI :: Button ( U \"Build Path\" , Vec2 ( 1050 , 180 ), 180 )) { // \u8a08\u7b97\u30b3\u30b9\u30c8\u524a\u6e1b\u306e\u305f\u3081 Polygon \u3092\u5358\u7d14\u5316 polygon = polygon . simplified ( 2.0 ); // NavMesh \u3092\u66f4\u65b0 const Array < Float3 > vertices = polygon . vertices (). map ([]( auto v ) { return Float3 ( v . x , 0.0 , v . y ); }); const Array < uint16 > indices = polygon . indices (). map ([]( auto i ) { return static_cast < uint16 > ( i ); }); if ( navMesh . build ( vertices , indices )) { // \u7d4c\u8def\u3092\u8a08\u7b97 path = navMesh . query ( ToVec3 ( pos ), ToVec3 ( destination )). map ([]( auto v ) { return Vec2 ( v . x , v . z ); }); dirty = false ; } } // \u7d4c\u8def\u3092\u8868\u793a path . draw ( 10 , Palette :: Red ); // \u73fe\u5728\u5730\u3092\u8868\u793a RectF ( Arg :: center ( pos ), 30 ) . rotated ( Scene :: Time () * 60 _deg ) . draw (( inputMode == 1 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); // \u76ee\u7684\u5730\u3092\u8868\u793a Circle ( destination , 15 ) . draw (( inputMode == 2 ) ? Palette :: Red . lerp ( Color ( 255 ), Periodic :: Sine0_1 ( 1 s )) : Palette :: Red ); } }","title":"2D \u30de\u30c3\u30d7\u306e\u4f5c\u6210\u3068 NavMesh"},{"location":"reference/nlp/","text":"Natural language processing \u00b6 \u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"Natural language processing"},{"location":"reference/nlp/#natural-language-processing","text":"","title":"Natural language processing"},{"location":"reference/nlp/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b jumanpp - 2 . 0 . 0 - rc2 . tar . xz \u3092 https://github.com/ku-nlp/jumanpp/releases \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u89e3\u51cd\u3057\u3001 model \u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308b jumandic . jppmdl (\u7d04 450MB) \u3092\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e nlp / japanese / jumanpp \u30d5\u30a9\u30eb\u30c0\uff08 README . md \u3068 LICENSE \u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\uff09\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30c6\u30ad\u30b9\u30c8\u8868\u793a\u7528\u306e\u30d5\u30a9\u30f3\u30c8 const Font font ( 24 , Typeface :: Medium ); // \u89e3\u6790\u5bfe\u8c61\u306e\u30c6\u30ad\u30b9\u30c8 String text = U \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\u3067\u3059\u306d\u3002\" ; // \u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf String previous ; // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u307e\u3068\u3081\u305f\u30c6\u30ad\u30b9\u30c8 String result ; while ( System :: Update ()) { // \u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b TextInput :: UpdateText ( text ); // \u672a\u5909\u63db\u306e\u5165\u529b\u3082\u53d6\u5f97 const String current = text + TextInput :: GetEditingText (); // \u5165\u529b\u304c\u66f4\u65b0\u3055\u308c\u305f\u3089\u5f62\u614b\u7d20\u89e3\u6790\u3092\u518d\u5b9f\u884c if ( current != previous ) { // \u5f62\u614b\u7d20\u89e3\u6790 const auto morphemes = NLP :: Japanese :: AnalyzeMorphology ( current ); result . clear (); // \u5f62\u614b\u7d20\u306e\u60c5\u5831\u3092\u53d6\u5f97 for ( const auto & morpheme : morphemes ) { // \u7a7a\u306e\u5f62\u614b\u7d20\u306f\u30b9\u30ad\u30c3\u30d7 if ( ! morpheme ) { continue ; } // \u8868\u5c64\u5f62\u3001\u898b\u51fa\u3057\u8a9e\u3001\u54c1\u8a5e\u5206\u985e result += U \"{}({}/{}) \" _fmt ( morpheme . surface , morpheme . surfaceBase , morpheme . wordSubClassID ? morpheme . wordSubClass : morpheme . wordClass ); } } previous = current ; // \u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a font ( current ). draw ( Scene :: Rect (). stretched ( - 20 )); // \u5f62\u614b\u7d20\u89e3\u6790\u306e\u7d50\u679c\u3092\u8868\u793a font ( result ). draw ( Scene :: Rect (). stretched ( - 20 ). movedBy ( 0 , 150 ), Palette :: Yellow ); } }","title":"\u65e5\u672c\u8a9e\u306e\u5f62\u614b\u7d20\u89e3\u6790"},{"location":"sample/app/","text":"Application \u00b6 Sketch \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } Piano \u00b6 # include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } } Kaleidoscope sketch \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } } Image to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } } Sketch to Polygon \u00b6 # include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } } Audio player \u00b6 # include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } } Text to Polygon \u00b6 # include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } } \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408 \u00b6 # include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } } \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf \u00b6 # include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } } QR \u30b3\u30fc\u30c9\u4f5c\u6210 \u00b6 # include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } } \u30c9\u30c3\u30c8\u304a\u7d75\u304b\u304d \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } } \u6642\u8a08 \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } } JPEG Glitch \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } } \u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790 \u00b6 # include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( 0 ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } } Sketch to P2Body \u00b6 # include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } }","title":"Application"},{"location":"sample/app/#application","text":"","title":"Application"},{"location":"sample/app/#sketch","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 8 ; // \u30da\u30f3\u306e\u8272 constexpr Color penColor = Palette :: Orange ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Palette :: White ); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u63cf\u3044\u305f\u3082\u306e\u3092\u6d88\u53bb\u3059\u308b\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 640 , 40 ), 120 )) { // \u753b\u50cf\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059 image . fill ( Palette :: White ); // \u5857\u308a\u3064\u3076\u3057\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch"},{"location":"sample/app/#piano","text":"# include <Siv3D.hpp> void Main () { // \u767d\u9375\u306e\u5927\u304d\u3055 constexpr Size keySize ( 55 , 400 ); // \u697d\u5668\u306e\u7a2e\u985e constexpr GMInstrument instrument = GMInstrument :: Piano1 ; // \u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u30ea\u30b5\u30a4\u30ba Window :: Resize ( 12 * keySize . x , keySize . y ); // \u9375\u76e4\u306e\u6570 constexpr int32 NumKeys = 20 ; // \u97f3\u3092\u4f5c\u6210 std :: array < Audio , NumKeys > sounds ; for ( auto i : step ( NumKeys )) { sounds [ i ] = Audio ( Wave ( instrument , static_cast < uint8 > ( PianoKey :: A3 + i ), 0.5 s )); } // \u5bfe\u5fdc\u3059\u308b\u30ad\u30fc constexpr std :: array < Key , NumKeys > keys = { KeyTab , Key1 , KeyQ , KeyW , Key3 , KeyE , Key4 , KeyR , KeyT , Key6 , KeyY , Key7 , KeyU , Key8 , KeyI , KeyO , Key0 , KeyP , KeyMinus , KeyGraveAccent , }; // \u63cf\u753b\u4f4d\u7f6e\u8a08\u7b97\u7528\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u5024 constexpr std :: array < int32 , NumKeys > keyPositions = { 0 , 1 , 2 , 4 , 5 , 6 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 18 , 19 , 20 , 21 , 22 }; while ( System :: Update ()) { // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u97f3\u3092\u518d\u751f for ( auto i : step ( NumKeys )) { if ( keys [ i ]. down ()) { sounds [ i ]. playOneShot ( 0.5 ); } } // \u767d\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5076\u6570 if ( IsEven ( keyPositions [ i ])) { RectF ( keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x , keySize . y ) . stretched ( - 1 ). draw ( keys [ i ]. pressed () ? Palette :: Pink : Palette :: White ); } } // \u9ed2\u9375\u3092\u63cf\u753b for ( auto i : step ( NumKeys )) { // \u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u304c\u5947\u6570 if ( IsOdd ( keyPositions [ i ])) { RectF ( keySize . x * 0.68 + keyPositions [ i ] / 2 * keySize . x , 0 , keySize . x * 0.58 , keySize . y * 0.62 ) . draw ( keys [ i ]. pressed () ? Palette :: Pink : Color ( 24 )); } } } }","title":"Piano"},{"location":"sample/app/#kaleidoscope-sketch","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 600 , 600 ); // \u5206\u5272\u6570 constexpr int32 N = 12 ; // \u80cc\u666f\u8272 constexpr Color backgroundColor ( 20 , 40 , 60 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba\u306b Window :: Resize ( canvasSize ); // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf Image image ( canvasSize , backgroundColor ); // \u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u753b\u9762\u306e\u4e2d\u5fc3\u304c (0, 0) \u306b\u306a\u308b\u3088\u3046\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u79fb\u52d5 const Vec2 begin = ( MouseL . down () ? Cursor :: PosF () : Cursor :: PreviousPosF ()) - Scene :: Center (); const Vec2 end = Cursor :: PosF () - Scene :: Center (); for ( auto i : step ( N )) { // \u5186\u5ea7\u6a19\u306b\u5909\u63db std :: array < Circular , 2 > cs = { begin , end }; for ( auto & c : cs ) { // \u89d2\u5ea6\u3092\u305a\u3089\u3059 c . theta = IsEven ( i ) ? ( - c . theta - 2 _pi / N * ( i - 1 )) : ( c . theta + 2 _pi / N * i ); } // \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u3082\u3068\u306b\u3001\u753b\u50cf\u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( cs [ 0 ], cs [ 1 ]). moveBy ( Scene :: Center ()) . paint ( image , 2 , HSV ( Scene :: Time () * 60.0 , 0.5 , 1.0 )); } // \u66f8\u304d\u8fbc\u3093\u3060\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fillIfNotBusy ( image ); } else if ( MouseR . down ()) // \u53f3\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 { // \u753b\u50cf\u3092\u5857\u308a\u3064\u3076\u3059 image . fill ( backgroundColor ); // \u5857\u308a\u3064\u3076\u3057\u305f\u753b\u50cf\u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f texture . draw (); } }","title":"Kaleidoscope sketch"},{"location":"sample/app/#image-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u4f7f\u7528\u3059\u308b\u753b\u50cf const Image image ( U \"example/siv3d-kun.png\" ); // \u30a2\u30eb\u30d5\u30a1\u5024 1 \u4ee5\u4e0a\u306e\u9818\u57df\u3092 Polygon \u5316 const Polygon polygon = image . alphaToPolygon ( 1 , false ); // \u30c6\u30af\u30b9\u30c1\u30e3 const Texture texture ( image ); // \u79fb\u52d5\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 constexpr Vec2 pos ( 40 , 40 ); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\uff08\u30d4\u30af\u30bb\u30eb\uff09 double maxDistance = 4.0 ; // \u5358\u7d14\u5316\u3057\u305f Polygon Polygon simplifiedPolygon = polygon . simplified ( maxDistance ); while ( System :: Update ()) { // \u5358\u7d14\u5316\u3057\u305f Polygon \u306e\u9802\u70b9\u6570\u3092\u8868\u793a ClearPrint (); Print << simplifiedPolygon . vertices (). size () << U \" vertices\" ; texture . draw ( pos ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u8868\u793a simplifiedPolygon . movedBy ( pos ) . draw ( ColorF ( 1.0 , 1.0 , 0.0 , 0.2 )) . drawWireframe ( 2 , Palette :: Yellow ); // \u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3055\u305b\u3066\u8868\u793a simplifiedPolygon . movedBy ( Cursor :: Pos () - image . size () / 2 ) . draw ( ColorF ( 0.5 )); // Polygon \u5358\u7d14\u5316\u6642\u306e\u57fa\u6e96\u8ddd\u96e2\u3092\u5236\u5fa1 if ( SimpleGUI :: Slider ( U \"{:.1f}\" _fmt ( maxDistance ), maxDistance , 0.0 , 30.0 , Vec2 ( 400 , 40 ), 60 , 200 )) { // \u30b9\u30e9\u30a4\u30c0\u30fc\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u3001\u5358\u7d14\u5316\u3057\u305f Polygon \u3092\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3067\u518d\u4f5c\u6210 simplifiedPolygon = polygon . simplified ( maxDistance ); } } }","title":"Image to Polygon"},{"location":"sample/app/#sketch-to-polygon","text":"# include <Siv3D.hpp> void Main () { // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // \u4f5c\u6210\u3057\u305f Polygon \u306e\u914d\u5217 Array < Polygon > polygons ; while ( System :: Update ()) { // \u30da\u30f3\u306e\u8272 const Color penColor = HSV ( polygons . size () * 20 ); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , penColor ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // \u5c11\u3057\u5358\u7d14\u5316\u3057\u3066\u304b\u3089\u8ffd\u52a0 polygons << polygon . simplified ( 2.0 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } // \u305d\u308c\u305e\u308c\u306e Polygon \u3092\u63cf\u753b for ( auto [ i , polygon ] : Indexed ( polygons )) { polygon . draw ( HSV ( i * 20 , 0.4 , 1.0 )) . drawWireframe ( 1 , Palette :: Gray ) . drawFrame ( 4 , HSV ( i * 20 )); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8868\u793a texture . draw (); } }","title":"Sketch to Polygon"},{"location":"sample/app/#audio-player","text":"# include <Siv3D.hpp> void Main () { // \u97f3\u697d Audio audio ; // FFT \u306e\u7d50\u679c FFTResult fft ; // \u518d\u751f\u4f4d\u7f6e\u306e\u5909\u66f4\u306e\u6709\u7121 bool hasChanged = false ; while ( System :: Update ()) { // \u518d\u751f\u30fb\u6f14\u594f\u6642\u9593 const String time = FormatTime ( SecondsF ( audio . posSec ()), U \"M:ss\" ) + U '/' + FormatTime ( SecondsF ( audio . lengthSec ()), U \"M:ss\" ); // \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u306e\u9032\u307f\u5177\u5408 double progress = static_cast < double > ( audio . posSample ()) / audio . samples (); if ( audio . isPlaying ()) { // FFT \u89e3\u6790 FFT :: Analyze ( fft , audio ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1000 ; RectF ( Arg :: bottomLeft ( i , 480 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } // \u518d\u751f if ( SimpleGUI :: Button ( U \"Play\" , Vec2 ( 40 , 500 ), 120 , audio && ! audio . isPlaying ())) { audio . play ( 0.2 s ); } // \u4e00\u6642\u505c\u6b62 if ( SimpleGUI :: Button ( U \"Pause\" , Vec2 ( 170 , 500 ), 120 , audio . isPlaying ())) { audio . pause ( 0.2 s ); } // \u30d5\u30a9\u30eb\u30c0\u304b\u3089\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f if ( SimpleGUI :: Button ( U \"Open\" , Vec2 ( 300 , 500 ), 120 )) { audio . stop ( 0.5 s ); audio = Dialog :: OpenAudio (); audio . play (); } // \u30b9\u30e9\u30a4\u30c0\u30fc if ( SimpleGUI :: Slider ( time , progress , Vec2 ( 40 , 540 ), 130 , 590 , ! audio . isEmpty ())) { audio . pause ( 0.1 s ); // \u518d\u751f\u4f4d\u7f6e\u3092\u5909\u66f4 audio . setPosSample ( static_cast < int64 > ( audio . samples () * progress )); // \u30ce\u30a4\u30ba\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304b\u3089\u624b\u3092\u96e2\u3059\u307e\u3067\u518d\u751f\u306f\u518d\u958b\u3057\u306a\u3044 hasChanged = true ; } else if ( hasChanged && MouseL . up ()) { // \u518d\u751f\u3092\u518d\u958b audio . play ( 0.1 s ); hasChanged = false ; } } }","title":"Audio player"},{"location":"sample/app/#text-to-polygon","text":"# include <Siv3D.hpp> // \u30c6\u30ad\u30b9\u30c8\u3092\u753b\u50cf\u306b\u66f8\u304d\u8fbc\u3093\u3067 Polygon \u5316\u3059\u308b\u95a2\u6570 MultiPolygon MakePolygons ( const Font & font , const String & text ) { Image image ( 1200 , 200 , Color ( 0 , 0 )); font ( text ). overwrite ( image , 0 , 0 , Color ( 255 )); return image . alphaToPolygons (). simplified ( 1 ). movedBy ( - 400 , - 500 ). scaled ( 0.025 ); } void Main () { Window :: Resize ( 1280 , 720 ); Scene :: SetBackground ( ColorF ( 0.94 , 0.91 , 0.86 )); const Font font ( 100 , Typeface :: Bold ); // \u7269\u7406\u6f14\u7b97\u306e\u3000\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; String text ; int32 generation = 0 ; HashTable < P2BodyID , int32 > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 5 ), 38 , Camera2DParameters :: MouseOnly ()); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b TextInput :: UpdateText ( text ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( Scene :: DeltaTime (), 30 , 10 ); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u4e16\u4ee3\u306b\u5fdc\u3058\u305f\u8272\u3067 Body \u3092\u63cf\u753b for ( const auto & body : bodies ) { body . draw ( HSV ( table [ body . id ()] * 45 + 30 , 0.8 , 0.8 )); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u5165\u529b\u6587\u5b57\u3092\u63cf\u753b { Transformer2D trans ( Mat3x2 :: Scale ( 0.025 )); font ( text + TextInput :: GetEditingText ()). draw ( - 400 , - 500 , ColorF ( 0.5 )); } // \u6539\u884c\u6587\u5b57\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30c6\u30ad\u30b9\u30c8\u3092 Body \u5316\u3055\u305b\u308b if ( text . includes ( U '\\n' )) { for ( const auto & poly : MakePolygons ( font , text )) { const Vec2 centroid = poly . centroid (); bodies << world . createPolygon ( centroid , poly . movedBy ( - centroid ), P2Material ( 1 , 0.0 , 0.4 )); // \u73fe\u5728\u306e\u4e16\u4ee3\u3092\u4fdd\u5b58 table [ bodies . back (). id ()] = generation ; } text . clear (); // \u4e16\u4ee3\u3092\u9032\u3081\u308b ++ generation ; } // 2D \u30ab\u30e1\u30e9\u3001\u53f3\u30af\u30ea\u30c3\u30af\u6642\u306e UI \u3092\u8868\u793a camera . draw ( Palette :: Orange ); } // \u6d88\u53bb\u30dc\u30bf\u30f3 if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 1100 , 40 ))) { bodies . clear (); } } }","title":"Text to Polygon"},{"location":"sample/app/#_1","text":"# include <Siv3D.hpp> int32 Mandelbrot ( double x , double y ) { double a = 0.0 , b = 0.0 ; for ( int32 n = 0 ; n < 360 ; ++ n ) { const double t = a * a - b * b + x ; const double u = 2.0 * a * b + y ; if ( t * t + u * u > 4.0 ) { return n ; } a = t ; b = u ; } return 0 ; } void Main () { constexpr Size resolutuion ( 640 , 480 ); Window :: Resize ( resolutuion ); Vec2 center ( 0 , 0 ); double scale = - 4.0 ; // \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u753b\u50cf Image image ( resolutuion , Palette :: Black ); // \u63cf\u753b\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); while ( System :: Update ()) { const double wheel = Mouse :: Wheel (); const bool clicked = MouseL . down (); // \u6700\u521d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3001\u64cd\u4f5c\u3055\u308c\u305f\u3068\u304d\u3060\u3051\u66f4\u65b0 if ( wheel || clicked || ( Scene :: FrameCount () == 1 )) { scale -= wheel ; const double s = Pow ( 1.25 , scale ); const double d = ( 1.0 / s ) / resolutuion . x ; if ( clicked ) { center += ( Cursor :: PosF () - resolutuion / 2 ) * d ; } const double xb = center . x - d * ( resolutuion . x * 0.5 ); const double yb = center . y - d * ( resolutuion . y * 0.5 ); for ( auto y : step ( resolutuion . y )) { const double yPos = yb + ( d * y ); for ( auto x : step ( resolutuion . x )) { const double xPos = xb + ( d * x ); const int32 m = Mandelbrot ( xPos , yPos ); image [ y ][ x ] = m ? HSV ( 240 - m , 0.8 , 1.0 ) : HSV ( Color ( 0 )); } } // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u8eab\u3092 image \u3067\u66f4\u65b0 texture . fill ( image ); } // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b texture . draw (); } }","title":"\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408"},{"location":"sample/app/#_2","text":"# include <Siv3D.hpp> // 1 \u30bb\u30eb\u304c 1 \u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u3001\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528 struct Cell { bool previous : 1 ; bool current : 1 ; }; // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u30bb\u30eb\u5024\u3067\u57cb\u3081\u308b\u95a2\u6570 void RandomFill ( Grid < Cell >& grid ) { grid . fill ({ 0 , 0 }); // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { grid [ y ][ x ] = { 0 , RandomBool ( 0.5 ) }; } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u66f4\u65b0\u3059\u308b\u95a2\u6570 void Update ( Grid < Cell >& grid ) { for ( auto & cell : grid ) { cell . previous = cell . current ; } // \u5883\u754c\u306e\u30bb\u30eb\u3092\u9664\u3044\u3066\u66f4\u65b0 for ( auto y : Range ( 1 , grid . height () - 2 )) { for ( auto x : Range ( 1 , grid . width () - 2 )) { const int32 c = grid [ y ][ x ]. previous ; int32 n = 0 ; n += grid [ y - 1 ][ x - 1 ]. previous ; n += grid [ y - 1 ][ x ]. previous ; n += grid [ y - 1 ][ x + 1 ]. previous ; n += grid [ y ][ x - 1 ]. previous ; n += grid [ y ][ x + 1 ]. previous ; n += grid [ y + 1 ][ x - 1 ]. previous ; n += grid [ y + 1 ][ x ]. previous ; n += grid [ y + 1 ][ x + 1 ]. previous ; // \u30bb\u30eb\u306e\u72b6\u614b\u306e\u66f4\u65b0 grid [ y ][ x ]. current = ( c == 0 && n == 3 ) || ( c == 1 && ( n == 2 || n == 3 )); } } } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u753b\u50cf\u5316\u3059\u308b\u95a2\u6570 void CopyToImage ( const Grid < Cell >& grid , Image & image ) { for ( auto y : step ( image . height ())) { for ( auto x : step ( image . width ())) { image [ y ][ x ] = grid [ y + 1 ][ x + 1 ]. current ? Color ( 0 , 255 , 0 ) : Palette :: Black ; } } } void Main () { // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u6a2a\uff09 constexpr int32 width = 60 ; // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u306e\u6570\uff08\u7e26\uff09 constexpr int32 height = 60 ; // \u8a08\u7b97\u3092\u3057\u306a\u3044\u5883\u754c\u90e8\u5206\u3082\u542b\u3081\u305f\u30b5\u30a4\u30ba\u3067\u4e8c\u6b21\u5143\u914d\u5217\u3092\u78ba\u4fdd Grid < Cell > grid ( width + 2 , height + 2 , { 0 , 0 }); // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u72b6\u614b\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306e\u753b\u50cf Image image ( width , height , Palette :: Black ); // \u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); Stopwatch s ( true ); // \u81ea\u52d5\u518d\u751f bool autoStep = false ; // \u66f4\u65b0\u983b\u5ea6 double speed = 0.5 ; // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a bool showGrid = true ; // \u753b\u50cf\u306e\u66f4\u65b0\u306e\u5fc5\u8981\u304c\u3042\u308b\u304b bool updated = false ; while ( System :: Update ()) { // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u57cb\u3081\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Random\" , Vec2 ( 700 , 40 ), 170 )) { RandomFill ( grid ); updated = true ; } // \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30bb\u30eb\u3092\u3059\u3079\u3066\u30bc\u30ed\u306b\u3059\u308b\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( U \"Clear\" , Vec2 ( 700 , 80 ), 170 )) { grid . fill ({ 0 , 0 }); updated = true ; } // \u4e00\u6642\u505c\u6b62 / \u518d\u751f\u30dc\u30bf\u30f3 if ( SimpleGUI :: ButtonAt ( autoStep ? U \"Pause\" : U \"Run \u25b6\" , Vec2 ( 700 , 160 ), 170 )) { autoStep = ! autoStep ; } // \u66f4\u65b0\u983b\u5ea6\u5909\u66f4\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: SliderAt ( U \"Speed\" , speed , 1.0 , 0.1 , Vec2 ( 700 , 200 ), 70 , 100 ); // 1 \u30b9\u30c6\u30c3\u30d7\u9032\u3081\u308b\u30dc\u30bf\u30f3\u3001\u307e\u305f\u306f\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u78ba\u8a8d if ( SimpleGUI :: ButtonAt ( U \"Step\" , Vec2 ( 700 , 240 ), 170 ) || ( autoStep && s . sF () >= ( speed * speed ))) { Update ( grid ); updated = true ; s . restart (); } // \u30b0\u30ea\u30c3\u30c9\u8868\u793a\u306e\u6709\u7121\u3092\u6307\u5b9a\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 SimpleGUI :: CheckBoxAt ( showGrid , U \"Grid\" , Vec2 ( 700 , 320 ), 170 ); // \u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u306e\u30bb\u30eb\u306e\u7de8\u96c6 if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { const Point target = Cursor :: Pos () / 10 + Point ( 1 , 1 ); if ( MouseL . pressed ()) { grid [ target ]. current = true ; updated = true ; } else if ( MouseR . pressed ()) { grid [ target ]. current = false ; updated = true ; } } // \u753b\u50cf\u306e\u66f4\u65b0 if ( updated ) { CopyToImage ( grid , image ); texture . fill ( image ); updated = false ; } // \u753b\u50cf\u3092\u30d5\u30a3\u30eb\u30bf\u306a\u3057\u3067\u62e1\u5927\u3057\u3066\u8868\u793a { ScopedRenderStates2D sampler ( SamplerState :: ClampNearest ); texture . scaled ( 10 ). draw (); } // \u30b0\u30ea\u30c3\u30c9\u306e\u8868\u793a if ( showGrid ) { for ( auto i : step ( 61 )) { Rect ( 0 , i * 10 , 600 , 1 ). draw ( ColorF ( 0.4 )); Rect ( i * 10 , 0 , 1 , 600 ). draw ( ColorF ( 0.4 )); } } if ( Rect ( 0 , 0 , 599 ). mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hidden ); Rect ( Cursor :: Pos () / 10 * 10 , 10 ). draw ( Palette :: Orange ); } } }","title":"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0 \u30a8\u30c7\u30a3\u30bf"},{"location":"sample/app/#qr","text":"# include <Siv3D.hpp> void Main () { Window :: Resize ( 1280 , 720 ); const Font font ( 40 , Typeface :: Bold ); // QR \u5909\u63db\u7d50\u679c QRCode qr ; // \u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8 String text = U \"Abc\" , previous ; // QR \u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ; while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b TextInput :: UpdateText ( text ); const String current = text + TextInput :: GetEditingText (); // \u30c6\u30ad\u30b9\u30c8\u306e\u66f4\u65b0\u304c\u3042\u308c\u3070 QR \u30b3\u30fc\u30c9\u3092\u518d\u4f5c\u6210 if ( current != previous ) { // \u5165\u529b\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u3092 QR \u30b3\u30fc\u30c9\u306b\u5909\u63db if ( QR :: EncodeText ( qr , current )) { // \u67a0\u3092\u4ed8\u3051\u3066\u62e1\u5927\u3057\u305f\u753b\u50cf\u3067\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( qr . image . border ( 4 ). scaled ( 500 , 500 , Interpolation :: Nearest )); } } previous = current ; font ( current ). draw ( 60 , 50 ); texture . drawAt ( 640 , 400 ); } }","title":"QR \u30b3\u30fc\u30c9\u4f5c\u6210"},{"location":"sample/app/#_3","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr int32 cellSize = 40 ; // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30bb\u30eb\u306e\u5927\u304d\u3055\u304b\u3089\u7e26\u6a2a\u306e\u30bb\u30eb\u306e\u500b\u6570\u3092\u8a08\u7b97 Grid < int32 > cells ( Scene :: Size () / cellSize ); while ( System :: Update ()) { // \u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); for ( auto p : step ( cells . size ())) { const Rect rect ( p * cellSize , cellSize ); if ( rect . leftClicked ()) { // 0 \u2192 1 \u2192 2 \u2192\u30003 \u2192 0 \u2192 1 \u2192 ... \u3068\u9077\u79fb\u3055\u305b\u308b ++ cells [ p ] %= 4 ; } rect . stretched ( - 1 ). draw ( ColorF ( 0.95 - cells [ p ] * 0.3 )); } } }","title":"\u30c9\u30c3\u30c8\u304a\u7d75\u304b\u304d"},{"location":"sample/app/#_4","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.5 , 0.7 , 0.6 )); const Font font ( 50 , Typeface :: Bold ); const Vec2 center = Scene :: Center (); while ( System :: Update ()) { Circle ( center , 230 ). draw (). drawFrame ( 20 , ColorF ( 0.8 )); // \u6570\u5b57 for ( auto i : Range ( 1 , 12 )) { const Vec2 pos = OffsetCircular ( center , 170 , 30 _deg * i ); font ( i ). drawAt ( pos , ColorF ( 0.25 )); } for ( auto i : Range ( 0 , 59 )) { const Vec2 pos = OffsetCircular ( center , 210 , i * 6 _deg ); Circle ( pos , i % 5 ? 3 : 6 ). draw ( ColorF ( 0.25 )); } // \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97 const DateTime time = DateTime :: Now (); // \u6642\u91dd const double hour = ( time . hour + time . minute / 60.0 ) * 30 _deg ; Line ( center , center + Circular ( 110 , hour )). draw ( LineStyle :: RoundCap , 18 , ColorF ( 0.1 )); // \u5206\u91dd const double minute = ( time . minute + time . second / 60.0 ) * 6 _deg ; Line ( center , center + Circular ( 190 , minute )). draw ( LineStyle :: RoundCap , 8 , ColorF ( 0.1 )); // \u79d2\u91dd const double second = time . second * 6 _deg ; Line ( center , center + Circular ( 190 , second )). draw ( 3 , ColorF ( 0.1 )); } }","title":"\u6642\u8a08"},{"location":"sample/app/#jpeg-glitch","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u753b\u50cf const Image image ( U \"example/windmill.png\" ); // \u8868\u793a\u7528\u306e\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3 DynamicTexture texture ( image ); // JPEG \u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf const ByteArray original = image . encodeJPEG (); // \u6539\u5909\u3059\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570 const size_t noiseCount = image . num_pixels () / 4000 ; while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Glitch\" , Vec2 ( 20 , 20 ))) { // Array \u3092\u4f5c\u6210 Array < Byte > data ( original . view (). begin (), original . view (). end ()); for ( size_t i = 0 ; i < noiseCount ; ++ i ) { // \u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306e 1 \u30d0\u30a4\u30c8\u306b\u3064\u3044\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u66f8\u304d\u63db\u3048 // \u30d8\u30c3\u30c0\u90e8\u5206\uff08\u5148\u982d\uff09\u306f\u6539\u5909\u3057\u306a\u3044 data [ Random < size_t > ( 630 , data . size () - 1 )] = static_cast < Byte > ( Random ( 255 )); } // JPEG \u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u753b\u50cf\u3092\u4f5c\u6210\u3001\u52d5\u7684\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u8ee2\u9001 texture . fill ( Image ( ByteArray ( std :: move ( data )), ImageFormat :: JPEG )); } texture . drawAt ( Scene :: Center ()); } }","title":"JPEG Glitch"},{"location":"sample/app/#_5","text":"# include <Siv3D.hpp> void Main () { // \u30de\u30a4\u30af\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 Microphone mic ( 0 ); if ( ! mic ) { // \u30de\u30a4\u30af\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u7d42\u4e86 throw Error ( U \"Microphone not available\" ); } // \u9332\u97f3\u3092\u30b9\u30bf\u30fc\u30c8 mic . start (); FFTResult fft ; while ( System :: Update ()) { // FFT \u306e\u7d50\u679c\u3092\u53d6\u5f97 mic . fft ( fft ); // \u7d50\u679c\u3092\u53ef\u8996\u5316 for ( auto i : step ( 800 )) { const double size = Pow ( fft . buffer [ i ], 0.6f ) * 1200 ; RectF ( Arg :: bottomLeft ( i , 600 ), 1 , size ). draw ( HSV ( 240 - i )); } // \u5468\u6ce2\u6570\u8868\u793a Rect ( Cursor :: Pos (). x , 0 , 1 , Scene :: Height ()). draw (); ClearPrint (); Print << U \"{} Hz\" _fmt ( Cursor :: Pos (). x * fft . resolution ); } }","title":"\u30de\u30a4\u30af\u3067\u5165\u529b\u3057\u305f\u97f3\u306e\u5468\u6ce2\u6570\u89e3\u6790"},{"location":"sample/app/#sketch-to-p2body","text":"# include <Siv3D.hpp> void Main () { // \u7269\u7406\u6f14\u7b97\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 16 , 0 , 16 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u6587\u5b57\u306e\u30d1\u30fc\u30c4 Array < P2Body > bodies ; // \u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u30b5\u30a4\u30ba constexpr Size canvasSize ( 800 , 600 ); // \u30da\u30f3\u306e\u592a\u3055 constexpr int32 thickness = 4 ; // \u66f8\u304d\u8fbc\u307f\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u610f Image image ( canvasSize , Color ( 0 , 0 )); // \u8868\u793a\u7528\u306e\u30c6\u30af\u30b9\u30c1\u30e3\uff08\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067 DynamicTexture\uff09 DynamicTexture texture ( image ); // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 10 ), 20 ); while ( System :: Update ()) { // 2D \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u66f4\u65b0 camera . update (); if ( MouseL . pressed ()) { // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u59cb\u70b9\u306f\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 // \uff08\u521d\u56de\u306f\u30bf\u30c3\u30c1\u64cd\u4f5c\u6642\u306e\u5ea7\u6a19\u306e\u30b8\u30e3\u30f3\u30d7\u3092\u9632\u3050\u305f\u3081\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u306b\u3059\u308b\uff09 const Point from = MouseL . down () ? Cursor :: Pos () : Cursor :: PreviousPos (); // \u66f8\u304d\u8fbc\u3080\u7dda\u306e\u7d42\u70b9\u306f\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19 const Point to = Cursor :: Pos (); // image \u306b\u7dda\u3092\u66f8\u304d\u8fbc\u3080 Line ( from , to ). overwrite ( image , thickness , Palette :: Gray ); // \u66f8\u304d\u8fbc\u307f\u7d42\u308f\u3063\u305f image \u3067\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } else if ( MouseL . up ()) { // \u753b\u50cf\u306e\u975e\u900f\u904e\u90e8\u5206\u304b\u3089 Polygon \u3092\u4f5c\u6210\uff08\u7a74\u7121\u3057\uff09 if ( const Polygon polygon = image . alphaToPolygon ( 1 , false )) { // Polygon \u3092\u9069\u5207\u306a\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u3001P2Body \u3068\u3057\u3066\u8ffd\u52a0 const Polygon polygon2 = polygon . simplified ( 2.0 ) . moveBy ( - canvasSize / 2 ). scale ( 1.0 / camera . getScale ()); bodies << world . createPolygon ( camera . getCenter (), polygon2 ); } // \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30bb\u30c3\u30c8 image . fill ( Color ( 0 , 0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u66f4\u65b0 texture . fill ( image ); } { // 2D \u30ab\u30e1\u30e9\u3092\u9069\u7528\u3059\u308b Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); for ( const auto & body : bodies ) { body . draw ( HSV ( body . id () * 30 , 0.8 , 1.0 )); } line . draw ( Palette :: Skyblue ); } texture . draw (); camera . draw (); } }","title":"Sketch to P2Body"},{"location":"sample/game-template/","text":"Geme template \u00b6 Scene management \u00b6 # include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"Breakout\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"Play\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"Exit\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } } \u30bf\u30a4\u30d4\u30f3\u30b0\u30b2\u30fc\u30e0\u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"Geme template"},{"location":"sample/game-template/#geme-template","text":"","title":"Geme template"},{"location":"sample/game-template/#scene-management","text":"# include <Siv3D.hpp> // \u30b7\u30fc\u30f3\u306e\u540d\u524d enum class State { Title , Game }; // \u30b2\u30fc\u30e0\u30c7\u30fc\u30bf struct GameData { // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; }; // \u30b7\u30fc\u30f3\u7ba1\u7406\u30af\u30e9\u30b9 using MyApp = SceneManager < State , GameData > ; // \u30bf\u30a4\u30c8\u30eb\u30b7\u30fc\u30f3 class Title : public MyApp :: Scene { private : Rect m_startButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 0 ), 300 , 60 ); Transition m_startTransition = Transition ( 0.4 s , 0.2 s ); Rect m_exitButton = Rect ( Arg :: center = Scene :: Center (). movedBy ( 0 , 100 ), 300 , 60 ); Transition m_exitTransition = Transition ( 0.4 s , 0.2 s ); public : Title ( const InitData & init ) : IScene ( init ) {} void update () override { m_startTransition . update ( m_startButton . mouseOver ()); m_exitTransition . update ( m_exitButton . mouseOver ()); if ( m_startButton . mouseOver () || m_exitButton . mouseOver ()) { Cursor :: RequestStyle ( CursorStyle :: Hand ); } if ( m_startButton . leftClicked ()) { changeScene ( State :: Game ); } if ( m_exitButton . leftClicked ()) { System :: Exit (); } } void draw () const override { const String titleText = U \"Breakout\" ; const Vec2 center ( Scene :: Center (). x , 120 ); FontAsset ( U \"Title\" )( titleText ). drawAt ( center . movedBy ( 4 , 6 ), ColorF ( 0.0 , 0.5 )); FontAsset ( U \"Title\" )( titleText ). drawAt ( center ); m_startButton . draw ( ColorF ( 1.0 , m_startTransition . value ())). drawFrame ( 2 ); m_exitButton . draw ( ColorF ( 1.0 , m_exitTransition . value ())). drawFrame ( 2 ); FontAsset ( U \"Menu\" )( U \"Play\" ). drawAt ( m_startButton . center (), ColorF ( 0.25 )); FontAsset ( U \"Menu\" )( U \"Exit\" ). drawAt ( m_exitButton . center (), ColorF ( 0.25 )); Rect ( 0 , 500 , Scene :: Width (), Scene :: Height () - 500 ) . draw ( Arg :: top = ColorF ( 0.0 , 0.0 ), Arg :: bottom = ColorF ( 0.0 , 0.5 )); const int32 highScore = getData (). highScore ; FontAsset ( U \"Score\" )( U \"High score: {}\" _fmt ( highScore )). drawAt ( Vec2 ( 620 , 550 )); } }; // \u30b2\u30fc\u30e0\u30b7\u30fc\u30f3 class Game : public MyApp :: Scene { private : // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba static constexpr Size blockSize = Size ( 40 , 20 ); // \u30dc\u30fc\u30eb\u306e\u901f\u3055 static constexpr double speed = 480.0 ; // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > m_blocks ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 m_ballVelocity = Vec2 ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle m_ball = Circle ( 400 , 400 , 8 ); // \u30d1\u30c9\u30eb Rect m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30b9\u30b3\u30a2 int32 m_score = 0 ; public : Game ( const InitData & init ) : IScene ( init ) { // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { m_blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } } void update () override { // \u30d1\u30c9\u30eb\u3092\u64cd\u4f5c m_paddle = Rect ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 m_ball . moveBy ( m_ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = m_blocks . begin (); it != m_blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( m_ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( m_ball ) || it -> top (). intersects ( m_ball ) ? m_ballVelocity . y : m_ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 m_blocks . erase ( it ); // \u30b9\u30b3\u30a2\u3092\u52a0\u7b97 ++ m_score ; // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ball . y < 0 && m_ballVelocity . y < 0 ) { m_ballVelocity . y *= - 1 ; } if ( m_ball . y > Scene :: Height ()) { changeScene ( State :: Title ); getData (). highScore = Max ( getData (). highScore , m_score ); } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( m_ball . x < 0 && m_ballVelocity . x < 0 ) || ( Scene :: Width () < m_ball . x && m_ballVelocity . x > 0 )) { m_ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( m_ballVelocity . y > 0 && m_paddle . intersects ( m_ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b m_ballVelocity = Vec2 (( m_ball . x - m_paddle . center (). x ) * 10 , - m_ballVelocity . y ). setLength ( speed ); } } void draw () const override { FontAsset ( U \"Score\" )( m_score ). drawAt ( Scene :: Center (). x , 30 ); // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : m_blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f m_ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f m_paddle . draw (); } }; void Main () { // \u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30f3\u30c8\u30a2\u30bb\u30c3\u30c8\u3092\u767b\u9332 FontAsset :: Register ( U \"Title\" , 120 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); FontAsset :: Register ( U \"Menu\" , 30 , Typeface :: Regular ); FontAsset :: Register ( U \"Score\" , 36 , Typeface :: Bold ); // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.8 , 0.4 )); // \u30b7\u30fc\u30f3\u3068\u9077\u79fb\u6642\u306e\u8272\u3092\u8a2d\u5b9a MyApp manager ; manager . add < Title > ( State :: Title ) . add < Game > ( State :: Game ) . setFadeColor ( ColorF ( 1.0 )); while ( System :: Update ()) { if ( ! manager . update ()) { break ; } } }","title":"Scene management"},{"location":"sample/game-template/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u554f\u984c\u6587\u306e\u30ea\u30b9\u30c8 const Array < String > texts = { U \"Practice makes perfect.\" , U \"Don't cry over spilt milk.\" , U \"Faith will move mountains.\" , U \"Nothing ventured, nothing gained.\" , U \"Bad news travels fast.\" , }; String target = texts . choice (), input ; const Font font ( 40 , Typeface :: Bold ); while ( System :: Update ()) { // \u30c6\u30ad\u30b9\u30c8\u5165\u529b\uff08TextInputMode::DenyControl: \u30a8\u30f3\u30bf\u30fc\u3084\u30bf\u30d6\u3001\u30d0\u30c3\u30af\u30b9\u30da\u30fc\u30b9\u306f\u53d7\u3051\u4ed8\u3051\u306a\u3044\uff09 TextInput :: UpdateText ( input , TextInputMode :: DenyControl ); // \u8aa4\u3063\u305f\u5165\u529b\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u524a\u9664 while ( ! target . starts_with ( input )) { input . pop_back (); } // \u4e00\u81f4\u3057\u305f\u3089\u6b21\u306e\u554f\u984c\u3078 if ( input == target ) { target = texts . choice (); input . clear (); } font ( target ). draw ( 40 , 270 , ColorF ( 0.75 )); font ( input ). draw ( 40 , 270 , ColorF ( 0.1 )); } }","title":"\u30bf\u30a4\u30d4\u30f3\u30b0\u30b2\u30fc\u30e0\u306e\u57fa\u672c"},{"location":"sample/game/","text":"Game \u00b6 Breakout \u00b6 # include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } } Pinball \u00b6 # include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } } Emoji Tower \u00b6 # include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } } \u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0 \u00b6 # include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } }","title":"Game"},{"location":"sample/game/#game","text":"","title":"Game"},{"location":"sample/game/#breakout","text":"# include <Siv3D.hpp> void Main () { // \u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba constexpr Size blockSize ( 40 , 20 ); // \u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217 Array < Rect > blocks ; // \u6a2a (Scene::Width() / blockSize.x) \u500b\u3001\u7e26 5 \u500b\u306e\u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b for ( auto p : step ( Size (( Scene :: Width () / blockSize . x ), 5 ))) { blocks << Rect ( p . x * blockSize . x , 60 + p . y * blockSize . y , blockSize ); } // \u30dc\u30fc\u30eb\u306e\u901f\u3055 constexpr double speed = 480.0 ; // \u30dc\u30fc\u30eb\u306e\u901f\u5ea6 Vec2 ballVelocity ( 0 , - speed ); // \u30dc\u30fc\u30eb Circle ball ( 400 , 400 , 8 ); while ( System :: Update ()) { // \u30d1\u30c9\u30eb const Rect paddle ( Arg :: center ( Cursor :: Pos (). x , 500 ), 60 , 10 ); // \u30dc\u30fc\u30eb\u3092\u79fb\u52d5 ball . moveBy ( ballVelocity * Scene :: DeltaTime ()); // \u30d6\u30ed\u30c3\u30af\u3092\u9806\u306b\u30c1\u30a7\u30c3\u30af for ( auto it = blocks . begin (); it != blocks . end (); ++ it ) { // \u30dc\u30fc\u30eb\u3068\u30d6\u30ed\u30c3\u30af\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u3089 if ( it -> intersects ( ball )) { // \u30dc\u30fc\u30eb\u306e\u5411\u304d\u3092\u53cd\u8ee2\u3059\u308b ( it -> bottom (). intersects ( ball ) || it -> top (). intersects ( ball ) ? ballVelocity . y : ballVelocity . x ) *= - 1 ; // \u30d6\u30ed\u30c3\u30af\u3092\u914d\u5217\u304b\u3089\u524a\u9664\uff08\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\uff09 blocks . erase ( it ); // \u3053\u308c\u4ee5\u4e0a\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044 break ; } } // \u5929\u4e95\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ball . y < 0 && ballVelocity . y < 0 ) { ballVelocity . y *= - 1 ; } // \u5de6\u53f3\u306e\u58c1\u306b\u3076\u3064\u304b\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if (( ball . x < 0 && ballVelocity . x < 0 ) || ( Scene :: Width () < ball . x && ballVelocity . x > 0 )) { ballVelocity . x *= - 1 ; } // \u30d1\u30c9\u30eb\u306b\u3042\u305f\u3063\u305f\u3089\u306f\u306d\u8fd4\u308b if ( ballVelocity . y > 0 && paddle . intersects ( ball )) { // \u30d1\u30c9\u30eb\u306e\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u306f\u306d\u8fd4\u308b\u5411\u304d\u3092\u5909\u3048\u308b ballVelocity = Vec2 (( ball . x - paddle . center (). x ) * 10 , - ballVelocity . y ). setLength ( speed ); } // \u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u63cf\u753b\u3059\u308b for ( const auto & block : blocks ) { block . stretched ( - 1 ). draw ( HSV ( block . y - 40 )); } // \u30dc\u30fc\u30eb\u3092\u63cf\u304f ball . draw (); // \u30d1\u30c9\u30eb\u3092\u63cf\u304f paddle . draw (); } }","title":"Breakout"},{"location":"sample/game/#pinball","text":"# include <Siv3D.hpp> // \u5916\u5468\u306e\u67a0\u306e\u9802\u70b9\u30ea\u30b9\u30c8\u3092\u4f5c\u6210 Array < Vec2 > CreateFrame ( const Vec2 & leftAnchor , const Vec2 & rightAnchor ) { Array < Vec2 > points = { leftAnchor , Vec2 ( - 7 , - 2 ) }; for ( auto i : Range ( - 30 , 30 )) { points << OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 7 , i * 3 _deg ); } return points << Vec2 ( 7 , - 2 ) << rightAnchor ; } // \u63a5\u89e6\u3057\u3066\u3044\u308b\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u6c7a\u5b9a ColorF GetColor ( const P2Body & body , const Array < P2BodyID >& list ) { return list . includes ( body . id ()) ? Palette :: White : Palette :: Orange ; } void Main () { // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3092 60 \u306b\u56fa\u5b9a Graphics :: SetTargetFrameRateHz ( 60 ); // \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u66f4\u65b0 constexpr double timeDelta = 1.0 / 60.0 ; // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.2 , 0.3 , 0.4 )); // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ( 6.0 ); // \u5de6\u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u8ef8\u306e\u5ea7\u6a19 constexpr Vec2 leftFlipperAnchor ( - 2.5 , 1 ), rightFlipperAnchor ( 2.5 , 1 ); // \u56fa\u5b9a\u306e\u67a0 Array < P2Body > frames ; // \u5916\u5468 frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( CreateFrame ( leftFlipperAnchor , rightFlipperAnchor ))); // \u5de6\u4e0a\u306e ( frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( - 25 , - 10 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u53f3\u4e0a\u306e ) frames << world . createStaticLineString ( Vec2 ( 0 , 0 ), LineString ( Range ( 10 , 25 ). map ([ = ]( int32 i ) { return OffsetCircular ( Vec2 ( 0.0 , - 12.0 ), 5.5 , i * 3 _deg ). toVec2 (); }))); // \u30d0\u30f3\u30d1\u30fc Array < P2Body > bumpers ; // \u25cf x3 bumpers << world . createStaticCircle ( Vec2 ( 0 , - 17 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( - 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); bumpers << world . createStaticCircle ( Vec2 ( 2 , - 15 ), 0.5 , P2Material ( 1.0 , 1.0 )); // \u25b2 x2 bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( - 6 , - 5 , - 4 , - 1.5 , - 6 , - 3 ), P2Material ( 1.0 , 0.8 )); bumpers << world . createStaticTriangle ( Vec2 ( 0 , 0 ), Triangle ( 6 , - 5 , 6 , - 3 , 4 , - 1.5 ), P2Material ( 1.0 , 0.8 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc P2Body leftFlipper = world . createDynamicRect ( leftFlipperAnchor , RectF ( 0.0 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint leftJoint = world . createPivotJoint ( frames [ 0 ], leftFlipper , leftFlipperAnchor ). setLimits ( - 20 _deg , 25 _deg ). setLimitEnabled ( true ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc P2Body rightFlipper = world . createDynamicRect ( rightFlipperAnchor , RectF ( - 2.1 , 0.04 , 2.1 , 0.45 ), P2Material ( 0.1 , 0.0 )); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint rightJoint = world . createPivotJoint ( frames [ 0 ], rightFlipper , rightFlipperAnchor ). setLimits ( - 25 _deg , 20 _deg ). setLimitEnabled ( true ); // \u30b9\u30d4\u30ca\u30fc \uff0b const P2Body spinner = world . createDynamicRect ( Vec2 ( - 5.8 , - 12 ), SizeF ( 2.0 , 0.1 ), P2Material ( 0.1 , 0.0 )). addRect ( SizeF ( 0.1 , 2.0 ), P2Material ( 0.01 , 0.0 )); // \u30b9\u30d4\u30ca\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2PivotJoint spinnerJoint = world . createPivotJoint ( frames [ 0 ], spinner , Vec2 ( - 5.8 , - 12 )). setMaxMotorTorque ( 0.05 ). setMotorSpeed ( 0 ). setMotorEnabled ( true ); // \u98a8\u8eca\u306e | frames << world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 4 , - 6 , - 4 , - 4 )); // \u98a8\u8eca\u306e\u7fbd \uff0f const P2Body windmillWing = world . createDynamicRect ( Vec2 ( - 4 , - 6 ), SizeF ( 3.0 , 0.2 ), P2Material ( 0.1 , 0.8 )); // \u98a8\u8eca\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2PivotJoint windmillJoint = world . createPivotJoint ( frames . back (), windmillWing , Vec2 ( - 4 , - 6 )). setMotorSpeed ( 240 _deg ). setMaxMotorTorque ( 10000.0 ). setMotorEnabled ( true ); // \u632f\u308a\u5b50\u306e\u8ef8 const P2Body pendulumbase = world . createStaticDummy ( Vec2 ( 0 , - 19 )); // \u632f\u308a\u5b50 \u25cf P2Body pendulum = world . createDynamicCircle ( Vec2 ( 0 , - 12 ), 0.4 , P2Material ( 0.1 , 1.0 )); // \u632f\u308a\u5b50\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 const P2DistanceJoint pendulumJoint = world . createDistanceJoint ( pendulumbase , Vec2 ( 0 , - 19 ), pendulum , Vec2 ( 0 , - 12 ), 7 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u4e0a\u90e8 \u25cf const P2Body elevatorA = world . createStaticCircle ( Vec2 ( 4 , - 10 ), 0.3 ); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5e8a \uff0d const P2Body elevatorB = world . createRect ( Vec2 ( 4 , - 10 ), SizeF ( 2.0 , 0.2 )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30b8\u30e7\u30a4\u30f3\u30c8 P2SliderJoint elevatorSliderJoint = world . createSliderJoint ( elevatorA , elevatorB , Vec2 ( 4 , - 10 ), Vec2 ( 0 , 1 )). setLimits ( 0.5 , 5.0 ). setLimitEnabled ( true ). setMaxMotorForce ( 10000 ). setMotorSpeed ( - 10 ); // \u30dc\u30fc\u30eb \u3007 const P2Body ball = world . createDynamicCircle ( Vec2 ( - 4 , - 12 ), 0.4 , P2Material ( 0.05 , 0.0 )); const P2BodyID ballID = ball . id (); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u7528\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 Stopwatch sliderStopwatch ( true ); // 2D \u30ab\u30e1\u30e9 const Camera2D camera ( Vec2 ( 0 , - 8 ), 24.0 ); while ( System :: Update ()) { ///////////////////////////////////////// // // \u66f4\u65b0 // // \u632f\u308a\u5b50\u306e\u62b5\u6297 pendulum . applyForce ( Vec2 ( pendulum . getVelocity (). x < 0.0 ? 0.01 : - 0.01 , 0.0 )); if ( sliderStopwatch > 4 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052\u3092\u505c\u6b62 elevatorSliderJoint . setMotorEnabled ( false ); sliderStopwatch . restart (); } else if ( sliderStopwatch > 2 s ) { // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u5dfb\u304d\u4e0a\u3052 elevatorSliderJoint . setMotorEnabled ( true ); } // \u5de6\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c leftFlipper . applyTorque ( KeyLeft . pressed () ? - 80 : 40 ); // \u53f3\u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u64cd\u4f5c rightFlipper . applyTorque ( KeyRight . pressed () ? 80 : - 40 ); // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update ( timeDelta , 24 , 12 ); // \u30dc\u30fc\u30eb\u3068\u63a5\u89e6\u3057\u3066\u3044\u308b\u30dc\u30c7\u30a3\u306e ID \u3092\u53d6\u5f97 Array < P2BodyID > collidedIDs ; for ( auto [ pair , collision ] : world . getCollisions ()) { if ( pair . a == ballID ) { collidedIDs << pair . b ; } else if ( pair . b == ballID ) { collidedIDs << pair . a ; } } ///////////////////////////////////////// // // \u63cf\u753b // // \u63cf\u753b\u7528\u306e Transformer2D const auto transformer = camera . createTransformer (); // \u67a0\u306e\u63cf\u753b for ( const auto & frame : frames ) { frame . draw ( Palette :: Skyblue ); } // \u30b9\u30d4\u30ca\u30fc\u306e\u63cf\u753b spinner . draw ( GetColor ( spinner , collidedIDs )); // \u30d0\u30f3\u30d1\u30fc\u306e\u63cf\u753b for ( const auto & bumper : bumpers ) { bumper . draw ( GetColor ( bumper , collidedIDs )); } // \u98a8\u8eca\u306e\u63cf\u753b windmillWing . draw ( GetColor ( windmillWing , collidedIDs )); // \u632f\u308a\u5b50\u306e\u63cf\u753b pendulum . draw ( GetColor ( pendulum , collidedIDs )); // \u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u306e\u63cf\u753b elevatorA . draw ( GetColor ( elevatorA , collidedIDs )); elevatorB . draw ( GetColor ( elevatorB , collidedIDs )); // \u30dc\u30fc\u30eb\u306e\u63cf\u753b ball . draw ( Palette :: White ); // \u30d5\u30ea\u30c3\u30d1\u30fc\u306e\u63cf\u753b leftFlipper . draw ( Palette :: Orange ); rightFlipper . draw ( Palette :: Orange ); // \u30b8\u30e7\u30a4\u30f3\u30c8\u306e\u53ef\u8996\u5316 leftJoint . draw ( Palette :: Red ); rightJoint . draw ( Palette :: Red ); spinnerJoint . draw ( Palette :: Red ); windmillJoint . draw ( Palette :: Red ); pendulumJoint . draw ( Palette :: Red ); elevatorSliderJoint . draw ( Palette :: Red ); } }","title":"Pinball"},{"location":"sample/game/#emoji-tower","text":"# include <Siv3D.hpp> void Main () { // \u80cc\u666f\u8272\u3092\u8a2d\u5b9a Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 0.9 )); // \u767b\u5834\u3059\u308b\u7d75\u6587\u5b57 const Array < String > emojis = { U \"\ud83d\udc18\" , U \"\ud83d\udc27\" , U \"\ud83d\udc10\" , U \"\ud83d\udc24\" }; // \u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb constexpr double scale = 0.04 ; // \u7d75\u6587\u5b57\u306e\u5f62\u72b6\u60c5\u5831\u3068\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 Array < MultiPolygon > polygons ; Array < Texture > textures ; for ( const auto & emoji : emojis ) { // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u5f62\u72b6\u60c5\u5831\u3092\u4f5c\u6210 polygons << Emoji :: CreateImage ( emoji ). alphaToPolygonsCentered (). simplified ( 0.8 ). scale ( scale ); // \u7d75\u6587\u5b57\u306e\u753b\u50cf\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 textures << Texture ( Emoji ( emoji )); } // \u7269\u7406\u6f14\u7b97\u7528\u306e\u30ef\u30fc\u30eb\u30c9 P2World world ; // \u5e8a \uff0d const P2Body line = world . createStaticLine ( Vec2 ( 0 , 0 ), Line ( - 12 , 0 , 12 , 0 ), P2Material ( 1 , 0.1 , 1.0 )); // \u767b\u5834\u3057\u305f\u7d75\u6587\u5b57\u306e\u30dc\u30c7\u30a3 Array < P2Body > bodies ; // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u30c6\u30fc\u30d6\u30eb HashTable < P2BodyID , size_t > table ; // 2D \u30ab\u30e1\u30e9 Camera2D camera ( Vec2 ( 0 , - 8 ), 20 ); // \u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 size_t index = Random ( polygons . size () - 1 ); while ( System :: Update ()) { // \u7269\u7406\u6f14\u7b97\u30ef\u30fc\u30eb\u30c9\u306e\u66f4\u65b0 world . update (); // 2D \u30ab\u30e1\u30e9\u306e\u64cd\u4f5c\u3068\u66f4\u65b0 camera . update (); // Transformer2D \u306e\u4f5c\u6210 auto t = camera . createTransformer (); // \u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30dc\u30c7\u30a3\u3092\u8ffd\u52a0 bodies << world . createPolygons ( Cursor :: PosF (), polygons [ index ], P2Material ( 0.1 , 0.0 , 1.0 )); // \u30dc\u30c7\u30a3 ID \u3068\u7d75\u6587\u5b57\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5bfe\u5fdc\u3092\u8ffd\u52a0 table . emplace ( bodies . back (). id (), std :: exchange ( index , Random ( polygons . size () - 1 ))); } // \u3059\u3079\u3066\u306e\u30dc\u30c7\u30a3\u3092\u63cf\u753b for ( const auto & body : bodies ) { textures [ table [ body . id ()]]. scaled ( scale ). rotated ( body . getAngle ()). drawAt ( body . getPos ()); } // \u5e8a\u3092\u63cf\u753b line . draw ( Palette :: Green ); // \u73fe\u5728\u64cd\u4f5c\u3067\u304d\u308b\u7d75\u6587\u5b57\u3092\u63cf\u753b textures [ index ]. scaled ( scale ). drawAt ( Cursor :: PosF (), AlphaF ( 0.5 + Periodic :: Sine0_1 ( 1 s ) * 0.5 )); // 2D \u30ab\u30e1\u30e9\u64cd\u4f5c\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8868\u793a camera . draw ( Palette :: Orange ); } }","title":"Emoji Tower"},{"location":"sample/game/#_1","text":"# include <Siv3D.hpp> // \u6575\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\u95a2\u6570 Vec2 GenerateEnemy () { return RandomVec2 ({ 50 , 750 }, - 20 ); } void Main () { Scene :: SetBackground ( ColorF ( 0.1 , 0.2 , 0.7 )); const Font font ( 30 ); // \u81ea\u6a5f\u30c6\u30af\u30b9\u30c1\u30e3 const Texture playerTexture ( Emoji ( U \"\ud83e\udd16\" )); // \u6575\u30c6\u30af\u30b9\u30c1\u30e3 const Texture enemyTexture ( Emoji ( U \"\ud83d\udc7e\" )); // \u81ea\u6a5f Vec2 playerPos ( 400 , 500 ); // \u6575 Array < Vec2 > enemies = { GenerateEnemy () }; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > playerBullets ; // \u6575\u30b7\u30e7\u30c3\u30c8 Array < Vec2 > enemyBullets ; // \u81ea\u6a5f\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerSpeed = 550.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double playerBulletSpeed = 500.0 ; // \u6575\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemySpeed = 100.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30b9\u30d4\u30fc\u30c9 constexpr double enemyBulletSpeed = 300.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\u306e\u521d\u671f\u5024\uff08\u79d2\uff09 double initialEnemySpawnTime = 2.0 ; // \u6575\u306e\u767a\u751f\u9593\u9694\uff08\u79d2\uff09 double enemySpawnTime = initialEnemySpawnTime ; // \u6575\u306e\u767a\u751f\u9593\u9694\u30bf\u30a4\u30de\u30fc double enemySpawnTimer = 0.0 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double playerShotCoolTime = 0.1 ; // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double playerShotTimer = 0.0 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\uff08\u79d2\uff09 constexpr double enemyShotCoolTime = 0.90 ; // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u30af\u30fc\u30eb\u30bf\u30a4\u30e0\u30bf\u30a4\u30de\u30fc double enemyShotTimer = 0.0 ; Effect effect ; // \u30cf\u30a4\u30b9\u30b3\u30a2 int32 highScore = 0 ; // \u73fe\u5728\u306e\u30b9\u30b3\u30a2 int32 score = 0 ; while ( System :: Update ()) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u5224\u5b9a bool gameover = false ; const double deltaTime = Scene :: DeltaTime (); enemySpawnTimer += deltaTime ; playerShotTimer = Min ( playerShotTimer + deltaTime , playerShotCoolTime ); enemyShotTimer += deltaTime ; // \u6575\u306e\u767a\u751f while ( enemySpawnTimer > enemySpawnTime ) { enemySpawnTimer -= enemySpawnTime ; enemySpawnTime = Max ( enemySpawnTime * 0.95 , 0.3 ); enemies << GenerateEnemy (); } //------------------- // // \u79fb\u52d5 // // \u81ea\u6a5f\u306e\u79fb\u52d5 const Vec2 move = Vec2 ( KeyRight . pressed () - KeyLeft . pressed (), KeyDown . pressed () - KeyUp . pressed ()) . setLength ( deltaTime * playerSpeed * ( KeyShift . pressed () ? 0.5 : 1.0 )); playerPos . moveBy ( move ). clamp ( Scene :: Rect ()); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( playerShotTimer >= playerShotCoolTime ) { playerShotTimer = 0.0 ; playerBullets << playerPos . movedBy ( 0 , - 50 ); } // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & playerBullet : playerBullets ) { playerBullet . y += deltaTime * - playerBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 playerBullets . remove_if ([]( const Vec2 & b ) { return b . y < - 40 ; }); // \u6575\u306e\u79fb\u52d5 for ( auto & enemy : enemies ) { enemy . y += deltaTime * enemySpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u6575\u306f\u6d88\u6ec5 enemies . remove_if ([ & ]( const Vec2 & e ) { if ( e . y > 700 ) { // \u6575\u304c\u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc gameover = true ; return true ; } else { return false ; } }); // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u767a\u5c04 if ( enemyShotTimer >= enemyShotCoolTime ) { enemyShotTimer -= enemyShotCoolTime ; for ( const auto & enemy : enemies ) { enemyBullets << enemy ; } } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u79fb\u52d5 for ( auto & enemyBullet : enemyBullets ) { enemyBullet . y += deltaTime * enemyBulletSpeed ; } // \u753b\u9762\u5916\u306b\u51fa\u305f\u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306f\u6d88\u6ec5 enemyBullets . remove_if ([]( const Vec2 & b ) { return b . y > 700 ; }); //------------------- // // \u653b\u6483\u5224\u5b9a // // \u6575 vs \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8 for ( auto itEnemy = enemies . begin (); itEnemy != enemies . end ();) { const Circle enemyCircle ( * itEnemy , 40 ); bool skip = false ; for ( auto itBullet = playerBullets . begin (); itBullet != playerBullets . end ();) { if ( enemyCircle . intersects ( * itBullet )) { // \u7206\u767a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u8ffd\u52a0 effect . add ([ pos = * itEnemy ]( double t ) { const double t2 = ( 1.0 - t ); Circle ( pos , 10 + t * 70 ). drawFrame ( 20 * t2 , AlphaF ( t2 * 0.5 )); return t < 1.0 ; }); itEnemy = enemies . erase ( itEnemy ); playerBullets . erase ( itBullet ); ++ score ; skip = true ; break ; } ++ itBullet ; } if ( skip ) { continue ; } ++ itEnemy ; } // \u6575\u30b7\u30e7\u30c3\u30c8 vs \u81ea\u6a5f for ( const auto & enemyBullet : enemyBullets ) { // \u6575\u30b7\u30e7\u30c3\u30c8\u304c playerPos \u306e 20 \u30d4\u30af\u30bb\u30eb\u4ee5\u5185\u306b\u63a5\u8fd1\u3057\u305f\u3089 if ( enemyBullet . distanceFrom ( playerPos ) <= 20 ) { // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306b\u3059\u308b gameover = true ; break ; } } // \u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\u306a\u3089\u30ea\u30bb\u30c3\u30c8 if ( gameover ) { playerPos = Vec2 ( 400 , 500 ); enemies . clear (); playerBullets . clear (); enemyBullets . clear (); enemySpawnTime = initialEnemySpawnTime ; highScore = Max ( highScore , score ); score = 0 ; } //------------------- // // \u63cf\u753b // // \u80cc\u666f\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 for ( auto i : step ( 12 )) { const double a = Periodic :: Sine0_1 ( 2 s , Scene :: Time () - ( 2.0 / 12 * i )); Rect ( 0 , i * 50 , 800 , 50 ). draw ( ColorF ( 1.0 , a * 0.2 )); } // \u81ea\u6a5f\u306e\u63cf\u753b playerTexture . resized ( 80 ). flipped (). drawAt ( playerPos ); // \u81ea\u6a5f\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & playerBullet : playerBullets ) { Circle ( playerBullet , 8 ). draw ( Palette :: Orange ); } // \u6575\u306e\u63cf\u753b for ( const auto & enemy : enemies ) { enemyTexture . resized ( 60 ). drawAt ( enemy ); } // \u6575\u30b7\u30e7\u30c3\u30c8\u306e\u63cf\u753b for ( const auto & enemyBullet : enemyBullets ) { Circle ( enemyBullet , 4 ). draw ( Palette :: White ); } effect . update (); // \u30b9\u30b3\u30a2\u306e\u63cf\u753b font ( U \"{} [{}]\" _fmt ( score , highScore )). draw ( Arg :: bottomRight ( 780 , 580 )); } }","title":"\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30b2\u30fc\u30e0"},{"location":"sample/visual/","text":"Visual effect \u00b6 \u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b \u00b6 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } }","title":"Visual effect"},{"location":"sample/visual/#visual-effect","text":"","title":"Visual effect"},{"location":"sample/visual/#_1","text":"# include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 1.0 , 0.9 , 0.7 )); constexpr Vec2 pos ( 220 , 60 ); const Image image ( U \"example/siv3d-kun.png\" ); const Texture texture ( image ); // \u753b\u50cf\u306e\u8f2a\u90ed\u304b\u3089 Polygon \u3092\u4f5c\u6210 const Polygon polygon = image . alphaToPolygon ( 160 , false ); // \u51f8\u5305\u3092\u8a08\u7b97 const Polygon convexHull = polygon . calculateConvexHull (); // Polygon \u3092\u592a\u3089\u305b\u308b const Polygon largeConvex = convexHull . calculateBuffer ( 20 ); // \u5f71\u7528\u306e\u753b\u50cf Image shadowImage ( Scene :: Size (), Color ( 255 , 0 )); // \u5f71\u306e\u3082\u3068\u306b\u306a\u308b\u56f3\u5f62\u3092\u66f8\u304d\u8fbc\u3080 convexHull . calculateBuffer ( 10 ). movedBy ( pos + Vec2 ( 10 , 10 )). overwrite ( shadowImage , Color ( 255 )); // \u305d\u308c\u3092\u307c\u304b\u3057\u305f\u3082\u306e\u3092\u5f71\u7528\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3059\u308b const Texture shadow ( shadowImage . gaussianBlurred ( 40 , 40 )); while ( System :: Update ()) { shadow . draw ( ColorF ( 0.0 , 0.5 )); largeConvex . draw ( pos , ColorF ( 0.96 , 0.98 , 1.0 )); texture . draw ( pos ); } }","title":"\u7d19\u304b\u3089\u5207\u308a\u629c\u3044\u305f\u3088\u3046\u306a\u63cf\u753b"},{"location":"store/store/","text":"Siv3D Store \u00b6 LINE sticker \u00b6 Siv3D-kun LINE stickers","title":"Siv3D Store"},{"location":"store/store/#siv3d-store","text":"","title":"Siv3D Store"},{"location":"store/store/#line-sticker","text":"Siv3D-kun LINE stickers","title":"LINE sticker"},{"location":"tutorial/2d-intersection/","text":"4. 2D intersection \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc \u00b6 \u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } } 4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af \u00b6 \u30af\u30ea\u30c3\u30af \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } } \u62bc\u3055\u308c\u3066\u3044\u308b \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } } 4.3 \u56f3\u5f62\u306e\u4ea4\u5dee \u00b6 2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080 \u00b6 \u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } 4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9 \u00b6 \u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb \u00b6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4. 2D intersection"},{"location":"tutorial/2d-intersection/#4-2d-intersection","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb vs \u56f3\u5f62\u3084\u3001\u56f3\u5f62 vs \u56f3\u5f62\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"4. 2D intersection"},{"location":"tutorial/2d-intersection/#41","text":"\u3042\u308b\u56f3\u5f62 g \u306e\u9818\u57df\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u3001 g . mouseOver () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { if ( circle . mouseOver ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272 circle . draw ( Palette :: Skyblue ); } else { // \u91cd\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( Palette :: Gray ); } } } \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6761\u4ef6\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3068\u3055\u3089\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . mouseOver () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"4.1 \u30de\u30a6\u30b9\u30aa\u30fc\u30d0\u30fc"},{"location":"tutorial/2d-intersection/#42","text":"","title":"4.2 \u56f3\u5f62\u306e\u30af\u30ea\u30c3\u30af"},{"location":"tutorial/2d-intersection/#_1","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 g . leftClicked () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u306f\u3001\u63a5\u89e6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3001\u6700\u521d\u306b\u63a5\u89e6\u3057\u305f\u77ac\u9593\u306e\u307f\u3092\u300c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u300d\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u3092\u62bc\u3057\u7d9a\u3051\u3066\u3044\u3066\u3082\u53cd\u5fdc\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); Print << count ; // \u5186\u304c\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( circle . leftClicked ()) { ++ count ; } circle . draw ( Palette :: Gray ); } }","title":"\u30af\u30ea\u30c3\u30af"},{"location":"tutorial/2d-intersection/#_2","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5de6\u30af\u30ea\u30c3\u30af\uff08\u307e\u305f\u306f\u30bf\u30c3\u30c1\uff09\u3067\u62bc\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u3001 g . leftPressed () \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 leftClicked () \u3068\u7570\u306a\u308a\u3001\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308c\u3070\u3001\u6700\u521d\u306e\u63a5\u89e6\u4ee5\u964d\u3082\u3064\u306d\u306b\u300c\u62bc\u3055\u308c\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Circle circle ( Scene :: Center (), 100 ); while ( System :: Update ()) { // \u5186\u304c\u62bc\u3055\u308c\u3066\u3044\u308c\u3070\u6c34\u8272\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7070\u8272 circle . draw ( circle . leftPressed () ? Palette :: Skyblue : Palette :: Gray ); } }","title":"\u62bc\u3055\u308c\u3066\u3044\u308b"},{"location":"tutorial/2d-intersection/#43","text":"2 \u3064\u306e\u56f3\u5f62 g \u3068 h \u304c\u4ea4\u5dee\u3057\u3066\u3044\u308b\u304b\u306f\u3001 g . intersects ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . intersects ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } } Info \u6955\u5186\u3069\u3046\u3057\u306a\u3069\u3001\u4e00\u90e8\u306e\u56f3\u5f62\u3067\u306f\u4ea4\u5dee\u5224\u5b9a\u304c\u672a\u5b9f\u88c5\u306e\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u72b6\u6cc1\u306f Intersection.hpp \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002","title":"4.3 \u56f3\u5f62\u306e\u4ea4\u5dee"},{"location":"tutorial/2d-intersection/#44","text":"\u3042\u308b\u56f3\u5f62 g \u304c\u5225\u306e\u56f3\u5f62 h \u3092\u5b8c\u5168\u306b\u5185\u5074\u306b\u542b\u3093\u3067\u3044\u308b\u304b\u306f\u3001 g . contains ( h ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u5186\u304c\u9577\u65b9\u5f62\u3084\u661f\u306a\u3069\u306e\u56f3\u5f62\u306e\u5185\u90e8\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u305d\u306e\u56f3\u5f62\u306e\u8272\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); const Polygon star = Shape2D :: Star ( 200 , Vec2 ( 550 , 300 )); while ( System :: Update ()) { const Circle c ( Cursor :: Pos (), 30 ); rect . draw ( rect . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); circle . draw ( circle . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); star . draw ( star . contains ( c ) ? Palette :: Skyblue : Palette :: Gray ); c . draw ( Palette :: Seagreen ); } }","title":"4.4 \u56f3\u5f62\u3092\u5185\u5074\u306b\u542b\u3080"},{"location":"tutorial/2d-intersection/#45","text":"\u3042\u308b\u56f3\u5f62 g \u3068 h \u306e\u8a73\u7d30\u306a\u4ea4\u5dee\u60c5\u5831\u3092 g . intersectsAt ( h ) \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u56f3\u5f62\u304c\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr Rect rect ( 100 , 50 , 200 , 100 ); constexpr Circle circle ( 200 , 400 , 100 ); constexpr Triangle triangle ( Vec2 ( 500 , 100 ), Vec2 ( 700 , 500 ), Vec2 ( 400 , 400 )); while ( System :: Update ()) { const Line line ( Scene :: Center (), Cursor :: Pos ()); // rect \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = rect . intersectsAt ( line )) { rect . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { rect . draw ( Palette :: Gray ); } // circle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = circle . intersectsAt ( line )) { circle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { circle . draw ( Palette :: Gray ); } // triangle \u3068 line \u306e\u4ea4\u5dee\u60c5\u5831\u3092\u53d6\u5f97 if ( const auto points = triangle . intersectsAt ( line )) { triangle . draw ( Palette :: Skyblue ); // \u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u306b\u8d64\u3044\u5186\u3092\u8868\u793a for ( const auto & point : points . value ()) { Circle ( point , 4 ). draw ( Palette :: Red ); } } else // \u4ea4\u5dee\u3057\u306a\u3044 { triangle . draw ( Palette :: Gray ); } line . draw ( 2 , Palette :: Seagreen ); } } Info .intersectsAt () \u306e\u623b\u308a\u5024 points \u306f Optional < Array < Vec2 >> \u578b\u3067\u3059\u3002\u4ea4\u5dee\u3059\u308b\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b if ( points ) \u3067 Optional \u304c\u5024\u3092\u6301\u3064\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30022 \u3064\u306e\u56f3\u5f62\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408 Optional \u306f\u5024\u3092\u6301\u3061\u307e\u305b\u3093\u30022 \u3064\u306e\u7dda\u5206\u304c\u3074\u3063\u305f\u308a\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001 Optional \u304c\u5024\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u306e\u5024\u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002","title":"4.5 \u7dda\u5206\u3068\u4ea4\u5dee\u3059\u308b\u70b9"},{"location":"tutorial/2d-intersection/#46","text":"\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u66f4\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Cursor :: RequestStyle () \u3092\u901a\u3057\u3066\u3001\u5909\u66f4\u3057\u305f\u3044\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u307e\u3059\u3002\u624b\u306e\u5f62\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hand \u3092\u3001\u30ab\u30fc\u30bd\u30eb\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u3044\u5834\u5408\u306f CursorStyle :: Hidden \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u305d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u306b\u308f\u305f\u308a\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u7d9a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 CursorStyle \u30ab\u30fc\u30bd\u30eb\u306e\u5f62\u72b6 CursorStyle::Arrow \u77e2\u5370\uff08\u901a\u5e38\uff09 CursorStyle::Ibeam I \u30de\u30fc\u30af CursorStyle::Cross \u5341\u5b57\u306e\u30de\u30fc\u30af CursorStyle::Hand \u624b\u306e\u30a2\u30a4\u30b3\u30f3 CursorStyle::NotAllowed \u7981\u6b62\u306e\u30de\u30fc\u30af CursorStyle::ResizeUpDown \u4e0a\u4e0b\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::ResizeLeftRight \u5de6\u53f3\u306e\u30ea\u30b5\u30a4\u30ba CursorStyle::Hidden \u975e\u8868\u793a CursorStyle::Default Arrow \u3068\u540c\u3058 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); constexpr ColorF buttonColor ( 0.2 , 0.6 , 1.0 ); constexpr Circle button ( 400 , 300 , 60 ); Transition press ( 0.05 s , 0.05 s ); while ( System :: Update ()) { const bool mouseOver = button . mouseOver (); // \u5186\u306e\u4e0a\u306b\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u304c\u3042\u308c\u3070 if ( mouseOver ) { // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u624b\u306e\u5f62\u306b Cursor :: RequestStyle ( CursorStyle :: Hand ); } press . update ( button . leftPressed ()); const double t = press . value (); button . movedBy ( Vec2 ( 0 , 0 ). lerp ( Vec2 ( 0 , 4 ), t )) . drawShadow ( Vec2 ( 0 , 6 ). lerp ( Vec2 ( 0 , 1 ), t ), 12 - t * 7 , 5 - t * 4 ) . draw ( buttonColor ); } }","title":"4.6 \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u30b9\u30bf\u30a4\u30eb"},{"location":"tutorial/2d-renderstates/","text":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8 \u00b6 15.1 \u00b6","title":"15. 2D render states"},{"location":"tutorial/2d-renderstates/#15-2d","text":"","title":"15. 2D \u30ec\u30f3\u30c0\u30fc\u30b9\u30c6\u30fc\u30c8"},{"location":"tutorial/2d-renderstates/#151","text":"","title":"15.1"},{"location":"tutorial/animation/","text":"3. Animation \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002 3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Scene::Time() \u00b6 Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Scene::Center() \u00b6 \u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } } Scene::DeltaTime() \u00b6 Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } } step \u00b6 Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++n) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } } OffsetCircular \u00b6 \u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } } 3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1 \u00b6 \u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8 \u00b6 Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002 MouseL.down() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } } Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b \u00b6 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } } 3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3 \u00b6 Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Periodic::Square0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } } Periodic::Tringle0_1() \u00b6 0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Tringle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sine0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Sawtooth0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } } Periodic::Jump0_1() \u00b6 \u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } } 3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 \u00b6 Transition \u00b6 \u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 MouseL.pressed() \u00b6 \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } 3.5 \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 Min, Max \u00b6 Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 \u7dda\u5f62\u88dc\u9593 \u00b6 \u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0 \u00b6 0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"3. Animation"},{"location":"tutorial/animation/#3-animation","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u300c\u52d5\u304d\u300d\u306e\u8868\u73fe\u306b\u5f79\u7acb\u3064 Siv3D \u306e\u6a5f\u80fd\u3092\u5b66\u3073\u307e\u3059\u3002","title":"3. Animation"},{"location":"tutorial/animation/#31","text":"","title":"3.1 \u7d4c\u904e\u6642\u9593\u3092\u4f7f\u3063\u305f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorial/animation/#scenetime","text":"Scene :: Time () \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8d77\u52d5\u3055\u308c\u3066\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002","title":"Scene::Time()"},{"location":"tutorial/animation/#scenecenter","text":"\u753b\u9762\u306e\u4e2d\u5fc3\u5ea7\u6a19\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u753b\u9762\u306e\u30b5\u30a4\u30ba\u304c 800x600 \u306e\u3068\u304d\u306b\u306f Point ( 400 , 300 ) \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); // \u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( Scene :: Center (), t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"Scene::Center()"},{"location":"tutorial/animation/#scenedeltatime","text":"Scene :: DeltaTime () \u306f\u3001\u76f4\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593 (\u79d2) \u3092 double \u578b\u306e\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002 Scene :: Time () \u3092\u4f7f\u308f\u305a\u306b\u3001\u3053\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); double r = 0.0 ; while ( System :: Update ()) { // \u7d4c\u904e\u6642\u9593\u5206\u3060\u3051\u5927\u304d\u304f\u3059\u308b r += Scene :: DeltaTime () * 50 ; Circle ( Scene :: Center (), r ). draw ( ColorF ( 0.25 )); } }","title":"Scene::DeltaTime()"},{"location":"tutorial/animation/#step","text":"Siv3D \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3001\u30eb\u30fc\u30d7\u3092\u77ed\u304f\u66f8\u3051\u308b\u6a5f\u80fd\u3067\u3059\u3002 for ( auto i : step ( N )) \u306f for ( int i = 0 ; i < N; ++n) \u3068\u540c\u3058\u50cd\u304d\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u9577\u65b9\u5f62\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u6a2a\u306b\u5927\u304d\u304f\u306a\u308b RectF ( - 50 * i , i * 50 , t * 100 , 50 ). draw ( ColorF ( 0.25 )); } } }","title":"step"},{"location":"tutorial/animation/#offsetcircular","text":"\u5186\u5468\u306b\u6cbf\u3063\u305f\u52d5\u304d\u3092\u3064\u304f\u308b\u306e\u306b\u6700\u9069\u306a\u5186\u5ea7\u6a19\u30af\u30e9\u30b9\u3067\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8 offset \u3068\u5186\u5ea7\u6a19\u7cfb\u306e\u52d5\u5f84\u5ea7\u6a19 r , \u89d2\u5ea6\u5ea7\u6a19 \u03b8 ( theta ) \u306e 3 \u3064\u306e\u8981\u7d20\u3067\u4f4d\u7f6e\u3092\u8868\u73fe\u3057\u307e\u3059\u3002\u30b7\u30fc\u30f3\u4e0a\u306e\u5ea7\u6a19 offset \u3092\u4e2d\u5fc3\u3068\u3059\u308b\u534a\u5f84 r \u306e\u5186\u3092\u8003\u3048\u3001\u305d\u306e\u5186\u5468\u4e0a\u3067 12 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b theta \u306e\u4f4d\u7f6e\u304c OffsetCircular ( offset , r , theta ) \u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); // \u4e2d\u5fc3\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8 const Vec2 center = Scene :: Center (); // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u52d5\u5f84\u5ea7\u6a19 constexpr double r = 200.0 ; while ( System :: Update ()) { const double t = Scene :: Time (); for ( auto i : step ( 12 )) { // \u5186\u5ea7\u6a19\u7cfb\u306b\u304a\u3051\u308b\u89d2\u5ea6\u5ea7\u6a19 const double theta = i * 30 _deg + t * 30 _deg ; const Vec2 pos = OffsetCircular ( center , r , theta ); Circle ( pos , 20 ). draw ( ColorF ( 0.25 )); } } }","title":"OffsetCircular"},{"location":"tutorial/animation/#32","text":"\u7d4c\u904e\u6642\u9593\u306e\u8a08\u6e2c\u3084\u30ea\u30bb\u30c3\u30c8\u3092\u4fbf\u5229\u306b\u884c\u3048\u308b Stopwatch \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002","title":"3.2 \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1"},{"location":"tutorial/animation/#stopwatch","text":"Stopwatch \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b true \u3092\u6e21\u3059\u3068\u3001\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Stopwatch :: sF () \u306f\u305d\u306e\u6642\u70b9\u3067\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002 Stopwatch :: restart () \u3059\u308b\u3068\u3001\u7d4c\u904e\u6642\u9593\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c\u3092\u958b\u59cb\uff08\u30ea\u30b9\u30bf\u30fc\u30c8\uff09\u3057\u307e\u3059\u3002","title":"Stopwatch \u306e\u7d4c\u904e\u6642\u9593\u3068\u30ea\u30b9\u30bf\u30fc\u30c8"},{"location":"tutorial/animation/#mouseldown","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\uff09\u3055\u308c\u305f\u304b\u3092\u3001 if ( MouseL . down ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u753b\u9762\u4e0a\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306b Stopwatch \u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { // \u3082\u3057\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u518d\u3073 0 \u304b\u3089\u8a08\u6e2c stopwatch . restart (); } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); // \u30b7\u30fc\u30f3\u306e\u4e2d\u5fc3\u306e\u5186\u306e\u534a\u5f84\u304c\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3063\u3066\u5927\u304d\u304f\u306a\u308b Circle ( center , t * 50 ). draw ( ColorF ( 0.25 )); } }","title":"MouseL.down()"},{"location":"tutorial/animation/#stopwatch_1","text":"\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u304b\u3069\u3046\u304b\u306f if ( Stopwatch :: isRunning ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u8a08\u6e2c\u3092\u4e00\u6642\u505c\u6b62\u3059\u308b\u306b\u306f Stopwatch :: pause () , \u4e00\u6642\u505c\u6b62\u3092\u89e3\u9664\u3057\u3066\u8a08\u6e2c\u3092\u518d\u958b\u3059\u308b\u306b\u306f Stopwatch :: resume () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( Palette :: White ); const Vec2 center = Scene :: Center (); // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\uff08\u4f5c\u6210\u3068\u540c\u6642\u306b\u8a08\u6e2c\u958b\u59cb\uff09 Stopwatch stopwatch ( true ); while ( System :: Update ()) { if ( MouseL . down ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u8a08\u6e2c\u4e2d\u306a\u3089 if ( stopwatch . isRunning ()) { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u4e00\u6642\u505c\u6b62 stopwatch . pause (); } else // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u304c\u4e00\u6642\u505c\u6b62\u4e2d\u306a\u3089 { // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u3092\u518d\u958b stopwatch . resume (); } } // \u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 double \u578b\u3067\u53d6\u5f97 const double t = stopwatch . sF (); Circle ( center , 120 ). drawArc ( t * 140 _deg , 240 _deg , 60 , 0 , ColorF ( 0.4 )); Circle ( center , 180 ). drawArc ( t * 90 _deg , 160 _deg , 60 , 0 , ColorF ( 0.6 )); Circle ( center , 240 ). drawArc ( t * 50 _deg , 120 _deg , 60 , 0 , ColorF ( 0.8 )); } }","title":"Stopwatch \u306e\u4e00\u6642\u505c\u6b62\u3068\u518d\u958b"},{"location":"tutorial/animation/#33","text":"Siv3D \u3067\u5468\u671f\u7684\u306b\u79fb\u52d5\u30fb\u70b9\u6ec5\u30fb\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u3088\u3046\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001 Periodic :: \u540d\u524d\u7a7a\u9593\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u7fa4\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002","title":"3.3 \u5468\u671f\u7684\u306a\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorial/animation/#periodicsquare0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067 0.0 \u304b 1.0 \u3092\u4ea4\u4e92\u306b\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u5468\u671f\u306f 2 s (2 \u79d2) \u3084 0 . 5 s (0.5 \u79d2) \u306e\u3088\u3046\u306b\u6642\u9593\u30ea\u30c6\u30e9\u30eb\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u5468\u671f\u306e\u524d\u534a\u3067\u306f 1.0 \u3092\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f 0.0 \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\uff081 \u79d2\u70b9\u706f\u30011 \u79d2\u6d88\u706f\uff09\u3067\u660e\u6ec5\u3092\u7e70\u308a\u8fd4\u3059 if ( Periodic :: Square0_1 ( 2 s )) { Circle ( Scene :: Center (), 200 ). draw (); } } }","title":"Periodic::Square0_1()"},{"location":"tutorial/animation/#periodictringle0_1","text":"0.0 \u304b\u3089\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u3066 1.0 \u306b\u3001\u305d\u3057\u3066\u4e00\u5b9a\u306e\u901f\u5ea6\u3067\u5c0f\u3055\u304f\u306a\u3063\u3066 0.0 \u306b\u3001\u3068\u3044\u3046\u5909\u5316\u3092\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u4e00\u5b9a\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Tringle0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Tringle0_1()"},{"location":"tutorial/animation/#periodicsine0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0\uff5e1.0 \u306e\u7bc4\u56f2\u3067\u6b63\u5f26\u6ce2\uff08\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\uff09\u3092\u63cf\u304f\u6570\u5024\u306e\u5909\u5316\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b5\u30a4\u30f3\u30ab\u30fc\u30d6\u306e\u901f\u5ea6\u3067\u306e\u5de6\u53f3\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sine0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sine0_1()"},{"location":"tutorial/animation/#periodicsawtooth0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u30010.0 \u2192 1.0 \u3078\u306e\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u5de6 \u2192 \u53f3\u3078\u306e\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double x = 50 + 700 * Periodic :: Sawtooth0_1 ( 2 s ); Circle ( x , 300 , 50 ). draw (); } }","title":"Periodic::Sawtooth0_1()"},{"location":"tutorial/animation/#periodicjump0_1","text":"\u6307\u5b9a\u3057\u305f\u5468\u671f\u3067\u3001\u5730\u9762\u304b\u3089\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3068\u304d\u306e\u901f\u5ea6\u306e\u3088\u3046\u306a\u6570\u5024\u5909\u5316\u3092\u7e70\u308a\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); while ( System :: Update ()) { // 2 \u79d2\u5468\u671f\u3067\u3001\u30b8\u30e3\u30f3\u30d7\u306e\u3088\u3046\u306a\u79fb\u52d5\u3092\u7e70\u308a\u8fd4\u3059 const double h = 500 * Periodic :: Jump0_1 ( 2 s ); Circle ( 400 , 550 - h , 50 ). draw (); } }","title":"Periodic::Jump0_1()"},{"location":"tutorial/animation/#34","text":"","title":"3.4 \u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3"},{"location":"tutorial/animation/#transition","text":"\u5024\u304c\u5c11\u3057\u305a\u3064\u5927\u304d\u304f\u306a\u3063\u3066\u6700\u5927\u5024\u306b\u5230\u9054\u3059\u308b\u3002\u305d\u3053\u304b\u3089\u5f90\u3005\u306b\u5c0f\u3055\u304f\u306a\u3063\u3066\u6700\u5c0f\u5024\u306b\u623b\u308b\u3001\u3068\u3044\u3063\u305f\u6319\u52d5\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3068\u304d\u306b\u306f Transition \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 Transition \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u6700\u5927\u5024\u306b\u5897\u52a0\u3059\u308b\u6240\u8981\u6642\u9593\u3068\u3001\u6700\u5927\u5024\u304b\u3089\u6700\u5c0f\u5024\u306b\u6e1b\u5c11\u3059\u308b\u6240\u8981\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3042\u3068\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3001 Transition :: update () \u306b\u3001\u5897\u52a0\u306e\u5834\u5408\u306f true \u3092\u3001\u6e1b\u5c11\u306e\u5834\u5408\u306f false \u3092\u6e21\u305b\u3070\u3001\u8a2d\u5b9a\u3055\u308c\u305f\u901f\u5ea6\u3067\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 Transitgion :: value () \u3067\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Transition"},{"location":"tutorial/animation/#mouselpressed","text":"\u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\uff08\u30bf\u30c3\u30c1\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u5834\u5408\u306f\u753b\u9762\u304c\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\uff09\u304b\u3092\u3001 if ( MouseL . pressed ()) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u308b\u3068\u6247\u5f62\u304c\u5927\u304d\u304f\u306a\u308a\u3001\u96e2\u3055\u308c\u3066\u3044\u308b\u3068\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { if ( MouseL . pressed ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0 transition . update ( true ); } else { // \u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( false ); } const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } } MouseL . pressed () \u306f bool \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); // 2.0 \u79d2\u304b\u3051\u3066 0.0 \u304b\u3089 1.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u5897\u52a0\u3057\u3001 // 0.5 \u79d2\u304b\u3051\u3066 1.0 \u304b\u3089 0.0 \u306b\u306a\u308b\u901f\u5ea6\u3067\u6e1b\u5c11\u3059\u308b\u30c8\u30e9\u30f3\u30b8\u30b7\u30e7\u30f3 Transition transition ( 2.0 s , 0.5 s ); while ( System :: Update ()) { // \u30de\u30a6\u30b9\u306e\u5de6\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u3044\u305f\u3089\u5897\u52a0\u3001\u62bc\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6e1b\u5c11 transition . update ( MouseL . pressed ()); const double t = transition . value (); Circle ( Scene :: Center (), 200 ). drawPie ( 0 _deg , 360 _deg * t ); } }","title":"MouseL.pressed()"},{"location":"tutorial/animation/#35","text":"","title":"3.5 \u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"tutorial/animation/#min-max","text":"Min () \u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u306e\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Max () \u95a2\u6570\u306f\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"Min, Max"},{"location":"tutorial/animation/#_1","text":"\u3042\u308b\u30d9\u30af\u30c8\u30eb A \u304b\u3089\u5225\u306e\u30d9\u30af\u30c8\u30eb B \u3078\u306e\u7dda\u5f62\u88dc\u9593\u306f A . lerp ( B , t ) \u3067\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002A \u3068 B \u306e\u4e2d\u9593\u306e\u30d9\u30af\u30c8\u30eb\u306f A . lerp ( B , 0 . 5 ) \u3067\u8a08\u7b97\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , t ); Circle ( pos , 40 ). draw (); } }","title":"\u7dda\u5f62\u88dc\u9593"},{"location":"tutorial/animation/#_2","text":"0.0 \u304b\u3089 1.0 \u306b\u4e00\u5b9a\u306e\u5272\u5408\u3067\u5024\u3092\u5897\u52a0\u3055\u305b\u308b\u3060\u3051\u3067\u306f\u5358\u8abf\u306a\u52d5\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306f\u3058\u3081\u306f\u5c11\u3057\u305a\u3064\u52a0\u901f\u3057\u3001\u30b4\u30fc\u30eb\u306b\u8fd1\u3065\u304f\u3068\u3086\u3063\u304f\u308a\u306b\u306a\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u3001\u901f\u5ea6\u306b\u5909\u5316\u3092\u4e0e\u3048\u308b\u3068\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u8996\u899a\u52b9\u679c\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u30020.0 \u2192 1.0 \u306e\u5358\u8abf\u5897\u52a0\u3092\u3001\u7279\u5fb4\u7684\u306a\u30ab\u30fc\u30d6\u306b\u5909\u63db\u3067\u304d\u308b \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570 \u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u5370\u8c61\u3092\u6539\u5584\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.25 )); constexpr Vec2 begin ( 100 , 300 ); constexpr Vec2 end ( 700 , 300 ); Stopwatch stopwatch ; while ( System :: Update ()) { if ( MouseL . down ()) { stopwatch . restart (); } // \u79fb\u52d5\u306e\u5272\u5408 0.0\uff5e1.0 const double t = Min ( stopwatch . sF (), 1.0 ); // \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528 const double e = EaseInOutExpo ( t ); // begin \u3068 end \u306e\u7dda\u5f62\u88dc\u9593 const Vec2 pos = begin . lerp ( end , e ); Circle ( pos , 40 ). draw (); } } \u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u306f\u5168\u90e8\u3067\u7d04 30 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u89a7\u306f Easing Functions Cheat Sheet \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 EaseInOutExpo () \u4ee5\u5916\u306b\u3082\u3001 EaseOutBounce () \u3084 EaseInOutBack () \u306a\u3069\u69d8\u3005\u306a\u30a4\u30fc\u30b8\u30f3\u30b0\u95a2\u6570\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30a4\u30fc\u30b8\u30f3\u30b0"},{"location":"tutorial/audio/","text":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f \u00b6 13.1 \u00b6","title":"13. Audio"},{"location":"tutorial/audio/#13","text":"","title":"13. \u30aa\u30fc\u30c7\u30a3\u30aa\u518d\u751f"},{"location":"tutorial/audio/#131","text":"","title":"13.1"},{"location":"tutorial/basic/","text":"1. First steps \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0 \u00b6 Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8 \u00b6 \u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002 1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 \u00b6 \u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002 1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002 1.5 Hello, Siv3D! \u00b6 \u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 1.6 \u3082\u3063\u3068 Print \u00b6 Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } } 1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059 \u00b6 Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002 1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1. First steps"},{"location":"tutorial/basic/#1-first-steps","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u4f5c\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"1. First steps"},{"location":"tutorial/basic/#11","text":"Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u3044\u3064\u3082 < Siv3D . hpp > \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> \u3053\u308c\u3060\u3051\u3067\u3001Siv3D \u306e\u307b\u307c\u3059\u3079\u3066\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u300c\u307b\u307c\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u4e0a\u7d1a\u8005\u5411\u3051\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u3084\u3001\u5b9f\u9a13\u7684\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u304a\u307e\u3051\u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u4eca\u306f\u307e\u3060\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306a\u3089\u3001\u307b\u304b\u306b\u3082 < iostream > \u3084 < vector > \u306a\u3069\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3067\u306b < Siv3D . hpp > \u306e\u4e2d\u3067\u3001Siv3D \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u4e3b\u8981\u306a C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u307e\u305f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306e\u591a\u304f\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a Siv3D \u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3067\u518d\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u306e\u5b66\u7fd2\u306e\u5e8f\u76e4\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306f\u3081\u3063\u305f\u306b\u3042\u308a\u307e\u305b\u3093\u3002 \u6587\u6cd5 # include < ??? > \u307e\u305f\u306f # include \" ??? \" \u3067\u3001\u30d8\u30c3\u30c0 ??? \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u524d\u8005\u306e\u66f8\u304d\u65b9\u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5bfe\u8c61\u306b\u306a\u308a\u3001\u5f8c\u8005\u3067\u306f\u76f8\u5bfe\u30d1\u30b9\u307e\u305f\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002Siv3D \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001Siv3D \u306e\u30d8\u30c3\u30c0\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u3066\u3001 # include < Siv3D . hpp > \u3067 Siv3D \u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Siv3D \u4ee5\u5916\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u540c\u3058\u3088\u3046\u306b\u66f8\u3044\u3066\u3082 Siv3D . hpp \u3092\u898b\u3064\u3051\u3089\u308c\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.1 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0"},{"location":"tutorial/basic/#12","text":"\u901a\u5e38\u3001C++ \u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306f int main () \u3067\u3059\u3002\u3057\u304b\u3057\u3001Siv3D \u3067\u306f\u3053\u306e main () \u95a2\u6570\u306f Siv3D \u30a8\u30f3\u30b8\u30f3\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u898b\u3048\u306a\u3044\u3068\u3053\u308d\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3067\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 // \u8aac\u660e\u306e\u305f\u3081\u306e\u7591\u4f3c\u30b3\u30fc\u30c9 int main () { Siv3D \u306e\u521d\u671f\u5316 ... Main (); // \u3053\u306e\u95a2\u6570\u3092\u30e6\u30fc\u30b6\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b Siv3D \u306e\u7d42\u4e86\u51e6\u7406 ... } \u30e6\u30fc\u30b6\u304c\u5b9f\u88c5\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e void Main () \u95a2\u6570\u3067\u3059\u3002 \u4e8b\u524d\u306b\u521d\u671f\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001 Main \u95a2\u6570\u306e\u4e2d\u3067\u3044\u304d\u306a\u308a Siv3D \u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3057\u3001 Main \u95a2\u6570\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u30ed\u30fc\u30c9\u3057\u305f\u30a2\u30bb\u30c3\u30c8\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f8c\u7247\u4ed8\u3051\u3092 Siv3D \u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002","title":"1.2 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8"},{"location":"tutorial/basic/#13","text":"\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u8e0f\u307e\u3048\u3066\u3001\u3053\u308c\u304c Siv3D \u306e\u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { } \u3053\u3053\u3067\u306e Main \u95a2\u6570\u306f\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u307b\u3068\u3093\u3069\u4f55\u3082\u53cd\u5fdc\u304c\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3067\u3057\u3087\u3046\u3002 \u6587\u6cd5 \u3053\u308c\u306f\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 Main \u306f\u95a2\u6570\u306e\u540d\u524d\u3092\u3001 void \u306f\u3053\u306e\u95a2\u6570\u304c\u7d50\u679c\u306e\u5024\u3092\u8fd4\u3055\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002 { } \u5185\u306b\u306f\u3001\u3053\u306e\u95a2\u6570\u3067\u5b9f\u884c\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4e0a\u304b\u3089\u9806\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u9014\u4e2d\u3067 return \u3059\u308b\u304b\u3001\u7d42\u7aef\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u3068\u95a2\u6570\u306e\u5b9f\u884c\u306f\u7d42\u4e86\u3057\u307e\u3059\u3002","title":"1.3 \u6700\u5c0f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"tutorial/basic/#14","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u3066\u3057\u307e\u3063\u3066\u306f\u3001\u30e6\u30fc\u30b6\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u307e\u305b\u3093\u3002 Main \u95a2\u6570\u304c\u305a\u3063\u3068\u7d9a\u304f\u3088\u3046\u306b \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { } } \u65b0\u3057\u304f\u52a0\u3048\u305f\u884c\u306f while \u6587\u306b\u3088\u3063\u3066\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3055\u308c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u534a\u6c38\u4e45\u7684\u306b\u7d9a\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u304f\u308a\u8fd4\u3057\u306e\u305f\u3073\u306b System :: Update \u95a2\u6570\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u8868\u793a\u3084\u97f3\u697d\u306e\u518d\u751f\u3001\u30de\u30a6\u30b9\u3084\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u60c5\u5831\u306a\u3069\u3092\u66f4\u65b0\u3059\u308b\u306e\u3067\u3001\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u8868\u793a\u3084\u30e6\u30fc\u30b6\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6587\u6cd5 while () \u6587\u306f\u3001 ( ) \u5185\u306e\u6761\u4ef6\u304c\u771f (true) \u306e\u9593\u3001 { } \u3067\u56f2\u307e\u308c\u305f\u90e8\u5206\u3092\u304f\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002 System :: Update \u306f\u666e\u6bb5\u306f true \u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u9589\u3058\u3089\u308c\u305f\u308a\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u304c\u62bc\u3055\u308c\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u7279\u5225\u306a \u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3 \u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3001\u4ee5\u964d\u306f\u305a\u3063\u3068 false \u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u901f\u3084\u304b\u306b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u3001 Main \u95a2\u6570\u3092\u7d42\u4e86\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308c\u3070\u3001\u81ea\u7136\u306b\u3053\u306e\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Info \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u300d\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30ad\u30fc\u3092\u62bc\u3059\u300d\u300c System :: Exit \u95a2\u6570\u3092\u547c\u3076\u300d\u306e 3 \u3064\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u306e\u30e6\u30fc\u30b6\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f System :: SetTerminationTriggers \u95a2\u6570\u306b UserAction \u30d5\u30e9\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 Info \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30cb\u30bf\u30fc\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30ec\u30fc\u30c8\u3068\u540c\u3058\u901f\u5ea6\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\uff08\u901a\u5e38\u306f\u6bce\u79d2 60, 120, \u307e\u305f\u306f 144 \u30d5\u30ec\u30fc\u30e0\uff09\u3002 Graphics :: SetTargetFrameRateHz \u95a2\u6570\u306b\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u3053\u306e\u4e0a\u9650\u3092\u89e3\u9664\u3067\u304d\u307e\u3059\u3002","title":"1.4 \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3068\u30a6\u30a3\u30f3\u30c9\u30a6"},{"location":"tutorial/basic/#15-hello-siv3d","text":"\u753b\u9762\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u30c6\u30ad\u30b9\u30c8\u3084\u6570\u5024\u3092\u7c21\u5358\u306b\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30c7\u30d0\u30c3\u30b0\u8868\u793a\u306e\u305f\u3081\u306e\u6a5f\u80fd Print \u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; while ( System :: Update ()) { } } Print \u306b\u5411\u304b\u3063\u3066\u3001\u51fa\u529b\u306e\u8a18\u53f7 << \u3067\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u308b\u3068\u3001\u305d\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u6587\u6cd5 \u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u767b\u5834\u3055\u305b\u308b\u3068\u304d\u306f \" \" \u3067\u56f2\u307f\u307e\u3059\u3002Siv3D \u3067\u306f\u3055\u3089\u306b\u3001\u65e5\u672c\u8a9e\u3092\u6271\u3044\u3084\u3059\u3044 UTF-32 \u3068\u3044\u3046\u5f62\u5f0f\u3067\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u3001 \" \u306e\u5148\u982d\u306b\u306f U \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"1.5 Hello, Siv3D!"},{"location":"tutorial/basic/#16-print","text":"Print \u306b\u9001\u308c\u308b\u306e\u306f 1 \u3064\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5024\u3084\u914d\u5217\u3001\u65e5\u4ed8\u306a\u3069\u3082\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { Print << U \"Hello, Siv3D!\" ; Print << U \"This is fun!\" ; Print << 365 << U \" days\" ; Print << 100 * 5 + 5 ; Print << Range ( 0 , 10 ); Print << Date :: Today (); while ( System :: Update ()) { } }","title":"1.6 \u3082\u3063\u3068 Print"},{"location":"tutorial/basic/#17-print","text":"Print \u3057\u305f\u5185\u5bb9\u306f\u84c4\u7a4d\u3055\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b Print \u3092\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u4f7f\u3046\u3068\u3001\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3001\u53e4\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u9762\u306e\u5916\u306b\u8ffd\u3044\u3084\u308a\u307e\u3059\u3002\u753b\u9762\u304b\u3089\u3042\u3075\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u6d88\u3048\u308b\u306e\u3067\u3001 Print \u306e\u3057\u904e\u304e\u3092\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { Print << count ; ++ count ; } } \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u753b\u9762\u5916\u306b\u6d88\u3048\u308b\u306e\u3092\u5f85\u305f\u305a\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u6d88\u53bb\u3057\u305f\u3044\u3068\u304d\u306b\u306f ClearPrint \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u5148\u982d\u3067 ClearPrint \u3059\u308b\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5168\u90e8\u6d88\u53bb\u3055\u308c\u3001\u3064\u306d\u306b\u6700\u65b0\u306e Print \u3057\u305f\u5185\u5bb9\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { int32 count = 0 ; while ( System :: Update ()) { ClearPrint (); // Print \u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6d88\u53bb Print << count ; ++ count ; } } Info Siv3D \u3067\u6574\u6570\u3092\u6271\u3046\u3068\u304d\u306f\u3001 int \u3084 unsigned long long \u306e\u3088\u3046\u306a\u6a19\u6e96\u306e\u578b\u540d\u306e\u4ee3\u308f\u308a\u306b\u3001 int32 \u3084 uint64 \u306e\u3088\u3046\u306b\u30b5\u30a4\u30ba\u3092\u660e\u793a\u7684\u306b\u793a\u3057\u305f\u578b\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u578b\u540d\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u9593\u3067\u306e\u79fb\u690d\u6027\u304c\u9ad8\u307e\u308a\u3001\u4e00\u8cab\u6027\u306e\u3042\u308b\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002","title":"1.7 Print \u3057\u305f\u3082\u306e\u3092\u6d88\u3059"},{"location":"tutorial/basic/#18","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u9ed2\u3044\u90e8\u5206\u304c \u753b\u9762 \u3067\u3001Siv3D \u306f\u3053\u306e\u9818\u57df\u306b\u6587\u5b57\u3084\u56f3\u5f62\u3001\u753b\u50cf\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 \u753b\u9762\u306e\u30b5\u30a4\u30ba\u306f\u3001\u57fa\u672c\u306e\u72b6\u614b\u3067\u306f \u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb \u3067\u3059\u3002\u753b\u9762\u4e0a\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5ea7\u6a19\u7cfb\u306f\u3001\u4e00\u756a\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u3092\u300cX \u5ea7\u6a19 0\u300d\u300cY \u5ea7\u6a19 0\u300d\u3092\u8868\u3059 ( 0 , 0 ) \u3068\u8868\u8a18\u3057\u3001\u53f3\u306b\u9032\u3080\u3068 X \u5ea7\u6a19\u304c\u5927\u304d\u304f\u3001\u4e0b\u306b\u9032\u3080\u3068 Y \u5ea7\u6a19\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u753b\u9762\u306e\u4e00\u756a\u53f3\u4e0b\u306e\u30d4\u30af\u30bb\u30eb\u306e\u5ea7\u6a19\u306f ( 799 , 599 ) \u3067\u3059\u3002 Cursor :: Pos \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306e\u5024\u306f X \u5ea7\u6a19\u3092\u8868\u3059 int32 x \u3068 Y \u5ea7\u6a19\u3092\u8868\u3059 int32 y \u306e 2 \u3064\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u307e\u307e\u4e38\u3054\u3068 Print \u306b\u9001\u3063\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { ClearPrint (); Print << Cursor :: Pos (); // \u73fe\u5728\u306e\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u5ea7\u6a19\u3092\u8868\u793a Print << U \"X: \" << Cursor :: Pos (). x ; // X \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a Print << U \"Y: \" << Cursor :: Pos (). y ; // Y \u5ea7\u6a19\u3060\u3051\u3092\u8868\u793a } }","title":"1.8 \u753b\u9762\u306e\u5ea7\u6a19\u7cfb"},{"location":"tutorial/data-structures/","text":"6. Data structures \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002 6.1 \u52d5\u7684\u914d\u5217 \u00b6 Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8981\u7d20\u306e\u8ffd\u52a0 \u00b6 Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 \u00b6 [] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } } \u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b \u00b6 \u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } } \u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } } \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664 \u00b6 \u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } } \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664 \u00b6 .erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } } 6.2 \u4e8c\u6b21\u5143\u914d\u5217 \u00b6 \u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Grid \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } } \u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316 \u00b6 Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } } 6.3 \u6587\u5b57\u5217 \u00b6 Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002 String \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db \u00b6 String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } } \u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db \u00b6 std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } } 6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb \u00b6 \u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 HashTable \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } } 6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020 \u00b6 Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6. Data structures"},{"location":"tutorial/data-structures/#6-data-structures","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001Siv3D \u3067\u30b2\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u3001\u52d5\u7684\u914d\u5217\u3084\u4e8c\u6b21\u5143\u914d\u5217\u3001\u6587\u5b57\u5217\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306a\u3069\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30af\u30e9\u30b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"6. Data structures"},{"location":"tutorial/data-structures/#61","text":"Siv3D \u3067\u52d5\u7684\u914d\u5217\u3092\u6271\u3046\u3068\u304d\u306f Array < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 std :: vector \u3088\u308a\u3082\u591a\u304f\u306e\u4fbf\u5229\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u3057\u3084\u3059\u3044\u305f\u3081\u3001\u512a\u308c\u305f\u5b9f\u884c\u6642\u6027\u80fd\u3068\u3001\u30b3\u30fc\u30c9\u306e\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002 std :: vector \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.1 \u52d5\u7684\u914d\u5217"},{"location":"tutorial/data-structures/#_1","text":"Array \u306b\u306f << \u6f14\u7b97\u5b50\u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points ; while ( System :: Update ()) { if ( MouseL . down ()) { // \u914d\u5217\u306b\u8981\u7d20\u3092\u8ffd\u52a0 points << Cursor :: Pos (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u8ffd\u52a0"},{"location":"tutorial/data-structures/#_2","text":"[] \u3092\u4f7f\u3063\u3066 0 \u304b\u3089\u59cb\u307e\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u914d\u5217\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 .front () \u3067\u5148\u982d\u306e\u8981\u7d20\u306b\u3001 .back () \u3067\u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; // 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 0 ]; // 2 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points [ 2 ]; // \u5148\u982d\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . front (); // \u672b\u5c3e\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << points . back (); while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9"},{"location":"tutorial/data-structures/#_3","text":"\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u8abf\u3079\u308b\u306b\u306f .size () , \u914d\u5217\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b\u306b\u306f .clear () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( MouseL . down ()) { // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664 points . clear (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u8981\u7d20\u306e\u6570\u3001\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_4","text":"\u914d\u5217 a \u304c\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\uff08\u7a7a\uff09\u3067\u3042\u308b\u304b\u306f .isEmpty () \u307e\u305f\u306f if ( ! a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002\u8981\u7d20\u3092\u6301\u3064\u304b\u306f if ( a ) \u3067\u8abf\u3079\u3089\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 20 , 30 , 40 , 50 }; Array < Vec2 > points ; // \u914d\u5217\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u8868\u793a Print << values . isEmpty (); Print << points . isEmpty (); if ( values ) { Print << U \"A\" ; } if ( ! points ) { Print << U \"B\" ; } while ( System :: Update ()) { } }","title":"\u914d\u5217\u304c\u7a7a\u304b\u3092\u8abf\u3079\u308b"},{"location":"tutorial/data-structures/#_5","text":"\u914d\u5217\u306e\u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f .pop_back () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7a7a\u306e\u914d\u5217\u306b .pop_back () \u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u7a7a\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { ClearPrint (); Print << U \"count: \" << points . size (); if ( points && MouseL . down ()) { // \u672b\u5c3e\u306e\u8981\u7d20\u3092\u524a\u9664 points . pop_back (); } for ( const auto & point : points ) { Circle ( point , 10 ). draw (); } } }","title":"\u672b\u5c3e\u306e\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_6","text":"\u914d\u5217\u304b\u3089\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001 .remove_if () \u306b\u3001\u8981\u7d20\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u524a\u9664\u306e\u53ef\u5426\u3092 bool \u578b\u3067\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3001\u307e\u305f\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < int32 > values = { 1 , 6 , 3 , 5 , 2 , 10 }; Print << U \"before: \" << values ; // 5 \u3088\u308a\u3082\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 values . remove_if ([]( int32 n ) { return n > 5 ; }); Print << U \"after: \" << values ; Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; Print << U \"before: \" << points ; // y \u6210\u5206\u304c 250 \u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u524a\u9664 points . remove_if ([]( const Vec2 & v ) { return v . y > 250 ; }); Print << U \"after: \" << points ; while ( System :: Update ()) { } }","title":"\u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_7","text":".erase () \u306b\u7279\u5b9a\u306e\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u305d\u306e\u8981\u7d20\u3092\u914d\u5217\u304b\u3089\u524a\u9664\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Array < Vec2 > points = { Vec2 ( 100 , 100 ), Vec2 ( 200 , 200 ), Vec2 ( 300 , 300 ), Vec2 ( 400 , 400 ) }; while ( System :: Update ()) { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b for ( auto it = points . begin (); it != points . end ();) { // \u5186\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u305d\u306e\u5730\u70b9\u3092\u8868\u3059\u8981\u7d20\u3092\u524a\u9664 if ( Circle ( * it , 30 ). leftClicked ()) { // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b it = points . erase ( it ); } else { // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b ++ it ; } } for ( const auto & point : points ) { Circle ( point , 30 ). draw (); } } }","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8981\u7d20\u306e\u524a\u9664"},{"location":"tutorial/data-structures/#_8","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8981\u7d20\u306e\u500b\u6570\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 10 \u500b\u306e 5 Array < int32 > values ( 10 , 5 ); Print << values ; // 5 \u500b\u306e Vec2(0, 0) Array < Vec2 > points ( 5 , Vec2 ( 0 , 0 )); Print << points ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"tutorial/data-structures/#62","text":"\u65b9\u773c\u7d19\u306e\u3088\u3046\u306b\u533a\u5207\u3063\u305f\u30de\u30c3\u30d7\u306e\u60c5\u5831\u3084\u3001\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u306e\u3088\u3046\u306b\u3001\u4e8c\u6b21\u5143\u306e\u60c5\u5831\u3092\u6271\u3046\u3068\u304d\u306b\u306f Grid < Type > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 Grid \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u7279\u306b\u3001\u52d5\u7684\u306a\u4e8c\u6b21\u5143\u914d\u5217\u3092\u6271\u3046\u969b\u306b\u3001\u9762\u5012\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 Array \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"6.2 \u4e8c\u6b21\u5143\u914d\u5217"},{"location":"tutorial/data-structures/#grid","text":"# include <Siv3D.hpp> void Main () { Grid < double > grid = { { 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 }, { 1.0 , 0.95 , 0.9 , 0.85 , 0.8 , 0.75 } }; // \u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba Print << grid . size (); // \u30b0\u30ea\u30c3\u30c9\u306e\u5e45 Print << grid . width (); // \u30b0\u30ea\u30c3\u30c9\u306e\u9ad8\u3055 Print << grid . height (); // 0 \u884c\u76ee 0 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 0 ]; // 0 \u884c\u76ee 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 0 ][ 1 ]; // 1 \u884c\u76ee 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << grid [ 1 ][ 5 ]; while ( System :: Update ()) { for ( auto y : step ( grid . height ())) { for ( auto x : step ( grid . width ())) { Rect ( x * 100 , y * 100 , 100 ). draw ( ColorF ( grid [ y ][ x ])); } } } }","title":"Grid \u306e\u57fa\u672c"},{"location":"tutorial/data-structures/#_9","text":"Array \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30b5\u30a4\u30ba\u3068\u521d\u671f\u5316\u3059\u308b\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // 5 \u5217 x 3 \u884c\u306e\u30b0\u30ea\u30c3\u30c9\uff08\u5e45\u304c 5, \u9ad8\u3055\u304c 3) // \u8981\u7d20\u306e\u5024\u306f\u3059\u3079\u3066 -1 Grid < int32 > grid ( 5 , 3 , - 1 ); Print << grid ; Print << U \"----\" ; grid [ 2 ][ 0 ] = 123 ; Print << grid ; while ( System :: Update ()) { } }","title":"\u8981\u7d20\u6570\u3092\u6307\u5b9a\u3057\u305f\u521d\u671f\u5316"},{"location":"tutorial/data-structures/#63","text":"Siv3D \u3067\u306f String \u578b\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 String \u306f\u3001UTF-32 \u65b9\u5f0f\u306b\u5f93\u3046 char32 \u578b\u306e\u6587\u5b57\u306e\u96c6\u5408\u3067\u3059\u3002C++ \u6a19\u6e96\u3067\u306f std :: u32string \u3068\u540c\u3058\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001\u591a\u304f\u306e\u5171\u901a\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002 std :: string \u3068\u540c\u69d8\u306b\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u5b57\u3084\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u306f U '\u3042' , U \"Hello\" \u306e\u3088\u3046\u306b U \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u307e\u3059\u3002","title":"6.3 \u6587\u5b57\u5217"},{"location":"tutorial/data-structures/#string","text":"# include <Siv3D.hpp> void Main () { String text = U \"Hello\" ; Print << text ; // \u30c6\u30ad\u30b9\u30c8\u3092\u672b\u5c3e\u306b\u8ffd\u52a0 text += U \" Siv3D!\" ; Print << text ; // \u8981\u7d20\u6570 Print << text . size (); // 1 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 1 ]; // 5 \u756a\u76ee\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9 Print << text [ 4 ]; // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); // \u8981\u7d20\u3092\u3059\u3079\u3066\u524a\u9664\u3059\u308b text . clear (); // \u7a7a\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b Print << text . isEmpty (); while ( System :: Update ()) { } }","title":"String \u306e\u57fa\u672c"},{"location":"tutorial/data-structures/#_10","text":"String \u3092 std :: string \u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001 .narrow () \u3092\u3001 std :: wstring \u306b\u5909\u63db\u3059\u308b\u306b\u306f .toWstr () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String text = U \"Hello, Siv3D!\" ; const std :: string str = text . narrow (); const std :: wstring wstr = text . toWstr (); while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u3078\u306e\u5909\u63db"},{"location":"tutorial/data-structures/#_11","text":"std :: string \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: Widen () \u3092\u3001 std :: wstring \u3092 String \u306b\u5909\u63db\u3059\u308b\u306b\u306f Unicode :: FromWString () \u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const std :: string str = \"Siv3D\" ; const std :: wstring wstr = L \"Siv3D\" ; const String text1 = Unicode :: Widen ( str ); const String text2 = Unicode :: FromWString ( wstr ); Print << text1 ; Print << text2 ; while ( System :: Update ()) { } }","title":"\u4ed6\u306e\u6587\u5b57\u5217\u578b\u304b\u3089\u306e\u5909\u63db"},{"location":"tutorial/data-structures/#64","text":"\u30ad\u30fc\u3068\u5024\u306e\u7d44\uff08\u30a8\u30f3\u30c8\u30ea\uff09\u3092\u683c\u7d0d\u3057\u3001\u9ad8\u901f\u306b\u691c\u7d22\u3067\u304d\u308b\u30c7\u30fc\u30bf\u69cb\u9020\uff08\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\uff09\u3068\u3057\u3066\u3001Siv3D \u306f HashTable < Key , Value > \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 std :: unordered_map \u3088\u308a\u3082\u4fbf\u5229\u3067\u9ad8\u901f\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001Siv3D \u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u3068\u3082\u9023\u4fc2\u304c\u5bb9\u6613\u3067\u3059\u3002 std :: unordered_map \u3068\u540c\u69d8\u306b\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306f\u8ffd\u52a0\u3057\u305f\u9806\u756a\u3068\u306f\u7570\u306a\u308b\u9806\u5e8f\u3067\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002","title":"6.4 \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"tutorial/data-structures/#hashtable","text":"# include <Siv3D.hpp> void Main () { // \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u7bc9 HashTable < String , int32 > table = { { U \"Red\" , 1 }, { U \"Green\" , 2 }, { U \"Black\" , 3 }, { U \"White\" , 4 }, }; // \u30a8\u30f3\u30c8\u30ea\u306e\u8ffd\u52a0 table . emplace ( U \"Yellow\" , 5 ); // \u5024\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7 Print << table [ U \"Red\" ]; Print << table [ U \"White\" ]; // \u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u53d6\u5f97 Print << table . contains ( U \"Green\" ); Print << table . contains ( U \"Pink\" ); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3068\u5024\u306e\u5909\u66f4 for ( auto it = table . begin (); it != table . end (); ++ it ) { it . value () += 100 ; } // \u5024\u3092\u5909\u66f4\u3057\u306a\u3044\u30eb\u30fc\u30d7\u306f\u3053\u306e\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b for ( auto [ key , value ] : table ) { Print << key << U \": \" << value ; } while ( System :: Update ()) { } }","title":"HashTable \u306e\u57fa\u672c"},{"location":"tutorial/data-structures/#65","text":"Siv3D \u3067\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u3066\u5b9f\u884c\u4e2d\u306b\u5909\u66f4\u3055\u308c\u306a\u3044\u9759\u7684\u914d\u5217\u306f std :: array \u3092\u3001\u30cf\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u306f HashSet \u3092\u4f7f\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u52d5\u7684\u914d\u5217\u306b\u306f std :: deque \u3084 std :: list \u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u30e1\u30e2\u30ea\u306e\u9023\u7d9a\u6027\u304c\u3042\u308b Array \u306e\u307b\u3046\u304c\u5b9f\u884c\u6642\u6027\u80fd\u306b\u512a\u308c\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3042\u308a\u307e\u3059\u3002\u7279\u306b\u8981\u7d20\u6570\u304c\u6570\u4e07\u898f\u6a21\u307e\u3067\u5927\u304d\u304f\u306a\u3089\u306a\u3044\u52d5\u7684\u914d\u5217\u306b\u3064\u3044\u3066\u306f Array \u3092\u512a\u5148\u3057\u3066\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"6.5 \u3053\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u69cb\u9020"},{"location":"tutorial/font/","text":"8. Using fonts \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 8.1 Font \u00b6 \u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } } 8.2 \u6539\u884c\u3059\u308b \u00b6 \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } } 8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } } 8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e \u00b6 Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } } 8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046 \u00b6 PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } } 8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046 \u00b6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002 8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b \u00b6 Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } } 8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b \u00b6 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } } 8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b \u00b6 \u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } } 8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b \u00b6 \u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } } 8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b \u00b6 \u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } } 8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b \u00b6 font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } } 8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b \u00b6 Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } } 8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f \u00b6 Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } } 8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b \u00b6 String :: substr () # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } } 8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4 \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba \u00b6 \u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002 \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af \u00b6 if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30d5\u30a9\u30f3\u30c8 \u00b6 \u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"8. Using fonts"},{"location":"tutorial/font/#8-using-fonts","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u69d8\u3005\u306a\u30b9\u30bf\u30a4\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"8. Using fonts"},{"location":"tutorial/font/#81-font","text":"\u524d\u7ae0\u307e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u306b\u4f7f\u3063\u3066\u304d\u305f Print \u306f\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u3001\u63cf\u753b\u4f4d\u7f6e\u306b\u81ea\u7531\u5ea6\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Font \u3092\u4f5c\u6210\u3057\u3001\u63cf\u753b\u3057\u305f\u3044\u5185\u5bb9\u3092 () \u3067\u3064\u306a\u3052\u305f\u3042\u3068\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u3068\u540c\u3058\u3088\u3046\u306b\u3001 Font \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Font \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u4f5c\u6210\u304c 1 \u56de\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { // \u30b5\u30a4\u30ba 50 \u306e\u30d5\u30a9\u30f3\u30c8\u3092\u4f5c\u6210 const Font font ( 50 ); while ( System :: Update ()) { // \u5de6\u4e0a\u4f4d\u7f6e (20, 20) \u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"Hello, Siv3D!\" ). draw ( 20 , 20 ); // \u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u5fc3\u5ea7\u6a19\u304c\u753b\u9762\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( U \"C++\" ). drawAt ( Scene :: Center (), Palette :: Skyblue ); // \u6587\u5b57\u5217\u4ee5\u5916\u3092\u6e21\u3059\u3068 Format \u3055\u308c\u308b font ( Cursor :: Pos ()). draw ( 50 , 300 ); // \u8907\u6570\u6e21\u3059\u3068\u3001Format \u3067\u3064\u306a\u3052\u3089\u308c\u308b font ( 123 , U \"ABC\" ). draw ( 50 , 400 ); font ( U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 )). draw ( 50 , 500 ); } }","title":"8.1 Font"},{"location":"tutorial/font/#82","text":"\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u306b\u6539\u884c\u6587\u5b57 \\ n \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u3001\u305d\u3053\u3067\u6539\u884c\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); while ( System :: Update ()) { font ( U \"Hello, \\n Siv3D \\n\\n !!!\" ). draw ( 20 , 20 ); } }","title":"8.2 \u6539\u884c\u3059\u308b"},{"location":"tutorial/font/#83","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5358\u4f4d\u306f\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5927\u304d\u3055 20 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font20 ( 20 ); // \u5927\u304d\u3055 40 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font40 ( 40 ); // \u5927\u304d\u3055 60 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font60 ( 60 ); // \u5927\u304d\u3055 80 \u306e\u30d5\u30a9\u30f3\u30c8 const Font font80 ( 80 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font20 ( text ). draw ( 20 , 20 ); font40 ( text ). draw ( 20 , 60 ); font60 ( text ). draw ( 20 , 120 ); font80 ( text ). draw ( 20 , 200 ); } }","title":"8.3 \u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba"},{"location":"tutorial/font/#84","text":"Siv3D \u306b\u306f\u7570\u306a\u308b\u592a\u3055\u306e 7 \u7a2e\u985e\u306e\u66f8\u4f53\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u304a\u3044\u3066 Typeface :: \u3067\u592a\u3055\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u3089\u306e\u66f8\u4f53\u3092\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u4f55\u3082\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408 Typeface :: Regular \u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002 Info Siv3D \u306b\u306f\u300cM+ 1p\u300d\u3068\u3044\u3046\u66f8\u4f53\u306e 7 \u7a2e\u985e\u306e\u30a6\u30a8\u30a4\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontThin ( 50 , Typeface :: Thin ); // \u3084\u3084\u7d30\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontLight ( 50 , Typeface :: Light ); // \u901a\u5e38\u306e\u30d5\u30a9\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09 const Font fontRegular ( 50 , Typeface :: Regular ); // \u3084\u3084\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontMedium ( 50 , Typeface :: Medium ); // \u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBold ( 50 , Typeface :: Bold ); // \u3068\u3066\u3082\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontHeavy ( 50 , Typeface :: Heavy ); // \u975e\u5e38\u306b\u592a\u3044\u30d5\u30a9\u30f3\u30c8 const Font fontBlack ( 50 , Typeface :: Black ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { fontThin ( text ). draw ( 20 , 20 ); fontLight ( text ). draw ( 20 , 70 ); fontRegular ( text ). draw ( 20 , 120 ); fontMedium ( text ). draw ( 20 , 170 ); fontBold ( text ). draw ( 20 , 220 ); fontHeavy ( text ). draw ( 20 , 270 ); fontBlack ( text ). draw ( 20 , 320 ); } }","title":"8.4 \u30d5\u30a9\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"tutorial/font/#85","text":"PC \u4e0a\u306b\u3042\u308b\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Font \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // Pecita.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font1 ( 50 , U \"example/font/Pecita/Pecita.otf\" ); // AnnyantRoman.ttf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font2 ( 50 , U \"example/font/AnnyantRoman/AnnyantRoman.ttf\" ); // NotoSansCJKjp-Regular.otf \u3092\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046 const Font font3 ( 50 , U \"example/font/NotoSansCJKjp/NotoSansCJKjp-Regular.otf\" ); while ( System :: Update ()) { font1 ( U \"Hello\" ). draw ( 20 , 20 ); font2 ( U \"Hello, \u3053\u3093\u306b\u3061\u306f\" ). draw ( 20 , 70 ); font3 ( U \"\u4f60\u597d\u3001\u3053\u3093\u306b\u3061\u306f\u3001\uc548\ub155\ud558\uc138\uc694\" ). draw ( 20 , 120 ); } }","title":"8.5 \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3046"},{"location":"tutorial/font/#86-pc","text":"PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u306f OS \u3054\u3068\u306b\u7279\u6b8a\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092 FileSystem :: SpecialFolderPath () \u3067\u53d6\u5f97\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3064\u306a\u3052\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 FileSystem :: SpecialFolderPath () \u306b\u6e21\u3059 SpecialFolder \u306e\u7a2e\u985e\u3068 OS \u306b\u3088\u3063\u3066\u53d6\u5f97\u3067\u304d\u308b\u30d1\u30b9\u306e\u5bfe\u5fdc\u8868\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002macOS \u306e\u307f 3 \u3064\u306e\u623b\u308a\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002 Windows macOS Linux SpecialFolder::SystemFonts (OS):/WINDOWS/Fonts/ /System/Library/Fonts/ (Documents) SpecialFolder::LocalFonts (OS):/WINDOWS/Fonts/ /Library/Fonts/ (Documents) SpecialFolder::UserFonts (OS):/WINDOWS/Fonts/ ~/Library/Fonts/ (Documents) # include <Siv3D.hpp> void Main () { # if SIV3D_PLATFORM(WINDOWS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"arial.ttf\" ); # elif SIV3D_PLATFORM(MACOS) const Font font ( 60 , FileSystem :: SpecialFolderPath ( SpecialFolder :: SystemFonts ) + U \"Helvetica.dfont\" ); # endif while ( System :: Update ()) { # if SIV3D_PLATFORM(WINDOWS) font ( U \"Arial\" ). draw ( 20 , 40 ); # elif SIV3D_PLATFORM(MACOS) font ( U \"Helvetica\" ). draw ( 20 , 40 ); # endif } } Info SIV3D_PLATFORM ( WINDOWS ) \u3084 SIV3D_PLATFORM ( MACOS ) \u306f Siv3D \u3067\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5225\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3048\u308b\u30de\u30af\u30ed\u3067\u3059\u3002","title":"8.6 PC \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046"},{"location":"tutorial/font/#87","text":"Font \u306e .draw () \u3084 .drawAt () \u306f\u3001\u63cf\u753b\u3055\u308c\u305f\u9818\u57df\u3092 Rect \u307e\u305f\u306f RectF \u578b\u3067\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 .region () \u3084 .regionAt () \u3092\u4f7f\u3046\u3068\u3001\u63cf\u753b\u3059\u308b\u3053\u3068\u306a\u304f\u305d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); const String text = U \"Hello, Siv3D!\" ; constexpr Point pos ( 20 , 20 ); // font \u3092\u4f7f\u3063\u3066 text \u3092 pos \u306e\u4f4d\u7f6e\u306b\u63cf\u753b\u3057\u305f\u3068\u304d\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u9818\u57df\u3092\u53d6\u5f97 const Rect rect = font ( text ). region ( pos ); while ( System :: Update ()) { // \u63cf\u753b\u9818\u57df\u306e\u9577\u65b9\u5f62\u3092\u4e8b\u524d\u306b\u5857\u308a\u3064\u3076\u3059 rect . draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). draw ( pos , ColorF ( 0.25 )); } }","title":"8.7 \u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u308b\u9818\u57df\u3092\u8abf\u3079\u308b"},{"location":"tutorial/font/#88","text":"Font \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u7b2c\u4e09\u5f15\u6570\u306b FontStyle \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30bf\u30ea\u30c3\u30af\u3084\u30dc\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30d5\u30a9\u30f3\u30c8\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Default ); // \u30dc\u30fc\u30eb\u30c9 const Font fontBold ( 50 , Typeface :: Default , FontStyle :: Bold ); // \u30a4\u30bf\u30ea\u30c3\u30af const Font fontItalic ( 50 , Typeface :: Default , FontStyle :: Italic ); // \u30dc\u30fc\u30eb\u30c9\u30fb\u30a4\u30bf\u30ea\u30c3\u30af const Font fontBoldItalic ( 50 , Typeface :: Default , FontStyle :: BoldItalic ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { font ( text ). draw ( 20 , 20 ); fontBold ( text ). draw ( 20 , 70 ); fontItalic ( text ). draw ( 20 , 120 ); fontBoldItalic ( text ). draw ( 20 , 170 ); } }","title":"8.8 \u30d5\u30a9\u30f3\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u5909\u3048\u308b"},{"location":"tutorial/font/#89","text":"\u6587\u5b57\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f .drawBase () \u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3084\u7a2e\u985e\u306e\u30d5\u30a9\u30f3\u30c8\u3092\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font20 ( 20 ); const Font font40 ( 40 ); const Font font60 ( 60 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u304c\u305d\u308d\u308f\u306a\u3044 font20 ( text ). draw ( 20 , 100 ); font40 ( text ). draw ( 160 , 100 ); font60 ( text ). draw ( 420 , 100 ); Rect ( 0 , 400 , 800 , 200 ). draw ( ColorF ( 0.4 )); // (20, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font20 ( text ). drawBase ( 20 , 400 ); // (160, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font40 ( text ). drawBase ( 160 , 400 ); // (420, 100) \u304c\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u306a\u308b\u3088\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b font60 ( text ). drawBase ( 420 , 400 ); } }","title":"8.9 \u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u305d\u308d\u3048\u308b"},{"location":"tutorial/font/#810","text":"\u5de6\u4e0a\u3084\u4e2d\u5fc3\u4ee5\u5916\u306b\u3082\u3001\u63cf\u753b\u5ea7\u6a19\u306e\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 ); constexpr Vec2 pos1 ( 700 , 100 ); constexpr Vec2 pos2 ( 700 , 500 ); constexpr Vec2 pos3 ( 100 , 500 ); const String text = U \"Siv3D\" ; while ( System :: Update ()) { Triangle ( pos1 , pos2 , pos3 ). draw ( ColorF ( 0.5 )); // \u53f3\u4e0a\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96 font ( text ). draw ( Arg :: topRight = pos1 ); // \u53f3\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomRight = pos2 ); // \u5de6\u4e0b\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomLeft = pos3 ); // \u5e95\u8fba\u4e2d\u592e\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3059\u308b font ( text ). draw ( Arg :: bottomCenter ( 400 , 500 )); } }","title":"8.10 \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u306e\u57fa\u6e96\u4f4d\u7f6e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b"},{"location":"tutorial/font/#811","text":"\u5ea7\u6a19\u3092\u305a\u3089\u3057\u3066 2\u56de \u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f\u3068\u3001\u5f71\u306e\u52b9\u679c\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 Vec2 :: movedBy ( x , y ) \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u5024\u3060\u3051\u8981\u7d20\u3092\u52a0\u7b97\u3057\u305f Vec2 \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.7 , 0.9 , 0.8 )); const Font font ( 100 , Typeface :: Bold ); constexpr Vec2 center ( 400 , 150 ); const String text = U \"Hello, Siv3D!\" ; while ( System :: Update ()) { // center \u304b\u3089 (4, 4) \u305a\u3089\u3057\u305f\u4f4d\u7f6e\u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center . movedBy ( 4 , 4 ), ColorF ( 0.0 , 0.5 )); // center \u3092\u4e2d\u5fc3\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f font ( text ). drawAt ( center ); } }","title":"8.11 \u6587\u5b57\u306b\u5f71\u306e\u52b9\u679c\u3092\u4ed8\u3051\u308b"},{"location":"tutorial/font/#812","text":"font ( text ) \u3092 for \u30eb\u30fc\u30d7\u3067\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u6587\u5b57\u3092\u81ea\u7531\u306b\u5236\u5fa1\u3057\u3066\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a Glyph \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6587\u5b57\u3054\u3068\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 .codePoint \u306f\u305d\u306e\u6587\u5b57\u306e UTF-32 \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3001 .index \u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u6587\u5b57\u306e\u4f4d\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3001 .offset \u306f\u30da\u30f3\u306e\u4f4d\u7f6e\u304b\u3089\u3055\u3089\u306b\u5fc5\u8981\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u3001 .xAdvance \u306f\u6b21\u306e\u6587\u5b57\u3078\u306e X \u5ea7\u6a19\u306e\u8ddd\u96e2\u3092\u8868\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 50 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { constexpr Vec2 basePos ( 20 , 20 ); Vec2 penPos ( basePos ); // \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30d7 for ( const auto & glyph : font ( text )) { // \u6539\u884c\u6587\u5b57\u306a\u3089 if ( glyph . codePoint == U '\\n' ) { // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u30ea\u30bb\u30c3\u30c8 penPos . x = basePos . x ; // \u30da\u30f3\u306e Y \u5ea7\u6a19\u3092\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u5206\u9032\u3081\u308b penPos . y += font . height (); continue ; } // \u4f55\u6587\u5b57\u76ee\u304b\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u3048\u308b const ColorF color = HSV ( glyph . index * 30 ); // \u6587\u5b57\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30da\u30f3\u306e\u4f4d\u7f6e\u306b\u6587\u5b57\u3054\u3068\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u63cf\u753b glyph . texture . draw ( penPos + glyph . offset , color ); // \u30da\u30f3\u306e X \u5ea7\u6a19\u3092\u6587\u5b57\u306e\u5e45\u306e\u5206\u9032\u3081\u308b penPos . x += glyph . xAdvance ; } } }","title":"8.12 \u6587\u5b57\u5358\u4f4d\u3067\u63cf\u753b\u3092\u5236\u5fa1\u3059\u308b"},{"location":"tutorial/font/#813","text":"Font :: getVerticalGlyphs () \u3067\u7e26\u66f8\u304d\u7528\u306e\u30b0\u30ea\u30d5\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3046\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u7e26\u66f8\u304d\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 50 , Typeface :: Bold ); while ( System :: Update ()) { font ( U \"\u300c\u6a2a\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" ). draw ( 40 , 40 , ColorF ( 0.25 )); const Vec2 basePos ( 650 , 40 ); Vec2 penPos ( basePos ); // \u7e26\u66f8\u304d\u7528\u306e\u5b57\u5f62\u3092\u4f7f\u3063\u3066\u6587\u5b57\u3092\u63cf\u753b for ( const auto & glyph : font . getVerticalGlyphs ( U \"\u300c\u7e26\u66f8\u304d\u300d \\n \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3002\uff08\uff01\uff09\" )) { if ( glyph . codePoint == U '\\n' ) { penPos . x -= font . height (); penPos . y = basePos . y ; continue ; } glyph . texture . draw ( penPos + glyph . offset , ColorF ( 0.25 )); penPos . y += glyph . yAdvance ; } } }","title":"8.13 \u7e26\u66f8\u304d\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/font/#814","text":"Font :: draw () \u306b Rect \u307e\u305f\u306f RectF \u3092\u6e21\u3059\u3068\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u305d\u306e\u9577\u65b9\u5f62\u306e\u5185\u90e8\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u63cf\u753b\u3057\u307e\u3059\u3002\u6587\u5b57\u304c\u3042\u3075\u308c\u308b\u5834\u5408\u3001\u6700\u5f8c\u306e\u6587\u5b57\u304c \u2026 \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u95a2\u6570\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 25 , Typeface :: Bold ); const String text = U \"The quick brown fox jumps over the lazy dog.\" ; constexpr Rect rect1 ( 50 , 20 , 200 , 100 ); constexpr Rect rect2 ( 50 , 160 , 300 , 100 ); constexpr Rect rect3 ( 50 , 300 , 400 , 100 ); while ( System :: Update ()) { rect1 . draw (); bool full = font ( text ). draw ( rect1 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect1 . drawFrame ( 0 , 5 , Palette :: Red ); } rect2 . draw (); full = font ( text ). draw ( rect2 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect2 . drawFrame ( 0 , 5 , Palette :: Red ); } rect3 . stretched ( 10 ). draw (); full = font ( text ). draw ( rect3 . stretched ( - 10 ), ColorF ( 0.25 )); if ( ! full ) { // \u6587\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u3089\u8d64\u67a0 rect3 . drawFrame ( 0 , 5 , Palette :: Red ); } } }","title":"8.14 \u6307\u5b9a\u3057\u305f\u9577\u65b9\u5f62\u306e\u4e2d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u63cf\u304f"},{"location":"tutorial/font/#815-1","text":"String :: substr () # include <Siv3D.hpp> void Main () { const Font font ( 30 , Typeface :: Bold ); const String text = U \"The quick brown fox \\n jumps over the lazy dog.\" ; while ( System :: Update ()) { // \u6587\u5b57\u30ab\u30a6\u30f3\u30c8\u3092 0.1 \u79d2\u3054\u3068\u306b\u5897\u3084\u3059 const size_t length = static_cast < size_t > ( Scene :: Time () / 0.1 ); // text \u306e\u6587\u5b57\u6570\u4ee5\u4e0a\u306e length \u306f\u5207\u308a\u6368\u3066\u3089\u308c\u308b font ( text . substr ( 0 , length )). draw ( 50 , 50 ); } }","title":"8.15 \u30c6\u30ad\u30b9\u30c8\u3092 1 \u6587\u5b57\u305a\u3064\u8868\u793a\u3059\u308b"},{"location":"tutorial/font/#816","text":"","title":"8.16 \u30d5\u30a9\u30f3\u30c8\u3042\u308c\u3053\u308c"},{"location":"tutorial/font/#_1","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306e\u3061\u306e\u7ae0\u3067\u767b\u5834\u3059\u308b Transformer2D \u3092\u4f7f\u3063\u3066\u63cf\u753b\u30b9\u30b1\u30fc\u30eb\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u72b6\u614b\u3067\u30d5\u30a9\u30f3\u30c8\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u305f\u76ee\u306e\u5927\u304d\u3055\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u306e\u52d5\u7684\u306a\u5909\u66f4"},{"location":"tutorial/font/#_2","text":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u306f Font :: MaxSize \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256 \u3067\u3059\u3002","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba"},{"location":"tutorial/font/#_3","text":"if ( font ) \u3067\u3001\u30d5\u30a9\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b const Font font ( 60 , U \"aaa/bbb.ttf\" ); // \u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! font ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create Font\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a9\u30f3\u30c8\u306e\u4f5c\u6210\u30c1\u30a7\u30c3\u30af"},{"location":"tutorial/font/#_4","text":"\u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3082\u4f55\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { const Font font ( 60 , U \"aaa/bbb.ttf\" ); while ( System :: Update ()) { // \u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044 font ( U \"Hello, Siv3D\" ). draw ( 20 , 20 ); } }","title":"\u7a7a\u306e\u30d5\u30a9\u30f3\u30c8"},{"location":"tutorial/formatting/","text":"7. Formatting ant parsing \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } } 7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db \u00b6 \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002 \u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } } \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a \u00b6 { 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } } \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570 \u00b6 \u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } } \u30d1\u30c7\u30a3\u30f3\u30b0 \u00b6 N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } } \u57fa\u6570 \u00b6 { : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } } \u7b26\u53f7 \u00b6 { : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db \u00b6 Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 Parse \u306e\u57fa\u672c \u00b6 # include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } } ParseError \u306e\u6355\u6349 \u00b6 \u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"7. Formatting and parsing"},{"location":"tutorial/formatting/#7-formatting-ant-parsing","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6587\u5b57\u5217\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"7. Formatting ant parsing"},{"location":"tutorial/formatting/#71","text":"Format () \u3092\u4f7f\u3046\u3068\u3001\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u306b\u5bfe\u5fdc\u3057\u305f\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u3092 String \u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const String a = Format ( 12345 ); const String b = Format ( true ); const String c = Format ( 1.23456789 ); const String d = Format ( Vec2 ( 11 , 22 )); const Array < int32 > values = { 3 , 4 , 5 , 6 }; const String e = Format ( values ); const std :: array < ColorF , 3 > colors = { ColorF ( 1.0 , 0.0 , 0.0 ), ColorF ( 0.0 , 1.0 , 0.0 ), ColorF ( 0.0 , 0.0 , 1.0 ), }; const String f = Format ( colors ); const String g = Format ( Rect ( 30 , 50 , 100 , 50 )); Print << a ; Print << b ; Print << c ; Print << d ; Print << e ; Print << f ; Print << g ; // \u305f\u3060\u3057\u3001Print \u3067\u306f\u3001\u308f\u3056\u308f\u3056 String \u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044 Print << 12345 ; Print << colors ; Print << Rect ( 30 , 50 , 100 , 50 ); while ( System :: Update ()) { } }","title":"7.1 \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"tutorial/formatting/#72","text":"\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u3042\u3068\u306b _fmt () \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3068\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u5185\u306b\u8a18\u8ff0\u3057\u305f {} \u3068\u3044\u3046\u7b87\u6240\u306b\u3001 ( ) \u5185\u306b\u8a18\u8ff0\u3057\u305f\u5f15\u6570\u304c\u6587\u5b57\u5217\u5316\u3055\u308c\u3066\u633f\u5165\u3055\u308c\u307e\u3059\u3002","title":"7.2 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u3063\u305f\u3001\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db"},{"location":"tutorial/formatting/#_1","text":"# include <Siv3D.hpp> void Main () { Print << U \"Siv{}D\" _fmt ( 3 ); Print << U \"{}/{}/{}\" _fmt ( 2020 , 12 , 31 ); Print << U \"Hello, {}!\" _fmt ( U \"Siv3D\" ); Print << U \"position: {}, color: {}\" _fmt ( Point ( 23 , 45 ), ColorF ( 0.7 , 0.8 , 0.9 )); while ( System :: Update ()) { } }","title":"\u57fa\u672c"},{"location":"tutorial/formatting/#_2","text":"{ 0 } , { 1 } \u306e\u3088\u3046\u306b\u3001 _fmt () \u306e\u5f15\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{2}/{1}/{0}\" _fmt ( 2020 , 12 , 31 ); Print << U \"{0}/{1}/{2}\" _fmt ( 2020 , 12 , 31 ); Print << U \"C{0}{0}\" _fmt ( U '+' ); Print << U \"{0} - {1} - {0}\" _fmt ( U \"Tokyo\" , U \"Osaka\" ); while ( System :: Update ()) { } }","title":"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a"},{"location":"tutorial/formatting/#_3","text":"\u5c0f\u6570\u70b9\u4ee5\u4e0b N \u6841\u3092\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f { :. Nf } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u6709\u52b9\u6841\u6570 6 \u6841\u3067\u5909\u63db\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}\" _fmt ( Math :: Pi ); Print << U \"{:.3f}\" _fmt ( Math :: Pi ); // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u306f : \u306e\u5de6 Print << U \"{1} \u2252 {0:.6f}\" _fmt ( Math :: Pi , U \"\u03c0\" ); Print << U \"{}\" _fmt ( 12345.678 ); Print << U \"{:.3f}\" _fmt ( 12345.678 ); Print << U \"{:.6f}\" _fmt ( 12345.678 ); Print << U \"{}\" _fmt ( 9876543.21 ); Print << U \"{:.0f}\" _fmt ( 9876543.21 ); while ( System :: Update ()) { } }","title":"\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570"},{"location":"tutorial/formatting/#_4","text":"N \u6587\u5b57\u306e\u5e45\u306b\u306a\u308b\u3088\u3046\u3001\u6587\u5b57\u306e\u5de6\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57 c \u3092\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c > N } \u3001\u53f3\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c < N } , \u5de6\u53f3\u306b\u5747\u7b49\u306b\u633f\u5165\u3057\u305f\u3044\u5834\u5408\u306f { : c ^ N } \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002c \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:0>5}\" _fmt ( 3 ); Print << U \"{:>5}\" _fmt ( 3 ); Print << U \"{:>6}\" _fmt ( 100 ); Print << U \"{:*>6}\" _fmt ( 100 ); Print << U \"{:<6}\" _fmt ( 100 ); Print << U \"{:*<6}\" _fmt ( 100 ); Print << U \"{:^6}\" _fmt ( 100 ); Print << U \"{:*^6}\" _fmt ( 100 ); Print << U \"{:?>6}\" _fmt ( U \"aaa\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbb\" ); Print << U \"{:?>6}\" _fmt ( U \"aaabbbccc\" ); while ( System :: Update ()) { } }","title":"\u30d1\u30c7\u30a3\u30f3\u30b0"},{"location":"tutorial/formatting/#_5","text":"{ : X } \u306f\u5927\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : x } \u306f\u5c0f\u6587\u5b57\u306e\u5341\u516d\u9032\u6570\u3001 { : o } \u306f\u516b\u9032\u6570\u3001 { : b } \u306f\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002 # \u3092\u4ed8\u3051\u308b\u3068\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{:X}\" _fmt ( 255 ); Print << U \"{:x}\" _fmt ( 255 ); Print << U \"{:o}\" _fmt ( 255 ); Print << U \"{:b}\" _fmt ( 255 ); Print << U \"{:#X}\" _fmt ( 255 ); Print << U \"{:#x}\" _fmt ( 255 ); Print << U \"{:#o}\" _fmt ( 255 ); Print << U \"{:#b}\" _fmt ( 255 ); while ( System :: Update ()) { } }","title":"\u57fa\u6570"},{"location":"tutorial/formatting/#_6","text":"{ : + } \u306f\u6b63\u306e\u5024\u306b + \u8a18\u53f7\u3092\u4ed8\u52a0\u3057\u3001 { : } \u306f\u6b63\u306e\u5024\u306b\u534a\u89d2\u7a7a\u767d\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Print << U \"{}/{}\" _fmt ( - 123 , 123 ); Print << U \"{:+}/{:+}\" _fmt ( - 123 , 123 ); Print << U \"{: }/{: }\" _fmt ( - 123 , 123 ); Print << U \"{}/{}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{:+}/{:+}\" _fmt ( 0.5 , - 0.5 ); Print << U \"{: }/{: }\" _fmt ( 0.5 , - 0.5 ); while ( System :: Update ()) { } } \u5909\u63db\u6307\u5b9a\u5b50\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f {fmt} Format String Syntax \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7b26\u53f7"},{"location":"tutorial/formatting/#73","text":"Parse < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5f15\u6570\u306e\u6587\u5b57\u5217\u3092 Type \u578b\u306e\u5024\u306b\u5909\u63db\u3057\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u4f8b\u5916 ParseError \u3092\u6295\u3052\u307e\u3059\u3002 ParseOr < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u4f8b\u5916\u3092\u6295\u3052\u308b\u4ee3\u308f\u308a\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"7.3 \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db"},{"location":"tutorial/formatting/#parse","text":"# include <Siv3D.hpp> void Main () { const int32 a = Parse < int32 > ( U \"123\" ); const double b = Parse < double > ( U \"-3.14159\" ); const Point c = Parse < Point > ( U \"(10, 20)\" ); Print << a ; Print << b ; Print << c ; const int32 d = ParseOr < int32 > ( U \"???\" , - 1 ); const ColorF e = ParseOr < ColorF > ( U \"123\" , ColorF ( 0.0 , 0.0 )); const Circle f = ParseOr < Circle > ( U \"\" , Circle ( 0 , 0 , 0 )); Print << d ; Print << e ; Print << f ; while ( System :: Update ()) { } }","title":"Parse \u306e\u57fa\u672c"},{"location":"tutorial/formatting/#parseerror","text":"\u8907\u6570\u306e Parse \u3092\u4f7f\u3046\u5834\u5408\u3001\u5909\u63db\u306e\u5931\u6557\u306e\u691c\u51fa\u306b\u306f\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { try { const Point a = Parse < Point > ( U \"(0,0)\" ); const Point b = Parse < Point > ( U \"(20, 40)\" ); const Point c = Parse < Point > ( U \"123\" ); } catch ( const ParseError & e ) { // \u4f8b\u5916\u306e\u8a73\u7d30\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a Print << e . what (); } while ( System :: Update ()) { } } \u3053\u306e\u307b\u304b\u306b\u3082\u3001\u5909\u63db\u306e\u6210\u5426\u3092 Optional < Type > \u3067\u8fd4\u3059 ParseOpt < Type > () \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"ParseError \u306e\u6355\u6349"},{"location":"tutorial/gui/","text":"9. GUI \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 9.1 \u30dc\u30bf\u30f3 \u00b6 \u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } } 9.2 \u30b9\u30e9\u30a4\u30c0\u30fc \u00b6 \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } } 9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } } 9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3 \u00b6 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } } 9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9 \u00b6 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9. GUI"},{"location":"tutorial/gui/#9-gui","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30dc\u30bf\u30f3\u3084\u30b9\u30e9\u30a4\u30c0\u30fc\u306a\u3069\u7c21\u5358\u306a GUI \u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"9. GUI"},{"location":"tutorial/gui/#91","text":"\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Button () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: Button () \u306f\u81ea\u8eab\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Red\" , Vec2 ( 100 , 100 ))) { Scene :: SetBackground ( ColorF ( 0.8 , 0.1 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Green\" , Vec2 ( 100 , 150 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.8 , 0.1 )); } if ( SimpleGUI :: Button ( U \"Blue\" , Vec2 ( 100 , 200 ))) { Scene :: SetBackground ( ColorF ( 0.1 , 0.1 , 0.8 )); } // \u30dc\u30bf\u30f3\u306e\u5e45\u3092 200px \u306b\u6307\u5b9a if ( SimpleGUI :: Button ( U \"White\" , Vec2 ( 100 , 250 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.9 )); } if ( SimpleGUI :: Button ( U \"Black\" , Vec2 ( 100 , 300 ), 200 )) { Scene :: SetBackground ( ColorF ( 0.1 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316 if ( SimpleGUI :: Button ( U \"Gray\" , Vec2 ( 100 , 350 ), 200 , false )) { Scene :: SetBackground ( ColorF ( 0.5 )); } // \u30dc\u30bf\u30f3\u3092\u7121\u52b9\u5316\u3001\u30dc\u30bf\u30f3\u306e\u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b if ( SimpleGUI :: Button ( U \"Yellow\" , Vec2 ( 100 , 400 ), unspecified , false )) { Scene :: SetBackground ( ColorF ( 0.8 , 0.8 , 0.1 )); } } }","title":"9.1 \u30dc\u30bf\u30f3"},{"location":"tutorial/gui/#92","text":"\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u8868\u793a\u3068\u5024\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: Slider () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u5024\u306e\u7bc4\u56f2\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u7e26\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u306f SimpleGUI :: VerticalSlider () \u3092\u4f7f\u3044\u307e\u3059\u3002 SimpleGUI :: Slider () \u3068 SimpleGUI :: VerticalSlider () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); ColorF color1 ( 1.0 ); ColorF color2 ( 1.0 , 0.5 , 0.0 ); ColorF color3 ( 0.2 , 0.6 , 0.9 ); double value1 = 5.0 ; double value2 = 7.0 ; double value3 = 2.0 ; double value4 = 4.0 ; while ( System :: Update ()) { SimpleGUI :: Slider ( color1 . r , Vec2 ( 100 , 40 )); SimpleGUI :: Slider ( color1 . g , Vec2 ( 100 , 80 )); SimpleGUI :: Slider ( color1 . b , Vec2 ( 100 , 120 )); Circle ( 50 , 100 , 30 ). draw ( color1 ); SimpleGUI :: Slider ( U \"Red\" , color2 . r , Vec2 ( 100 , 200 )); SimpleGUI :: Slider ( U \"Green\" , color2 . g , Vec2 ( 100 , 240 )); SimpleGUI :: Slider ( U \"Blue\" , color2 . b , Vec2 ( 100 , 280 )); Circle ( 50 , 260 , 30 ). draw ( color2 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u3092\u8868\u793a\u3001\u30e9\u30d9\u30eb\u306e\u5e45 100px, \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5e45 200px SimpleGUI :: Slider ( U \"R {:.2f}\" _fmt ( color3 . r ), color3 . r , Vec2 ( 100 , 360 ), 100 , 200 ); SimpleGUI :: Slider ( U \"G {:.2f}\" _fmt ( color3 . g ), color3 . g , Vec2 ( 100 , 400 ), 100 , 200 ); SimpleGUI :: Slider ( U \"B {:.2f}\" _fmt ( color3 . b ), color3 . b , Vec2 ( 100 , 440 ), 100 , 200 ); Circle ( 50 , 420 , 30 ). draw ( color3 ); // \u5024\u306e\u7bc4\u56f2\u304c 0.0\uff5e10.0 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value1 ), value1 , 0.0 , 10.0 , Vec2 ( 500 , 40 ), 60 , 150 ); // \u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7121\u52b9\u5316 SimpleGUI :: Slider ( U \"{:.2f}\" _fmt ( value2 ), value2 , 0.0 , 10.0 , Vec2 ( 500 , 100 ), 60 , 150 , false ); // \u7e26\u306e\u30b9\u30e9\u30a4\u30c0\u30fc SimpleGUI :: VerticalSlider ( value3 , 0.0 , 10.0 , Vec2 ( 500 , 160 ), 200 ); SimpleGUI :: VerticalSlider ( value4 , 0.0 , 10.0 , Vec2 ( 560 , 160 ), 200 , false ); } }","title":"9.2 \u30b9\u30e9\u30a4\u30c0\u30fc"},{"location":"tutorial/gui/#93","text":"\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: CheckBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: CheckBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); bool checked1 = false ; bool checked2 = true ; bool checked3 = false ; bool checked4 = false ; bool checked5 = false ; bool checked6 = false ; while ( System :: Update ()) { SimpleGUI :: CheckBox ( checked1 , U \"Label1\" , Vec2 ( 100 , 40 )); SimpleGUI :: CheckBox ( checked2 , U \"Label2\" , Vec2 ( 100 , 80 )); SimpleGUI :: CheckBox ( checked3 , U \"Label3\" , Vec2 ( 100 , 120 )); // \u5e45 200px SimpleGUI :: CheckBox ( checked4 , U \"Label4\" , Vec2 ( 100 , 180 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: CheckBox ( checked5 , U \"Label5\" , Vec2 ( 100 , 220 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: CheckBox ( checked6 , U \"Label6\" , Vec2 ( 100 , 260 ), unspecified , false ); } }","title":"9.3 \u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9"},{"location":"tutorial/gui/#94","text":"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u8868\u793a\u3068\u5165\u529b\u306e\u53d6\u5f97\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: RadioButtons () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u306e\u30c6\u30ad\u30b9\u30c8\u3084\u4f4d\u7f6e\u3001\u5e45\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 SimpleGUI :: RadioButtons () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { size_t index0 = 0 ; size_t index1 = 2 ; size_t index2 = 0 ; size_t index3 = 1 ; size_t index4 = 0 ; const Array < String > options = { U \"Red\" , U \"Green\" , U \"Blue\" }; constexpr std :: array < ColorF , 3 > colors = { ColorF ( 0.8 , 0.1 , 0.1 ), ColorF ( 0.1 , 0.8 , 0.1 ), ColorF ( 0.1 , 0.1 , 0.8 ) }; Scene :: SetBackground ( colors [ index1 ]); while ( System :: Update ()) { SimpleGUI :: RadioButtons ( index0 , { U \"Option1\" , U \"Option2\" , U \"Option3\" }, Vec2 ( 100 , 40 )); // \u9078\u629e\u80a2\u3092 Array<String> \u3067\u6307\u5b9a if ( SimpleGUI :: RadioButtons ( index1 , options , Vec2 ( 100 , 180 ))) { Scene :: SetBackground ( colors [ index1 ]); } // \u5e45 200px SimpleGUI :: RadioButtons ( index2 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 40 ), 200 ); // \u7121\u52b9\u5316 SimpleGUI :: RadioButtons ( index3 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 140 ), 200 , false ); // \u5e45\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u5408\u308f\u305b\u308b SimpleGUI :: RadioButtons ( index4 , { U \"A\" , U \"B\" }, Vec2 ( 400 , 240 ), unspecified , false ); } }","title":"9.4 \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3"},{"location":"tutorial/gui/#95","text":"\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f SimpleGUI :: TextBox () \u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3001\u5e45\u3001\u6587\u5b57\u6570\u306e\u4e0a\u9650\u3001\u72b6\u614b\u306a\u3069\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f TextEditState \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u7ba1\u7406\u3057\u307e\u3059\u3002 SimpleGUI :: TextBox () \u306f\u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u304d\u306b true \u3092\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Font font ( 30 , Typeface :: Bold ); TextEditState tes1 ; TextEditState tes2 ; tes2 . text = U \"Siv3D\" ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6587\u5b57\u5217 TextEditState tes3 ; TextEditState tes4 ; while ( System :: Update ()) { SimpleGUI :: TextBox ( tes1 , Vec2 ( 100 , 40 )); // .text \u3067\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3001.active \u3067\u30a2\u30af\u30c6\u30a3\u30d6\u304b\u3069\u3046\u304b\u306e\u72b6\u614b\u306b\u30a2\u30af\u30bb\u30b9 font ( tes1 . text ). draw ( 400 , 30 , tes1 . active ? ColorF ( 1.0 , 0.0 , 0.0 ) : ColorF ( 0.25 )); SimpleGUI :: TextBox ( tes2 , Vec2 ( 100 , 100 )); if ( SimpleGUI :: Button ( U \"Clear\" , Vec2 ( 320 , 100 ))) { // \u30c6\u30ad\u30b9\u30c8\u3092\u6d88\u53bb tes2 . clear (); } // \u5e45 100px, \u6587\u5b57\u6570\u3092 4 \u6587\u5b57\u307e\u3067\u306b\u5236\u9650 SimpleGUI :: TextBox ( tes3 , Vec2 ( 100 , 160 ), 100 , 4 ); // \u7121\u52b9\u5316 SimpleGUI :: TextBox ( tes4 , Vec2 ( 100 , 220 ), 100 , 4 , false ); } }","title":"9.5 \u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9"},{"location":"tutorial/keyboard/","text":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 11.1 \u00b6 11.2 \u00b6 11.3 \u00b6 11.4 \u00b6 11.5 \u00b6 11.6 \u00b6 11.7 \u00b6","title":"11. Keyboard"},{"location":"tutorial/keyboard/#11","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"11. \u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b"},{"location":"tutorial/keyboard/#111","text":"","title":"11.1"},{"location":"tutorial/keyboard/#112","text":"","title":"11.2"},{"location":"tutorial/keyboard/#113","text":"","title":"11.3"},{"location":"tutorial/keyboard/#114","text":"","title":"11.4"},{"location":"tutorial/keyboard/#115","text":"","title":"11.5"},{"location":"tutorial/keyboard/#116","text":"","title":"11.6"},{"location":"tutorial/keyboard/#117","text":"","title":"11.7"},{"location":"tutorial/mouse/","text":"12. \u30de\u30a6\u30b9\u5165\u529b \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 12.1 \u00b6","title":"12. Mouse"},{"location":"tutorial/mouse/#12","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30a6\u30b9\u306e\u5165\u529b\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"12. \u30de\u30a6\u30b9\u5165\u529b"},{"location":"tutorial/mouse/#121","text":"","title":"12.1"},{"location":"tutorial/random/","text":"14. \u30e9\u30f3\u30c0\u30e0 \u00b6 14.1 \u00b6","title":"14. Random"},{"location":"tutorial/random/#14","text":"","title":"14. \u30e9\u30f3\u30c0\u30e0"},{"location":"tutorial/random/#141","text":"","title":"14.1"},{"location":"tutorial/shape/","text":"2. Drawing shapes \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002 2.1 \u5186\u3092\u63cf\u304f \u00b6 \u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } } 2.2 \u8272\u3092\u4ed8\u3051\u308b \u00b6 \u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } } 2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b \u00b6 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } } 2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002 2.5 \u67a0\u3092\u63cf\u304f \u00b6 \u56f3\u5f62\u306f\u3001 draw () \u306e\u4ee3\u308f\u308a\u306b drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 drawFrma () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e draw () \u3084 drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002 2.6 \u7dda\u5206\u3092\u63cf\u304f \u00b6 \u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002 draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } } 2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } } 2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } } 2.9 \u6955\u5186\u3092\u63cf\u304f \u00b6 \u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } } 2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f \u00b6 \u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } } 2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 \u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } } 2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f \u00b6 Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002 2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f \u00b6 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } } 2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f \u00b6 LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } } 2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f \u00b6 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } } 2.16 \u77e2\u5370\u3092\u63cf\u304f \u00b6 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } } 2.17 \u6247\u5f62\u3092\u63cf\u304f \u00b6 \u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } } 2.18 \u5186\u5f27\u3092\u63cf\u304f \u00b6 \u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } } 2.19 \u56f3\u5f62\u306e\u64cd\u4f5c \u00b6 \u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } } 2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71 \u00b6 Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 \u00b6 Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2. Drawing shapes"},{"location":"tutorial/shape/#2-drawing-shapes","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u8272\u3084\u56f3\u5f62\u3092\u8868\u73fe\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b66\u3073\u3001\u305d\u308c\u3089\u3092\u4f7f\u3063\u3066\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304d\u307e\u3059\u3002","title":"2. Drawing shapes"},{"location":"tutorial/shape/#21","text":"\u753b\u9762\u306b\u56f3\u5f62\u3092\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002Siv3D \u3067\u306f\u3001\u56f3\u5f62\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u547c\u3093\u3067\u63cf\u753b\u3092\u884c\u3046\u306e\u304c\u57fa\u672c\u7684\u306a\u3084\u308a\u65b9\u3067\u3059\u3002\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Circle \u3092\u4f5c\u6210\u3057\u3001\u305d\u306e draw () \u3092\u547c\u3073\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 20 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 20 ). draw (); } } Circle () \u306e\u6700\u5f8c\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u534a\u5f84\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3001\u63cf\u753b\u3055\u308c\u308b\u5186\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3\u5ea7\u6a19 (400, 300), \u534a\u5f84 100 \u306e\u5186\u3092\u63cf\u304f Circle ( 400 , 300 , 100 ). draw (); } } \u5186\u304c\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u9023\u52d5\u3057\u3066\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Circle () \u306e\u6700\u521d\u306b\u6307\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5186\u306e\u4e2d\u5fc3\u306e X \u5ea7\u6a19\u3067\u3059\u3002\u3053\u306e\u5024\u3092\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e X \u5ea7\u6a19\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , 300 , 100 ). draw (); } } \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3057\u3066\u3001\u5186\u304c\u5de6\u53f3\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 Info Print \u3067\u8868\u793a\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3044\u3064\u307e\u3067\u3082\u753b\u9762\u306b\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001Siv3D \u3067\u306f Print \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u63cf\u753b\u5185\u5bb9\u306f System :: Update \u306e\u305f\u3073\u306b\u80cc\u666f\u306e\u8272\u3067\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u4eca\u5ea6\u306f Y \u5ea7\u6a19\u3082\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3068\u9023\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (). x , Cursor :: Pos (). y , 100 ). draw (); } } Siv3D \u3067 X \u5ea7\u6a19\u3001Y \u5ea7\u6a19 2 \u3064\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u30011 \u3064\u306e Point \u578b\u3092\u53d7\u3051\u53d6\u308b\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u95a2\u6570\uff08\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002 Circle \u3082\u3001\u300cX \u5ea7\u6a19\u300d\u300cY \u5ea7\u6a19\u300d\u300c\u534a\u5f84\u300d\u306e 3 \u3064\u306e\u5f15\u6570\u3067\u306f\u306a\u304f\u3001\u300c\u4e2d\u5fc3\u5ea7\u6a19 ( Point \u578b)\u300d\u300c\u534a\u5f84\u300d\u306e 2 \u3064\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u5148\u307b\u3069\u540c\u3058\u306f\u305f\u3089\u304d\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u66f8\u3051\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"2.1 \u5186\u3092\u63cf\u304f"},{"location":"tutorial/shape/#22","text":"\u56f3\u5f62\u306b\u8272\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f draw () \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u8272\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u306f\u5927\u304d\u304f 4 \u901a\u308a\u3042\u308a\u307e\u3059\u3002 \u8272\u306e\u8868\u73fe \u5024\u306e\u7bc4\u56f2 Palette::\u8272\u540d Web \u30ab\u30e9\u30fc \u306e\u540d\u524d\u3067\u8272\u3092\u6307\u5b9a ColorF(r, g, b, a) 0.0 - 1.0 \u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a Color(r, g, b, a) 0 - 255 \u306e\u6574\u6570\u306e\u7bc4\u56f2\u3067 RGBA \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a HSV(h, s, v, a) \u8272\u76f8 h , \u5f69\u5ea6 s , \u660e\u5ea6 v \u3068\u30a2\u30eb\u30d5\u30a1\u5024 a \u306e\u5404\u6210\u5206\u3092\u6307\u5b9a\u3002 h \u306f 0.0 - 360.0 (370.0 \u306f 10.0 \u3068\u540c\u3058). s, v, a \u306f 0.0 - 1.0,\u306e\u7bc4\u56f2 Palette::\u8272\u540d \u306f RGB \u5024\u3092\u899a\u3048\u3066\u3044\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u8272\u306e\u8868\u73fe\u3067\u3059\u3002 ColorF \u306f Siv3D \u3067\u4e00\u756a\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u8272\u306e\u8868\u73fe\u5f62\u5f0f\u3067\u3059\u3002 Color \u306f Image \u578b\u306e\u8981\u7d20\u3067\u3001Siv3D \u3067\u753b\u50cf\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u5f62\u5f0f\u3067\u3059\u3002 HSV \u306f\u8d64\u3063\u307d\u3044\u3001\u9752\u3063\u307d\u3044\u306a\u3069\u8272\u306e\u7a2e\u985e\u3092\u8868\u3059\u8272\u76f8 (hue) \u3068\u3001\u8272\u306e\u9bae\u3084\u304b\u3092\u8868\u3059\u5f69\u5ea6 (saturation), \u8272\u306e\u660e\u308b\u3055\u3092\u8868\u3059\u660e\u5ea6 (value) \u306e 3 \u8981\u7d20\u3092\u4f7f\u3063\u305f HSV \u8272\u7a7a\u9593\u3067\u8272\u3092\u8868\u73fe\u3057\u307e\u3059\u3002 ColorF , Color , HSV \u306f\u3044\u305a\u308c\u3082 \u30a2\u30eb\u30d5\u30a1\u5024 a \u3092\u6301\u3061\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u300c\u4e0d\u900f\u660e\u5ea6\u300d\u3092\u8868\u3057\u3001\u6700\u5927\u5024 ( ColorF , HSV \u306e\u5834\u5408 1.0, Color \u306e\u5834\u5408 255) \u3067\u306f\u307e\u3063\u305f\u304f\u900f\u904e\u3057\u307e\u305b\u3093\u304c\u3001\u5024\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u305d\u308c\u306b\u5fdc\u3058\u3066\u80cc\u666f\u3092\u900f\u904e\u3059\u308b\u534a\u900f\u660e\u306b\u306a\u308a\u30010 \u306b\u306a\u308b\u3068\u5b8c\u5168\u306b\u900f\u660e\u306b\u306a\u308a\u307e\u3059\u3002 \u8272\u306e\u6307\u5b9a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u77ed\u3044\u66f8\u304d\u65b9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070 ColorF ( 0 . 5 ) \u306f ColorF ( 0 . 5 , 0 . 5 , 0 . 5 , 1 . 0 ) \u3068\u540c\u7b49\u3067\u3059\u3002 \u77ed\u3044\u66f8\u304d\u65b9 \u610f\u5473 ColorF ( r , g , b ) ColorF ( r , g , b , 1 . 0 ) ColorF ( rgb , a ) ColorF ( rgb , rgb , rgb , a ) ColorF ( rgb ) ColorF ( rgb , rgb , rgb , 1 . 0 ) Color ( r , g , b ) Color ( r , g , b , 255 ) Color ( rgb , a ) Color ( rgb , rgb , rgb , a ) Color ( rgb ) Color ( rgb , rgb , rgb , 255 ) HSV ( h , s , v ) HSV ( h , s , v , 1 . 0 ) HSV ( h , a ) HSV ( h , 1 . 0 , 1 . 0 , a ) HSV ( h ) HSV ( h , 1 . 0 , 1 . 0 , 1 . 0 ) \u8272\u306e\u4ed8\u3044\u305f\u3044\u304f\u3064\u304b\u306e\u5186\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 draw () \u306b\u8272\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u56f3\u5f62\u306e\u8272\u306f Palette :: White ( ColorF ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 ) ) \u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5de6\u304b\u3089\u9806\u306b 7 \u3064\u306e\u5186\u3092\u63cf\u304f Circle ( 100 , 200 , 40 ). draw (); Circle ( 200 , 200 , 40 ). draw ( Palette :: Green ); Circle ( 300 , 200 , 40 ). draw ( Palette :: Skyblue ); Circle ( 400 , 200 , 40 ). draw ( ColorF ( 1.0 , 0.8 , 0.0 )); Circle ( 500 , 200 , 40 ). draw ( Color ( 255 , 127 , 127 )); Circle ( 600 , 200 , 40 ). draw ( HSV ( 160.0 , 1.0 , 1.0 )); Circle ( 700 , 200 , 40 ). draw ( HSV ( 160.0 , 0.75 , 1.0 )); // \u534a\u900f\u660e\u306e\u5186 Circle ( Cursor :: Pos (), 80 ). draw ( ColorF ( 0.0 , 0.5 , 1.0 , 0.8 )); } }","title":"2.2 \u8272\u3092\u4ed8\u3051\u308b"},{"location":"tutorial/shape/#23","text":"\u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b\u306b\u306f Scene :: SetBackground \u95a2\u6570\u306b\u8272\u3092\u6e21\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u80cc\u666f\u8272\u306f\u3001\u6b21\u306e System :: Update \u3067\u753b\u9762\u306e\u63cf\u753b\u5185\u5bb9\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3068\u304d\u304b\u3089\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u80cc\u666f\u8272\u306f\u4e00\u5ea6\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u518d\u5ea6\u5909\u66f4\u3055\u308c\u308b\u307e\u3067\u540c\u3058\u8a2d\u5b9a\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.3 , 0.6 , 1.0 )); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 80 ). draw (); } } \u80cc\u666f\u8272\u306e\u5909\u66f4\u306b\u30b3\u30b9\u30c8\u306f\u304b\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u80cc\u666f\u8272\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\u3092 Scene :: Time \u3067\u53d6\u5f97\u3057\u3066\u3001\u6642\u9593\u306b\u5fdc\u3058\u3066\u80cc\u666f\u8272\u306e\u8272\u76f8\u3092\u5909\u5316\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { const double hue = Scene :: Time () * 60.0 ; Scene :: SetBackground ( HSV ( hue , 0.6 , 1.0 )); } }","title":"2.3 \u80cc\u666f\u306e\u8272\u3092\u5909\u3048\u308b"},{"location":"tutorial/shape/#24","text":"\u9577\u65b9\u5f62\u3092\u63cf\u304f\u3068\u304d\u306f Rect \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 400, \u9ad8\u3055 100 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( 20 , 40 , 400 , 100 ). draw (); // \u5ea7\u6a19 (20, 40) \u3092\u5de6\u4e0a\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 80 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( 100 , 200 , 80 ). draw ( Palette :: Orange ); // \u5ea7\u6a19 (400, 300) \u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45 80, \u9ad8\u3055 40 \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( 400 , 300 ), 80 , 40 ). draw ( Palette :: Pink ); // \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306e\u57fa\u6e96\u4f4d\u7f6e\u306b\u3057\u3066\u3001\u5e45\u304c 100 \u306e\u6b63\u65b9\u5f62\u3092\u63cf\u304f Rect ( Arg :: center ( Cursor :: Pos ()), 100 ). draw ( ColorF ( 1.0 , 0.0 , 0.0 , 0.5 )); // \u5ea7\u6a19\u3084\u5927\u304d\u3055\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (\u5c0f\u6570\u3092\u542b\u3080\u6570\uff09\u3067\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f RectF RectF ( 200.4 , 450.3 , 390.5 , 122.5 ). draw ( Palette :: Skyblue ); } } \u56f3\u5f62\u306f draw () \u3057\u305f\u9806\u756a\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306b\u8ffd\u5f93\u3059\u308b\u8d64\u3044\u6b63\u65b9\u5f62\u3088\u308a\u3082\u3001\u753b\u9762\u306e\u4e0b\u306b\u3042\u308b\u6c34\u8272\u306e\u5927\u304d\u306a\u9577\u65b9\u5f62\u304c\u4e0a\u306b\u6765\u307e\u3059\u3002 Rect \u578b\u306f\u5de6\u4e0a\u306e\u5ea7\u6a19\u3068\u5e45\u3001\u9ad8\u3055\u3092\u305d\u308c\u305e\u308c int32 x , int32 y , int32 w , int32 h \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u3067\u8868\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u6271\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c double \u578b\u3067\u3042\u308b RectF \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"2.4 \u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#25","text":"\u56f3\u5f62\u306f\u3001 draw () \u306e\u4ee3\u308f\u308a\u306b drawFrame () \u3059\u308b\u3053\u3068\u3067\u3001\u67a0\u3060\u3051\u3092\u63cf\u3051\u307e\u3059\u3002 drawFrma () \u306e\u7b2c 1 \u5f15\u6570\u306b\u306f\u56f3\u5f62\u306e\u5185\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u3001\u7b2c 2 \u5f15\u6570\u306b\u306f\u5916\u5074\u65b9\u5411\u3078\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u56f3\u5f62\u306e draw () \u3084 drawFrame () \u306e\u623b\u308a\u5024\u306f\u305d\u306e\u56f3\u5f62\u81ea\u8eab\u306a\u306e\u3067\u3001 rect . draw (). drawFrame () \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u7d9a\u3051\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u5185\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 100 , 100 , 100 , 30 ) . drawFrame ( 3 , 0 ); // \u9577\u65b9\u5f62\u306e\u5916\u5074\u306b 3px \u306e\u67a0\u3092\u63cf\u304f Rect ( 220 , 100 , 100 , 30 ) . drawFrame ( 0 , 3 ); // \u9577\u65b9\u5f62\u3068\u3001\u305d\u306e\u5185\u5074 3px \u3068\u5916\u5074 3px \u306b\u67a0\u3092\u63cf\u304f Rect ( 200 , 200 , 400 , 100 ) . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); // \u5186\u306e\u5185\u5074 1px \u3068\u5916\u5074 1px \u306b\u67a0\u3092\u63cf\u304f Circle ( Cursor :: Pos (), 40 ) . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } Rect \u3084 Circle \u306f\u5909\u6570\u3068\u3057\u3066\u7528\u610f\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u56f3\u5f62\u3092\u5b9a\u7fa9\u3059\u308b\u90e8\u5206\u3068\u3001\u63cf\u753b\u3059\u308b\u90e8\u5206\u3092\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u9577\u65b9\u5f62\u306e\u5b9a\u7fa9\uff08\u305a\u3063\u3068\u56fa\u5b9a\u306a\u306e\u3067\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\uff09 constexpr Rect rectA ( 100 , 100 , 100 , 30 ); constexpr Rect rectB ( 220 , 100 , 100 , 30 ); constexpr Rect rectC ( 200 , 200 , 400 , 100 ); while ( System :: Update ()) { // \u5186\u306e\u5b9a\u7fa9\uff08\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u306e\u3067\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\uff09 const Circle circle ( Cursor :: Pos (), 40 ); rectA . drawFrame ( 3 , 0 ); rectB . drawFrame ( 0 , 3 ); rectC . draw ( Palette :: White ) . drawFrame ( 3 , 3 , Palette :: Orange ); circle . drawFrame ( 1 , 1 , Palette :: Seagreen ); } } \u6587\u6cd5 Siv3D \u3067\u306f\u3001 ColorF \u3084 Point , Circle , Rect \u306e\u3088\u3046\u306a\u3001\u5358\u7d14\u306b\u6570\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3044\u304f\u3064\u304b\u306e\u578b\u306b\u3064\u3044\u3066\u3001 constexpr \u3067\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 constexpr \u306f const \u306e\u5f37\u5316\u7248\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5024\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u5024\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u3057\u3066\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001 constexpr \u304c\u4f7f\u3048\u308b\u3068\u3053\u308d\u3067\u306f\u5e38\u306b constexpr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u6bb5\u306e\u958b\u767a\u3067\u306f\u3001\u4f7f\u3044\u5206\u3051\u306b\u6163\u308c\u308b\u307e\u3067\u306f const \u3067\u66f8\u3044\u3066\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002","title":"2.5 \u67a0\u3092\u63cf\u304f"},{"location":"tutorial/shape/#26","text":"\u59cb\u70b9\u3068\u7d42\u70b9\u3092\u6307\u5b9a\u3057\u3066\u7dda\u5206\u3092\u63cf\u304f\u3068\u304d\u306f Line \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002 draw () \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u63cf\u753b\u3059\u308b\u7dda\u5206\u306e\u592a\u3055\u3068\u8272\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u7dda\u5206\u306e\u4e21\u7aef\u3092\u4e38\u304f\u3057\u305f\u308a\u3001\u70b9\u7dda\u306b\u3057\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u30b9\u30bf\u30a4\u30eb\u306e\u5909\u66f4\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100) \u304b\u3089 (400, 150) \u307e\u3067\u592a\u3055 4px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 100 , 100 , 400 , 150 ). draw ( 4 , Palette :: Yellow ); // \u5ea7\u6a19 (400, 300) \u304b\u3089\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u5ea7\u6a19\u307e\u3067\u592a\u3055 10px \u306e\u7dda\u5206\u3092\u63cf\u304f Line ( 400 , 300 , Cursor :: Pos ()). draw ( 10 , Palette :: Skyblue ); // \u901a\u5e38\u306e\u7dda Line ( 100 , 400 , 700 , 400 ). draw ( 12 , Palette :: Orange ); // \u4e21\u7aef\u304c\u4e38\u3044\u7dda Line ( 100 , 450 , 700 , 450 ). draw ( LineStyle :: RoundCap , 12 , Palette :: Orange ); // \u56db\u89d2\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 500 , 700 , 500 ). draw ( LineStyle :: SquareDot , 12 , Palette :: Orange ); // \u4e38\u3044\u30c9\u30c3\u30c8\u306e\u7dda Line ( 100 , 550 , 700 , 550 ). draw ( LineStyle :: RoundDot , 12 , Palette :: Orange ); } }","title":"2.6 \u7dda\u5206\u3092\u63cf\u304f"},{"location":"tutorial/shape/#27","text":"\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 Triangle \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002 Triangle \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u30013 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3068\u3001\u6b63\u4e09\u89d2\u5f62\u306e\u91cd\u5fc3\u5ea7\u6a19\u3068\u8fba\u306e\u9577\u3055\u3001\u56de\u8ee2\u89d2\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 Siv3D \u306b\u304a\u3051\u308b\u89d2\u5ea6\u306f\u3001 2 \u03c0 = 360 \u00b0 \u306e\u30e9\u30b8\u30a2\u30f3\u89d2\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 ToRadians () \u95a2\u6570\u3067\u5ea6\u6570\u6cd5\u304b\u3089\u30e9\u30b8\u30a2\u30f3\u89d2\u3078\u5909\u63db\u3067\u304d\u308b\u307b\u304b\u3001 _deg \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ea\u30c6\u30e9\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 X \u5ea7\u6a19\u3068 Y \u5ea7\u6a19\u306e\u7d44\u306f Point \u578b\u3084 Vec2 \u578b\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 Point \u578b\u306f\u5404\u6210\u5206\u304c int32 \u578b\u3067\u3001 Vec2 \u578b\u306f double \u578b\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u5ea7\u6a19 (100, 100), (400, 300), (100, 300) \u3067\u69cb\u6210\u3055\u308c\u308b\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 100 , 100 , 400 , 300 , 100 , 300 ). draw (); // \u5ea7\u6a19 (300, 100) \u3092\u91cd\u5fc3\u3068\u3059\u308b\u30011 \u8fba\u304c 80px \u306e\u4e09\u89d2\u5f62\u3092\u63cf\u304f Triangle ( 300 , 100 , 80 , 0 _deg ). draw ( Palette :: Orange ); // \u6642\u8a08\u56de\u308a\u306b 15\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 400 , 100 , 80 , 15 _deg ). draw ( Palette :: Seagreen ); // \u6642\u8a08\u56de\u308a\u306b 30\u00b0 \u56de\u8ee2\u3055\u305b\u3066\u63cf\u304f Triangle ( 500 , 100 , 80 , 30 _deg ). draw ( Palette :: Pink ); // 3 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092 Point \u3084 Vec2 \u578b\u3067\u6307\u5b9a Triangle ( Cursor :: Pos (), Vec2 ( 700 , 500 ), Vec2 ( 100 , 500 )). draw ( Palette :: Skyblue ); } }","title":"2.7 \u4e09\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#28","text":"Rect \u3084 RectF \u3067\u306f\u3001\u5404\u8fba\u304c\u6c34\u5e73\u5782\u76f4\u306a\u9577\u65b9\u5f62\u3057\u304b\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001 Quad \u3092\u4f7f\u3046\u3068 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001 Quad \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u56db\u89d2\u5f62\u306f 180\u00b0 \u4ee5\u4e0a\u306e\u5185\u89d2\u3092\u542b\u307e\u306a\u3044\u5f62\u72b6\uff08\u3059\u3079\u3066\u306e\u89d2\u304c\u51f8\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51f9\u89d2\u3092\u542b\u3080\u56db\u89d2\u5f62\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f 2.12 \u3067\u51fa\u3066\u304f\u308b Polygon \u578b\u3092\u4f7f\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 4 \u3064\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u3066\u56db\u89d2\u5f62\u3092\u63cf\u304f Quad ( Vec2 ( 100 , 100 ), Vec2 ( 150 , 100 ), Vec2 ( 300 , 300 ), Vec2 ( 100 , 300 )). draw (); Quad ( Vec2 ( 300 , 400 ), Vec2 ( 500 , 100 ), Vec2 ( 600 , 200 ), Vec2 ( 500 , 500 )). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .rotated () \u307e\u305f\u306f .rotatedAt () \u3092\u4f7f\u3046\u3068\u3001\u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u306e Quad \u3092 .draw () \u3059\u308b\u4e00\u9023\u306e\u64cd\u4f5c\u3092\u6b21\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u3051\u307e\u3059\u3002\u307e\u305f\u3001 Rect :: pos \u306f Rect \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Point \u578b\u3067\u3001 RectF :: pos \u306f RectF \u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092 Vec2 \u578b\u3067\u8868\u3059\u30e1\u30f3\u30d0\u5909\u6570\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 150 , 200 , 400 , 100 ); while ( System :: Update ()) { rect . draw (); // \u6642\u8a08\u56de\u308a\u306b 45\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotated ( 45 _deg ). draw ( Palette :: Orange ); // \u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u3092\u56de\u8ee2\u306e\u8ef8\u3068\u3057\u3066\u6642\u8a08\u56de\u308a\u306b 60\u00b0 \u56de\u8ee2\u3057\u305f\u9577\u65b9\u5f62 rect . rotatedAt ( rect . pos , 60 _deg ). draw ( Palette :: Skyblue ); } } Rect \u3084 RectF \u3092\u4f5c\u6210\u3057\u3001 .shearedX () \u307e\u305f\u306f .shearedY () \u3092\u4f7f\u3046\u3068\u3001\u8fba\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62\u3092 Quad \u578b\u3068\u3057\u3066\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u9577\u65b9\u5f62\u306e\u8fba\u3092 X \u8ef8\u65b9\u5411\u306b 30px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 100 , 50 , 200 , 100 ). drawFrame ( 1 , 0 ) . shearedX ( 30 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62\u306e\u8fba\u3092 Y \u8ef8\u65b9\u5411\u306b -50px \u305a\u3064\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u305f\u5e73\u884c\u56db\u8fba\u5f62 Rect ( 400 , 150 , 300 , 200 ). drawFrame ( 1 , 0 ) . shearedY ( - 50 ). draw ( Palette :: Orange ); } }","title":"2.8 \u51f8\u306a\u56db\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#29","text":"\u6955\u5186\u3092\u63cf\u304f\u3068\u304d\u306f Ellipse \u3092\u4f5c\u6210\u3057\u3066 draw () \u3057\u307e\u3059\u3002\u4e2d\u5fc3\u306e\u5ea7\u6a19\u3068 X \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3001Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u3066 Ellipse \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u4e2d\u5fc3 (300, 200), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 200, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000100 \u306e\u6955\u5186 Ellipse ( 300 , 200 , 200 , 100 ). draw ( Palette :: Skyblue ); // \u4e2d\u5fc3 (600, 400), X \u8ef8\u65b9\u5411\u306e\u534a\u5f84 50, Y \u8ef8\u65b9\u5411\u306e\u534a\u5f84\u3000150 \u306e\u6955\u5186 Ellipse ( 600 , 400 , 50 , 150 ). draw ( Palette :: Orange ); } }","title":"2.9 \u6955\u5186\u3092\u63cf\u304f"},{"location":"tutorial/shape/#210","text":"\u89d2\u304c\u4e38\u3044\u9577\u65b9\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001 RoundRect \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 RectF \u3068\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u52a0\u3048\u3066\u3001\u6700\u5f8c\u306b\u89d2\u306e\u66f2\u7dda\u306e\u534a\u5f84\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 Rect \u3084 RectF \u306e .rounded () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 Rect \u3084 RectF \u304b\u3089 RoundRect \u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Rect rect ( 100 , 350 , 500 , 200 ); while ( System :: Update ()) { // RectF(100, 100, 200, 100) \u306e\u89d2\u3092 10px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( 100 , 100 , 200 , 100 , 10 ). draw (); // RectF(Arg::center(400, 300), 200, 100) \u306e\u89d2\u3092 5px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 RoundRect ( Arg :: center ( 400 , 300 ), 200 , 80 , 5 ). draw ( Palette :: Skyblue ); // \u9577\u65b9\u5f62 rect \u306e\u89d2\u3092 40px \u4e38\u3081\u305f\u89d2\u4e38\u9577\u65b9\u5f62 rect . rounded ( 40 ). draw ( Palette :: Orange ); } }","title":"2.10 \u89d2\u4e38\u9577\u65b9\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#211","text":"\u8907\u96d1\u306a\u56f3\u5f62\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u3042\u308b Shape2D \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 .draw () , .drawFrame () \u3059\u308b\u3053\u3068\u3067\u56f3\u5f62\u3092\u63cf\u3051\u307e\u3059\u3002\u95a2\u6570\u306e\u3046\u3061\u3001\u5f15\u6570\u306b double angle \u3092\u3068\u308b\u3082\u306e\u306f\u3001\u6642\u8a08\u56de\u308a\u306e\u56de\u8ee2\u306e\u89d2\u5ea6\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u540d \u5f62\u72b6 \u5f15\u6570 Shape2D::Cross \u2716 \u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Plus \uff0b\u30de\u30fc\u30af double r , double width , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Pentagon \u6b63\u4e94\u89d2\u5f62 uint32 n , double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Hexagon \u6b63\u516d\u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Ngon \u6b63 N \u89d2\u5f62 double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Star \u4e94\u8292\u661f double r , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Nstar \u661f uint32 n , double rOuter , double rInner , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::Arrow \u77e2\u5370 const Vec2 & from , const Vec2 & to , double width , const Vec2 & headSize Shape2D::Arrow \u77e2\u5370 const Line & line , double width , const Vec2 & headSize Shape2D::Rhombus \u3072\u3057\u5f62 double w , double h , const Vec2 & center = Vec2 ( 0 , 0 ), double angle = 0 . 0 Shape2D::RectBalloon \u9577\u65b9\u5f62\u306e\u5439\u304d\u51fa\u3057 const RectF & rect , const Vec2 & target , double pointingRootRatio = 0 . 5 Shape2D::Stairs \u968e\u6bb5\u5f62 const Vec2 & base , double w , double h , uint32 steps , bool upStairs = true # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Shape2D :: Cross ( 80 , 10 , Vec2 ( 100 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Plus ( 80 , 10 , Vec2 ( 300 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Pentagon ( 80 , Vec2 ( 500 , 100 )). draw ( Palette :: Skyblue ); Shape2D :: Hexagon ( 80 , Vec2 ( 700 , 100 )). draw ( Palette :: Skyblue ); // 30\u00b0 \u56de\u8ee2\u3055\u305b\u308b Shape2D :: Hexagon ( 80 , Vec2 ( 100 , 300 ), 30 _deg ). draw ( Palette :: Skyblue ); // \u6b63\u5341\u89d2\u5f62 Shape2D :: Ngon ( 10 , 80 , Vec2 ( 300 , 300 )). draw ( Palette :: Skyblue ); Shape2D :: Star ( 80 , Vec2 ( 500 , 300 )). draw ( Palette :: Skyblue ); // rOuter \u306f\u5916\u5468\u306e\u534a\u5f84\u3001rInner \u306f\u5185\u5468\u306e\u534a\u5f84 Shape2D :: NStar ( 10 , 80 , 60 , Vec2 ( 700 , 300 )). draw ( Palette :: Skyblue ); // headSize \u306f\u4e09\u89d2\u5f62\u306e\u5e45\u3068\u9ad8\u3055 Shape2D :: Arrow ( Vec2 ( 40 , 540 ), Vec2 ( 160 , 460 ), 20 , Vec2 ( 40 , 30 )). draw ( Palette :: Skyblue ); Shape2D :: Rhombus ( 160 , 120 , Vec2 ( 300 , 500 )). draw ( Palette :: Skyblue ); // \u5439\u304d\u51fa\u3057\u306e\u9577\u65b9\u5f62\u3068\u3001\u4e09\u89d2\u5f62\u306e\u9802\u70b9\u306e\u7f6e\u3092\u6307\u5b9a\u3002\u4e09\u89d2\u5f62\u306e\u30b5\u30a4\u30ba\u306f pointingRootRatio \u3067\u6c7a\u307e\u308b Shape2D :: RectBalloon ( RectF ( 420 , 420 , 160 , 100 ), Vec2 ( 420 , 560 )). draw ( Palette :: Skyblue ); // base \u306b\u306f\u968e\u6bb5\u306e\u6700\u3082\u9ad8\u3044\u6bb5\u306e\u5e95\u306e\u7aef\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3002steps \u306f\u6bb5\u6570\u3001upStairs \u3092 false \u306b\u3059\u308b\u3068\u4e0b\u308a\u306e\u968e\u6bb5\u306b Shape2D :: Stairs ( Vec2 ( 760 , 560 ), 120 , 120 , 4 ). draw ( Palette :: Skyblue ); } }","title":"2.11 \u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#212","text":"Shape2D \u3067\u306f\u8868\u73fe\u3067\u304d\u306a\u3044\u591a\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f Polygon \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 Polygon \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306b\u306f\u3001\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3084\u4e09\u89d2\u5f62\u5206\u5272\u306e\u8a08\u7b97\u306b\u5c11\u3057\u3060\u3051\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002 Polygon \u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u5404\u9802\u70b9\u306e\u5ea7\u6a19\u3092\u6642\u8a08\u56de\u308a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }; while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } \u7a74\u306e\u958b\u3044\u305f Polygon \u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u5468\u306e\u6642\u8a08\u56de\u308a\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8 ( Array < Vec2 > \u578b) \u3068\u3001\u7a74\u306e\u5f62\u72b6\u306e\u300c\u53cd\u6642\u8a08\u56de\u308a\u300d\u306e\u9802\u70b9\u5ea7\u6a19\u30ea\u30b9\u30c8\u306e\u914d\u5217 ( Array < Array < Vec2 >> \u578b) \u304b\u3089 Polygon \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon polygon ( { Vec2 ( 400 , 100 ), Vec2 ( 600 , 300 ), Vec2 ( 500 , 500 ), Vec2 ( 400 , 400 ), Vec2 ( 300 , 500 ), Vec2 ( 200 , 300 ) }, { { Vec2 ( 450 , 250 ), Vec2 ( 350 , 250 ), Vec2 ( 350 , 350 ), Vec2 ( 450 , 350 ) } } ); while ( System :: Update ()) { polygon . draw ( Palette :: Skyblue ); } } Polygon \u3088\u308a\u3082\u5c11\u306a\u3044\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3067\u56f3\u5f62\u3092\u63cf\u304d\u305f\u3044\u5834\u5408\u306f\u3001\u3088\u308a\u4f4e\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3067\u5f62\u72b6\u3092\u5b9a\u7fa9\u3059\u308b Sprite \u30af\u30e9\u30b9\u304c\u4f7f\u3048\u307e\u3059\u3002 Sprite \u3067\u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u307b\u304b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217\u3092\u81ea\u524d\u3067\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u8aac\u660e\u3057\u307e\u305b\u3093\u3002","title":"2.12 \u81ea\u7531\u306b\u591a\u89d2\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#213","text":"\u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f\u306b\u306f\u3001 Vec2 \u578b\u306e\u9802\u70b9\u306e\u914d\u5217\u304b\u3089 LineString \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002 .drawClosed () \u3067\u306f\u7d42\u70b9\u3068\u59cb\u70b9\u3092\u7d50\u3093\u3060\u7dda\u3082\u63cf\u753b\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . draw ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawClosed ( 4 , Palette :: Orange ); } }","title":"2.13 \u9023\u7d9a\u3057\u305f\u7dda\u5206\u3092\u63cf\u304f"},{"location":"tutorial/shape/#214-catmull-rom","text":"LineString \u3092\u63cf\u304f\u969b\u3001 .drawCatmullRom () \u307e\u305f\u306f .drawCatmullRomClosed () \u3059\u308b\u3053\u3068\u3067\u3001\u5404\u9802\u70b9\u3092\u5fc5\u305a\u901a\u308b Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u3051\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const LineString lineA { Vec2 ( 100 , 60 ), Vec2 ( 400 , 140 ), Vec2 ( 100 , 220 ), Vec2 ( 400 , 300 ), Vec2 ( 100 , 380 ), Vec2 ( 400 , 460 ), Vec2 ( 100 , 540 ) }; const LineString lineB { Vec2 ( 500 , 100 ), Vec2 ( 700 , 200 ), Vec2 ( 600 , 500 ), }; while ( System :: Update ()) { // \u592a\u3055 8px \u3067\u63cf\u304f lineA . drawCatmullRom ( 8 , Palette :: Skyblue ); // \u592a\u3055 4px \u3067\u63cf\u304f\uff08\u7d42\u70b9\u304b\u3089\u59cb\u70b9\u3082\u7d50\u3076\uff09 lineB . drawCatmullRomClosed ( 4 , Palette :: Orange ); } }","title":"2.14 Catmull-Rom \u30b9\u30d7\u30e9\u30a4\u30f3\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"tutorial/shape/#215","text":"2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier2 , 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Bezier3 \u3092\u4f5c\u6210\u3057\u3066 .draw () \u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u66f2\u7dda\u8a08\u7b97\u6642\u306e\u54c1\u8cea\uff08\u5206\u5272\u6570\uff09\u3092\u6307\u5b9a\u3059\u308b\u5f15\u6570\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 24 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // 2 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier2 ( Vec2 ( 100 , 400 ), Vec2 ( 100 , 250 ), Vec2 ( 300 , 100 )) . draw ( 4 , Palette :: Skyblue ); // 3 \u6b21\u30d9\u30b8\u30a7\u66f2\u7dda Bezier3 ( Vec2 ( 300 , 400 ), Vec2 ( 400 , 400 ), Vec2 ( 400 , 100 ), Vec2 ( 500 , 100 )) . draw ( 4 , Palette :: Orange ); } }","title":"2.15 \u30d9\u30b8\u30a7\u66f2\u7dda\u3092\u63cf\u304f"},{"location":"tutorial/shape/#216","text":"# include <Siv3D.hpp> void Main () { while ( System :: Update ()) { // \u7dda\u306e\u5e45 3px, \u4e09\u89d2\u306e\u5e45 20px, \u9ad8\u3055 20px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 50 , 200 , 200 , 250 ) . drawArrow ( 3 , Vec2 ( 20 , 20 ), Palette :: Skyblue ); // \u7dda\u306e\u5e45 10px, \u4e09\u89d2\u306e\u5e45 40px, \u9ad8\u3055 80px \u306e\u77e2\u5370\u3092\u63cf\u304f Line ( 450 , 450 , 600 , 100 ) . drawArrow ( 10 , Vec2 ( 40 , 80 ), Palette :: Orange ); } }","title":"2.16 \u77e2\u5370\u3092\u63cf\u304f"},{"location":"tutorial/shape/#217","text":"\u6247\u5f62\u3092\u63cf\u304f\u306b\u306f\u3001\u6247\u5f62\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawPie () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 .drawPie () \u304c\u5143\u306e\u56f3\u5f62\u3092\u8fd4\u3059\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001 drawPie (). drawPie () \u306e\u3088\u3046\u306b\u3064\u306a\u3052\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawPie ( 270 _deg , 30 _deg , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawPie ( 0 _deg , 120 _deg , Palette :: Skyblue ) . drawPie ( 120 _deg , 70 _deg , Palette :: Orange ); } }","title":"2.17 \u6247\u5f62\u3092\u63cf\u304f"},{"location":"tutorial/shape/#218","text":"\u5186\u5f27\u3092\u63cf\u304f\u306b\u306f\u3001\u5186\u5f27\u3092\u3064\u304f\u308b\u5186 Circle \u3092\u4f5c\u6210\u3057\u3001 .drawArc () \u306e\u5f15\u6570\u306b\u300112 \u6642\u306e\u65b9\u5411\u3092 0\u00b0 \u3068\u3057\u305f\u6642\u8a08\u56de\u308a\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u3001\u6247\u306e\u89d2\u306e\u5927\u304d\u3055\u3001\u5f27\u306e\u5185\u5074\u65b9\u5411\u306e\u592a\u3055\u3001\u5916\u5074\u65b9\u5411\u306e\u592a\u3055\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Circle ( 300 , 300 , 200 ) . drawArc ( 270 _deg , 30 _deg , 40 , 0 , Palette :: White ); Circle ( 500 , 300 , 200 ) . drawArc ( 0 _deg , 120 _deg , 80 , 0 , Palette :: Skyblue ) . drawArc ( 120 _deg , 70 _deg , 0 , 20 , Palette :: Orange ); } }","title":"2.18 \u5186\u5f27\u3092\u63cf\u304f"},{"location":"tutorial/shape/#219","text":"\u57fa\u6e96\u306b\u306a\u308b\u56f3\u5f62\u304b\u3089\u3001\u5c11\u3057\u3060\u3051\u5909\u5316\u3055\u305b\u305f\u5f62\u72b6\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u591a\u304f\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u304c .movedBy () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5ea7\u6a19\u3092\u6307\u5b9a\u3057\u305f\u30d9\u30af\u30c8\u30eb\u3067\u5e73\u884c\u79fb\u52d5\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\u307e\u305f\u3001 Rect \u3084 Circle , Line \u306a\u3069\u4e00\u90e8\u306e\u56f3\u5f62\u30af\u30e9\u30b9\u306f .stretched () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u81ea\u8eab\u306e\u5e45\u3084\u9ad8\u3055\u3092\u5909\u66f4\u3057\u305f\u56f3\u5f62\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { constexpr Circle circle ( 100 , 100 , 60 ); constexpr Rect rect ( 400 , 300 , 200 ); while ( System :: Update ()) { circle . draw (); // (200, 0) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 200 , 0 ). draw ( Palette :: Skyblue ); // (0, 200) \u306e\u65b9\u5411\u306b\u5e73\u884c\u79fb\u52d5 circle . movedBy ( 0 , 200 ). draw ( Palette :: Orange ); rect . drawFrame ( 2 , 2 ); // \u4e0a\u4e0b\u5de6\u53f3\u3092 10px \u7e2e\u5c0f rect . stretched ( - 10 ). drawFrame ( 2 , 2 , Palette :: Skyblue ); // \u5de6\u53f3\u3092 40px \u62e1\u5927\u3001\u4e0a\u4e0b\u3092 20px \u7e2e\u5c0f rect . stretched ( 40 , - 20 ). drawFrame ( 2 , 2 , Palette :: Orange ); } } Polygon \u306f\u81ea\u8eab\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u305f\u65b0\u3057\u3044 Polygon \u3092\u8fd4\u3059 .scaled () \u3084\u3001\u56de\u8ee2\u3057\u305f Polygon \u3092\u8fd4\u3059 .rotated () , .rotatedAt () \u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\u307e\u305f\u3001 Shape2D \u306f Polygon \u306b\u5909\u63db\u53ef\u80fd\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { const Polygon star = Shape2D :: Star ( 150 , Vec2 ( 0 , 0 )); while ( System :: Update ()) { star . scaled ( 1.2 ). movedBy ( 200 , 200 ). draw ( ColorF ( 0.6 )); star . movedBy ( 200 , 200 ). draw ( ColorF ( 0.8 )); star . scaled ( 0.8 ). movedBy ( 200 , 200 ). draw ( ColorF ( 1.0 )); star . rotated ( - 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 0.6 )); star . movedBy ( 600 , 400 ). draw ( ColorF ( 0.8 )); star . rotated ( 30 _deg ). movedBy ( 600 , 400 ). draw ( ColorF ( 1.0 )); } }","title":"2.19 \u56f3\u5f62\u306e\u64cd\u4f5c"},{"location":"tutorial/shape/#220","text":"Rect , RectF , Circle , RoundRect \u306f\u3001\u5f71\u3092\u63cf\u753b\u3059\u308b .drawShadow () \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7b2c 1 \u5f15\u6570\u3067\u5f71\u306e\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 2 \u5f15\u6570\u3067\u307c\u304b\u3057\u306e\u5927\u304d\u3055\u3001\u7b2c 3 \u5f15\u6570\u3067\u5f71\u306e\u5927\u304d\u3055\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3001\u7b2c 4 \u5f15\u6570\u3067\u5f71\u306e\u8272\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5f71\u306f\u5857\u308a\u3064\u3076\u3057\u3067\u63cf\u304b\u308c\u308b\u305f\u3081\u3001\u5f71\u306e\u3042\u3068\u306b\u56f3\u5f62\u3092\u63cf\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); while ( System :: Update ()) { Rect ( 100 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 2 , 2 ), 8 , 1 ) . draw (); Rect ( 300 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 4 , 4 ), 16 , 2 ) . draw (); Rect ( 500 , 50 , 150 , 200 ) . drawShadow ( Vec2 ( 6 , 6 ), 24 , 3 ) . draw (); Circle ( 100 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , 3 ), 8 , 2 ) . draw (); Circle ( 300 , 400 , 50 ) . drawShadow ( Vec2 ( 3 , 0 ), 8 , 2 ) . draw (); Circle ( 500 , 400 , 50 ) . drawShadow ( Vec2 ( 0 , - 3 ), 8 , 2 ) . draw (); Circle ( 700 , 400 , 50 ) . drawShadow ( Vec2 ( - 3 , 0 ), 8 , 2 ) . draw (); } } \u3053\u308c\u3089\u4ee5\u5916\u306e\u5f62\u72b6\u306e\u5f71\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/2D \u56f3\u5f62\u306e\u5f71 \u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002","title":"2.20 \u5186/\u9577\u65b9\u5f62/\u89d2\u4e38\u9577\u65b9\u5f62\u306e\u5f71"},{"location":"tutorial/shape/#221","text":"Line \u3084 Triangle , Rect , RectF , Quad \u306b\u306f\u3001\u9802\u70b9\u3054\u3068\u306b\u8272\u3092\u6307\u5b9a\u3057\u3001\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u5857\u308a\u3064\u3076\u3059\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { while ( System :: Update ()) { Line ( 100 , 100 , 500 , 150 ) . draw ( 6 , Palette :: Yellow , Palette :: Red ); Triangle ( 200 , 200 , 100 ) . draw ( HSV ( 0 ), HSV ( 120 ), HSV ( 240 )); // \u5de6\u304b\u3089\u53f3\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 400 , 200 , 200 , 100 ) . draw ( Arg :: left = Palette :: Skyblue , Arg :: right = Palette :: Blue ); // \u4e0a\u304b\u3089\u4e0b\u3078\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3 Rect ( 200 , 400 , 400 , 100 ) . draw ( Arg :: top = ColorF ( 1.0 , 1.0 ), Arg :: bottom = ColorF ( 1.0 , 0.0 )); } }","title":"2.21 \u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorial/texture/","text":"5. Drawing images \u00b6 \u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b \u00b6 \u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u3067 1 \u56de\u3060\u3051\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002 Texture::drawAt() \u00b6 .drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: Setback // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } } Texture::draw() \u00b6 .draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } } Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7 \u00b6 OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002 5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture::scaled() \u00b6 Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } } Texture::resized() \u00b6 Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } } 5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002 Texture::rotated() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } } Texture::roatedAt() \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } } 5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b \u00b6 Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } } 5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } } 5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b \u00b6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002 \u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u00b6 OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) 5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210 \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Tringle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } } 5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f \u00b6 Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } } 5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } } 5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af \u00b6 if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } } \u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3 \u00b6 \u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba \u00b6 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } } \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165 \u00b6 Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"5. Drawing images"},{"location":"tutorial/texture/#5-drawing-images","text":"\u3053\u306e\u7ae0\u3067\u306f\u3001\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u753b\u9762\u306b\u63cf\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"5. Drawing images"},{"location":"tutorial/texture/#51","text":"\u753b\u9762\u306b\u753b\u50cf\u3092\u63cf\u304d\u305f\u3044\u3068\u304d\u306f Texture \u3092\u4f5c\u6210\u3057\u3001 .draw () \u307e\u305f\u306f .drawAt () \u3057\u307e\u3059\u3002 Texture \u306f\u3001\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f5c\u6210\u3057\u305f\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u305f\u308a\u3001Siv3D \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u7ae0\u306e\u6700\u521d\u3067\u306f\u3001\u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u597d\u304d\u306a\u7d75\u6587\u5b57\u3092\u9078\u3093\u3067 Texture \u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u63cf\u753b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Texture \u306e\u4f5c\u6210\u306b\u306f\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u306e\u5b9f\u884c\u6642\u8ca0\u8377\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u6bce\u30d5\u30ec\u30fc\u30e0\u65b0\u3057\u3044 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u907f\u3051\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u524d\u3067 1 \u56de\u3060\u3051\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u7d75\u6587\u5b57\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Emoji () \u3092\u6e21\u3057\u307e\u3059\u3002","title":"5.1 \u7d75\u6587\u5b57\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#texturedrawat","text":".drawAt () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u7d75\u6587\u5b57\u3084\u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u304f\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u3067\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: Setback // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u592e\u3092\u4e2d\u5fc3\u306b\u63cf\u753b texture . drawAt ( Scene :: Center ()); } }","title":"Texture::drawAt()"},{"location":"tutorial/texture/#texturedraw","text":".draw () \u3067\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u3092\u3069\u3053\u306b\u636e\u3048\u308b\u304b\u3092\u753b\u9762\u306e\u5ea7\u6a19\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u80cc\u666f\u753b\u50cf\u3084 UI \u306a\u3069\u3092\u63cf\u304f\u3068\u304d\u306b\u306f\u3053\u3061\u3089\u304c\u4fbf\u5229\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3067\u306f\u3001\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u5ea7\u6a19\u3092\u8d64\u4e38\u3067\u8868\u793a\u3057\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5883\u754c\u7dda\u3092\u767d\u7dda\u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \ud83d\udc08 \u306e\u7d75\u6587\u5b57\u304b\u3089\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5ea7\u6a19 (0, 0) \u304b\u3089\u63cf\u753b texture . draw ( 0 , 0 ); // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u753b\u9762\u4e2d\u5fc3\u304b\u3089\u63cf\u753b texture . draw ( Scene :: Center ()); } }","title":"Texture::draw()"},{"location":"tutorial/texture/#siv3d","text":"OpenSiv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306f\u7d04 2,200 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002 \u611f\u60c5\u30fb\u4eba \ud83d\ude00 \ud83d\ude01 \ud83d\ude02 \ud83e\udd23 \ud83d\ude03 \ud83d\ude04 \ud83d\ude05 \ud83d\ude06 \ud83d\ude09 \ud83d\ude0a \ud83d\ude0b \ud83d\ude0e \ud83d\ude0d \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \u263a \ud83d\ude42 \ud83e\udd17 \ud83e\udd14 \ud83d\ude10 \ud83d\ude11 \ud83d\ude36 \ud83d\ude44 \ud83d\ude0f \ud83d\ude23 \ud83d\ude25 \ud83d\ude2e \ud83e\udd10 \ud83d\ude2f \ud83d\ude2a \ud83d\ude2b \ud83d\ude34 \ud83d\ude0c \ud83e\udd13 \ud83d\ude1b \ud83d\ude1c \ud83d\ude1d \ud83e\udd24 \ud83d\ude12 \ud83d\ude13 \ud83d\ude14 \ud83d\ude15 \ud83d\ude43 \ud83e\udd11 \ud83d\ude32 \u2639 \ud83d\ude41 \ud83d\ude16 \ud83d\ude1e \ud83d\ude1f \ud83d\ude24 \ud83d\ude22 \ud83d\ude2d \ud83d\ude26 \ud83d\ude27 \ud83d\ude28 \ud83d\ude29 \ud83d\ude2c \ud83d\ude30 \ud83d\ude31 \ud83d\ude33 \ud83d\ude35 \ud83d\ude21 \ud83d\ude20 \ud83d\ude07 \ud83e\udd20 \ud83e\udd21 \ud83e\udd25 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd22 \ud83e\udd27 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83d\udc80 \u2620 \ud83d\udc7b \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83d\udca9 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc66 \ud83d\udc66\ud83c\udffb \ud83d\udc66\ud83c\udffc \ud83d\udc66\ud83c\udffd \ud83d\udc66\ud83c\udffe \ud83d\udc66\ud83c\udfff \ud83d\udc67 \ud83d\udc67\ud83c\udffb \ud83d\udc67\ud83c\udffc \ud83d\udc67\ud83c\udffd \ud83d\udc67\ud83c\udffe \ud83d\udc67\ud83c\udfff \ud83d\udc68 \ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff \ud83d\udc69 \ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff \ud83d\udc74 \ud83d\udc74\ud83c\udffb \ud83d\udc74\ud83c\udffc \ud83d\udc74\ud83c\udffd \ud83d\udc74\ud83c\udffe \ud83d\udc74\ud83c\udfff \ud83d\udc75 \ud83d\udc75\ud83c\udffb \ud83d\udc75\ud83c\udffc \ud83d\udc75\ud83c\udffd \ud83d\udc75\ud83c\udffe \ud83d\udc75\ud83c\udfff \ud83d\udc76 \ud83d\udc76\ud83c\udffb \ud83d\udc76\ud83c\udffc \ud83d\udc76\ud83c\udffd \ud83d\udc76\ud83c\udffe \ud83d\udc76\ud83c\udfff \ud83d\udc7c \ud83d\udc7c\ud83c\udffb \ud83d\udc7c\ud83c\udffc \ud83d\udc7c\ud83c\udffd \ud83d\udc7c\ud83c\udffe \ud83d\udc7c\ud83c\udfff \ud83d\udc68\u200d\u2695 \ud83d\udc68\ud83c\udffb\u200d\u2695 \ud83d\udc68\ud83c\udffc\u200d\u2695 \ud83d\udc68\ud83c\udffd\u200d\u2695 \ud83d\udc68\ud83c\udffe\u200d\u2695 \ud83d\udc68\ud83c\udfff\u200d\u2695 \ud83d\udc69\u200d\u2695 \ud83d\udc69\ud83c\udffb\u200d\u2695 \ud83d\udc69\ud83c\udffc\u200d\u2695 \ud83d\udc69\ud83c\udffd\u200d\u2695 \ud83d\udc69\ud83c\udffe\u200d\u2695 \ud83d\udc69\ud83c\udfff\u200d\u2695 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb \ud83d\udc68\u200d\u2696 \ud83d\udc68\ud83c\udffb\u200d\u2696 \ud83d\udc68\ud83c\udffc\u200d\u2696 \ud83d\udc68\ud83c\udffd\u200d\u2696 \ud83d\udc68\ud83c\udffe\u200d\u2696 \ud83d\udc68\ud83c\udfff\u200d\u2696 \ud83d\udc69\u200d\u2696 \ud83d\udc69\ud83c\udffb\u200d\u2696 \ud83d\udc69\ud83c\udffc\u200d\u2696 \ud83d\udc69\ud83c\udffd\u200d\u2696 \ud83d\udc69\ud83c\udffe\u200d\u2696 \ud83d\udc69\ud83c\udfff\u200d\u2696 \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27 \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c \ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb \ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8 \ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8 \ud83d\udc68\u200d\u2708 \ud83d\udc68\ud83c\udffb\u200d\u2708 \ud83d\udc68\ud83c\udffc\u200d\u2708 \ud83d\udc68\ud83c\udffd\u200d\u2708 \ud83d\udc68\ud83c\udffe\u200d\u2708 \ud83d\udc68\ud83c\udfff\u200d\u2708 \ud83d\udc69\u200d\u2708 \ud83d\udc69\ud83c\udffb\u200d\u2708 \ud83d\udc69\ud83c\udffc\u200d\u2708 \ud83d\udc69\ud83c\udffd\u200d\u2708 \ud83d\udc69\ud83c\udffe\u200d\u2708 \ud83d\udc69\ud83c\udfff\u200d\u2708 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc69\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92 \ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92 \ud83d\udc6e\u200d\u2642 \ud83d\udc6e\ud83c\udffb\u200d\u2642 \ud83d\udc6e\ud83c\udffc\u200d\u2642 \ud83d\udc6e\ud83c\udffd\u200d\u2642 \ud83d\udc6e\ud83c\udffe\u200d\u2642 \ud83d\udc6e\ud83c\udfff\u200d\u2642 \ud83d\udc6e\u200d\u2640 \ud83d\udc6e\ud83c\udffb\u200d\u2640 \ud83d\udc6e\ud83c\udffc\u200d\u2640 \ud83d\udc6e\ud83c\udffd\u200d\u2640 \ud83d\udc6e\ud83c\udffe\u200d\u2640 \ud83d\udc6e\ud83c\udfff\u200d\u2640 \ud83d\udd75\u200d\u2642 \ud83d\udd75\ud83c\udffb\u200d\u2642 \ud83d\udd75\ud83c\udffc\u200d\u2642 \ud83d\udd75\ud83c\udffd\u200d\u2642 \ud83d\udd75\ud83c\udffe\u200d\u2642 \ud83d\udd75\ud83c\udfff\u200d\u2642 \ud83d\udd75\u200d\u2640 \ud83d\udd75\ud83c\udffb\u200d\u2640 \ud83d\udd75\ud83c\udffc\u200d\u2640 \ud83d\udd75\ud83c\udffd\u200d\u2640 \ud83d\udd75\ud83c\udffe\u200d\u2640 \ud83d\udd75\ud83c\udfff\u200d\u2640 \ud83d\udc82\u200d\u2642 \ud83d\udc82\ud83c\udffb\u200d\u2642 \ud83d\udc82\ud83c\udffc\u200d\u2642 \ud83d\udc82\ud83c\udffd\u200d\u2642 \ud83d\udc82\ud83c\udffe\u200d\u2642 \ud83d\udc82\ud83c\udfff\u200d\u2642 \ud83d\udc82\u200d\u2640 \ud83d\udc82\ud83c\udffb\u200d\u2640 \ud83d\udc82\ud83c\udffc\u200d\u2640 \ud83d\udc82\ud83c\udffd\u200d\u2640 \ud83d\udc82\ud83c\udffe\u200d\u2640 \ud83d\udc82\ud83c\udfff\u200d\u2640 \ud83d\udc77\u200d\u2642 \ud83d\udc77\ud83c\udffb\u200d\u2642 \ud83d\udc77\ud83c\udffc\u200d\u2642 \ud83d\udc77\ud83c\udffd\u200d\u2642 \ud83d\udc77\ud83c\udffe\u200d\u2642 \ud83d\udc77\ud83c\udfff\u200d\u2642 \ud83d\udc77\u200d\u2640 \ud83d\udc77\ud83c\udffb\u200d\u2640 \ud83d\udc77\ud83c\udffc\u200d\u2640 \ud83d\udc77\ud83c\udffd\u200d\u2640 \ud83d\udc77\ud83c\udffe\u200d\u2640 \ud83d\udc77\ud83c\udfff\u200d\u2640 \ud83d\udc73\u200d\u2642 \ud83d\udc73\ud83c\udffb\u200d\u2642 \ud83d\udc73\ud83c\udffc\u200d\u2642 \ud83d\udc73\ud83c\udffd\u200d\u2642 \ud83d\udc73\ud83c\udffe\u200d\u2642 \ud83d\udc73\ud83c\udfff\u200d\u2642 \ud83d\udc73\u200d\u2640 \ud83d\udc73\ud83c\udffb\u200d\u2640 \ud83d\udc73\ud83c\udffc\u200d\u2640 \ud83d\udc73\ud83c\udffd\u200d\u2640 \ud83d\udc73\ud83c\udffe\u200d\u2640 \ud83d\udc73\ud83c\udfff\u200d\u2640 \ud83d\udc71\u200d\u2642 \ud83d\udc71\ud83c\udffb\u200d\u2642 \ud83d\udc71\ud83c\udffc\u200d\u2642 \ud83d\udc71\ud83c\udffd\u200d\u2642 \ud83d\udc71\ud83c\udffe\u200d\u2642 \ud83d\udc71\ud83c\udfff\u200d\u2642 \ud83d\udc71\u200d\u2640 \ud83d\udc71\ud83c\udffb\u200d\u2640 \ud83d\udc71\ud83c\udffc\u200d\u2640 \ud83d\udc71\ud83c\udffd\u200d\u2640 \ud83d\udc71\ud83c\udffe\u200d\u2640 \ud83d\udc71\ud83c\udfff\u200d\u2640 \ud83c\udf85 \ud83c\udf85\ud83c\udffb \ud83c\udf85\ud83c\udffc \ud83c\udf85\ud83c\udffd \ud83c\udf85\ud83c\udffe \ud83c\udf85\ud83c\udfff \ud83e\udd36 \ud83e\udd36\ud83c\udffb \ud83e\udd36\ud83c\udffc \ud83e\udd36\ud83c\udffd \ud83e\udd36\ud83c\udffe \ud83e\udd36\ud83c\udfff \ud83d\udc78 \ud83d\udc78\ud83c\udffb \ud83d\udc78\ud83c\udffc \ud83d\udc78\ud83c\udffd \ud83d\udc78\ud83c\udffe \ud83d\udc78\ud83c\udfff \ud83e\udd34 \ud83e\udd34\ud83c\udffb \ud83e\udd34\ud83c\udffc \ud83e\udd34\ud83c\udffd \ud83e\udd34\ud83c\udffe \ud83e\udd34\ud83c\udfff \ud83d\udc70 \ud83d\udc70\ud83c\udffb \ud83d\udc70\ud83c\udffc \ud83d\udc70\ud83c\udffd \ud83d\udc70\ud83c\udffe \ud83d\udc70\ud83c\udfff \ud83e\udd35 \ud83e\udd35\ud83c\udffb \ud83e\udd35\ud83c\udffc \ud83e\udd35\ud83c\udffd \ud83e\udd35\ud83c\udffe \ud83e\udd35\ud83c\udfff \ud83e\udd30 \ud83e\udd30\ud83c\udffb \ud83e\udd30\ud83c\udffc \ud83e\udd30\ud83c\udffd \ud83e\udd30\ud83c\udffe \ud83e\udd30\ud83c\udfff \ud83d\udc72 \ud83d\udc72\ud83c\udffb \ud83d\udc72\ud83c\udffc \ud83d\udc72\ud83c\udffd \ud83d\udc72\ud83c\udffe \ud83d\udc72\ud83c\udfff \ud83d\ude4d\u200d\u2642 \ud83d\ude4d\ud83c\udffb\u200d\u2642 \ud83d\ude4d\ud83c\udffc\u200d\u2642 \ud83d\ude4d\ud83c\udffd\u200d\u2642 \ud83d\ude4d\ud83c\udffe\u200d\u2642 \ud83d\ude4d\ud83c\udfff\u200d\u2642 \ud83d\ude4d\u200d\u2640 \ud83d\ude4d\ud83c\udffb\u200d\u2640 \ud83d\ude4d\ud83c\udffc\u200d\u2640 \ud83d\ude4d\ud83c\udffd\u200d\u2640 \ud83d\ude4d\ud83c\udffe\u200d\u2640 \ud83d\ude4d\ud83c\udfff\u200d\u2640 \ud83d\ude4e\u200d\u2642 \ud83d\ude4e\ud83c\udffb\u200d\u2642 \ud83d\ude4e\ud83c\udffc\u200d\u2642 \ud83d\ude4e\ud83c\udffd\u200d\u2642 \ud83d\ude4e\ud83c\udffe\u200d\u2642 \ud83d\ude4e\ud83c\udfff\u200d\u2642 \ud83d\ude4e\u200d\u2640 \ud83d\ude4e\ud83c\udffb\u200d\u2640 \ud83d\ude4e\ud83c\udffc\u200d\u2640 \ud83d\ude4e\ud83c\udffd\u200d\u2640 \ud83d\ude4e\ud83c\udffe\u200d\u2640 \ud83d\ude4e\ud83c\udfff\u200d\u2640 \ud83d\ude45\u200d\u2642 \ud83d\ude45\ud83c\udffb\u200d\u2642 \ud83d\ude45\ud83c\udffc\u200d\u2642 \ud83d\ude45\ud83c\udffd\u200d\u2642 \ud83d\ude45\ud83c\udffe\u200d\u2642 \ud83d\ude45\ud83c\udfff\u200d\u2642 \ud83d\ude45\u200d\u2640 \ud83d\ude45\ud83c\udffb\u200d\u2640 \ud83d\ude45\ud83c\udffc\u200d\u2640 \ud83d\ude45\ud83c\udffd\u200d\u2640 \ud83d\ude45\ud83c\udffe\u200d\u2640 \ud83d\ude45\ud83c\udfff\u200d\u2640 \ud83d\ude46\u200d\u2642 \ud83d\ude46\ud83c\udffb\u200d\u2642 \ud83d\ude46\ud83c\udffc\u200d\u2642 \ud83d\ude46\ud83c\udffd\u200d\u2642 \ud83d\ude46\ud83c\udffe\u200d\u2642 \ud83d\ude46\ud83c\udfff\u200d\u2642 \ud83d\ude46\u200d\u2640 \ud83d\ude46\ud83c\udffb\u200d\u2640 \ud83d\ude46\ud83c\udffc\u200d\u2640 \ud83d\ude46\ud83c\udffd\u200d\u2640 \ud83d\ude46\ud83c\udffe\u200d\u2640 \ud83d\ude46\ud83c\udfff\u200d\u2640 \ud83d\udc81\u200d\u2642 \ud83d\udc81\ud83c\udffb\u200d\u2642 \ud83d\udc81\ud83c\udffc\u200d\u2642 \ud83d\udc81\ud83c\udffd\u200d\u2642 \ud83d\udc81\ud83c\udffe\u200d\u2642 \ud83d\udc81\ud83c\udfff\u200d\u2642 \ud83d\udc81\u200d\u2640 \ud83d\udc81\ud83c\udffb\u200d\u2640 \ud83d\udc81\ud83c\udffc\u200d\u2640 \ud83d\udc81\ud83c\udffd\u200d\u2640 \ud83d\udc81\ud83c\udffe\u200d\u2640 \ud83d\udc81\ud83c\udfff\u200d\u2640 \ud83d\ude4b\u200d\u2642 \ud83d\ude4b\ud83c\udffb\u200d\u2642 \ud83d\ude4b\ud83c\udffc\u200d\u2642 \ud83d\ude4b\ud83c\udffd\u200d\u2642 \ud83d\ude4b\ud83c\udffe\u200d\u2642 \ud83d\ude4b\ud83c\udfff\u200d\u2642 \ud83d\ude4b\u200d\u2640 \ud83d\ude4b\ud83c\udffb\u200d\u2640 \ud83d\ude4b\ud83c\udffc\u200d\u2640 \ud83d\ude4b\ud83c\udffd\u200d\u2640 \ud83d\ude4b\ud83c\udffe\u200d\u2640 \ud83d\ude4b\ud83c\udfff\u200d\u2640 \ud83d\ude47\u200d\u2642 \ud83d\ude47\ud83c\udffb\u200d\u2642 \ud83d\ude47\ud83c\udffc\u200d\u2642 \ud83d\ude47\ud83c\udffd\u200d\u2642 \ud83d\ude47\ud83c\udffe\u200d\u2642 \ud83d\ude47\ud83c\udfff\u200d\u2642 \ud83d\ude47\u200d\u2640 \ud83d\ude47\ud83c\udffb\u200d\u2640 \ud83d\ude47\ud83c\udffc\u200d\u2640 \ud83d\ude47\ud83c\udffd\u200d\u2640 \ud83d\ude47\ud83c\udffe\u200d\u2640 \ud83d\ude47\ud83c\udfff\u200d\u2640 \ud83e\udd26\u200d\u2642 \ud83e\udd26\ud83c\udffb\u200d\u2642 \ud83e\udd26\ud83c\udffc\u200d\u2642 \ud83e\udd26\ud83c\udffd\u200d\u2642 \ud83e\udd26\ud83c\udffe\u200d\u2642 \ud83e\udd26\ud83c\udfff\u200d\u2642 \ud83e\udd26\u200d\u2640 \ud83e\udd26\ud83c\udffb\u200d\u2640 \ud83e\udd26\ud83c\udffc\u200d\u2640 \ud83e\udd26\ud83c\udffd\u200d\u2640 \ud83e\udd26\ud83c\udffe\u200d\u2640 \ud83e\udd26\ud83c\udfff\u200d\u2640 \ud83e\udd37\u200d\u2642 \ud83e\udd37\ud83c\udffb\u200d\u2642 \ud83e\udd37\ud83c\udffc\u200d\u2642 \ud83e\udd37\ud83c\udffd\u200d\u2642 \ud83e\udd37\ud83c\udffe\u200d\u2642 \ud83e\udd37\ud83c\udfff\u200d\u2642 \ud83e\udd37\u200d\u2640 \ud83e\udd37\ud83c\udffb\u200d\u2640 \ud83e\udd37\ud83c\udffc\u200d\u2640 \ud83e\udd37\ud83c\udffd\u200d\u2640 \ud83e\udd37\ud83c\udffe\u200d\u2640 \ud83e\udd37\ud83c\udfff\u200d\u2640 \ud83d\udc86\u200d\u2642 \ud83d\udc86\ud83c\udffb\u200d\u2642 \ud83d\udc86\ud83c\udffc\u200d\u2642 \ud83d\udc86\ud83c\udffd\u200d\u2642 \ud83d\udc86\ud83c\udffe\u200d\u2642 \ud83d\udc86\ud83c\udfff\u200d\u2642 \ud83d\udc86\u200d\u2640 \ud83d\udc86\ud83c\udffb\u200d\u2640 \ud83d\udc86\ud83c\udffc\u200d\u2640 \ud83d\udc86\ud83c\udffd\u200d\u2640 \ud83d\udc86\ud83c\udffe\u200d\u2640 \ud83d\udc86\ud83c\udfff\u200d\u2640 \ud83d\udc87\u200d\u2642 \ud83d\udc87\ud83c\udffb\u200d\u2642 \ud83d\udc87\ud83c\udffc\u200d\u2642 \ud83d\udc87\ud83c\udffd\u200d\u2642 \ud83d\udc87\ud83c\udffe\u200d\u2642 \ud83d\udc87\ud83c\udfff\u200d\u2642 \ud83d\udc87\u200d\u2640 \ud83d\udc87\ud83c\udffb\u200d\u2640 \ud83d\udc87\ud83c\udffc\u200d\u2640 \ud83d\udc87\ud83c\udffd\u200d\u2640 \ud83d\udc87\ud83c\udffe\u200d\u2640 \ud83d\udc87\ud83c\udfff\u200d\u2640 \ud83d\udeb6\u200d\u2642 \ud83d\udeb6\ud83c\udffb\u200d\u2642 \ud83d\udeb6\ud83c\udffc\u200d\u2642 \ud83d\udeb6\ud83c\udffd\u200d\u2642 \ud83d\udeb6\ud83c\udffe\u200d\u2642 \ud83d\udeb6\ud83c\udfff\u200d\u2642 \ud83d\udeb6\u200d\u2640 \ud83d\udeb6\ud83c\udffb\u200d\u2640 \ud83d\udeb6\ud83c\udffc\u200d\u2640 \ud83d\udeb6\ud83c\udffd\u200d\u2640 \ud83d\udeb6\ud83c\udffe\u200d\u2640 \ud83d\udeb6\ud83c\udfff\u200d\u2640 \ud83c\udfc3\u200d\u2642 \ud83c\udfc3\ud83c\udffb\u200d\u2642 \ud83c\udfc3\ud83c\udffc\u200d\u2642 \ud83c\udfc3\ud83c\udffd\u200d\u2642 \ud83c\udfc3\ud83c\udffe\u200d\u2642 \ud83c\udfc3\ud83c\udfff\u200d\u2642 \ud83c\udfc3\u200d\u2640 \ud83c\udfc3\ud83c\udffb\u200d\u2640 \ud83c\udfc3\ud83c\udffc\u200d\u2640 \ud83c\udfc3\ud83c\udffd\u200d\u2640 \ud83c\udfc3\ud83c\udffe\u200d\u2640 \ud83c\udfc3\ud83c\udfff\u200d\u2640 \ud83d\udc83 \ud83d\udc83\ud83c\udffb \ud83d\udc83\ud83c\udffc \ud83d\udc83\ud83c\udffd \ud83d\udc83\ud83c\udffe \ud83d\udc83\ud83c\udfff \ud83d\udd7a \ud83d\udd7a\ud83c\udffb \ud83d\udd7a\ud83c\udffc \ud83d\udd7a\ud83c\udffd \ud83d\udd7a\ud83c\udffe \ud83d\udd7a\ud83c\udfff \ud83d\udc6f\u200d\u2642 \ud83d\udc6f\u200d\u2640 \ud83d\udd74 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udd3a \ud83c\udfc7 \u26f7 \ud83c\udfc2 \ud83c\udfcc\u200d\u2642 \ud83c\udfcc\u200d\u2640 \ud83c\udfc4\u200d\u2642 \ud83c\udfc4\ud83c\udffb\u200d\u2642 \ud83c\udfc4\ud83c\udffc\u200d\u2642 \ud83c\udfc4\ud83c\udffd\u200d\u2642 \ud83c\udfc4\ud83c\udffe\u200d\u2642 \ud83c\udfc4\ud83c\udfff\u200d\u2642 \ud83c\udfc4\u200d\u2640 \ud83c\udfc4\ud83c\udffb\u200d\u2640 \ud83c\udfc4\ud83c\udffc\u200d\u2640 \ud83c\udfc4\ud83c\udffd\u200d\u2640 \ud83c\udfc4\ud83c\udffe\u200d\u2640 \ud83c\udfc4\ud83c\udfff\u200d\u2640 \ud83d\udea3\u200d\u2642 \ud83d\udea3\ud83c\udffb\u200d\u2642 \ud83d\udea3\ud83c\udffc\u200d\u2642 \ud83d\udea3\ud83c\udffd\u200d\u2642 \ud83d\udea3\ud83c\udffe\u200d\u2642 \ud83d\udea3\ud83c\udfff\u200d\u2642 \ud83d\udea3\u200d\u2640 \ud83d\udea3\ud83c\udffb\u200d\u2640 \ud83d\udea3\ud83c\udffc\u200d\u2640 \ud83d\udea3\ud83c\udffd\u200d\u2640 \ud83d\udea3\ud83c\udffe\u200d\u2640 \ud83d\udea3\ud83c\udfff\u200d\u2640 \ud83c\udfca\u200d\u2642 \ud83c\udfca\ud83c\udffb\u200d\u2642 \ud83c\udfca\ud83c\udffc\u200d\u2642 \ud83c\udfca\ud83c\udffd\u200d\u2642 \ud83c\udfca\ud83c\udffe\u200d\u2642 \ud83c\udfca\ud83c\udfff\u200d\u2642 \ud83c\udfca\u200d\u2640 \ud83c\udfca\ud83c\udffb\u200d\u2640 \ud83c\udfca\ud83c\udffc\u200d\u2640 \ud83c\udfca\ud83c\udffd\u200d\u2640 \ud83c\udfca\ud83c\udffe\u200d\u2640 \ud83c\udfca\ud83c\udfff\u200d\u2640 \u26f9\u200d\u2642 \u26f9\ud83c\udffb\u200d\u2642 \u26f9\ud83c\udffc\u200d\u2642 \u26f9\ud83c\udffd\u200d\u2642 \u26f9\ud83c\udffe\u200d\u2642 \u26f9\ud83c\udfff\u200d\u2642 \u26f9\u200d\u2640 \u26f9\ud83c\udffb\u200d\u2640 \u26f9\ud83c\udffc\u200d\u2640 \u26f9\ud83c\udffd\u200d\u2640 \u26f9\ud83c\udffe\u200d\u2640 \u26f9\ud83c\udfff\u200d\u2640 \ud83c\udfcb\u200d\u2642 \ud83c\udfcb\ud83c\udffb\u200d\u2642 \ud83c\udfcb\ud83c\udffc\u200d\u2642 \ud83c\udfcb\ud83c\udffd\u200d\u2642 \ud83c\udfcb\ud83c\udffe\u200d\u2642 \ud83c\udfcb\ud83c\udfff\u200d\u2642 \ud83c\udfcb\u200d\u2640 \ud83c\udfcb\ud83c\udffb\u200d\u2640 \ud83c\udfcb\ud83c\udffc\u200d\u2640 \ud83c\udfcb\ud83c\udffd\u200d\u2640 \ud83c\udfcb\ud83c\udffe\u200d\u2640 \ud83c\udfcb\ud83c\udfff\u200d\u2640 \ud83d\udeb4\u200d\u2642 \ud83d\udeb4\ud83c\udffb\u200d\u2642 \ud83d\udeb4\ud83c\udffc\u200d\u2642 \ud83d\udeb4\ud83c\udffd\u200d\u2642 \ud83d\udeb4\ud83c\udffe\u200d\u2642 \ud83d\udeb4\ud83c\udfff\u200d\u2642 \ud83d\udeb4\u200d\u2640 \ud83d\udeb4\ud83c\udffb\u200d\u2640 \ud83d\udeb4\ud83c\udffc\u200d\u2640 \ud83d\udeb4\ud83c\udffd\u200d\u2640 \ud83d\udeb4\ud83c\udffe\u200d\u2640 \ud83d\udeb4\ud83c\udfff\u200d\u2640 \ud83d\udeb5\u200d\u2642 \ud83d\udeb5\ud83c\udffb\u200d\u2642 \ud83d\udeb5\ud83c\udffc\u200d\u2642 \ud83d\udeb5\ud83c\udffd\u200d\u2642 \ud83d\udeb5\ud83c\udffe\u200d\u2642 \ud83d\udeb5\ud83c\udfff\u200d\u2642 \ud83d\udeb5\u200d\u2640 \ud83d\udeb5\ud83c\udffb\u200d\u2640 \ud83d\udeb5\ud83c\udffc\u200d\u2640 \ud83d\udeb5\ud83c\udffd\u200d\u2640 \ud83d\udeb5\ud83c\udffe\u200d\u2640 \ud83d\udeb5\ud83c\udfff\u200d\u2640 \ud83c\udfce \ud83c\udfcd \ud83e\udd38\u200d\u2642 \ud83e\udd38\ud83c\udffb\u200d\u2642 \ud83e\udd38\ud83c\udffc\u200d\u2642 \ud83e\udd38\ud83c\udffd\u200d\u2642 \ud83e\udd38\ud83c\udffe\u200d\u2642 \ud83e\udd38\ud83c\udfff\u200d\u2642 \ud83e\udd38\u200d\u2640 \ud83e\udd38\ud83c\udffb\u200d\u2640 \ud83e\udd38\ud83c\udffc\u200d\u2640 \ud83e\udd38\ud83c\udffd\u200d\u2640 \ud83e\udd38\ud83c\udffe\u200d\u2640 \ud83e\udd38\ud83c\udfff\u200d\u2640 \ud83e\udd3c\u200d\u2642 \ud83e\udd3c\u200d\u2640 \ud83e\udd3d\u200d\u2642 \ud83e\udd3d\ud83c\udffb\u200d\u2642 \ud83e\udd3d\ud83c\udffc\u200d\u2642 \ud83e\udd3d\ud83c\udffd\u200d\u2642 \ud83e\udd3d\ud83c\udffe\u200d\u2642 \ud83e\udd3d\ud83c\udfff\u200d\u2642 \ud83e\udd3d\u200d\u2640 \ud83e\udd3d\ud83c\udffb\u200d\u2640 \ud83e\udd3d\ud83c\udffc\u200d\u2640 \ud83e\udd3d\ud83c\udffd\u200d\u2640 \ud83e\udd3d\ud83c\udffe\u200d\u2640 \ud83e\udd3d\ud83c\udfff\u200d\u2640 \ud83e\udd3e\u200d\u2642 \ud83e\udd3e\ud83c\udffb\u200d\u2642 \ud83e\udd3e\ud83c\udffc\u200d\u2642 \ud83e\udd3e\ud83c\udffd\u200d\u2642 \ud83e\udd3e\ud83c\udffe\u200d\u2642 \ud83e\udd3e\ud83c\udfff\u200d\u2642 \ud83e\udd3e\u200d\u2640 \ud83e\udd3e\ud83c\udffb\u200d\u2640 \ud83e\udd3e\ud83c\udffc\u200d\u2640 \ud83e\udd3e\ud83c\udffd\u200d\u2640 \ud83e\udd3e\ud83c\udffe\u200d\u2640 \ud83e\udd3e\ud83c\udfff\u200d\u2640 \ud83e\udd39\u200d\u2642 \ud83e\udd39\ud83c\udffb\u200d\u2642 \ud83e\udd39\ud83c\udffc\u200d\u2642 \ud83e\udd39\ud83c\udffd\u200d\u2642 \ud83e\udd39\ud83c\udffe\u200d\u2642 \ud83e\udd39\ud83c\udfff\u200d\u2642 \ud83e\udd39\u200d\u2640 \ud83e\udd39\ud83c\udffb\u200d\u2640 \ud83e\udd39\ud83c\udffc\u200d\u2640 \ud83e\udd39\ud83c\udffd\u200d\u2640 \ud83e\udd39\ud83c\udffe\u200d\u2640 \ud83e\udd39\ud83c\udfff\u200d\u2640 \ud83d\udc6b \ud83d\udc6c \ud83d\udc6d \ud83d\udc69\u200d\u2764\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \u4f53\u30fb\u88c5\u98fe \ud83c\udffb \ud83c\udffc \ud83c\udffd \ud83c\udffe \ud83c\udfff \ud83d\udcaa \ud83d\udcaa\ud83c\udffb \ud83d\udcaa\ud83c\udffc \ud83d\udcaa\ud83c\udffd \ud83d\udcaa\ud83c\udffe \ud83d\udcaa\ud83c\udfff \ud83e\udd33 \ud83e\udd33\ud83c\udffb \ud83e\udd33\ud83c\udffc \ud83e\udd33\ud83c\udffd \ud83e\udd33\ud83c\udffe \ud83e\udd33\ud83c\udfff \ud83d\udc48 \ud83d\udc48\ud83c\udffb \ud83d\udc48\ud83c\udffc \ud83d\udc48\ud83c\udffd \ud83d\udc48\ud83c\udffe \ud83d\udc48\ud83c\udfff \ud83d\udc49 \ud83d\udc49\ud83c\udffb \ud83d\udc49\ud83c\udffc \ud83d\udc49\ud83c\udffd \ud83d\udc49\ud83c\udffe \ud83d\udc49\ud83c\udfff \u261d \u261d\ud83c\udffb \u261d\ud83c\udffc \u261d\ud83c\udffd \u261d\ud83c\udffe \u261d\ud83c\udfff \ud83d\udc46 \ud83d\udc46\ud83c\udffb \ud83d\udc46\ud83c\udffc \ud83d\udc46\ud83c\udffd \ud83d\udc46\ud83c\udffe \ud83d\udc46\ud83c\udfff \ud83d\udd95 \ud83d\udd95\ud83c\udffb \ud83d\udd95\ud83c\udffc \ud83d\udd95\ud83c\udffd \ud83d\udd95\ud83c\udffe \ud83d\udd95\ud83c\udfff \ud83d\udc47 \ud83d\udc47\ud83c\udffb \ud83d\udc47\ud83c\udffc \ud83d\udc47\ud83c\udffd \ud83d\udc47\ud83c\udffe \ud83d\udc47\ud83c\udfff \u270c \u270c\ud83c\udffb \u270c\ud83c\udffc \u270c\ud83c\udffd \u270c\ud83c\udffe \u270c\ud83c\udfff \ud83e\udd1e \ud83e\udd1e\ud83c\udffb \ud83e\udd1e\ud83c\udffc \ud83e\udd1e\ud83c\udffd \ud83e\udd1e\ud83c\udffe \ud83e\udd1e\ud83c\udfff \ud83d\udd96 \ud83d\udd96\ud83c\udffb \ud83d\udd96\ud83c\udffc \ud83d\udd96\ud83c\udffd \ud83d\udd96\ud83c\udffe \ud83d\udd96\ud83c\udfff \ud83e\udd18 \ud83e\udd18\ud83c\udffb \ud83e\udd18\ud83c\udffc \ud83e\udd18\ud83c\udffd \ud83e\udd18\ud83c\udffe \ud83e\udd18\ud83c\udfff \ud83e\udd19 \ud83e\udd19\ud83c\udffb \ud83e\udd19\ud83c\udffc \ud83e\udd19\ud83c\udffd \ud83e\udd19\ud83c\udffe \ud83e\udd19\ud83c\udfff \ud83d\udd90 \ud83d\udd90\ud83c\udffb \ud83d\udd90\ud83c\udffc \ud83d\udd90\ud83c\udffd \ud83d\udd90\ud83c\udffe \ud83d\udd90\ud83c\udfff \u270b \u270b\ud83c\udffb \u270b\ud83c\udffc \u270b\ud83c\udffd \u270b\ud83c\udffe \u270b\ud83c\udfff \ud83d\udc4c \ud83d\udc4c\ud83c\udffb \ud83d\udc4c\ud83c\udffc \ud83d\udc4c\ud83c\udffd \ud83d\udc4c\ud83c\udffe \ud83d\udc4c\ud83c\udfff \ud83d\udc4d \ud83d\udc4d\ud83c\udffb \ud83d\udc4d\ud83c\udffc \ud83d\udc4d\ud83c\udffd \ud83d\udc4d\ud83c\udffe \ud83d\udc4d\ud83c\udfff \ud83d\udc4e \ud83d\udc4e\ud83c\udffb \ud83d\udc4e\ud83c\udffc \ud83d\udc4e\ud83c\udffd \ud83d\udc4e\ud83c\udffe \ud83d\udc4e\ud83c\udfff \u270a \u270a\ud83c\udffb \u270a\ud83c\udffc \u270a\ud83c\udffd \u270a\ud83c\udffe \u270a\ud83c\udfff \ud83d\udc4a \ud83d\udc4a\ud83c\udffb \ud83d\udc4a\ud83c\udffc \ud83d\udc4a\ud83c\udffd \ud83d\udc4a\ud83c\udffe \ud83d\udc4a\ud83c\udfff \ud83e\udd1b \ud83e\udd1b\ud83c\udffb \ud83e\udd1b\ud83c\udffc \ud83e\udd1b\ud83c\udffd \ud83e\udd1b\ud83c\udffe \ud83e\udd1b\ud83c\udfff \ud83e\udd1c \ud83e\udd1c\ud83c\udffb \ud83e\udd1c\ud83c\udffc \ud83e\udd1c\ud83c\udffd \ud83e\udd1c\ud83c\udffe \ud83e\udd1c\ud83c\udfff \ud83e\udd1a \ud83e\udd1a\ud83c\udffb \ud83e\udd1a\ud83c\udffc \ud83e\udd1a\ud83c\udffd \ud83e\udd1a\ud83c\udffe \ud83e\udd1a\ud83c\udfff \ud83d\udc4b \ud83d\udc4b\ud83c\udffb \ud83d\udc4b\ud83c\udffc \ud83d\udc4b\ud83c\udffd \ud83d\udc4b\ud83c\udffe \ud83d\udc4b\ud83c\udfff \ud83d\udc4f \ud83d\udc4f\ud83c\udffb \ud83d\udc4f\ud83c\udffc \ud83d\udc4f\ud83c\udffd \ud83d\udc4f\ud83c\udffe \ud83d\udc4f\ud83c\udfff \u270d \u270d\ud83c\udffb \u270d\ud83c\udffc \u270d\ud83c\udffd \u270d\ud83c\udffe \u270d\ud83c\udfff \ud83d\udc50 \ud83d\udc50\ud83c\udffb \ud83d\udc50\ud83c\udffc \ud83d\udc50\ud83c\udffd \ud83d\udc50\ud83c\udffe \ud83d\udc50\ud83c\udfff \ud83d\ude4c \ud83d\ude4c\ud83c\udffb \ud83d\ude4c\ud83c\udffc \ud83d\ude4c\ud83c\udffd \ud83d\ude4c\ud83c\udffe \ud83d\ude4c\ud83c\udfff \ud83d\ude4f \ud83d\ude4f\ud83c\udffb \ud83d\ude4f\ud83c\udffc \ud83d\ude4f\ud83c\udffd \ud83d\ude4f\ud83c\udffe \ud83d\ude4f\ud83c\udfff \ud83e\udd1d \ud83d\udc85 \ud83d\udc85\ud83c\udffb \ud83d\udc85\ud83c\udffc \ud83d\udc85\ud83c\udffd \ud83d\udc85\ud83c\udffe \ud83d\udc85\ud83c\udfff \ud83d\udc42 \ud83d\udc42\ud83c\udffb \ud83d\udc42\ud83c\udffc \ud83d\udc42\ud83c\udffd \ud83d\udc42\ud83c\udffe \ud83d\udc42\ud83c\udfff \ud83d\udc43 \ud83d\udc43\ud83c\udffb \ud83d\udc43\ud83c\udffc \ud83d\udc43\ud83c\udffd \ud83d\udc43\ud83c\udffe \ud83d\udc43\ud83c\udfff \ud83d\udc63 \ud83d\udc40 \ud83d\udc41 \ud83d\udc41\u200d\ud83d\udde8 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83d\udc98 \u2764 \ud83d\udc93 \ud83d\udc94 \ud83d\udc95 \ud83d\udc96 \ud83d\udc97 \ud83d\udc99 \ud83d\udc9a \ud83d\udc9b \ud83d\udc9c \ud83d\udda4 \ud83d\udc9d \ud83d\udc9e \ud83d\udc9f \u2763 \ud83d\udc8c \ud83d\udca4 \ud83d\udca2 \ud83d\udca3 \ud83d\udca5 \ud83d\udca6 \ud83d\udca8 \ud83d\udcab \ud83d\udcac \ud83d\udde8 \ud83d\uddef \ud83d\udcad \ud83d\udd73 \ud83d\udc53 \ud83d\udd76 \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83d\udc57 \ud83d\udc58 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83d\udecd \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83d\udc60 \ud83d\udc61 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \u26d1 \ud83d\udcff \ud83d\udc84 \ud83d\udc8d \ud83d\udc8e \u52d5\u7269 \ud83d\udc35 \ud83d\udc12 \ud83e\udd8d \ud83d\udc36 \ud83d\udc15 \ud83d\udc29 \ud83d\udc3a \ud83e\udd8a \ud83d\udc31 \ud83d\udc08 \ud83e\udd81 \ud83d\udc2f \ud83d\udc05 \ud83d\udc06 \ud83d\udc34 \ud83d\udc0e \ud83e\udd8c \ud83e\udd84 \ud83d\udc2e \ud83d\udc02 \ud83d\udc03 \ud83d\udc04 \ud83d\udc37 \ud83d\udc16 \ud83d\udc17 \ud83d\udc3d \ud83d\udc0f \ud83d\udc11 \ud83d\udc10 \ud83d\udc2a \ud83d\udc2b \ud83d\udc18 \ud83e\udd8f \ud83d\udc2d \ud83d\udc01 \ud83d\udc00 \ud83d\udc39 \ud83d\udc30 \ud83d\udc07 \ud83d\udc3f \ud83e\udd87 \ud83d\udc3b \ud83d\udc28 \ud83d\udc3c \ud83d\udc3e \ud83e\udd83 \ud83d\udc14 \ud83d\udc13 \ud83d\udc23 \ud83d\udc24 \ud83d\udc25 \ud83d\udc26 \ud83d\udc27 \ud83d\udd4a \ud83e\udd85 \ud83e\udd86 \ud83e\udd89 \ud83d\udc38 \ud83d\udc0a \ud83d\udc22 \ud83e\udd8e \ud83d\udc0d \ud83d\udc32 \ud83d\udc09 \ud83d\udc33 \ud83d\udc0b \ud83d\udc2c \ud83d\udc1f \ud83d\udc20 \ud83d\udc21 \ud83e\udd88 \ud83d\udc19 \ud83d\udc1a \ud83e\udd80 \ud83e\udd90 \ud83e\udd91 \ud83e\udd8b \ud83d\udc0c \ud83d\udc1b \ud83d\udc1c \ud83d\udc1d \ud83d\udc1e \ud83d\udd77 \ud83d\udd78 \ud83e\udd82 \u690d\u7269 \ud83d\udc90 \ud83c\udf38 \ud83d\udcae \ud83c\udff5 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf3b \ud83c\udf3c \ud83c\udf37 \ud83c\udf31 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83c\udf35 \ud83c\udf3e \ud83c\udf3f \u2618 \ud83c\udf40 \ud83c\udf41 \ud83c\udf42 \ud83c\udf43 \u98df\u3079\u7269\u30fb\u98df\u4e8b \ud83c\udf47 \ud83c\udf48 \ud83c\udf49 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83c\udf50 \ud83c\udf51 \ud83c\udf52 \ud83c\udf53 \ud83e\udd5d \ud83c\udf45 \ud83e\udd51 \ud83c\udf46 \ud83e\udd54 \ud83e\udd55 \ud83c\udf3d \ud83c\udf36 \ud83e\udd52 \ud83c\udf44 \ud83e\udd5c \ud83c\udf30 \ud83c\udf5e \ud83e\udd50 \ud83e\udd56 \ud83e\udd5e \ud83e\uddc0 \ud83c\udf56 \ud83c\udf57 \ud83e\udd53 \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83c\udf2d \ud83c\udf2e \ud83c\udf2f \ud83e\udd59 \ud83e\udd5a \ud83c\udf73 \ud83e\udd58 \ud83c\udf72 \ud83e\udd57 \ud83c\udf7f \ud83c\udf71 \ud83c\udf58 \ud83c\udf59 \ud83c\udf5a \ud83c\udf5b \ud83c\udf5c \ud83c\udf5d \ud83c\udf60 \ud83c\udf62 \ud83c\udf63 \ud83c\udf64 \ud83c\udf65 \ud83c\udf61 \ud83c\udf66 \ud83c\udf67 \ud83c\udf68 \ud83c\udf69 \ud83c\udf6a \ud83c\udf82 \ud83c\udf70 \ud83c\udf6b \ud83c\udf6c \ud83c\udf6d \ud83c\udf6e \ud83c\udf6f \ud83c\udf7c \ud83e\udd5b \u2615 \ud83c\udf75 \ud83c\udf76 \ud83c\udf7e \ud83c\udf77 \ud83c\udf78 \ud83c\udf79 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83e\udd43 \ud83c\udf7d \ud83c\udf74 \ud83e\udd44 \ud83d\udd2a \ud83c\udffa \u65c5\u884c\u30fb\u5834\u6240 \ud83c\udf0d \ud83c\udf0e \ud83c\udf0f \ud83c\udf10 \ud83d\uddfa \ud83d\uddfe \ud83c\udfd4 \u26f0 \ud83c\udf0b \ud83d\uddfb \ud83c\udfd5 \ud83c\udfd6 \ud83c\udfdc \ud83c\udfdd \ud83c\udfde \ud83c\udfdf \ud83c\udfdb \ud83c\udfd7 \ud83c\udfd8 \ud83c\udfd9 \ud83c\udfda \ud83c\udfe0 \ud83c\udfe1 \ud83c\udfe2 \ud83c\udfe3 \ud83c\udfe4 \ud83c\udfe5 \ud83c\udfe6 \ud83c\udfe8 \ud83c\udfe9 \ud83c\udfea \ud83c\udfeb \ud83c\udfec \ud83c\udfed \ud83c\udfef \ud83c\udff0 \ud83d\udc92 \ud83d\uddfc \ud83d\uddfd \u26ea \ud83d\udd4c \ud83d\udd4d \u26e9 \ud83d\udd4b \u26f2 \u26fa \ud83c\udf01 \ud83c\udf03 \ud83c\udf04 \ud83c\udf05 \ud83c\udf06 \ud83c\udf07 \ud83c\udf09 \u2668 \ud83c\udf0c \ud83c\udfa0 \ud83c\udfa1 \ud83c\udfa2 \ud83d\udc88 \ud83c\udfaa \ud83c\udfad \ud83d\uddbc \ud83c\udfa8 \ud83c\udfb0 \u4e57\u308a\u7269 \ud83d\ude82 \ud83d\ude83 \ud83d\ude84 \ud83d\ude85 \ud83d\ude86 \ud83d\ude87 \ud83d\ude88 \ud83d\ude89 \ud83d\ude8a \ud83d\ude9d \ud83d\ude9e \ud83d\ude8b \ud83d\ude8c \ud83d\ude8d \ud83d\ude8e \ud83d\ude90 \ud83d\ude91 \ud83d\ude92 \ud83d\ude93 \ud83d\ude94 \ud83d\ude95 \ud83d\ude96 \ud83d\ude97 \ud83d\ude98 \ud83d\ude99 \ud83d\ude9a \ud83d\ude9b \ud83d\ude9c \ud83d\udeb2 \ud83d\udef4 \ud83d\udef5 \ud83d\ude8f \ud83d\udee3 \ud83d\udee4 \u26fd \ud83d\udea8 \ud83d\udea5 \ud83d\udea6 \ud83d\udea7 \ud83d\uded1 \u2693 \u26f5 \ud83d\udef6 \ud83d\udea4 \ud83d\udef3 \u26f4 \ud83d\udee5 \ud83d\udea2 \u2708 \ud83d\udee9 \ud83d\udeeb \ud83d\udeec \ud83d\udcba \ud83d\ude81 \ud83d\ude9f \ud83d\udea0 \ud83d\udea1 \ud83d\ude80 \ud83d\udef0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \ud83d\udece \ud83d\udeaa \ud83d\udecc \ud83d\udecf \ud83d\udecb \ud83d\udebd \ud83d\udebf \ud83d\udec0 \ud83d\udec0\ud83c\udffb \ud83d\udec0\ud83c\udffc \ud83d\udec0\ud83c\udffd \ud83d\udec0\ud83c\udffe \ud83d\udec0\ud83c\udfff \ud83d\udec1 \u231b \u23f3 \u231a \u23f0 \u23f1 \u23f2 \ud83d\udd70 \ud83d\udd5b \ud83d\udd67 \ud83d\udd50 \ud83d\udd5c \ud83d\udd51 \ud83d\udd5d \ud83d\udd52 \ud83d\udd5e \ud83d\udd53 \ud83d\udd5f \ud83d\udd54 \ud83d\udd60 \ud83d\udd55 \ud83d\udd61 \ud83d\udd56 \ud83d\udd62 \ud83d\udd57 \ud83d\udd63 \ud83d\udd58 \ud83d\udd64 \ud83d\udd59 \ud83d\udd65 \ud83d\udd5a \ud83d\udd66 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf19 \ud83c\udf1a \ud83c\udf1b \ud83c\udf1c \ud83c\udf21 \u2600 \ud83c\udf1d \ud83c\udf1e \u2b50 \ud83c\udf1f \ud83c\udf20 \u2601 \u26c5 \u26c8 \ud83c\udf24 \ud83c\udf25 \ud83c\udf26 \ud83c\udf27 \ud83c\udf28 \ud83c\udf29 \ud83c\udf2a \ud83c\udf2b \ud83c\udf2c \ud83c\udf00 \ud83c\udf08 \ud83c\udf02 \u2602 \u2614 \u26f1 \u26a1 \u2744 \u2603 \u26c4 \u2604 \ud83d\udd25 \ud83d\udca7 \ud83c\udf0a \ud83c\udf83 \ud83c\udf84 \ud83c\udf86 \ud83c\udf87 \u2728 \ud83c\udf88 \ud83c\udf89 \ud83c\udf8a \ud83c\udf8b \ud83c\udf8d \ud83c\udf8e \ud83c\udf8f \ud83c\udf90 \ud83c\udf91 \ud83c\udf80 \ud83c\udf81 \ud83c\udf97 \ud83c\udf9f \ud83c\udfab \ud83c\udf96 \ud83c\udfc6 \ud83c\udfc5 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \u26bd \u26be \ud83c\udfc0 \ud83c\udfd0 \ud83c\udfc8 \ud83c\udfc9 \ud83c\udfbe \ud83c\udfb1 \ud83c\udfb3 \ud83c\udfcf \ud83c\udfd1 \ud83c\udfd2 \ud83c\udfd3 \ud83c\udff8 \ud83e\udd4a \ud83e\udd4b \ud83e\udd45 \ud83c\udfaf \u26f3 \u26f8 \ud83c\udfa3 \ud83c\udfbd \ud83c\udfbf \ud83c\udfae \ud83d\udd79 \ud83c\udfb2 \u2660 \u2665 \u2666 \u2663 \ud83c\udccf \ud83c\udc04 \ud83c\udfb4 \ud83d\udd07 \ud83d\udd08 \ud83d\udd09 \ud83d\udd0a \ud83d\udce2 \ud83d\udce3 \ud83d\udcef \ud83d\udd14 \ud83d\udd15 \ud83c\udfbc \ud83c\udfb5 \ud83c\udfb6 \ud83c\udf99 \ud83c\udf9a \ud83c\udf9b \ud83c\udfa4 \ud83c\udfa7 \ud83d\udcfb \ud83c\udfb7 \ud83c\udfb8 \ud83c\udfb9 \ud83c\udfba \ud83c\udfbb \ud83e\udd41 \ud83d\udcf1 \ud83d\udcf2 \u260e \ud83d\udcde \ud83d\udcdf \ud83d\udce0 \ud83d\udd0b \ud83d\udd0c \ud83d\udcbb \ud83d\udda5 \ud83d\udda8 \u2328 \ud83d\uddb1 \ud83d\uddb2 \ud83d\udcbd \ud83d\udcbe \ud83d\udcbf \ud83d\udcc0 \ud83c\udfa5 \ud83c\udf9e \ud83d\udcfd \ud83c\udfac \ud83d\udcfa \ud83d\udcf7 \ud83d\udcf8 \ud83d\udcf9 \ud83d\udcfc \ud83d\udd0d \ud83d\udd0e \ud83d\udd2c \ud83d\udd2d \ud83d\udce1 \ud83d\udd6f \ud83d\udca1 \ud83d\udd26 \ud83c\udfee \ud83d\udcd4 \ud83d\udcd5 \ud83d\udcd6 \ud83d\udcd7 \ud83d\udcd8 \ud83d\udcd9 \ud83d\udcda \ud83d\udcd3 \ud83d\udcd2 \ud83d\udcc3 \ud83d\udcdc \ud83d\udcc4 \ud83d\udcf0 \ud83d\uddde \ud83d\udcd1 \ud83d\udd16 \ud83c\udff7 \ud83d\udcb0 \ud83d\udcb4 \ud83d\udcb5 \ud83d\udcb6 \ud83d\udcb7 \ud83d\udcb8 \ud83d\udcb3 \ud83d\udcb9 \ud83d\udcb1 \ud83d\udcb2 \u2709 \ud83d\udce7 \ud83d\udce8 \ud83d\udce9 \ud83d\udce4 \ud83d\udce5 \ud83d\udce6 \ud83d\udceb \ud83d\udcea \ud83d\udcec \ud83d\udced \ud83d\udcee \ud83d\uddf3 \u270f \u2712 \ud83d\udd8b \ud83d\udd8a \ud83d\udd8c \ud83d\udd8d \ud83d\udcdd \ud83d\udcbc \ud83d\udcc1 \ud83d\udcc2 \ud83d\uddc2 \ud83d\udcc5 \ud83d\udcc6 \ud83d\uddd2 \ud83d\uddd3 \ud83d\udcc7 \ud83d\udcc8 \ud83d\udcc9 \ud83d\udcca \ud83d\udccb \ud83d\udccc \ud83d\udccd \ud83d\udcce \ud83d\udd87 \ud83d\udccf \ud83d\udcd0 \u2702 \ud83d\uddc3 \ud83d\uddc4 \ud83d\uddd1 \ud83d\udd12 \ud83d\udd13 \ud83d\udd0f \ud83d\udd10 \ud83d\udd11 \ud83d\udddd \ud83d\udd28 \u26cf \u2692 \ud83d\udee0 \ud83d\udde1 \u2694 \ud83d\udd2b \ud83c\udff9 \ud83d\udee1 \ud83d\udd27 \ud83d\udd29 \u2699 \ud83d\udddc \u2697 \u2696 \ud83d\udd17 \u26d3 \ud83d\udc89 \ud83d\udc8a \ud83d\udeac \u26b0 \u26b1 \ud83d\uddff \ud83d\udee2 \ud83d\udd2e \ud83d\uded2 \u30b7\u30f3\u30dc\u30eb \ud83c\udfe7 \ud83d\udeae \ud83d\udeb0 \u267f \ud83d\udeb9 \ud83d\udeba \ud83d\udebb \ud83d\udebc \ud83d\udebe \ud83d\udec2 \ud83d\udec3 \ud83d\udec4 \ud83d\udec5 \u26a0 \ud83d\udeb8 \u26d4 \ud83d\udeab \ud83d\udeb3 \ud83d\udead \ud83d\udeaf \ud83d\udeb1 \ud83d\udeb7 \ud83d\udcf5 \ud83d\udd1e \u2622 \u2623 \u2b06 \u2197 \u27a1 \u2198 \u2b07 \u2199 \u2b05 \u2196 \u2195 \u2194 \u21a9 \u21aa \u2934 \u2935 \ud83d\udd03 \ud83d\udd04 \ud83d\udd19 \ud83d\udd1a \ud83d\udd1b \ud83d\udd1c \ud83d\udd1d \ud83d\uded0 \u269b \ud83d\udd49 \u2721 \u2638 \u262f \u271d \u2626 \u262a \u262e \ud83d\udd4e \ud83d\udd2f \u2648 \u2649 \u264a \u264b \u264c \u264d \u264e \u264f \u2650 \u2651 \u2652 \u2653 \u26ce \ud83d\udd00 \ud83d\udd01 \ud83d\udd02 \u25b6 \u23e9 \u23ed \u23ef \u25c0 \u23ea \u23ee \ud83d\udd3c \u23eb \ud83d\udd3d \u23ec \u23f8 \u23f9 \u23fa \u23cf \ud83c\udfa6 \ud83d\udd05 \ud83d\udd06 \ud83d\udcf6 \ud83d\udcf3 \ud83d\udcf4 \u267b \ud83d\udcdb \u269c \ud83d\udd30 \ud83d\udd31 \u2b55 \u2705 \u2611 \u2714 \u2716 \u274c \u274e \u2795 \u2640 \u2642 \u2695 \u2796 \u2797 \u27b0 \u27bf \u303d \u2733 \u2734 \u2747 \u203c \u2049 \u2753 \u2754 \u2755 \u2757 \u3030 \u00a9 \u00ae \u2122 #\u20e3 *\u20e3 0\u20e3 1\u20e3 2\u20e3 3\u20e3 4\u20e3 5\u20e3 6\u20e3 7\u20e3 8\u20e3 9\u20e3 \ud83d\udd1f \ud83d\udcaf \ud83d\udd20 \ud83d\udd21 \ud83d\udd22 \ud83d\udd23 \ud83d\udd24 \ud83c\udd70 \ud83c\udd8e \ud83c\udd71 \ud83c\udd91 \ud83c\udd92 \ud83c\udd93 \u2139 \ud83c\udd94 \u24c2 \ud83c\udd95 \ud83c\udd96 \ud83c\udd7e \ud83c\udd97 \ud83c\udd7f \ud83c\udd98 \ud83c\udd99 \ud83c\udd9a \ud83c\ude01 \ud83c\ude02 \ud83c\ude37 \ud83c\ude36 \ud83c\ude2f \ud83c\ude50 \ud83c\ude39 \ud83c\ude1a \ud83c\ude32 \ud83c\ude51 \ud83c\ude38 \ud83c\ude34 \ud83c\ude33 \u3297 \u3299 \ud83c\ude3a \ud83c\ude35 \u25aa \u25ab \u25fb \u25fc \u25fd \u25fe \u2b1b \u2b1c \ud83d\udd36 \ud83d\udd37 \ud83d\udd38 \ud83d\udd39 \ud83d\udd3a \ud83d\udd3b \ud83d\udca0 \ud83d\udd18 \ud83d\udd32 \ud83d\udd33 \u26aa \u26ab \ud83d\udd34 \ud83d\udd35 \u65d7 \ud83c\udfc1 \ud83d\udea9 \ud83c\udf8c \ud83c\udff4 \ud83c\udff3 \ud83c\udff3\u200d\ud83c\udf08 \ud83c\udde6\ud83c\udde8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddea \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf1 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\uddee \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\uddf7 \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddfb \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddff \ud83c\udde8\ud83c\udde6 \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddeb \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udded \ud83c\udde8\ud83c\uddee \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddf4 \ud83c\udde8\ud83c\uddf5 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfb \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddea \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\udde9\ud83c\uddff \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddec \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddf8 \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddf2 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\udde7 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddea \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddf6 \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddf2 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf7 \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\udde8 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\uddf4 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf4 \ud83c\uddef\ud83c\uddf5 \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddec \ud83c\uddf0\ud83c\udded \ud83c\uddf0\ud83c\uddee \ud83c\uddf0\ud83c\uddf2 \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddfe \ud83c\uddf0\ud83c\uddff \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf0 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\uddfe \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfa \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfd \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddff \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddeb \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddff \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\uddeb \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddfe \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddea \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\udded \ud83c\uddf8\ud83c\uddee \ud83c\uddf8\ud83c\uddef \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddfe \ud83c\uddf8\ud83c\uddff \ud83c\uddf9\ud83c\udde6 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\udde9 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddfb \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddff \ud83c\uddfa\ud83c\udde6 \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\uddf2 \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\udde8 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddec \ud83c\uddfb\ud83c\uddee \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfb\ud83c\uddfa \ud83c\uddfc\ud83c\uddf8 \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\udde6 \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc Info OpenSiv3D \u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u7d75\u6587\u5b57\u30d5\u30a9\u30f3\u30c8 Noto Coloe Emoji (Android 7.1 \u7248) \u3092\u5185\u8535\u3057\u3066\u3044\u308b\u306e\u3067\u3001Siv3D \u30a2\u30d7\u30ea\u306f\u3069\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u540c\u3058\u898b\u305f\u76ee\u306e\u7d75\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002","title":"Siv3D \u3067\u4f7f\u3048\u308b\u7d75\u6587\u5b57\u306e\u4e00\u89a7"},{"location":"tutorial/texture/#52","text":"","title":"5.2 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u62e1\u5927\u7e2e\u5c0f\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#texturescaled","text":"Texture :: scaled () \u306b\u62e1\u5927\u7e2e\u5c0f\u500d\u7387\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001 Texture \u306b\u30b5\u30a4\u30ba\u60c5\u5831\u304c\u4ed8\u52a0\u3055\u308c\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TextureRegion \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 Texture \u3092\u4f5c\u6210\u3059\u308b\u306e\u3068\u7570\u306a\u308a\u3001\u65e2\u5b58\u306e Texture \u304b\u3089 TextureRegion \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u500d\u7387\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 2 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 2.0 ). drawAt ( 200 , 300 ); // 1.5 \u500d\u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . scaled ( 1.5 ). drawAt ( 400 , 300 ); // \u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . scaled ( 0.5 ). drawAt ( 600 , 300 ); } }","title":"Texture::scaled()"},{"location":"tutorial/texture/#textureresized","text":"Texture :: resized () \u306f\u3001\u62e1\u5927\u7e2e\u5c0f\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u500d\u7387\u3067\u306f\u306a\u304f\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002Siv3D \u6a19\u6e96\u306e\u7d75\u6587\u5b57\u306e\u30b5\u30a4\u30ba\u306f\u5e45\u304c 136 \u30d4\u30af\u30bb\u30eb\u306a\u306e\u3067\u3001136 \u3088\u308a\u5927\u304d\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u62e1\u5927\u3001\u5c0f\u3055\u3044\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u7e2e\u5c0f\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u7e26\u6a2a\u3067\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); const Texture dog ( Emoji ( U \"\ud83d\udc15\" )); while ( System :: Update ()) { // 300px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 300 ). drawAt ( 200 , 300 ); // 200px \u306b\u62e1\u5927\u3057\u3066\u63cf\u753b cat . resized ( 200 ). drawAt ( 400 , 300 ); // 20px \u306b\u7e2e\u5c0f\u3057\u3066\u63cf\u753b dog . resized ( 20 ). drawAt ( 600 , 300 ); } }","title":"Texture::resized()"},{"location":"tutorial/texture/#53","text":"Texture :: rotated () \u307e\u305f\u306f Texture :: rotatedAt () \u306b\u3088\u3063\u3066\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u56de\u8ee2\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u305f TexturedQuad \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 TexturedQuad \u306f Texture \u306e\u3088\u3046\u306b .draw () \u307e\u305f\u306f .drawAt () \u3067\u304d\u307e\u3059\u3002 TextureRegion \u3068\u540c\u69d8\u3001 TexturedQuad \u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u975e\u5e38\u306b\u8efd\u3044\u5b9f\u884c\u6642\u8ca0\u8377\u3067\u3059\u3002","title":"5.3 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u56de\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#texturerotated","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e2d\u5fc3\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u6bce\u79d2 90\u00b0 \u6642\u8a08\u56de\u308a\u306b\u56de\u8ee2 cat . rotated ( Scene :: Time () * 90 _deg ). drawAt ( Scene :: Center ()); } }","title":"Texture::rotated()"},{"location":"tutorial/texture/#textureroatedat","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u3092\u8ef8\u306b\u3057\u3066\u56de\u8ee2\u3057\u307e\u3059\u3002Vec2(0, 0) \u3092\u6307\u5b9a\u3059\u308c\u3070\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5de6\u4e0a\u304c\u8ef8\u306b\u306a\u308a\u307e\u3059\u3002\u56de\u8ee2\u89d2\u5ea6\u306f\u30e9\u30b8\u30a2\u30f3\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u753b\u50cf\u4e2d\u306e (40, 20) \u3092\u8ef8\u306b\u56de\u8ee2\u3055\u305b\u3066\u63cf\u753b cat . rotatedAt ( Vec2 ( 40 , 20 ), Scene :: Time () * 90 _deg ). draw ( Scene :: Center ()); } }","title":"Texture::roatedAt()"},{"location":"tutorial/texture/#54","text":"Texture :: flipped () \u3067\u4e0a\u4e0b\u53cd\u8ee2\u3001 Texture :: mirrored () \u3067\u5de6\u53f3\u53cd\u8ee2\u3057\u305f TextureRegion \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u3001\u5f15\u6570\u3092\u3068\u3089\u305a\u306b\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u3001\u5f15\u6570\u306e bool \u5024\u304c true \u306e\u3068\u304d\u3060\u3051\u53cd\u8ee2\u3059\u308b\u95a2\u6570\u306e 2 \u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture cat ( Emoji ( U \"\ud83d\udc08\" )); while ( System :: Update ()) { // \u4e0a\u4e0b\u53cd\u8ee2 cat . flipped (). drawAt ( 200 , 300 ); // \u5de6\u53f3\u53cd\u8ee2 cat . mirrored (). drawAt ( 400 , 300 ); // \u53cd\u8ee2\u3092 bool \u5024\u3067\u6307\u5b9a\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 cat . mirrored ( false ). drawAt ( 600 , 300 ); } }","title":"5.4 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4e0a\u4e0b\u30fb\u5de6\u53f3\u53cd\u8ee2\u3057\u3066\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#55","text":"\u30a2\u30a4\u30b3\u30f3\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b Icon () \u3092\u6e21\u3057\u307e\u3059\u3002\u30a2\u30a4\u30b3\u30f3\u306f\u5168\u90e8\u3067\u7d04 1,300 \u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Icon \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u3001 \u30a2\u30a4\u30b3\u30f3\u4e00\u89a7 \u3067\u8abf\u3079\u3089\u308c\u308b 16 \u9032\u6570\u30b3\u30fc\u30c9\u3068\u3001\u30a2\u30a4\u30b3\u30f3\u306e\u30b5\u30a4\u30ba\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\uff09\u3092\u6e21\u3057\u307e\u3059\u3002 # include < Siv3D . hpp > void Main () { Scene :: SetBackground ( ColorF ( 0 . 92 )) ; // \u6b6f\u8eca ( f013 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0 xf013 , 80 )) ; // \u5357\u4eac\u9320 ( f023 ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0 xf023 , 80 )) ; // \u62e1\u5927\u93e1 ( f00e ) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0 xf00e , 80 )) ; while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , ColorF ( 0 . 25 )) ; iconLock . scaled ( 1 . 5 ) . drawAt ( 400 , 300 , ColorF ( 0 . 25 )) ; iconZoom . drawAt ( 600 , 300 , ColorF ( 0 . 25 )) ; } } \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f\u969b\u3001 .draw () \u3084 .drawAt () \u306b\u3001\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u3001\u5de6\u4e0b\u306e 4 \u3064\u306e\u9802\u70b9\u306e\u8272\u3092\u6e21\u3057\u3066\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u63cf\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.92 )); constexpr ColorF colorTop ( 0.6 ); constexpr ColorF colorBottom ( 0.1 ); // \u6b6f\u8eca (f013) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconConfig ( Icon ( 0xf013 , 80 )); // \u5357\u4eac\u9320 (f023) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconLock ( Icon ( 0xf023 , 80 )); // \u62e1\u5927\u93e1 (f00e) \u306e\u30a2\u30a4\u30b3\u30f3 const Texture iconZoom ( Icon ( 0xf00e , 80 )); while ( System :: Update ()) { iconConfig . drawAt ( 200 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconLock . scaled ( 1.5 ). drawAt ( 400 , 300 , colorTop , colorTop , colorBottom , colorBottom ); iconZoom . drawAt ( 600 , 300 , colorTop , colorTop , colorBottom , colorBottom ); } }","title":"5.5 \u30a2\u30a4\u30b3\u30f3\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#56","text":"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001 Texture \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306b\u3001\u8aad\u307f\u8fbc\u307f\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6e21\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306f\u3001\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d5\u30a9\u30eb\u30c0\uff08\u958b\u767a\u4e2d\u306f App \u30d5\u30a9\u30eb\u30c0\uff09\u3092\u57fa\u6e96\u3068\u3059\u308b\u76f8\u5bfe\u30d1\u30b9\u304b\u3001\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306b\u306f\u3001\u306e\u3061\u306e\u7ae0\u3067\u8aac\u660e\u3059\u308b\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u30d1\u30b9\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u98a8\u8eca\u306e\u753b\u50cf const Texture textureWindmill ( U \"example/windmill.png\" ); // Siv3D \u304f\u3093\u306e\u753b\u50cf const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); textureSiv3DKun . draw ( 400 , 100 ); } } Info \u300cSiv3D \u304f\u3093\u300d\u306f Siv3D \u306e\u516c\u5f0f\u30de\u30b9\u30b3\u30c3\u30c8\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002","title":"5.6 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#_1","text":"OpenSiv3D v0.4.0 \u3067\u306f\u30017 \u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u62e1\u5f35\u5b50 \u5bfe\u5fdc\u72b6\u6cc1 PNG png \u2714 JPEG jpg/jpeg \u2714 BMP bmp \u2714 GIF gif \u2714 TGA tga \u2714 PPM ppm/pgm/pbm/pnm \u2714 WebP webp \u2714 JPEG2000 jp2 (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) DDS dds (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3) TIFF tif/tiff (\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3)","title":"\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u753b\u50cf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"tutorial/texture/#57","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u6642\u306b \u30df\u30c3\u30d7\u30de\u30c3\u30d7 \u3092\u4f5c\u6210\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u3057\u3066\u8868\u793a\u3059\u308b\u969b\u306e\u753b\u8cea\u3084\u5b9f\u884c\u6642\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3068\u306f\u3001\u304d\u308c\u3044\u306b\u7e2e\u5c0f\u3055\u308c\u305f\u753b\u50cf\u3092\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4f5c\u6210\u6642\u306b\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u6280\u8853\u306e\u3053\u3068\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7e2e\u5c0f\u8868\u793a\u3059\u308b\u969b\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u53c2\u7167\u3055\u308c\u307e\u3059\u3002\u753b\u50cf\u306e\u7e2e\u5c0f\u8868\u793a\u3092\u3059\u308b\u591a\u304f\u306e\u30b1\u30fc\u30b9\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u4f5c\u6210\u306f\u6700\u9069\u306a\u9078\u629e\u80a2\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u3088\u3063\u3066\u6d88\u8cbb\u3055\u308c\u308b\u30e1\u30e2\u30ea\u306f 30% \u307b\u3069\u5897\u52a0\u3057\u307e\u3059\u3002 \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Texture \u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306f\u3001\u7b2c 2 \u5f15\u6570\u3067\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u3042\u308a\u306a\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044 TextureDesc :: Unmipped \u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b TextureDesc :: Mipped \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3060\u3051\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u306a\u304a\u3001 Emoji \u3084 Icon \u304b\u3089 Texture \u3092\u4f5c\u308b\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 TextureDesc :: Mipped \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3001\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u3066\u3044\u306a\u3044\u5de6\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u3001\u30b5\u30a4\u30ba\u306e\u5909\u5316\u306b\u4f34\u3044\u3061\u3089\u3061\u3089\u3057\u305f\u30ce\u30a4\u30ba\u304c\u767a\u751f\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u306a\u3044\u8a2d\u5b9a const Texture textureUnmipped ( U \"example/windmill.png\" ); // \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f5c\u6210\u3059\u308b\u8a2d\u5b9a const Texture textureMipped ( U \"example/windmill.png\" , TextureDesc :: Mipped ); while ( System :: Update ()) { const double scale = 0.02 + Periodic :: Tringle0_1 ( 10 s ) * 0.4 ; textureUnmipped . scaled ( scale ). drawAt ( 300 , 300 ); textureMipped . scaled ( scale ). drawAt ( 500 , 300 ); } }","title":"5.7 \u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u4f5c\u6210"},{"location":"tutorial/texture/#58","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u5168\u90e8\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u9577\u65b9\u5f62\u306e\u9818\u57df\u3060\u3051\u3092\u63cf\u753b\u3057\u305f\u3044\u5834\u5408\u306f Texture :: operator () \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u4e0a\u306e\u63cf\u753b\u3057\u305f\u3044\u9818\u57df\u3092\u6307\u5b9a\u3057\u3066 TextureRegion \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { // \u753b\u50cf\u306e (250, 100) \u304b\u3089\u5e45 200, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureWindmill ( 250 , 100 , 200 , 150 ). draw ( 40 , 20 ); // \u753b\u50cf\u306e (100, 0) \u304b\u3089\u5e45 100, \u9ad8\u3055 150 \u306e\u9577\u65b9\u5f62\u90e8\u5206 textureSiv3DKun ( 100 , 0 , 100 , 150 ). draw ( 400 , 100 ); } } \u30b5\u30f3\u30d7\u30eb\u3067\u306f\u793a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u30011 \u679a\u306e\u753b\u50cf\u306b\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u8907\u6570\u306e\u30b3\u30de\u3092\u8a18\u9332\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30b3\u30de\u3092\u9806\u306b\u8868\u793a\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u30011 \u3064\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002","title":"5.8 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u63cf\u753b\u3059\u308b"},{"location":"tutorial/texture/#59","text":"Rect \u3084 RectF , Circle , Quad , RoundRect \u306b\u5408\u308f\u305b\u308b\u5f62\u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u5168\u4f53\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u9818\u57df\u3092\u63cf\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture textureWindmill ( U \"example/windmill.png\" , TextureDesc :: Mipped ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" , TextureDesc :: Mipped ); const RoundRect roundRect ( 430 , 50 , 100 , 100 , 25 ); const Circle circle ( 480 , 240 , 50 ); while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u9577\u65b9\u5f62\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b Rect ( 50 , 50 , 350 , 400 )( textureWindmill ). draw (); roundRect . draw ( HSV ( 0 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (90, 5) \u304b\u3089\u5e45 110 \u9ad8\u3055 110 \u306e\u9818\u57df\u3092\u3001roundRect \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b roundRect ( textureSiv3DKun ( 90 , 5 , 110 , 110 )). draw (); circle . draw ( HSV ( 120 , 0.5 , 1.0 )); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e (85, 0) \u304b\u3089\u5e45 120 \u9ad8\u3055 120 \u306e\u9818\u57df\u3092\u3001circle \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b circle ( textureSiv3DKun ( 85 , 0 , 120 , 120 )). draw (); } }","title":"5.9 \u56f3\u5f62\u306e\u5f62\u306b\u5408\u308f\u305b\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u304f"},{"location":"tutorial/texture/#510","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e .draw () , .drawAt () \u306e\u5f15\u6570\u306b\u8272\u3092\u6e21\u3059\u3068\u305d\u306e\u8272\u3067\u4e57\u7b97\u3057\u3066\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u8272\u306e\u30a2\u30eb\u30d5\u30a1\u6210\u5206\u306b\u5fdc\u3058\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u306f\u900f\u904e\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture textureWindmill ( U \"example/windmill.png\" ); const Texture textureSiv3DKun ( U \"example/siv3d-kun.png\" ); while ( System :: Update ()) { textureWindmill . draw ( 40 , 20 ); // \u30a2\u30eb\u30d5\u30a1\u6210\u5206\u3092 0.0\uff5e1.0 \u306e\u9593\u3067\u5909\u5316\u3055\u305b\u308b textureSiv3DKun . draw ( 400 , 100 , ColorF ( 1.0 , Periodic :: Sine0_1 ( 2 s ))); } }","title":"5.10 \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u900f\u904e\u3055\u305b\u308b"},{"location":"tutorial/texture/#511","text":"","title":"5.11 \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3042\u308c\u3053\u308c"},{"location":"tutorial/texture/#_2","text":"if ( texture ) \u3067\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u5b58\u5728\u3057\u306a\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3053\u3046\u3068\u3059\u308b const Texture texture ( U \"aaa/bbb.png\" ); // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\u304c\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3089 if ( ! texture ) { // \u4f8b\u5916\u3092\u6295\u3052\u3066\u7d42\u4e86 throw Error ( U \"Failed to create a texture\" ); } while ( System :: Update ()) { } }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c1\u30a7\u30c3\u30af"},{"location":"tutorial/texture/#_3","text":"\u7a7a\uff08\u304b\u3089\uff09\u306e Texture \u3092\u63cf\u753b\u3059\u308b\u3068\u300116x16 \u306e\u9ec4\u8272\u3044\u30c0\u30df\u30fc\u753b\u50cf\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u3068\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b const Texture texture ( U \"aaa/bbb.png\" ); if ( ! texture ) { Print << U \"!texture\" ; } // \u521d\u671f\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u306a\u304b\u3063\u305f\u3068\u304d\u3082\u3001\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u306a\u308b Texture texture2 ; if ( ! texture2 ) { Print << U \"!texture2\" ; } while ( System :: Update ()) { texture . draw ( 0 , 0 ); texture2 . draw ( 400 , 0 ); } }","title":"\u7a7a\u306e\u30c6\u30af\u30b9\u30c1\u30e3"},{"location":"tutorial/texture/#_4","text":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7e26\u6a2a\u306e\u30b5\u30a4\u30ba\u3092 Size \u578b\uff08 Point \u578b\u3068\u540c\u3058) \u3067\u53d6\u5f97\u3059\u308b\u306b\u306f Texture :: size () \u3092\u4f7f\u3044\u307e\u3059\u3002\u6a2a\u306e\u30b5\u30a4\u30ba\u3001\u7e26\u306e\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c Texture :: width () , Texture :: height () \u3067\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { const Texture texture ( U \"example/windmill.png\" ); Print << texture . size (); Print << texture . width (); Print << texture . height (); while ( System :: Update ()) { texture . draw ( 200 , 200 ); } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30b5\u30a4\u30ba"},{"location":"tutorial/texture/#_5","text":"Texture \u306f\u6b21\u306e\u3088\u3046\u306b = \u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Texture texture ; while ( System :: Update ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u304c\u7a7a\u306e\u72b6\u614b\u3067\u3001\u5de6\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089 if ( ! texture && MouseL . down ()) { // \u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210 texture = Texture ( U \"example/windmill.png\" ); } if ( texture ) { texture . draw (); } } }","title":"\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4ee3\u5165"},{"location":"tutorial/window/","text":"10. Scene and window \u00b6 Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: Height () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b \u00b6 Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } } 10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u00b6 Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } 10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } } 10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } } 10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b \u00b6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10. Scene and window"},{"location":"tutorial/window/#10-scene-and-window","text":"Siv3D \u3067\u306f\u3001\u56f3\u5f62\u3084\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u3092 .draw () \u3059\u308b\u3068\u3001\u300c\u30b7\u30fc\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4eee\u60f3\u306e\u753b\u9762\u306b\u63cf\u753b\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u30b7\u30fc\u30f3\u306e\u753b\u50cf\u304c\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u306f\u63cf\u753b\u3055\u308c\u305f\u7d50\u679c\u3092\u76ee\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u524d\u7ae0\u307e\u3067\u306f\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f .draw () \u3057\u305f\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u3067\u306f\u30b7\u30fc\u30f3\u306e\u8a2d\u5b9a\u3084\u30a6\u30a3\u30f3\u30c9\u30a6\u3078\u306e\u8ee2\u9001\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"10. Scene and window"},{"location":"tutorial/window/#101","text":"\u30b7\u30fc\u30f3\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u57fa\u672c\u30b5\u30a4\u30ba\u306f Scene :: DefaultSceneSize \u3068 Window :: DefaultClientSize \u3067\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082\u5e45 800 \u30d4\u30af\u30bb\u30eb\u3001\u9ad8\u3055 600 \u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002\u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: Resize () \u3067\u65b0\u3057\u3044\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f Scene :: Size () , \u30b7\u30fc\u30f3\u306e\u5e45\u306f Scene :: Width () , \u30b7\u30fc\u30f3\u306e\u9ad8\u3055\u306f Scene :: Height () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u306f Window :: ClientSize () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f Window :: ClientWidth () , \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9ad8\u3055\u306f Window :: Height () \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u304c\u5909\u66f4\u3055\u308c\u305f\u3089 if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u540c\u6642\u306b\u5909\u66f4\uff09 Window :: Resize ( resolutions [ index ]); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.1 \u30b7\u30fc\u30f3\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#102","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u304c\u5909\u66f4\u3055\u308c\u3066\u3082\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u306f Window :: Resize () \u306b WindowResizeOption :: KeepSceneSize \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u3001 Window :: Resize () \u3057\u3066\u3082\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u30b7\u30fc\u30f3\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7e2e\u5c0f\u30fb\u62e1\u5927\u3057\u3001\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u3001\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u306f\u9ed2\u304f\u5857\u308a\u3064\u3076\u3055\u308c\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.2 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#103","text":"\u30b7\u30fc\u30f3\u304c\u7e26\u6a2a\u6bd4\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3055\u308c\u308b\u3068\u304d\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u4f59\u3063\u305f\u9818\u57df\uff08\u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\uff09\u3092\u5857\u308a\u3064\u3076\u3059\u8272\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Scene :: SetLetterbox () \u3067\u8272\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u8a2d\u5b9a Scene :: SetLetterbox ( ColorF ( 0.4 , 0.6 , 0.5 )); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); constexpr std :: array < Size , 4 > resolutions = { Size ( 400 , 600 ), Size ( 640 , 480 ), Size ( 800 , 600 ), Size ( 1280 , 640 ) }; size_t index = 2 ; while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); if ( SimpleGUI :: RadioButtons ( index , { U \"400x600\" , U \"640x480\" , U \"800x600\" , U \"1280x640\" }, Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3092\u5909\u66f4\uff08\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u4fdd\u6301\uff09 Window :: Resize ( resolutions [ index ], WindowResizeOption :: KeepSceneSize ); } font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.3 \u30ec\u30bf\u30fc\u30dc\u30c3\u30af\u30b9\u306e\u8272\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#104","text":"Scene :: Resize () \u3067\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u3059\u308b\u3068\u3001\u753b\u9762\u304c\u7c97\u304f\u306a\u308a\u307e\u3059\u3002\u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7dda\u5f62\u88dc\u9593\u3042\u308a\uff08\u306a\u3081\u3089\u304b\uff09\u3067\u3059\u304c\u3001 Scene :: SetTextureFilter () \u306b TextureFilter :: Nearest \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7dda\u5f62\u88dc\u9593\u7121\u3057\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u88dc\u9593\u7121\u3057\u306e\u8a2d\u5b9a\u306f\u3001\u30c9\u30c3\u30c8\u611f\u3092\u4fdd\u3061\u305f\u3044\u3068\u304d\u306b\u306f\u6709\u52b9\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u306f\u753b\u8cea\u3092\u4f4e\u4e0b\u3055\u305b\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3092 100x75 \u306b Scene :: Resize ( 100 , 75 ); // \u30b7\u30fc\u30f3\u3092\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u8ee2\u9001\u3059\u308b\u969b\u306e\u62e1\u5927\u7e2e\u5c0f\u30d5\u30a3\u30eb\u30bf\u3092\u300c\u88dc\u9593\u306a\u3057\u300d\u306b Scene :: SetTextureFilter ( TextureFilter :: Nearest ); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 10 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 20 , 30 , 20 ). draw ( Palette :: Cornflowerblue ); Circle ( 50 , 50 , 25 ). draw ( Palette :: Seagreen ); texture . resized ( 64 ). drawAt ( 65 , 35 ); font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 2 , 40 , ColorF ( 0.25 )); } }","title":"10.4 \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3060\u3051\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#105","text":"Window :: SetStyle () \u3067 WindowStyle :: Sizable \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u6700\u5927\u5316\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } } \u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3057\u305f\u3068\u304d\u306b\u306f\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 Scene :: SetScaleMode () \u3067 ScaleMode :: ResizeFill \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u30ea\u30b5\u30a4\u30ba\u306b\u8ffd\u5f93\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); // \u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u6642\u306b\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3082\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b Scene :: SetScaleMode ( ScaleMode :: ResizeFill ); Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); const Texture texture ( Emoji ( U \"\ud83d\udc08\" )); const Font font ( 30 , Typeface :: Bold ); while ( System :: Update ()) { Triangle ( 300 , 150 , 200 ). draw ( Palette :: Cornflowerblue ); Circle ( 200 , 200 , 80 ). draw ( Palette :: Seagreen ); texture . resized ( 200 ). drawAt ( 600 , 400 ); // \u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a font ( U \"Scene: {} \\n Window: {}\" _fmt ( Scene :: Size (), Window :: ClientSize ())). draw ( 20 , 200 , ColorF ( 0.25 )); } }","title":"10.5 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u3067\u30ea\u30b5\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"tutorial/window/#106","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001 Window :: SetTitle () \u306b\u6587\u5b57\u5217\u3084\u5024\u3092\u6e21\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u6642\u306b\u306f\u3001\u30bf\u30a4\u30c8\u30eb\u306e\u307b\u304b\u306b\u3001\"(Debug Build)\" \u3068\u3044\u3046\u6587\u5b57\u5217\u3068\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30b5\u30a4\u30ba\u3001\u30b7\u30fc\u30f3\u306e\u30b5\u30a4\u30ba\u304c\u5408\u308f\u305b\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Warning \u30a6\u30a3\u30f3\u30c9\u30a6\u30bf\u30a4\u30c8\u30eb\u306e\u5909\u66f4\u306f\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\u306a\u306e\u3067\u3001\u6bce\u30d5\u30ec\u30fc\u30e0 Window :: SetTitle () \u306b\u7570\u306a\u308b\u6587\u5b57\u5217\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u65e2\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30c8\u30eb\u3068\u540c\u3058\u5834\u5408\u306b\u306f\u4f55\u3082\u3057\u306a\u3044\u306e\u3067\u3001\u30b3\u30b9\u30c8\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002 # include <Siv3D.hpp> void Main () { Window :: SetTitle ( U \"Hello, Siv3D!\" ); while ( System :: Update ()) { } }","title":"10.6 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b"},{"location":"tutorial/window/#107","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316\u3059\u308b\u306b\u306f Window :: Minimize () \u3092\u3001\u6700\u5927\u5316\u3059\u308b\u306b\u306f Window :: Maximize () \u3092\u547c\u3073\u307e\u3059\u3002\u6700\u5927\u5316\u3092\u3059\u308b\u306b\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Scene :: SetBackground ( ColorF ( 0.8 , 0.9 , 1.0 )); // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u624b\u52d5\u30ea\u30b5\u30a4\u30ba\u53ef\u80fd\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Sizable ); while ( System :: Update ()) { if ( SimpleGUI :: Button ( U \"Minimize\" , Vec2 ( 20 , 20 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 Window :: Minimize (); } if ( SimpleGUI :: Button ( U \"Maximize\" , Vec2 ( 20 , 60 ))) { // \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5927\u5316 Window :: Maximize (); } } }","title":"10.7 \u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6700\u5c0f\u5316 / \u6700\u5927\u5316\u3059\u308b"},{"location":"tutorial/window/#108","text":"\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b\u306b\u306f\u3001 Window :: SetStyle () \u3067 WindowStyle :: Frameless \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 # include <Siv3D.hpp> void Main () { Window :: Resize ( 600 , 400 ); // \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b Window :: SetStyle ( WindowStyle :: Frameless ); while ( System :: Update ()) { Circle ( Cursor :: Pos (), 100 ). draw (); } }","title":"10.8 \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u67a0\u3092\u975e\u8868\u793a\u306b\u3059\u308b"}]}